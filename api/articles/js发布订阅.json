{"title":"js发布订阅","uid":"44dcd935b56d2f04aff94002ff328fc3","slug":"js发布订阅","date":"2022-06-10T11:52:00.000Z","updated":"2022-10-14T06:36:14.605Z","comments":true,"path":"api/articles/js发布订阅.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/project/202206101955855.png","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>发布-订阅模式，看似陌生，其实不然。工作中经常会用到，例如 Node.js EventEmitter 中的 on 和 emit 方法；Vue 中的 <code>$on</code> 和 <code>$emit</code> 方法。他们都使用了发布-订阅模式，让开发变得更加高效方便。</p></blockquote>\n<h2 id=\"一、-什么是发布-订阅模式\"><a href=\"#一、-什么是发布-订阅模式\" class=\"headerlink\" title=\"一、 什么是发布-订阅模式\"></a>一、 什么是发布-订阅模式</h2><h4 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1. 定义\"></a>1. 定义</h4><p>发布-订阅模式其实是一种对象间一对多的依赖关系，当一个对象的状态发送改变时，所有依赖于它的对象都将得到状态改变的通知。</p>\n<p>订阅者（Subscriber）把自己想订阅的事件注册（Subscribe）到调度中心（Event Channel），当发布者（Publisher）发布该事件（Publish Event）到调度中心，也就是该事件触发时，由调度中心统一调度（Fire Event）订阅者注册到调度中心的处理代码。</p>\n<h4 id=\"2-例子\"><a href=\"#2-例子\" class=\"headerlink\" title=\"2. 例子\"></a>2. 例子</h4><p>比如我们很喜欢看某个公众号号的文章，但是我们不知道什么时候发布新文章，要不定时的去翻阅；这时候，我们可以关注该公众号，当有文章推送时，会有消息及时通知我们文章更新了。</p>\n<p>上面一个看似简单的操作，其实是一个典型的发布订阅模式，公众号属于发布者，用户属于订阅者；用户将订阅公众号的事件注册到调度中心，公众号作为发布者，当有新文章发布时，公众号发布该事件到调度中心，调度中心会及时发消息告知用户。</p>\n<h2 id=\"二、-如何实现发布-订阅模式？\"><a href=\"#二、-如何实现发布-订阅模式？\" class=\"headerlink\" title=\"二、 如何实现发布-订阅模式？\"></a>二、 如何实现发布-订阅模式？</h2><h3 id=\"1-实现思路\"><a href=\"#1-实现思路\" class=\"headerlink\" title=\"1. 实现思路\"></a>1. 实现思路</h3><ul>\n<li>创建一个对象</li>\n<li>在该对象上创建一个缓存列表（调度中心）</li>\n<li>on 方法用来把函数 fn 都加到缓存列表中（订阅者注册事件到调度中心）</li>\n<li>emit 方法取到 arguments 里第一个当做 event，根据 event 值去执行对应缓存列表中的函数（发布者发布事件到调度中心，调度中心处理代码）</li>\n<li>off 方法可以根据 event 值取消订阅（取消订阅）</li>\n<li>once 方法只监听一次，调用完毕后删除缓存函数（订阅一次）</li>\n</ul>\n<h3 id=\"2-demo1\"><a href=\"#2-demo1\" class=\"headerlink\" title=\"2. demo1\"></a>2. demo1</h3><p>我们来看个简单的 demo，实现了 on 和 emit 方法，代码中有详细注释。</p>\n<pre class=\"line-numbers language-qml\" data-language=\"qml\"><code class=\"language-qml\"><span class=\"token comment\">// 公众号对象</span>\nlet eventEmitter = <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 缓存列表，存放 event 及 fn</span>\neventEmitter.list = <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 订阅</span>\neventEmitter.<span class=\"token keyword\">on</span> = function (event<span class=\"token punctuation\">,</span> fn) <span class=\"token punctuation\">&#123;</span>\n    let _this = this<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 如果对象中没有对应的 event 值，也就是说明没有订阅过，就给 event 创建个缓存列表</span>\n    <span class=\"token comment\">// 如有对象中有相应的 event 值，把 fn 添加到对应 event 的缓存列表里</span>\n    (_this.list<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span> || (_this.list<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span> = <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>)).push(fn)<span class=\"token punctuation\">;</span>\n    return _this<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 发布</span>\neventEmitter.emit = function () <span class=\"token punctuation\">&#123;</span>\n    let _this = this<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 第一个参数是对应的 event 值，直接用数组的 shift 方法取出</span>\n    let event = <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>.shift.call(arguments)<span class=\"token punctuation\">,</span>\n        fns = <span class=\"token punctuation\">[</span>..._this.list<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 如果缓存列表里没有 fn 就返回 false</span>\n    if (!fns || fns.length === 0) <span class=\"token punctuation\">&#123;</span>\n        return false<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 遍历 event 值对应的缓存列表，依次执行 fn</span>\n    fns.forEach(fn => <span class=\"token punctuation\">&#123;</span>\n        fn.apply(_this<span class=\"token punctuation\">,</span> arguments)<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>)<span class=\"token punctuation\">;</span>\n    return _this<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token javascript-function language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">user1</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">content</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'用户1订阅了:'</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token javascript-function language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">user2</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">content</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'用户2订阅了:'</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 订阅</span>\neventEmitter.<span class=\"token keyword\">on</span>('article'<span class=\"token punctuation\">,</span> user1)<span class=\"token punctuation\">;</span>\neventEmitter.<span class=\"token keyword\">on</span>('article'<span class=\"token punctuation\">,</span> user2)<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 发布</span>\neventEmitter.emit('article'<span class=\"token punctuation\">,</span> 'Javascript 发布-订阅模式')<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    用户1订阅了: Javascript 发布-订阅模式\n    用户2订阅了: Javascript 发布-订阅模式\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-demo2\"><a href=\"#3-demo2\" class=\"headerlink\" title=\"3. demo2\"></a>3. demo2</h3><p>这一版中我们补充了一下 once 和 off 方法。</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">let</span> eventEmitter <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 缓存列表</span>\n    list<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 订阅</span>\n    <span class=\"token keyword\">on</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">event</span><span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 如果对象中没有对应的 event 值，也就是说明没有订阅过，就给 event 创建个缓存列表</span>\n        <span class=\"token comment\">// 如有对象中有相应的 event 值，把 fn 添加到对应 event 的缓存列表里</span>\n        <span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token keyword\">event</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token keyword\">event</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> _this<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 监听一次</span>\n    once <span class=\"token punctuation\">(</span><span class=\"token keyword\">event</span><span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 先绑定，调用后删除</span>\n        <span class=\"token keyword\">let</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        function <span class=\"token keyword\">on</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            _this<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">event</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">on</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            fn<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">on</span><span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span>\n        _this<span class=\"token punctuation\">.</span><span class=\"token keyword\">on</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">event</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">on</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> _this<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 取消订阅</span>\n    off <span class=\"token punctuation\">(</span><span class=\"token keyword\">event</span><span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> fns <span class=\"token operator\">=</span> _this<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token keyword\">event</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 如果缓存列表中没有相应的 fn，返回false</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fns<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 如果没有传 fn 的话，就会将 event 值对应缓存列表中的 fn 都清空</span>\n            fns <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>fns<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 若有 fn，遍历缓存列表，看看传入的 fn 与哪个函数相同，如果相同就直接从缓存列表中删掉即可</span>\n            <span class=\"token keyword\">let</span> cb<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> cbLen <span class=\"token operator\">=</span> fns<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cbLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                cb <span class=\"token operator\">=</span> fns<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cb <span class=\"token operator\">==</span><span class=\"token operator\">=</span> fn <span class=\"token operator\">||</span> cb<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">==</span><span class=\"token operator\">=</span> fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    fns<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> _this<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 发布</span>\n    emit <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 第一个参数是对应的 event 值，直接用数组的 shift 方法取出</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">event</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>shift<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            fns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>_this<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token keyword\">event</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 如果缓存列表里没有 fn 就返回 false</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fns <span class=\"token operator\">||</span> fns<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span><span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 遍历 event 值对应的缓存列表，依次执行 fn</span>\n        fns<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>fn <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            fn<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> _this<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token return-type class-name\">function</span> user1 <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>'用户<span class=\"token number\">1</span>订阅了<span class=\"token punctuation\">:</span>'<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token return-type class-name\">function</span> user2 <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>'用户<span class=\"token number\">2</span>订阅了<span class=\"token punctuation\">:</span>'<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token return-type class-name\">function</span> user3 <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>'用户<span class=\"token number\">3</span>订阅了<span class=\"token punctuation\">:</span>'<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token return-type class-name\">function</span> user4 <span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>'用户<span class=\"token number\">4</span>订阅了<span class=\"token punctuation\">:</span>'<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 订阅</span>\neventEmitter<span class=\"token punctuation\">.</span><span class=\"token keyword\">on</span><span class=\"token punctuation\">(</span>'article1'<span class=\"token punctuation\">,</span> user1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\neventEmitter<span class=\"token punctuation\">.</span><span class=\"token keyword\">on</span><span class=\"token punctuation\">(</span>'article1'<span class=\"token punctuation\">,</span> user2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\neventEmitter<span class=\"token punctuation\">.</span><span class=\"token keyword\">on</span><span class=\"token punctuation\">(</span>'article1'<span class=\"token punctuation\">,</span> user3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 取消user2方法的订阅</span>\neventEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span>'article1'<span class=\"token punctuation\">,</span> user2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\neventEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">once</span><span class=\"token punctuation\">(</span>'article2'<span class=\"token punctuation\">,</span> user4<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 发布</span>\neventEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>'article1'<span class=\"token punctuation\">,</span> 'Javascript 发布<span class=\"token operator\">-</span>订阅模式'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\neventEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>'article1'<span class=\"token punctuation\">,</span> 'Javascript 发布<span class=\"token operator\">-</span>订阅模式'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\neventEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>'article2'<span class=\"token punctuation\">,</span> 'Javascript 观察者模式'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\neventEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span>'article2'<span class=\"token punctuation\">,</span> 'Javascript 观察者模式'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// eventEmitter.on('article1', user3).emit('article1', 'test111');</span>\n\n<span class=\"token comment\">/*\n    用户1订阅了: Javascript 发布-订阅模式\n    用户3订阅了: Javascript 发布-订阅模式\n    用户1订阅了: Javascript 发布-订阅模式\n    用户3订阅了: Javascript 发布-订阅模式\n    用户4订阅了: Javascript 观察者模式\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"三、-Vue-中的实现\"><a href=\"#三、-Vue-中的实现\" class=\"headerlink\" title=\"三、 Vue 中的实现\"></a>三、 Vue 中的实现</h2><p>有了发布-订阅模式的知识后，我们来看下 Vue 中怎么实现 <code>$on</code> 和 <code>$emit</code> 的方法，直接看源码：</p>\n<pre class=\"line-numbers language-arcade\" data-language=\"arcade\"><code class=\"language-arcade\">function eventsMixin (Vue) &#123;\n    var hookRE &#x3D; &#x2F;^hook:&#x2F;;\n    Vue.prototype.$on &#x3D; function (event, fn) &#123;\n        var this$1 &#x3D; this;\n\n        var vm &#x3D; this;\n        &#x2F;&#x2F; event 为数组时，循环执行 $on\n        if (Array.isArray(event)) &#123;\n            for (var i &#x3D; 0, l &#x3D; event.length; i &lt; l; i++) &#123;\n                this$1.$on(event[i], fn);\n            &#125;\n        &#125; else &#123;\n            (vm._events[event] || (vm._events[event] &#x3D; [])).push(fn);\n            &#x2F;&#x2F; optimize hook:event cost by using a boolean flag marked at registration \n            &#x2F;&#x2F; instead of a hash lookup\n            if (hookRE.test(event)) &#123;\n                vm._hasHookEvent &#x3D; true;\n            &#125;\n        &#125;\n        return vm\n    &#125;;\n\n    Vue.prototype.$once &#x3D; function (event, fn) &#123;\n        var vm &#x3D; this;\n        &#x2F;&#x2F; 先绑定，后删除\n        function on () &#123;\n            vm.$off(event, on);\n            fn.apply(vm, arguments);\n        &#125;\n        on.fn &#x3D; fn;\n        vm.$on(event, on);\n        return vm\n    &#125;;\n\n    Vue.prototype.$off &#x3D; function (event, fn) &#123;\n        var this$1 &#x3D; this;\n\n        var vm &#x3D; this;\n        &#x2F;&#x2F; all，若没有传参数，清空所有订阅\n        if (!arguments.length) &#123;\n            vm._events &#x3D; Object.create(null);\n            return vm\n        &#125;\n        &#x2F;&#x2F; array of events，events 为数组时，循环执行 $off\n        if (Array.isArray(event)) &#123;\n            for (var i &#x3D; 0, l &#x3D; event.length; i &lt; l; i++) &#123;\n                this$1.$off(event[i], fn);\n            &#125;\n            return vm\n        &#125;\n        &#x2F;&#x2F; specific event\n        var cbs &#x3D; vm._events[event];\n        if (!cbs) &#123;\n            &#x2F;&#x2F; 没有 cbs 直接 return this\n            return vm\n        &#125;\n        if (!fn) &#123;\n            &#x2F;&#x2F; 若没有 handler，清空 event 对应的缓存列表\n            vm._events[event] &#x3D; null;\n            return vm\n        &#125;\n        if (fn) &#123;\n            &#x2F;&#x2F; specific handler，删除相应的 handler\n            var cb;\n            var i$1 &#x3D; cbs.length;\n            while (i$1--) &#123;\n                cb &#x3D; cbs[i$1];\n                if (cb &#x3D;&#x3D;&#x3D; fn || cb.fn &#x3D;&#x3D;&#x3D; fn) &#123;\n                    cbs.splice(i$1, 1);\n                    break\n                &#125;\n            &#125;\n        &#125;\n        return vm\n    &#125;;\n\n    Vue.prototype.$emit &#x3D; function (event) &#123;\n        var vm &#x3D; this;\n        &#123;\n            &#x2F;&#x2F; 传入的 event 区分大小写，若不一致，有提示\n            var lowerCaseEvent &#x3D; event.toLowerCase();\n            if (lowerCaseEvent !&#x3D;&#x3D; event &amp;&amp; vm._events[lowerCaseEvent]) &#123;\n                tip(\n                    &quot;Event \\&quot;&quot; + lowerCaseEvent + &quot;\\&quot; is emitted in component &quot; +\n                    (formatComponentName(vm)) + &quot; but the handler is registered for \\&quot;&quot; + event + &quot;\\&quot;. &quot; +\n                    &quot;Note that HTML attributes are case-insensitive and you cannot use &quot; +\n                    &quot;v-on to listen to camelCase events when using in-DOM templates. &quot; +\n                    &quot;You should probably use \\&quot;&quot; + (hyphenate(event)) + &quot;\\&quot; instead of \\&quot;&quot; + event + &quot;\\&quot;.&quot;\n                );\n            &#125;\n        &#125;\n        var cbs &#x3D; vm._events[event];\n        if (cbs) &#123;\n            cbs &#x3D; cbs.length &gt; 1 ? toArray(cbs) : cbs;\n            &#x2F;&#x2F; 只取回调函数，不取 event\n            var args &#x3D; toArray(arguments, 1);\n            for (var i &#x3D; 0, l &#x3D; cbs.length; i &lt; l; i++) &#123;\n                try &#123;\n                    cbs[i].apply(vm, args);\n                &#125; catch (e) &#123;\n                    handleError(e, vm, (&quot;event handler for \\&quot;&quot; + event + &quot;\\&quot;&quot;));\n                &#125;\n            &#125;\n        &#125;\n        return vm\n    &#125;;\n&#125;\n\n&#x2F;***\n   * Convert an Array-like object to a real Array.\n   *&#x2F;\nfunction toArray (list, start) &#123;\n    start &#x3D; start || 0;\n    var i &#x3D; list.length - start;\n    var ret &#x3D; new Array(i);\n    while (i--) &#123;\n          ret[i] &#x3D; list[i + start];\n    &#125;\n    return ret\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>实现思路大体相同，如上第二点中的第一条：实现思路。Vue 中实现的方法支持订阅数组事件。</p>\n<h2 id=\"四、-总结\"><a href=\"#四、-总结\" class=\"headerlink\" title=\"四、 总结\"></a>四、 总结</h2><h4 id=\"1-优点\"><a href=\"#1-优点\" class=\"headerlink\" title=\"1. 优点\"></a>1. 优点</h4><ul>\n<li>对象之间解耦</li>\n<li>异步编程中，可以更松耦合的代码编写</li>\n</ul>\n<h4 id=\"2-缺点\"><a href=\"#2-缺点\" class=\"headerlink\" title=\"2. 缺点\"></a>2. 缺点</h4><ul>\n<li>创建订阅者本身要消耗一定的时间和内存</li>\n<li>虽然可以弱化对象之间的联系，多个发布者和订阅者嵌套一起的时候，程序难以跟踪维护</li>\n</ul>\n<h2 id=\"五、-扩展（发布-订阅模式与观察者模式的区别）\"><a href=\"#五、-扩展（发布-订阅模式与观察者模式的区别）\" class=\"headerlink\" title=\"五、 扩展（发布-订阅模式与观察者模式的区别）\"></a>五、 扩展（发布-订阅模式与观察者模式的区别）</h2><p>很多地方都说发布-订阅模式是观察者模式的别名，但是他们真的一样吗？是不一样的。</p>\n<p>直接上图：<br><img src=\"https://segmentfault.com/img/bVbsSFl\" alt=\"clipboard.png\"></p>\n<p>**<code>观察者模式</code>**：观察者（Observer）直接订阅（Subscribe）主题（Subject），而当主题被激活的时候，会触发（Fire Event）观察者里的事件。</p>\n<p>**<code>发布订阅模式</code>**：订阅者（Subscriber）把自己想订阅的事件注册（Subscribe）到调度中心（Event Channel），当发布者（Publisher）发布该事件（Publish Event）到调度中心，也就是该事件触发时，由调度中心统一调度（Fire Event）订阅者注册到调度中心的处理代码。</p>\n<p>**<code>差异</code>**：</p>\n<ul>\n<li>在观察者模式中，观察者是知道 Subject 的，Subject 一直保持对观察者进行记录。然而，在发布订阅模式中，发布者和订阅者不知道对方的存在。它们只有通过消息代理进行通信。</li>\n<li>在发布订阅模式中，组件是松散耦合的，正好和观察者模式相反。</li>\n<li>观察者模式大多数时候是同步的，比如当事件触发，Subject 就会去调用观察者的方法。而发布-订阅模式大多数时候是异步的（使用消息队列）。</li>\n<li>观察者模式需要在单个应用程序地址空间中实现，而发布-订阅更像交叉应用模式。</li>\n</ul>\n","text":" 发布-订阅模式，看似陌生，其实不然。工作中经常会用到，例如 Node.js EventEmitter 中的 on 和 emit 方法；Vue 中的 $on 和 $emit 方法。他们都使用了发布-订阅模式，让开发变得更加高效方便。 一、 什么是发布-订阅模式1. 定义发布-订阅...","link":"","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":23,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"javascript","slug":"javascript","count":5,"path":"api/tags/javascript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81-%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">一、 什么是发布-订阅模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">1. 定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">2. 例子</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%EF%BC%9F\"><span class=\"toc-text\">二、 如何实现发布-订阅模式？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">1. 实现思路</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-demo1\"><span class=\"toc-text\">2. demo1</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-demo2\"><span class=\"toc-text\">3. demo2</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81-Vue-%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">三、 Vue 中的实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">四、 总结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">1. 优点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">2. 缺点</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81-%E6%89%A9%E5%B1%95%EF%BC%88%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F%E4%B8%8E%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%89\"><span class=\"toc-text\">五、 扩展（发布-订阅模式与观察者模式的区别）</span></a></li></ol>","author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"vue3+vite+axios中proxy跨域配置","uid":"fadfce06057e90bf9f3fe30898e7652a","slug":"vue3-vite-axios中proxy跨域配置","date":"2022-06-26T03:08:00.000Z","updated":"2022-06-26T03:20:57.220Z","comments":true,"path":"api/articles/vue3-vite-axios中proxy跨域配置.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/project/202206261120941.png","text":"axios引入安装： npm install axios -S src目录下创建api目录，下新建axios.js axios.js import axios from 'axios' // 创建一个 axios 实例 const service = axios.create(&...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":23,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"vue3","slug":"vue3","count":3,"path":"api/tags/vue3.json"},{"name":"vite","slug":"vite","count":2,"path":"api/tags/vite.json"},{"name":"Axios","slug":"Axios","count":3,"path":"api/tags/Axios.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}},"next_post":{"title":"RSA数据加解密算法","uid":"705be767dc4b6801a58c10ebc10269e4","slug":"RSA数据加解密算法","date":"2022-05-30T14:49:00.000Z","updated":"2022-05-30T14:52:16.745Z","comments":true,"path":"api/articles/RSA数据加解密算法.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/project/202205302251490.png","text":"主要代码： # /* # * @Author: kif kif101001000@163.com # * @Date: 2022-05-30 22:34:47 # * @Last Modified by: kif kif101001000@163.com # * @Last Mo...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"课程笔记","slug":"课程笔记","count":1,"path":"api/categories/课程笔记.json"}],"tags":[{"name":"RSA","slug":"RSA","count":1,"path":"api/tags/RSA.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}}}