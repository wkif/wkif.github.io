{"title":"操作系统之信号量、P、V操作","uid":"510210968f59787c491612129c395946","slug":"操作系统之信号量、P、V操作","date":"2020-12-09T07:43:00.000Z","updated":"2022-03-30T16:00:00.487Z","comments":true,"path":"api/articles/操作系统之信号量、P、V操作.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforhexo/20201202142708.jpg","content":"<p>信号量是最早出现的用来解决进程同步与互斥问题的机制(也可实现进程通信)，包括一个称为信 号量的变量及对它进行的两个原语操作。信号量为一个整数，我们设这个信号量为：sem。很显然，我们规定在sem大于等于零的时候代表可供并发进程使用的 资源实体数，sem小于零的时候，表示正在等待使用临界区的进程的个数。根据这个原则，在给信号量附初值的时候，我们显然就要设初值大于零。</p>\n<p>p操作和v操作是不可中断的程序段，称为原语。<strong>P,V原语中P是荷兰语的Passeren，相当于英文的pass, V是荷兰语的Verhoog,相当于英文中的incremnet。</strong></p>\n<p>且在P,V愿语执行期间不允许有中断的发生。</p>\n<p>对于具体的实现，方法非常多，可以用硬件实现，也可以用软件实现。<strong>这种信号量机制必须有公共内存，不能用于分布式操作系统，这是它最大的弱点。</strong></p>\n<p>首先应弄清PV操作的含义：PV操作由P操作原语和V操作原语组成（原语是不可中断的过程），对信号量进行操作，具体定义如下：</p>\n<p>​       P（S）：①将信号量S的值减1，即S&#x3D;S-1；</p>\n<p>​          ②如果S&gt;&#x3D;0，则该进程继续执行；否则该进程置为等待状态，排入等待队列。</p>\n<p>​       V（S）：①将信号量S的值加1，即S&#x3D;S+1；</p>\n<p>​          ②如果S&gt;0，则该进程继续执行；否则释放队列中第一个等待信号量的进程。</p>\n<p><strong>PV操作的意义：我们用信号量及PV操作来实现进程的同步和互斥。PV操作属于进程的低级通信。</strong></p>\n<p>什么是信号量？信号量（semaphore）的数据结构为一个值和一个指针，指针指向等待该 信号量的下一个进程。信号量的值与相应资源的使用情况有关。当它的值大于0时，表示当前可用资源的数量；当它的值小于0时，其绝对值表示等待使用该资源的 进程个数。注意，信号量的值仅能由PV操作来改变。</p>\n<p>一般来说，信号量S&gt;&#x3D;0时，S表示可用资源的数量。执行一次P操作意味着请求分配一个单位资源，因此S的值减1；</p>\n<p>当S&lt;0时，表示已经没有可用资源，请求者必须等待别的进程释放该类资源，它才能运行下去。而执行一个V操作意味着释放一个单位资源，因此S的值加1；</p>\n<p>若S&lt;&#x3D;0，表示有某些进程正在等待该资源，因此要唤醒一个等待状态的进程，使之运行下去</p>\n<h3 id=\"利用信号量和PV操作实现进程互斥的一般模型是：\"><a href=\"#利用信号量和PV操作实现进程互斥的一般模型是：\" class=\"headerlink\" title=\"利用信号量和PV操作实现进程互斥的一般模型是：\"></a>利用信号量和PV操作实现进程互斥的一般模型是：</h3><p>进程P1          进程P2        ……        进程Pn</p>\n<p>……           ……         ……</p>\n<p>P（S）；         P（S）；                 P（S）；</p>\n<p>临界区；         临界区；                 临界区；</p>\n<p>V（S）；         V（S）；                 V（S）；</p>\n<p>……           ……         ……        ……</p>\n<p>其中信号量S用于互斥，初值为1</p>\n<p>使用PV操作实现进程互斥时应该注意的是：</p>\n<p>（1）每个程序中用户实现互斥的P、V操作必须成对出现，先做P操作，进临界区，后做V操作，出临界区。若有多个分支，要认真检查其成对性。</p>\n<p>（2）P、V操作应分别紧靠临界区的头尾部，临界区的代码应尽可能短，不能有死循环。</p>\n<p>（3）互斥信号量的初值一般为1。</p>\n<h3 id=\"利用信号量和PV操作实现进程同步\"><a href=\"#利用信号量和PV操作实现进程同步\" class=\"headerlink\" title=\"利用信号量和PV操作实现进程同步\"></a>利用信号量和PV操作实现进程同步</h3><p>PV操作是典型的同步机制之一。用一个信号量与一个消息联系起来，当信号量的值为0时，表示期望的消息尚未产生；当信号量的值非0时，表示期望的消息已经存在。用PV操作实现进程同步时，调用P操作测试消息是否到达，调用V操作发送消息。</p>\n<p>利用信号量和PV操作实现进程互斥的一般模型是：</p>\n<p>进程A              进程B</p>\n<p> ….                        ….</p>\n<p>L: P(信号量)           L2:V(信号量）</p>\n<p> ….                           ….</p>\n<p>使用PV操作实现进程同步时应该注意的是：</p>\n<p>（1）分析进程间的制约关系，确定信号量种类。在保持进程间有正确的同步关系情况下，哪个进程先执行，哪些进程后执行，彼此间通过什么资源（信号量）进行协调，从而明确要设置哪些信号量。</p>\n<p>（2）信号量的初值与相应资源的数量有关，也与P、V操作在程序代码中出现的位置有关。</p>\n<p>（3）同一信号量的P、V操作要成对出现，但它们分别在不同的进程代码中。</p>\n<h3 id=\"【例1】\"><a href=\"#【例1】\" class=\"headerlink\" title=\"【例1】\"></a>【例1】</h3><p>生产者-消费者问题</p>\n<p>在多道程序环境下，进程同步是一个十分重要又令人感兴趣的问题，而生产者-消费者问题是其中一个有代表性的进程同步问题。下面我们给出了各种情况下的生产者-消费者问题，深入地分析和透彻地理解这个例子，对于全面解决操作系统内的同步、互斥问题将有很大帮助。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">（1）一个生产者，一个消费者，公用一个缓冲区。\n定义两个同步信号量：\nempty——表示缓冲区是否为空，初值为1。\nfull——表示缓冲区中是否为满，初值为0。\n\n生产者进程\nwhile(TRUE)&#123;\n\n       生产一个产品;\n\n       P(empty);\n\n       产品送往Buffer;\n\n       V(full);\n\n       &#125;\n\n\n消费者进程\nwhile(TRUE)&#123;\n\n       P(full);\n\n      从Buffer取出一个产品;\n\n       V(empty);\n\n       消费该产品;\n\n       &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>（2）一个生产者，一个消费者，公用n个环形缓冲区。</p>\n<p>定义两个同步信号量：</p>\n<p>empty——表示缓冲区是否为空，初值为n。</p>\n<p>full——表示缓冲区中是否为满，初值为0。</p>\n<p>​       设缓冲区的编号为1～n&amp;61485;1，定义两个指针in和out，分别是生产者进程和消费者进程使用的指针，指向下一个可用的缓冲区。</p>\n<p>生产者进程</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">while(TRUE)&#123;\n\n       生产一个产品;\n\n       P(empty);\n\n        产品送往buffer(in);\n\n        in&#x3D;(in+1)mod n;\n\n        V(full);\n\n        &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>消费者进程</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">while(TRUE)&#123;\n\nP(full);\n\n  从buffer(out)中取出产品;\n\n  out&#x3D;(out+1)mod n;\n\n  V(empty);\n\n  消费该产品;\n\n  &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>（3）一组生产者，一组消费者，公用n个环形缓冲区</p>\n<p>​       在这个问题中，不仅生产者与消费者之间要同步，而且各个生产者之间、各个消费者之间还必须互斥地访问缓冲区。</p>\n<p>定义四个信号量：</p>\n<p>empty——表示缓冲区是否为空，初值为n。</p>\n<p>full——表示缓冲区中是否为满，初值为0。</p>\n<p>mutex1——生产者之间的互斥信号量，初值为1。</p>\n<p>mutex2——消费者之间的互斥信号量，初值为1。</p>\n<p>​       设缓冲区的编号为1～n&amp;61485;1，定义两个指针in和out，分别是生产者进程和消费者进程使用的指针，指向下一个可用的缓冲区。</p>\n<p>生产者进程</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">while(TRUE)&#123;\n\n        生产一个产品;\n\n        P(empty);\n\n        P(mutex1);\n\n        产品送往buffer(in);\n\n        in&#x3D;(in+1)mod n;\n\n        V(mutex1);\n\n        V(full);\n\n        &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>消费者进程</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">while(TRUE)&#123;\n\nP(full);\n\n  P(mutex2);\n\n  从buffer(out)中取出产品;\n\n  out&#x3D;(out+1)mod n;\n\n  V(mutex2);\n\n  V(empty);\n\n  消费该产品;\n\n  &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>需要注意的是无论在生产者进程中还是在消费者进程中，两个P操作的次序不能颠倒。应先执行同步信号量的P操作，然后再执行互斥信号量的P操作，否则可能造成进程死锁。</p>\n<h3 id=\"【例2】\"><a href=\"#【例2】\" class=\"headerlink\" title=\"【例2】\"></a>【例2】</h3><p>桌上有一空盘，允许存放一只水果。爸爸可向盘中放苹果，也可向盘中放桔子，儿子专等吃盘中的桔子，女儿专等吃盘中的苹果。规定当盘空时一次只能放一只水果供吃者取用，请用P、V原语实现爸爸、儿子、女儿三个并发进程的同步。</p>\n<p>分析 在本题中，爸爸、儿子、女儿共用一个盘子，盘中一次只能放一个水果。当盘子为空时，爸爸可将一个水果放入果盘中。若放入果盘中的是桔子，则允许儿子吃，女 儿必须等待；若放入果盘中的是苹果，则允许女儿吃，儿子必须等待。本题实际上是生产者-消费者问题的一种变形。这里，生产者放入缓冲区的产品有两类，消费 者也有两类，每类消费者只消费其中固定的一类产品。</p>\n<p>​       解：在本题中，应设置三个信号量S、So、Sa，信号量S表示盘子是否为空，其初值为l；信号量So表示盘中是否有桔子，其初值为0；信号量Sa表示盘中是否有苹果，其初值为0。同步描述如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int S＝1;\n\nint Sa＝0;\n\nint So＝0;\nmain()\n &#123;\n\tcobegin\n\tfather();        &#x2F;*父亲进程*&#x2F;\n\tson();         &#x2F;*儿子进程*&#x2F;\n\tdaughter();       &#x2F;*女儿进程*&#x2F;\n\tcoend\n&#125;\nfather()\n&#123;\n\t while(1)\n\t\t&#123;\n\t\t\t P(S);\n            将水果放入盘中;\n            if（放入的是桔子）\n            \tV(So);\n            else \n            \tV(Sa);\n         &#125;\n&#125;\nson()\n &#123;\n\twhile(1)\n\t\t&#123;\n\t\t\t P(So);\n            从盘中取出桔子;\n            V(S);\n            吃桔子;\n          &#125;\n\n&#125;\ndaughter()\n&#123;\n\twhile(1)\n\t\t &#123;\n             P(Sa);\n             从盘中取出苹果;\n             V(S);\n             吃苹果;\n          &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"例题3\"><a href=\"#例题3\" class=\"headerlink\" title=\"例题3\"></a>例题3</h3><p>设公交车上,司机和售票员的活动如下：司机;启动车辆;正常行使,到站停车. 售票员;关车门,售票 开车门. 在汽车不断到站 停车 行驶过程中这两个活动有什么同步关系? 用信号量和pv操作实现。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">设信号量为s1(是否开车)和s2(是否停车),s1&#x3D;1,s2&#x3D;0;\n\n司机进程：           售票员进程：\n\nbegin              begin\n\nL1:               L2:\n\nP(S1);             关闭车门；\n\n启动车辆；           V(s1); \n\n正常行驶；           售票；\n\nV(s2）；            P(s2);\n\ngoto L1;            开车门；\n\nend；              goto L2;\n\n                 end；<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"思考题：\"><a href=\"#思考题：\" class=\"headerlink\" title=\"思考题：\"></a>思考题：</h3><p>四个进程A、B、C、D都要读一个共享文件F，系统允许多个进程同时读文件F。但限制是进程A和进程C不能同时读文件F，进程B和进程D也不能同时读文件F。为了使这四个进程并发执行时能按系统要求使用文件，现用PV操作进行管理，请回答下面的问题：</p>\n<p>（1）应定义的信号量及初值：               。</p>\n<p>（2）在下列的程序中填上适当的P、V操作，以保证它们能正确并发工作：</p>\n<p>  A()       B()      C()        D()</p>\n<p> {       {        {         {</p>\n<p>  [1];      [3];      [5];        [7];</p>\n<p>  read F;     read F;    read F;      read F;</p>\n<p>  [2];      [4];     [6];         [8];</p>\n<p>  }       }       }          }</p>\n<h3 id=\"思考题解答：\"><a href=\"#思考题解答：\" class=\"headerlink\" title=\"思考题解答：\"></a>思考题解答：</h3><p>（1）定义二个信号量S1、S2，初值均为1，即：S1&#x3D;1，S2&#x3D;1。其中进程A和C使用信号量S1，进程B和D使用信号量S2。</p>\n<p>（2）从[1]到[8]分别为：P(S1) V(S1) P(S2) V(S2) P(S1) V(S1) P(S2) V(S2)</p>\n<p>信号量、PV操作是解决进程间的同步与互斥问题的。</p>\n<p>★   做题时尤其要注意隐藏的同步、互斥问题。这些问题通常可以归入生产者－消费者问题和阅读者－写入者问题。</p>\n<p>★   PV操作一定是成对出现的，但是这不意味着它会在一个进程内成对出现。</p>\n<p>★   在互斥关系中，PV操作一定是在一个进程内成对出现。而且，信号一定大于0,具体多少视情况而定。而对于同步关系，则一对PV操作在两个进程或者更多的进程中出现。</p>\n<p>★   对于同步关系，信号量可能为0，也可能不为0；用于同步的信号个数可能1个，也可能是多个。</p>\n<p>★   对信号量为1的，应该先执行V操作。</p>\n<p>★   在生产者－消费者问题中，要设置三个信号量：empty－空闲的缓存区数量，初值为n；full－已填充的缓存区数量，初值为0；mutex－保证只有一个进程在写入缓存区，初值为1。</p>\n<p>★   在阅读者－写入者问题中，设置两个信号量：信号量access－控制写入互斥，初值为1；信号量rc－控制对共享变量ReadCount（读者统计值）的互斥访问。<br>转自：<a href=\"http://hongti88.blog.163.com/blog/static/38276487200882733818688/\">http://hongti88.blog.163.com/blog/static/38276487200882733818688/</a></p>\n","text":"信号量是最早出现的用来解决进程同步与互斥问题的机制(也可实现进程通信)，包括一个称为信 号量的变量及对它进行的两个原语操作。信号量为一个整数，我们设这个信号量为：sem。很显然，我们规定在sem大于等于零的时候代表可供并发进程使用的 资源实体数，sem小于零的时候，表示正在等待使...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"操作系统","slug":"操作系统","count":3,"path":"api/tags/操作系统.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%92%8CPV%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5%E7%9A%84%E4%B8%80%E8%88%AC%E6%A8%A1%E5%9E%8B%E6%98%AF%EF%BC%9A\"><span class=\"toc-text\">利用信号量和PV操作实现进程互斥的一般模型是：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%92%8CPV%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5\"><span class=\"toc-text\">利用信号量和PV操作实现进程同步</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E3%80%90%E4%BE%8B1%E3%80%91\"><span class=\"toc-text\">【例1】</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E3%80%90%E4%BE%8B2%E3%80%91\"><span class=\"toc-text\">【例2】</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E9%A2%983\"><span class=\"toc-text\">例题3</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%80%83%E9%A2%98%EF%BC%9A\"><span class=\"toc-text\">思考题：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%80%83%E9%A2%98%E8%A7%A3%E7%AD%94%EF%BC%9A\"><span class=\"toc-text\">思考题解答：</span></a></li></ol>","author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"操作系统之调度","uid":"6636482fc925ef3fdf260b6b326d9fbf","slug":"操作系统之调度","date":"2020-12-09T13:40:00.000Z","updated":"2022-03-30T15:59:38.731Z","comments":true,"path":"api/articles/操作系统之调度.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforhexo/20201202142647.jpg","text":"调度调度的基本概念调度研究的问题：当有一堆任务要处理，但由于资源有限，这些事情没法同时处理。这就需要确定某种规则来决定处理这些任务的顺序，这就是调度研究的问题。 举个有味道的例子：现在有4个人要上厕所(他们几乎同时到达)，他们分别需要使用厕所3分钟、10分钟、1分钟、4分钟。但是...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":27,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"操作系统","slug":"操作系统","count":3,"path":"api/tags/操作系统.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}},"next_post":{"title":"操作系统习题知识点","uid":"c63c5858f324489e9342422070a9376f","slug":"操作系统习题知识点","date":"2020-12-07T10:47:00.000Z","updated":"2022-03-30T15:59:22.662Z","comments":true,"path":"api/articles/操作系统习题知识点.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforhexo/20201202142640.jpg","text":"知识点：第一章：操作系统引论操作系统有硬件和软件组成，硬件是CPUC软件建立与活动的基础，而软件是对硬件功能的扩充。硬件包括CPU、内存、I&#x2F;O设备和总线等，软件通常分为应用软件、支撑软件和系统软件。 冯洛伊曼体系：存储器、运算器、控制器、输入设备、输出设备。 操作系统...","link":"","photos":[],"count_time":{"symbolsCount":"23k","symbolsTime":"21 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":27,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"操作系统","slug":"操作系统","count":3,"path":"api/tags/操作系统.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}}}