{"title":"后端框架学习-Django","uid":"1c5e4adfa32051d3ce39d99767de062e","slug":"后端框架学习-Django","date":"2021-05-05T14:16:00.000Z","updated":"2022-03-30T16:04:59.245Z","comments":true,"path":"api/articles/后端框架学习-Django.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforhexo/882690e66cdd6486c7ced449245fe620.jpg","content":"<h3 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h3><p>Django 是一个由 Python 编写的一个开放源代码的 Web 应用框架。</p>\n<p>使用 Django，只要很少的代码，Python 的程序开发人员就可以轻松地完成一个正式网站所需要的大部分内容，并进一步开发出全功能的 Web 服务 Django 本身基于 MVC 模型，即 Model（模型）+ View（视图）+ Controller（控制器）设计模式，MVC 模式使后续对程序的修改和扩展简化，并且使程序某一部分的重复利用成为可能。</p>\n<p>MVC 优势：</p>\n<ul>\n<li>低耦合</li>\n<li>开发快捷</li>\n<li>部署方便</li>\n<li>可重用性高</li>\n<li>维护成本低</li>\n<li>…</li>\n</ul>\n<p>Python 加 Django 是快速开发、设计、部署网站的最佳组合。</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>强大的数据库功能</li>\n<li>自带强大的后台功能</li>\n<li>优雅的网址</li>\n</ul>\n<hr>\n<h2 id=\"MVC-与-MTV模型\"><a href=\"#MVC-与-MTV模型\" class=\"headerlink\" title=\"MVC 与 MTV模型\"></a>MVC 与 MTV模型</h2><h3 id=\"MVC-模型\"><a href=\"#MVC-模型\" class=\"headerlink\" title=\"MVC 模型\"></a>MVC 模型</h3><p>MVC 模式（Model–view–controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。</p>\n<p>MVC 以一种插件式的、松耦合的方式连接在一起。</p>\n<ul>\n<li>模型（M）- 编写程序应有的功能，负责业务对象与数据库的映射(ORM)。</li>\n<li>视图（V）- 图形界面，负责与用户的交互(页面)。</li>\n<li>控制器（C）- 负责转发请求，对请求进行处理。</li>\n</ul>\n<p>简易图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/ImageHosting/video/20210528172123.png\" alt=\"img\"></p>\n<p>用户操作流程图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/ImageHosting/video/20210528172151.png\" alt=\"img\"></p>\n<hr>\n<h2 id=\"MTV-模型\"><a href=\"#MTV-模型\" class=\"headerlink\" title=\"MTV 模型\"></a>MTV 模型</h2><p>Django 的 MTV 模式本质上和 MVC 是一样的，也是为了各组件间保持松耦合关系，只是定义上有些许不同，Django 的 MTV 分别是指：</p>\n<ul>\n<li>M 表示模型（Model）：编写程序应有的功能，负责业务对象与数据库的映射(ORM)。</li>\n<li>T 表示模板 (Template)：负责如何把页面(html)展示给用户。</li>\n<li>V 表示视图（View）：负责业务逻辑，并在适当时候调用 Model和 Template。</li>\n</ul>\n<p>除了以上三层之外，还需要一个 URL 分发器，它的作用是将一个个 URL 的页面请求分发给不同的 View 处理，View 再调用相应的 Model 和 Template，MTV 的响应模式如下所示：</p>\n<p>简易图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/ImageHosting/video/20210528172220.png\" alt=\"img\"></p>\n<p>用户操作流程图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/ImageHosting/video/20210528172236.png\" alt=\"img\"></p>\n<p><strong>解析：</strong></p>\n<p>用户通过浏览器向我们的服务器发起一个请求(request)，这个请求会去访问视图函数：</p>\n<ul>\n<li>a.如果不涉及到数据调用，那么这个时候视图函数直接返回一个模板也就是一个网页给用户。</li>\n<li>b.如果涉及到数据调用，那么视图函数调用模型，模型去数据库查找数据，然后逐级返回。</li>\n</ul>\n<p>视图函数把返回的数据填充到模板中空格中，最后返回网页给用户。</p>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><h3 id=\"使用命令行创建项目\"><a href=\"#使用命令行创建项目\" class=\"headerlink\" title=\"使用命令行创建项目\"></a>使用命令行创建项目</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">django-admin startproject 项目名称<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>使用 Pycharm 创建项目</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">file ---&gt; new project ---- 选择Django ---&gt; 配置路径和项目名称 ---&gt; 配置环境(默认用系统环境) ----&gt; 点击create(完成创建)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/ImageHosting/video/20210528172439.png\" alt=\"img\"></p>\n<p><strong>项目目录介绍</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">|---mysite # 项目的&#x2F;目录 \n  |---mysite # 项目目录 \n      |---__init__.py \n      |---settings.py # 配置文件 \n      |---urls.py # 路由系统 &#x3D;&#x3D;&#x3D;&gt; url与视图的对应关系 \n      |---wsgi.py # runserver命令就使用wsgiref模块做简单的web server \n|---manage.py # 管理文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/ImageHosting/video/20210528172445.png\" alt=\"img\"></p>\n<p><strong>创建应用</strong></p>\n<p>使用命令行模式创建应用</p>\n<p>在 Terminal 中输入 <strong>python manage.py startapp</strong> 应用名:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/ImageHosting/video/20210528172450.png\" alt=\"img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/ImageHosting/video/20210528172454.png\" alt=\"img\"></p>\n<p><strong>使用 Pycharm 创建应用</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/ImageHosting/video/20210528172459.png\" alt=\"img\"></p>\n<p><strong>注意：</strong>使用命令行创建的应用，一定要在 <strong>settings.py–&gt;INSTALLED_APPS</strong> 中加入你的应用名字进行注册, 使用Pycharm创建的应用则不用。 认识应用结构</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/ImageHosting/video/20210528172504.png\" alt=\"img\"></p>\n<p><strong>运行项目</strong></p>\n<p>使用命令行运行项目：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">python3 manage.py runserver \nmanage.py runserver 80      # 指定端口<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>注意：</strong>要在 manage.py 同级目录执行命令。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/ImageHosting/video/20210528172517.png\" alt=\"img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/ImageHosting/video/20210528172511.png\" alt=\"img\"></p>\n<p><strong>Pycharm 启动项目</strong></p>\n<p>点击右上角的绿色的三角按钮。</p>\n<p>如需更改配置信息，请下拉选择 edit configurations，进行配置。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/ImageHosting/video/20210528172522.png\" alt=\"img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/ImageHosting/video/20210528172526.png\" alt=\"img\"></p>\n<p>配置完以上信息之后，直接按 Ctrl+shift+F10 运行一下 manage.py 文件。</p>\n<p>出现如下结果，表示配置成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/ImageHosting/video/20210528172532.png\" alt=\"img\"></p>\n<h4 id=\"创建项目-1\"><a href=\"#创建项目-1\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h4><p>django-admin startproject + 项目名称</p>\n<h4 id=\"启动服务（测试用，前台启动）\"><a href=\"#启动服务（测试用，前台启动）\" class=\"headerlink\" title=\"启动服务（测试用，前台启动）\"></a>启动服务（测试用，前台启动）</h4><p>python3 manage.py runserver (+端口号&#x2F;default:8000)<br>python3 manage.py runserver 0.0.0.0:8000</p>\n<h4 id=\"关闭服务\"><a href=\"#关闭服务\" class=\"headerlink\" title=\"关闭服务\"></a>关闭服务</h4><p>在终端crtl+c<br>sudo lsof -i:8000 -&gt;kill -9ubuntu</p>\n<h4 id=\"启动应用\"><a href=\"#启动应用\" class=\"headerlink\" title=\"启动应用\"></a>启动应用</h4><p>python manage.py startapp</p>\n<h4 id=\"列出所有的命令\"><a href=\"#列出所有的命令\" class=\"headerlink\" title=\"列出所有的命令\"></a>列出所有的命令</h4><p>python3 manage.py</p>\n<h4 id=\"生成数据库迁移文件\"><a href=\"#生成数据库迁移文件\" class=\"headerlink\" title=\"生成数据库迁移文件\"></a>生成数据库迁移文件</h4><p>python manage.py makemigrations</p>\n<h4 id=\"执行数据库迁移\"><a href=\"#执行数据库迁移\" class=\"headerlink\" title=\"执行数据库迁移\"></a>执行数据库迁移</h4><p>python manage.py migrate</p>\n<h4 id=\"进入-Django-Shell\"><a href=\"#进入-Django-Shell\" class=\"headerlink\" title=\"进入 Django Shell\"></a>进入 Django Shell</h4><p>python manage.py shell</p>\n<h4 id=\"创建admin\"><a href=\"#创建admin\" class=\"headerlink\" title=\"创建admin\"></a>创建admin</h4><p>python manage.py createsuperuser</p>\n<h4 id=\"清理已过期Sessions\"><a href=\"#清理已过期Sessions\" class=\"headerlink\" title=\"清理已过期Sessions\"></a>清理已过期Sessions</h4><p>python manage.py clearsessions</p>\n<h3 id=\"生成requirements-txt；\"><a href=\"#生成requirements-txt；\" class=\"headerlink\" title=\"生成requirements.txt；\"></a>生成requirements.txt；</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>pip freeze &gt; requirements.txt</p></blockquote>\n<h4 id=\"创建内存表\"><a href=\"#创建内存表\" class=\"headerlink\" title=\"创建内存表\"></a>创建内存表</h4><p>python manage.py createcachetable</p>\n<p>manage.py 包含项目管理的子命令<br>项目同名文件夹<br><strong>init</strong>:python包的初始化文件<br>wsgi.py:WEB网关的配置文件，正式启动django时才需要用到<br>urls.py:项目主路由配置-HTTP请求进入Django，有限调用<br>settings.py:项目的配置文件-包含项目启动需要的配置。</p>\n<h3 id=\"settings-py\"><a href=\"#settings-py\" class=\"headerlink\" title=\"settings.py\"></a>settings.py</h3><ul>\n<li>公有配置和自定义配置</li>\n<li>配置项格式例： BASE_DIR &#x3D; ‘xxxx’</li>\n<li>公有配置：Django官方提供的基础配置</li>\n<li>自定义配置满足命名规则，并尽量个性化</li>\n</ul>\n<p>项目的绝对路径</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>BASE_DIR &#x3D; Path(<strong>file</strong>).resolve().parent.parent</p></blockquote>\n<p>启动模式：<br>True调试模式：</p>\n<ul>\n<li>检测代码改动后，立即重启服务</li>\n<li>报错后提供一个</li>\n</ul>\n<p>False正式启动模式、上线模式</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>DEBUG &#x3D; True</p></blockquote>\n<p>请求Host头,只处理请求头在在列表中的请求，过滤一些请求，debug &#x3D; 1在调试模式下默认接收127.0.0.1和localhost两个值。<br>局域网内部访问时需要把局域网IP加上，一旦不为空就必须都配置上</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>ALLOWED_HOSTS &#x3D; []</p></blockquote>\n<p>主路由文件位置：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>ROOT_URLCONF &#x3D; ‘hworld.urls’</p></blockquote>\n<p>语言配置：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>LANGUAGE_CODE &#x3D; ‘en-us’（zh-Hans）</p></blockquote>\n<p>时区：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>TIME_ZONE &#x3D; ‘UTC’（Asia&#x2F;Shanghai）</p></blockquote>\n<h3 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h3><p>统一资源定位符（Uniform Resource Locator）</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>protocal(协议)：&#x2F;&#x2F;hostname(主机)[:port(端口)]&#x2F;path(路由)[?query(查询字符串)][#fragment(锚点)]</p></blockquote>\n<ul>\n<li>协议http；https（加密，安全的https）；file，本地磁盘协议（file：&#x2F;&#x2F;&#x2F;）</li>\n<li>hostname:依靠DNS解析为IP</li>\n<li>端口：默认http为80端口</li>\n<li>路由地址</li>\n<li>查询字符串：？menuld&#x3D;634898&amp;version&#x3D;AID9089<br>  主要用于给动态网页传递参数，样式：？参数&#x3D;值&amp;参数&#x3D;值</li>\n<li>信息片段：#subject锚点，直接定位到网页指定位置</li>\n</ul>\n<p>Django如何处理URL?<br>1.从配置文件中根据ROOT_URLCONF找到主路由文件，默认urls.py<br>2.加载urlpatterns变量[包含很多数组的路由]<br>3.<font color = 'red'>依次</font>匹配urlspatterns的path，匹配到第一个合适的中断后续匹配<br>4.匹配成功-返回响应<br>5.匹配失败-返回404</p>\n<h2 id=\"视图函数\"><a href=\"#视图函数\" class=\"headerlink\" title=\"视图函数\"></a>视图函数</h2><p>用于接收浏览器请求并通过HttpResponse对象返回响应的函数。此函数可以接收浏览器请求并根据业务逻辑返回相应的响应内容给浏览器。<br>语法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">xxx_view</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>其他参数…<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>：\n    <span class=\"token keyword\">return</span> HttpResponse对象<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>书写位置：项目同名文件夹下&#x2F;views.py</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpResponse\n<span class=\"token keyword\">def</span> <span class=\"token function\">page1_view</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    html <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;h1>这是一个页面&lt;/h1>'</span>\n    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"路由配置\"><a href=\"#路由配置\" class=\"headerlink\" title=\"路由配置\"></a>路由配置</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>path函数<br>from django.urls import path<br>path(route,views,name &#x3D; None)</p></blockquote>\n<ul>\n<li>route:字符串类型，匹配的请求路径</li>\n<li>views：指定路径所处理的视图处理函数的名称</li>\n<li>name：地址别名</li>\n</ul>\n<p><strong>path转化器</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>path转换器<br>&lt;转换器类型:自定义名&gt;<br>作用：若转换器类型匹配到对应类型的数据，则将数据按照关键字传参的方式传递给视图函数</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>path(‘page&#x2F;<a href=\"int:page\">int:page</a>‘,views.xxx)</p></blockquote>\n<p>转换器：</p>\n<ul>\n<li>str：匹配除了’&#x2F;‘之外的非空字符串</li>\n<li>int：int匹配0或任何正整数</li>\n<li>slug：匹配任何由ASCII字母或数字以及连字符和下划线组成的短标签</li>\n<li>path：匹配非空字段，包括路径分隔符‘&#x2F;’</li>\n</ul>\n<p>re_path函数：<br>正则匹配，更加精密的匹配规则<br>re_path(reg,view,name &#x3D; xx)<br>正则表达式为命名分组模式(?P<name>pattern);</p>\n<h3 id=\"HTTP请求\"><a href=\"#HTTP请求\" class=\"headerlink\" title=\"HTTP请求\"></a>HTTP请求</h3><p>1.请求：浏览器通过HTTP协议发送给服务器端的数据<br>2.响应：服务器端接收到请求后做相应的处理后再回复给浏览器端的数据。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">起始行：方法、路由、协议\n\nheaders：请求头 K:V\n\n请求体(body)：可能为空<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>请求方法：<ul>\n<li>GET：返回实体主体</li>\n<li>HEAD:调试获取报头</li>\n<li>POST：向指定资源提交数据进行处理</li>\n<li>PUT：更新</li>\n<li>DELETE：删除</li>\n<li>CONNECT:代理服务器</li>\n<li>OPTIONS</li>\n<li>TRACE：回显，主要用于测试和诊断</li>\n</ul>\n</li>\n</ul>\n<p>Django中的请求：<br>实际就是视图函数的第一个参数，及HttpRequest对象<br>个人理解就是Django预先将请求转变为了对象，将请求内容转变为对象属性。说到底是对报文进行了预处理。</p>\n<ul>\n<li>path_info:URL字符串</li>\n<li>method：表示HTTP请求方法</li>\n<li>GET：拿查询字符串（？后的值），QueryDict查询字典的对象</li>\n<li>POST：拿POST表单里的数据，即用户提交的数据，QueryDict查询字典的对象</li>\n<li>FILES：类似于字典的对象，拿文件</li>\n<li>COOKIES</li>\n<li>session</li>\n<li>body</li>\n<li>scheme</li>\n<li>get_full_path()</li>\n<li>META:请求头</li>\n</ul>\n<h2 id=\"请求-x2F-响应\"><a href=\"#请求-x2F-响应\" class=\"headerlink\" title=\"请求&#x2F;响应\"></a>请求&#x2F;响应</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">起始行（协议版本 状态码）\n响应头(K:V)\n响应体body<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>响应状态码：</p>\n<ul>\n<li>200 请求成功</li>\n<li>500 内部服务器错误</li>\n<li>301 永久重定向</li>\n<li>302 临时重定向</li>\n<li>404 请求的资源不存在</li>\n</ul>\n<p>分类：</p>\n<ul>\n<li>1**，收到请求，需要继续执行操作</li>\n<li>2**，成功，操作被成功接收并处理</li>\n<li>3**，重定向</li>\n<li>4**，客户端错误</li>\n<li>5**，服务器错误</li>\n</ul>\n<p>Django的响应对象</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>HttpResponse(content &#x3D; 响应体，content_type &#x3D; 响应体数据类型default：html，status &#x3D; 状态码，default：200)<br>作用：向客户端浏览器返回响应，同时携带响应体内容。</p></blockquote>\n<p>常用Content_Type</p>\n<ul>\n<li>‘test&#x2F;html’<br>  ……</li>\n</ul>\n<h3 id=\"GET请求和POST请求\"><a href=\"#GET请求和POST请求\" class=\"headerlink\" title=\"GET请求和POST请求\"></a>GET请求和POST请求</h3><p>统一由视图函数接收，因此一定是需要隔离业务逻辑</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">:</span>\n    处理GET业务逻辑\n<span class=\"token keyword\">elif</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span>\n    处理POST的业务逻辑\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    其他业务逻辑\n````\n\n<span class=\"token operator\">**</span>GET处理：<span class=\"token operator\">**</span>\n一般用于向服务器获取数据。\n能够产生GET请求的场景：\n\n<span class=\"token operator\">+</span> 浏览器地址栏输入URL并回车\n<span class=\"token operator\">+</span> <span class=\"token operator\">&lt;</span>a href <span class=\"token operator\">=</span> <span class=\"token string\">\"地址？参数=值&amp;参数=值\"</span>\\<span class=\"token operator\">></span>\n<span class=\"token operator\">+</span> form表单中的method为get\n\nGET请求方法中，如果有数据需要传递给服务器，通常会使用查询字符串传递。【注意不要传递敏感数据】\nURL<span class=\"token punctuation\">:</span>http<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">8000</span><span class=\"token operator\">/</span>page1\\?a<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token operator\">&amp;</span>b<span class=\"token operator\">=</span><span class=\"token number\">200</span>\n服务器端接收参数\n获取客户端请求GET请求提交的数据：\n\n```python\nrequest<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">[</span><span class=\"token string\">'参数名'</span><span class=\"token punctuation\">]</span>\nrequest<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'参数名'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'默认值'</span><span class=\"token punctuation\">)</span>\nrequest<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>getlist<span class=\"token punctuation\">(</span><span class=\"token string\">'参数名'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果有传递多个值，则参数对应的应该是一个列表，需要使用getlist方法取出所有值，get方法只能取出最后一个值。<br><strong>应用场景：问卷调查的复选框</strong></p>\n<p><strong>POST处理</strong><br>一般用于向服务器提交大量&#x2F;隐私数据<br>通过表单</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">&lt;</span>form method <span class=\"token operator\">=</span> <span class=\"token string\">'post'</span> action <span class=\"token operator\">=</span> <span class=\"token string\">'/login'</span><span class=\"token operator\">></span>\n    姓名：<span class=\"token operator\">&lt;</span><span class=\"token builtin\">input</span> <span class=\"token builtin\">type</span> <span class=\"token operator\">=</span> <span class=\"token string\">'text'</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'username'</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token builtin\">input</span> <span class=\"token builtin\">type</span> <span class=\"token operator\">=</span> <span class=\"token string\">'submit'</span> value <span class=\"token operator\">=</span> <span class=\"token string\">'登录'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"CSRF验证问题\"><a href=\"#CSRF验证问题\" class=\"headerlink\" title=\"CSRF验证问题\"></a>CSRF验证问题</h4><p>本身是django的防御措施，防御CSRF攻击问题，会阻止POST，暂时关闭：<br>settings.py》注释django.middleware.csrf.CsrfViewMiddleware</p>\n<h3 id=\"Django的设计模式\"><a href=\"#Django的设计模式\" class=\"headerlink\" title=\"Django的设计模式\"></a>Django的设计模式</h3><p>传统的MVC Mode-View-Controller（模型-视图-控制器）模式。<br>特点：低耦合</p>\n<ul>\n<li>M模型层：主要用于对数据库层的封装</li>\n<li>V视图层：用于给用户展示结果（WHAT + HOW显示什么，怎么显示）</li>\n<li>C控制层：用于处理请求、获取数据、返回结果</li>\n</ul>\n<p>Django：MTV模式<br>把MVC的V拆成了两层，并且弱化C层为路由文件。</p>\n<ul>\n<li>M模型层：与MVC相同</li>\n<li>T模板层：Template，专门负责html相关事情（HOW）</li>\n<li>V视图层：核心，负责接收请求，获得结果，返回结果。<br>  在该模式下依然存在控制层C，即主路由</li>\n</ul>\n<h2 id=\"Django模板层\"><a href=\"#Django模板层\" class=\"headerlink\" title=\"Django模板层\"></a>Django模板层</h2><h3 id=\"模板层创建\"><a href=\"#模板层创建\" class=\"headerlink\" title=\"模板层创建\"></a>模板层创建</h3><p>模板：根据字典数据动态变化的html网页，根据视图中传递的字典数据动态生成相应的html页面<br>模板配置：</p>\n<ul>\n<li>创建模板文件夹 &lt;项目名&gt;&#x2F;templates</li>\n<li>在settings.py中TEMPLATE配置项<ul>\n<li>BACKEND：指定模板引擎</li>\n<li>DIRS：模板的搜索目录（可以是一个或多个）</li>\n<li>APP_DIRS：是否在应用中的templates文件夹中搜索末班文件</li>\n<li>OPTIONS：有关模板的选项</li>\n</ul>\n</li>\n<li>主要需要修改的：DIRS：<br>  ‘DIRS’:[os.path.join(BASE_DIR,’templates’)]</li>\n</ul>\n<p><strong>模板加载方案1：</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>template <span class=\"token keyword\">import</span> loader\n<span class=\"token number\">1.</span>通过loader加载模板\nt <span class=\"token operator\">=</span> loader<span class=\"token punctuation\">.</span>get_template<span class=\"token punctuation\">(</span><span class=\"token string\">\"模板文件名\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">2.</span>将t转化为HTML字符串\nhtml <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">(</span>字典数据<span class=\"token punctuation\">)</span>\n<span class=\"token number\">3.</span>用响应对象将转换的字符串内容返回给浏览器\n<span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>模板加载方案2：</strong><br>使用render直接加载并且响应模板。<br>在视图函数中</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> render\n<span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span><span class=\"token string\">'模板文件名'</span><span class=\"token punctuation\">,</span>字典数据<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>视图层与模板层之间的交互</p>\n<ul>\n<li>视图函数中可以将Python变量封装到字典中传递到模板中。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">xxx_view</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    dic <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        k1<span class=\"token punctuation\">:</span> v1<span class=\"token punctuation\">,</span>\n        k2<span class=\"token punctuation\">:</span> v2\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">'xxx.html'</span><span class=\"token punctuation\">,</span> dic<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>模板中使用的语法来调用视图传进来的变量。</li>\n</ul>\n<h3 id=\"模板的变量\"><a href=\"#模板的变量\" class=\"headerlink\" title=\"模板的变量\"></a>模板的变量</h3><p>能传递到模板中的变量类型：str,int,list,tuple,dict,func,obj</p>\n<p>在模板中使用变量的语法：</p>\n<ul>\n<li></li>\n<li></li>\n<li></li>\n<li></li>\n<li></li>\n</ul>\n<h3 id=\"模板层的标签\"><a href=\"#模板层的标签\" class=\"headerlink\" title=\"模板层的标签\"></a>模板层的标签</h3><p>作用：将一些服务器端的功能嵌入到模板中，例如流程控制等</p>\n<p>语法</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;% 标签 %&#125;\n…\n&#123;% 结束标签 %&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>例：<br>if标签</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;% if 条件表达式 1 %&#125;\n…\n&#123;% elif 条件表达式 2 %&#125;\n…\n&#123;% elif 条件表达式 3 %&#125;\n…\n&#123;% else %&#125;\n…\n&#123;% endif %&#125;#！！一定记住要封口<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>NOTICE!在模板中使用实际括号是无效的语法，如果需要指示优先级，则应该选择嵌套if</p>\n<p>for标签<br>语法</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;% for 变量 in 可迭代对象 %&#125;\n    …循环语句\n&#123;% empty %&#125;\n    …可迭代对象无数据时填充语句\n&#123;% endfor %&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>内置变量forloop<br>forloop.counter:循环的当前迭代（从1开始索引）<br>forloop.counter0:循环的当前迭代（从0开始索引）<br>forloop.revcounter:counter倒序<br>forloop.revcounter0:counter0倒序<br>forloop.first:第一次循环为真‘<br>forloop.last：最后一次循环为真<br>forloop.parentloop：外层循环</p>\n<h3 id=\"模板层过滤器\"><a href=\"#模板层过滤器\" class=\"headerlink\" title=\"模板层过滤器\"></a>模板层过滤器</h3><p>过滤器：在变量输出时对变量的值进行处理<br>可以通过使用过滤器来改变变量的输出显示</p>\n<p>语法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;&#123;变量|过滤器1：&#39;参数1&#39;|过滤器2：&#39;参数值2&#39;…&#125;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>常用过滤器：</p>\n<ul>\n<li>lower：转换为小写</li>\n<li>upper：转换为大写</li>\n<li>safe：魔人布对变量内的字符串进行html转义</li>\n<li>add：将value的值增加n</li>\n</ul>\n<h3 id=\"模板的继承\"><a href=\"#模板的继承\" class=\"headerlink\" title=\"模板的继承\"></a>模板的继承</h3><p>模板继承使父模板内容重用，子模板直接继承父模板的全部内容并可以覆盖父模板中相应的块。</p>\n<p>语法——父模板中：</p>\n<ul>\n<li>定义父模板中的块block标签</li>\n<li>识别出哪些在子模板是允许被修改的</li>\n<li>block标签：在父模板中定义，在子模板中覆盖</li>\n</ul>\n<p>语法——子模板中：</p>\n<ul>\n<li><p>继承模板extends标签（写在模板第一行）<br>  例如</p>\n  <pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;%extend &#39;base.html&#39;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>子模板 复写父模板中的内容块</p>\n  <pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;block block_name&#125;\n&#123;% endblock blockname %&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<p>重写的覆盖规则</p>\n<ul>\n<li>不重写，按照父模板的效果显示</li>\n<li>重写，则按照重写效果显示<br>  注意：</li>\n<li>模板继承时，服务器的动态内容无法继承</li>\n</ul>\n<h3 id=\"url反向解析\"><a href=\"#url反向解析\" class=\"headerlink\" title=\"url反向解析\"></a>url反向解析</h3><p>代码中url的位置：<br>1.模板</p>\n<ul>\n<li>超链接&lt;a href &#x3D; &gt;</li>\n<li>form表单 form action 将表单中的数据用POST的方法提交到url</li>\n</ul>\n<p>2.视图函数中 - 302跳转 HttpResponseRedirect(‘url’)<br>将用户地址栏中的地址跳转到url</p>\n<p>代码中的url书写规范</p>\n<ul>\n<li>1.绝对地址：<a href=\"http://127.0.0.1:8000/page/\">http://127.0.0.1:8000/page/</a></li>\n<li>2.相对地址：<ul>\n<li>a ‘&#x2F;page&#x2F;1&#x2F;‘浏览器会把当前地址栏的协议、IP和端口加上这个地址</li>\n<li>b ‘page&#x2F;1&#x2F;‘没有&#x2F;开头的，浏览器会根据当前url最后一个&#x2F;之前的内容加上该相对地址作为最终访问地址</li>\n</ul>\n</li>\n</ul>\n<p>url反向解析<br>指在视图或模板中，用path定义的别名来动态查找或计算出相应的路由。<br>path：</p>\n<ul>\n<li>path(route,views,name&#x3D;’别名’)</li>\n</ul>\n<p>模板中：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;% url &#39;别名&#39;%&#125;\n&#123;% url &#39;别名&#39; &#39;参数值1&#39; &#39;参数值2&#39;%&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>视图函数中<br>调用reverse方法进行方向解析</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> reverse\nreverse<span class=\"token punctuation\">(</span><span class=\"token string\">'别名'</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> kwargs<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>ex:<br>print(reverse(‘pagen’,args&#x3D;[300]))<br>print(reverse(‘person’,kwargs&#x3D;{‘name’:’xixi’,’age’:18}))</p>\n<h3 id=\"静态文件\"><a href=\"#静态文件\" class=\"headerlink\" title=\"静态文件\"></a>静态文件</h3><p>什么是静态文件：图片、css、js、音频、视频<br>静态文件属于静态请求，不经过视图函数<br>静态文件配置-settings.py</p>\n<ul>\n<li>1.静态文件的访问路径，默认’&#x2F;static&#x2F;‘</li>\n<li>2.STATICFILES_DIRS，静态文件在服务器端的存储位置<br>  元组</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">STATICFILES_DIRS &#x3D; （\n        os.path.join(BASE_DIR, &quot;static&quot;),\n）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>3.方案2通过</p>\n  <pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;% static %&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>  标签访问静态文件</p>\n<ul>\n<li><p>1.加载static-</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;% load static %&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n</li>\n<li><p>2.使用静态资源-</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;% static&#39;静态资源路径&#39; %&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n</li>\n<li><p>3.样例：</p>\n</li>\n</ul>\n  <pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;img src&#x3D;&quot;&#123;% static &#39;images&#x2F;lena.jpg&#39; %&#125;&quot;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><h3 id=\"应用创建\"><a href=\"#应用创建\" class=\"headerlink\" title=\"应用创建\"></a>应用创建</h3><p>每一个应用都是一个MTV<br>创建应用</p>\n<ul>\n<li>用manage.py执行startapp</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>python manage.py startapp music</p></blockquote>\n<ul>\n<li>在settings.py的INSTALLED_APPS列表中配置安装此应用</li>\n</ul>\n<p>执行创建应用后，应用文件夹下</p>\n<ul>\n<li>migrations文件夹：与DB有关</li>\n<li><strong>init</strong>.py</li>\n<li>admin.py</li>\n<li>apps.py</li>\n<li>models.py:与DB相关</li>\n<li>tests.py</li>\n<li>views.py：视图函数</li>\n</ul>\n<h3 id=\"分布式路由\"><a href=\"#分布式路由\" class=\"headerlink\" title=\"分布式路由\"></a>分布式路由</h3><p>Django中，主路由配置文件可以不处理用户具体路由，主路由配置文件的可以做请求的分发（分布式请求处理）。具体的请求可以由各自的应用来进行处理。<br>主路由匹配前缀，如&#x2F;news&#x2F;，再往下分发到子路由配置。<br>配置分布式路由：</p>\n<ul>\n<li>主路由中调用include函数</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;music&#x2F;index -&gt; path(&#39;music&#x2F;&#39;,include(&#39;music.urls&#39;))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>在子路由下创建urls.py，其内部结构与主路由完全一致。<br>  path(‘index&#x2F;‘, views.index_view)</li>\n</ul>\n<h3 id=\"应用下的模板\"><a href=\"#应用下的模板\" class=\"headerlink\" title=\"应用下的模板\"></a>应用下的模板</h3><p>应用内部可以配置模板目录</p>\n<ul>\n<li>1.应用下手动创建templates文件夹</li>\n<li>2.settings.py中开启应用模板功能</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>TEMPLATE配置项中的’APP_DIRS’值为True即可、</p></blockquote>\n<p><strong>important：查找模板的顺序：外层templates文件夹-&gt;注册顺序的app内部的templates文件夹</strong><br>解决方法：在应用层的templates下创建嵌套同名子目录，从而在views.py render中使得html获得不一样的路径</p>\n<h2 id=\"模型层及ORM介绍\"><a href=\"#模型层及ORM介绍\" class=\"headerlink\" title=\"模型层及ORM介绍\"></a>模型层及ORM介绍</h2><p>模型层：负责与数据库之间进行通信<br>Django配置mysql</p>\n<ul>\n<li>创建数据库mysql</li>\n<li>更改settings.py：</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">DATABASES <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">'default'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">'ENGINE'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.db.backends.mysql'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'mysite3'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'USER'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'PASSWORD'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'HOST'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3306'</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>什么是模型：</p>\n<ul>\n<li>模型是一个Python的类，它是由django.db.models.Model派生出的子类。</li>\n<li>一个模型类代表数据库的一张数据表</li>\n<li>模型类中每一个类属性都代表数据库中的一个字段</li>\n<li>模型是数据交互的接口，是表示和操作数据库的方法和方式。</li>\n</ul>\n<h3 id=\"ORM框架\"><a href=\"#ORM框架\" class=\"headerlink\" title=\"ORM框架\"></a>ORM框架</h3><p>ORM（对象关系映射），是一种程序技术，能够使用类和对象对数据库进行操作，从而避免通过SQL语句操作数据库。</p>\n<p>作用</p>\n<ul>\n<li>建立模型类和表之间的对应关系，允许我们通过面向对象的方式来操作数据库。</li>\n<li>根据设计的模型类生成数据库中的表格。</li>\n<li>通过简单的配置就能更换数据库引擎。</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>只需要面向对象编程，简化了向数据库编写代码的流程。</li>\n<li>实现了数据模型与数据库的解耦，屏蔽了不同数据库操作上的差异。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>对于复杂业务，使用成本较高</li>\n<li>根据对象的操作转换为SQL语句，根据查询结果转化为对象，在映射过程中有性能损失。</li>\n</ul>\n<p>映射图：<br>ORM———-&gt;DB<br>类———-&gt;数据表<br>对象——–&gt;数据行<br>属性——–&gt;字段</p>\n<p>数据库迁移：<br>迁移是Django同步您对模型所做出的更改（添加字段，删除模型等）到您的数据库模式的方式。</p>\n<ul>\n<li>1.生成迁移文件：</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>python manage.py makemigrations<br>生成一个中间文件，并保存在migrations文件夹中</p></blockquote>\n<ul>\n<li>2.执行迁移脚本程序</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>python manage.py migrate<br>执行迁移程序实现迁移，将每个应用下的migrations目录中的中间文件同步回数据库。</p></blockquote>\n<h3 id=\"模型类\"><a href=\"#模型类\" class=\"headerlink\" title=\"模型类\"></a>模型类</h3><p>模型类-创建</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n<span class=\"token keyword\">class</span> 模型类名<span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    字段名 <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>字段类型（字段选项）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>表名实际为 APP名称+类名称小写</p>\n<h3 id=\"模型类-字段类型：\"><a href=\"#模型类-字段类型：\" class=\"headerlink\" title=\"模型类-字段类型：\"></a>模型类-字段类型：</h3><ul>\n<li><p>BooleanField<br>  数据库类型：tinyint(1)<br>  编程语言中将使用True或False来表示值<br>  在数据库中则使用0或1来表示具体的值</p>\n</li>\n<li><p>Char<br>  数据库类型：VarChar（Django不支持Char）<br>  注意：必须要指定max_length参数值</p>\n</li>\n<li><p>DataField()<br>  数据库类型：date<br>  作用：表示日期<br>  参数：<strong>三选一</strong><br>+ auto_now:每次保存对象时，自动设置该字段为当前时间（取值：True&#x2F;False）<br>+ auto_now_add:当兑现第一次被创建时自动设置当前时间（取值：True&#x2F;False）<br>+ default:设置当前时间</p>\n</li>\n<li><p>DataTimeField()<br>  数据库类型：datatime(6)通常用这个，比上面那个精确一些<br>  作用：表示日期和时间<br>  参数：同DataField</p>\n</li>\n<li><p>FloatField()<br>  数据库类型：double<br>  编程语言中和数据库中都使用小数表示值</p>\n</li>\n<li><p>DecimalField()<br>  数据库类型：decimal(x,y)<br>  编程语言中:使用小数表示该列的值<br>  在数据库中：使用小数<br>  参数（必须有）：max_digits;decimal_places</p>\n</li>\n<li><p>EmailField()<br>  数据库类型：varchar<br>  编程语言和数据库中均使用字符串，但Django含有正则检查。</p>\n</li>\n<li><p>IntegerField()<br>  数据库类型：Int<br>  编程语言和数据库中使用整数</p>\n</li>\n<li><p>ImageField()<br>  数据库类型：varchar(100)<br>  作用：在数据库中为了保存图片路径<br>  编程语言和数据库中使用字符串</p>\n</li>\n<li><p>TextField()<br>  数据库类型：longtext<br>  作用：表示不定长的字符数据</p>\n</li>\n</ul>\n<h3 id=\"模型类-字段选项：\"><a href=\"#模型类-字段选项：\" class=\"headerlink\" title=\"模型类-字段选项：\"></a>模型类-字段选项：</h3><p>创建列的额外信息</p>\n<ul>\n<li>primary_key：设置为True，则为主键，此数据库表不会创建id字段</li>\n<li>blank:设置为True，则字段可以为空，控制的是Admin后台的提交，和mysql的null不同</li>\n<li>null：设置为True，则该列允许为空<br>  默认为False,需要一个default选项来设置默认值</li>\n<li>default：设置该列的默认值</li>\n<li>db_index：设置为True，表示为该列增加索引</li>\n<li>unique: 唯一索引</li>\n<li>db_column：指定列的名称，如果不指定的话则采用属性名作为列名。不给的话字段名就是列名。</li>\n<li>verbose_name：设置此字段在admin界面上的显示名称，可以中文化admin界面</li>\n</ul>\n<p>好习惯：字段选项【添加或更改】均要执行</p>\n<h3 id=\"模型类-Meta内部类\"><a href=\"#模型类-Meta内部类\" class=\"headerlink\" title=\"模型类-Meta内部类\"></a>模型类-Meta内部类</h3><p>使用Meta类来给**模型(其实就是表的属性)**赋予属性，Meta类下有很多内建的类属性，可对模型类做一些控制。<br>如改表名：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n<span class=\"token keyword\">class</span> 模型类名<span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    字段名 <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>字段类型（字段选项）\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        db_table <span class=\"token operator\">=</span> <span class=\"token string\">'book'</span>\n        <span class=\"token comment\">#控制模型类在admin后台显示的名称</span>\n        verbose_name <span class=\"token operator\">=</span> <span class=\"token string\">'单数名'</span>\n        <span class=\"token comment\">#指定复数形态</span>\n        verbose_name_plural <span class=\"token operator\">=</span> <span class=\"token string\">'复数名'</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Django对于数据库操作是惰性的，尽量不对数据库进行积极的修改，如设置的default值将不参与表的字段生成，只会参与实际插值。</p>\n<h3 id=\"ORM-创建数据\"><a href=\"#ORM-创建数据\" class=\"headerlink\" title=\"ORM-创建数据\"></a>ORM-创建数据</h3><p>增删改查<br>ORM CRUD核心：模型类.管理器对象</p>\n<p>管理器对象<br>每一个models.Model的模型类，都会有一个objects对象被同样继承下来，这个对象叫做管理器对象。<br>数据库的增删改查可以通过管理器实现。</p>\n<p>创建数据<br>方案1：</p>\n<ul>\n<li>MyModel.objects.create(属性1&#x3D;值1，属性2&#x3D;值2,…)</li>\n</ul>\n<p>成功：返回创建好的实体对象<br>失败：抛出异常</p>\n<p>方案2：</p>\n<ul>\n<li>创建MyModel实例对象，并调用save()并保存</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">obj <span class=\"token operator\">=</span> Mymodel<span class=\"token punctuation\">(</span>属性 <span class=\"token operator\">=</span> 值，属性 <span class=\"token operator\">=</span> 值<span class=\"token punctuation\">)</span>\nobj<span class=\"token punctuation\">.</span>属性 <span class=\"token operator\">=</span> 值\nobj<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>需要使用Django Shell</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>python manage.py shell<br><strong>代码每次变化，都需要重启Django Shell</strong></p></blockquote>\n<h2 id=\"ORM\"><a href=\"#ORM\" class=\"headerlink\" title=\"ORM\"></a>ORM</h2><h3 id=\"查询操作\"><a href=\"#查询操作\" class=\"headerlink\" title=\"查询操作\"></a>查询操作</h3><p>通过管理器对象进行<br>通过MyModel.objects管理器方法调用查询方法<br>方法</p>\n<ul>\n<li>all()<br>  用法：MyModel.objects.all()<br>  等价于select * from table<br>  返回值：QuerySet容器对象，类数组对象，内部存放了MyModel实例<br>  如</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;QuerySet [&lt;Book: Python,20.00&gt;, &lt;Book: jango,50.00&gt;, &lt;Book: JQuery,40.00&gt;, &lt;Book: Linux,30.00&gt;, &lt;Book: HTML5,26.00&gt;]&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>可以在模型类中定义__str__方法，自定义QuerySet中的输出格式，则输出时能输出格式化字符串。</strong></p>\n<p>Django 同样支持方法的串联，以下方法在返回QuerySet后均可使用方法串联，且最终都会按照SQL顺序对数据库进行操作。</p>\n<p><strong>print(QuerySet.query)将取得实际的SQL语句。</strong></p>\n<ul>\n<li>values(‘字段1’,’字段2’)<br>  等价于select 列1，列2 from xxx<br>  返回：QuerySet，但内部存字典，每一个字典代表一个数据<br>  如：</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;QuerySet [&#123;&#39;title&#39;: &#39;HTML5&#39;&#125;, &#123;&#39;title&#39;: &#39;jango&#39;&#125;, &#123;&#39;title&#39;: &#39;JQuery&#39;&#125;, &#123;&#39;title&#39;: &#39;Linux&#39;&#125;, &#123;&#39;title&#39;: &#39;Python&#39;&#125;]&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>values_list(‘字段1’,’字段2’)<br>  基本同上，但返回元组，使用时需要使用索引</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;QuerySet [(&#39;HTML5&#39;,), (&#39;jango&#39;,), (&#39;JQuery&#39;,), (&#39;Linux&#39;,), (&#39;Python&#39;,)]&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>order_by(‘-列’(降序),’列’)<br>  等价于 ORDER BY<br>  返回：QuerySet<br>  如：</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;QuerySet [&lt;Book: jango,50.00&gt;, &lt;Book: JQuery,40.00&gt;, &lt;Book: Linux,30.00&gt;, &lt;Book: HTML5,26.00&gt;, &lt;Book: Python,20.00&gt;]&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>filter(条件)<br>  语法：MyModel.objects.filter(属性1&#x3D;值1，属性2&#x3D;值2)（,默认是AND查询）<br>  等价于 条件查询<br>  返回值：QuerySet，存放模型实例</p>\n</li>\n<li><p>exclude(条件)<br>  语法同上<br>  等价于 WHERE NOT<br>  作用：返回不包含此条件的全部数据集<br>  电商取非可以用该语句</p>\n</li>\n<li><p>get(条件)<br>  <strong>容易报错，一定要Try一下</strong><br>  语法：MyModel.objects.get（条件）<br>  作用：返回满足条件的唯一一条数据<br>  说明：<strong>该方法只能返回一条数据</strong>，直接获得Object<br>  查询结果多于一条则抛出异常；查询结果没有数据则抛出Model.DoesNotExist异常。</p>\n</li>\n</ul>\n<h3 id=\"查询谓词\"><a href=\"#查询谓词\" class=\"headerlink\" title=\"查询谓词\"></a>查询谓词</h3><p>类属性 + ‘__’ + 谓词<br>定义：做更灵活的条件查询时需要使用查询谓词<br>说明：每一个查询谓词都是一个独立的查询功能</p>\n<ul>\n<li>__exact:等值匹配</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Author.objects.filter(id_exact&#x3D;1) &lt;&#x3D;&gt; SELECT * FROM Author WHERE ID&#x3D;1</p></blockquote>\n<ul>\n<li>__contains:包含指定值</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Author.objects.filter(name__contains&#x3D;’w’)<br>SELECT * FROM Author WHERE name Like ‘%w%’</p></blockquote>\n<ul>\n<li>__startwith:以xxx开始</li>\n<li>__endwith:以xxx结束</li>\n<li>__gt:大于指定值</li>\n<li>__gte:大于等于</li>\n<li>__lt:小于</li>\n<li>__lte:小于等于</li>\n<li>__in:指定范围内</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Author.objects.filter(name__in&#x3D;[‘中国’，’美国’])</p></blockquote>\n<ul>\n<li>__range:查询数据是否在指定区间范围内</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Author.objects.filter(age__range(35,50))<br>&lt;&#x3D;&#x3D;&gt; SELECT * FROM Author WHERE age BETWEEN 35 AND 50</p></blockquote>\n<h3 id=\"更新操作\"><a href=\"#更新操作\" class=\"headerlink\" title=\"更新操作\"></a>更新操作</h3><p>1.针对单个数据的修改<br>查(get())-&gt;改：通过对象.属性的方式更改-&gt;保存：对象.save()<br>2.批量更新数据<br>直接调用QuerySet的update(属性&#x3D;值实现批量修改)<br>针对QuerySet来做更改</p>\n<h3 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h3><p>1.单个数据删除</p>\n<ul>\n<li>查找对应的数据对象</li>\n<li>调用该数据对象的delete()方法实现删除</li>\n</ul>\n<p>2.批量数据删除</p>\n<ul>\n<li>查找QuerySet</li>\n<li>调用delete()方法实现删除</li>\n</ul>\n<p>3.伪删除操作<br>通过在表里添加一个布尔型字段（is_active），默认是True；执行删除时，将欲删除数据的is_active置为False。<br><strong>注意</strong>：使用伪删除时，确保显示数据的地方，均添加了is_active&#x3D;True的过滤查询。</p>\n<h3 id=\"F对象\"><a href=\"#F对象\" class=\"headerlink\" title=\"F对象\"></a>F对象</h3><p>F对象(很适合用于点赞)<br>·········································<br>**F对象实际等价于语句：<br>UPDATE TABLE SET COLUMN&#x3D;TABLE.VALUE+10<br>使用单句的数据库查询语句，Mysql的InnoDB引擎使用行锁，因此F对象的本质是使用了数据库中的锁。 **<br>·········································</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> F<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>一个F对象代表数据库中某条记录的字段的信息(不直接取出来)</li>\n<li>作用：通常对数据库字段值在不获取的情况下进行操作，用于类属性之间的比较<br>  F(‘列名’)<br>  <strong>对数据库字段值在不获取的情况下进行操作</strong>：<br>  例：需求：将Book表中所有的market_price全部自增10。</li>\n</ul>\n<p>该需求原本只能通过循环取出每一个数据后+10再写入实现。</p>\n<p>Query的update方法必须结合F对象方法实现<br>使用F语句</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>market_price<span class=\"token operator\">=</span>F<span class=\"token punctuation\">(</span><span class=\"token string\">'market_price'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>用于类属性之间的比较</strong>：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>market_price_gt<span class=\"token operator\">=</span>F<span class=\"token punctuation\">(</span><span class=\"token string\">'price'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"Q对象\"><a href=\"#Q对象\" class=\"headerlink\" title=\"Q对象\"></a>Q对象</h3><p>用于进行逻辑或、逻辑非操作时使用</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">(</span>market_price_lt<span class=\"token operator\">=</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token operator\">|</span>Q<span class=\"token punctuation\">(</span>price_gt<span class=\"token operator\">=</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Q对象能够实现互相间的&amp;与,|或,<del>非,&amp;</del>与非等操作。</p>\n<h3 id=\"聚合查询\"><a href=\"#聚合查询\" class=\"headerlink\" title=\"聚合查询\"></a>聚合查询</h3><p>聚合查询是指对一个表中的一个字段的数据进行部分或全部进行统计查询。<br>分为整表聚合和分组聚合。</p>\n<ul>\n<li>整表聚合<br>  聚合函数需要导入</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>语法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">MyModel<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>aggregate<span class=\"token punctuation\">(</span>结果变量名（别名）<span class=\"token operator\">=</span>聚合函数<span class=\"token punctuation\">(</span><span class=\"token string\">'列'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>返回：字典</p>\n<ul>\n<li>分组聚合<br>  其实是为了实现Having语句<br>  通过计算查询结果中每一个对象所关联的对象集合，从而得出总计值，为查询集的每一项生成聚合</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">QuerySet<span class=\"token punctuation\">.</span>annotate<span class=\"token punctuation\">(</span>结果变量名（别名）<span class=\"token operator\">=</span>聚合函数<span class=\"token punctuation\">(</span><span class=\"token string\">'列'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>返回：QuerySet</p>\n<h3 id=\"原生数据库操作：\"><a href=\"#原生数据库操作：\" class=\"headerlink\" title=\"原生数据库操作：\"></a>原生数据库操作：</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token number\">1.</span>只用来查询：MyoModel<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">(</span>sql语句，拼接参数<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>返回值：RawQuerySet集合对象，不支持方法串联，只支持基本的循环等。</p>\n<p>SQL注入问题：<br>使用原生语句，使用拼接参数的方式进行查询能适当避免SQL注入问题。</p>\n<p>2.完全跨过模型类操作数据库</p>\n<ul>\n<li>导入</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> connection<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>用创建cursor类的构造函数创建cursor(游标)对象，为保证在出现异常时能够释放cursor，通常用with来创建操作</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> connection<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> cur<span class=\"token punctuation\">:</span>\n    cur<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token string\">'执行SQL语句'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'拼接参数'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"admin后台管理\"><a href=\"#admin后台管理\" class=\"headerlink\" title=\"admin后台管理\"></a>admin后台管理</h2><p>admin后台用于开发过程中调用和调试，django会搜集所有已注册的模型类，并为这些模型类提供数据管理界面。</p>\n<h3 id=\"后台的创建：\"><a href=\"#后台的创建：\" class=\"headerlink\" title=\"后台的创建：\"></a>后台的创建：</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">python manage<span class=\"token punctuation\">.</span>py createsuperuser<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"注册自定义模型类\"><a href=\"#注册自定义模型类\" class=\"headerlink\" title=\"注册自定义模型类\"></a>注册自定义模型类</h3><ul>\n<li>在应用的admin.py导入注册要管理的models类</li>\n<li>调用admin.site.register方法进行注册</li>\n</ul>\n<p>显示样式是按照models.py中__str__方法显示的。</p>\n<h3 id=\"模型管理器类\"><a href=\"#模型管理器类\" class=\"headerlink\" title=\"模型管理器类\"></a>模型管理器类</h3><p>作用：为后台管理界面添加便于操作的新功能<br>继承于django.contrib.admin里的ModelAdmin类</p>\n<ul>\n<li>在应用的admin.py定义模型管理器类</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">XXXXManager</span><span class=\"token punctuation\">(</span>admin<span class=\"token punctuation\">.</span>ModelAdmin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ……<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>绑定注册模型管理器和模型类,使用调用admin.site.register方法的第二个参数</li>\n</ul>\n<p>类属性：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">XXXXManager</span><span class=\"token punctuation\">(</span>admin<span class=\"token punctuation\">.</span>ModelAdmin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#表头</span>\n    list_display <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'price'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">#控制list_display哪些字段超链接进修改页</span>\n    list_display_links <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">#添加过滤器</span>\n    list_filter <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">#添加搜索框（模糊查询）</span>\n    search_fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">#添加可在列表页可编辑的字段，与</span>\n    <span class=\"token comment\">#list_display_links字段是互斥的</span>\n    list_editable <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'price'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"关系映射\"><a href=\"#关系映射\" class=\"headerlink\" title=\"关系映射\"></a>关系映射</h2><p>关系映射：一对一，一对多，多对多。</p>\n<h3 id=\"一对一映射\"><a href=\"#一对一映射\" class=\"headerlink\" title=\"一对一映射\"></a>一对一映射</h3><p>创建一对一外键：<br>语法：OneToOneField(类名, on_delete&#x3D;xxx(级联删除：在存在键的前提下的删除规则))<br>on_delete:</p>\n<ul>\n<li>models.CASCADE：级联删除，只是模拟SQL约束ON DELETE CASCADE，不影响Mysql设置。</li>\n<li>models.PROTECT:保护删除，等同于mysql默认的RESTRICT</li>\n<li>SET_NULL:保留关联数据，设置为NULL</li>\n<li>SET_DEFAULT:将外键设置为默认值。</li>\n</ul>\n<p>创建一对一数据<br>无外键的模型类，和之前相同<br>有外键的模型类：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>wife &#x3D; Wife.objects.create(name&#x3D;’王夫人’,author &#x3D; author1(类属性名称绑实例))<br>wife &#x3D; Wife.objects.create(name&#x3D;’王夫人’,author_id &#x3D; 1(类属性字段绑值))</p></blockquote>\n<p>一对一查询</p>\n<ul>\n<li>正向查询：从外键查对象</li>\n<li>反向查询：从对象查外键<br>  调用反向属性查询到关联的一方</li>\n</ul>\n<h3 id=\"一对多查询\"><a href=\"#一对多查询\" class=\"headerlink\" title=\"一对多查询\"></a>一对多查询</h3><p>核心：正向属性(authors)和反向属性(book_set)<br>在多表上设置外键，关联一表。</p>\n<p>创建一对多数据：<br>语法：Foreignkey(“一”的模型类, on_delete&#x3D;xxx(级联删除：在存在键的前提下的删除规则))</p>\n<p>添加数据：<br>先添加“一”，再添加“多”。<br>无外键的模型类，和之前相同<br>有外键的模型类：<br>类似上面</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>wife &#x3D; Wife.objects.create(name&#x3D;’王夫人’,author &#x3D; author1(类属性名称绑实例))<br>wife &#x3D; Wife.objects.create(name&#x3D;’王夫人’,author_id &#x3D; 1(类属性字段绑值))</p></blockquote>\n<p>查询数据：<br>正向查询（有显性属性的）：由book查出版社：book.publisher<br>反向查询(使用反向属性)：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>books &#x3D; pub1.book_set.all()<br>或books &#x3D; Book.objects.filter(publisher&#x3D;pub1)</p></blockquote>\n<h3 id=\"多对多映射\"><a href=\"#多对多映射\" class=\"headerlink\" title=\"多对多映射\"></a>多对多映射</h3><p>核心：正向属性(authors)和反向属性(book_set)<br>mysql中多对多需要用三张表实现<br>Django中无需手动创建第三张表，Django自动完成</p>\n<p>创建字段语法：属性 &#x3D; models.ManyToManyField(MyModel)</p>\n<p>创建数据：</p>\n<ul>\n<li>1.先创建Author，再关联book</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>author1 &#x3D; Author.objects.create(name&#x3D;’1’)<br>author2 &#x3D; Author.objects.create(name&#x3D;’2’)<br>book1 &#x3D; author1.book_set.create(title &#x3D; ‘1’)#创建<br>author2.book_set.add(book1)#绑定</p></blockquote>\n<ul>\n<li>2.先创建book,再关联author</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>book &#x3D; Book.objects.create(title&#x3D;’p1’)<br>author3 &#x3D; book.authors.create(name&#x3D;”3”)<br>book.authors.add(author1)</p></blockquote>\n<h2 id=\"Cookies和Session\"><a href=\"#Cookies和Session\" class=\"headerlink\" title=\"Cookies和Session\"></a>Cookies和Session</h2><h3 id=\"会话\"><a href=\"#会话\" class=\"headerlink\" title=\"会话\"></a>会话</h3><p>从打开浏览器访问一个网站，到关闭浏览器结束此次访问，称之为一次会话。<br>HTTP本身是无状态的，导致会话状态难以保持。</p>\n<h3 id=\"Cookies\"><a href=\"#Cookies\" class=\"headerlink\" title=\"Cookies\"></a>Cookies</h3><p>保存在客户端浏览器上的存储空间<br>特点：</p>\n<ul>\n<li>cookies在浏览器是以键值对的形式进行存储的，键和值都是以ASCII码的形式存储的</li>\n<li>存储的数据带有生命周期</li>\n<li>cookies的数据是按照域隔离的，不同的域之间无法访问</li>\n<li><strong>cookies的内部数据会在每次访问此网站时都会携带到服务器，如果cookies过大会影响访问速度。</strong></li>\n</ul>\n<p>存储<br>HttpResponse.set_cookie(key,value&#x3D;’’,max_age&#x3D;None,expires&#x3D;None)<br>-key:cookie的名字<br>-value：cookie的值<br>-max_age：存活相对时间，秒<br>-expires：具体过期时间<br>当不指定max_age和expires时，关闭浏览器时此数据失效。</p>\n<p>删除&amp;获取<br>获取：request.COOKIES<br>删除：request.delete_cookie(key)</p>\n<h3 id=\"session\"><a href=\"#session\" class=\"headerlink\" title=\"session\"></a>session</h3><p>会话保持-登录流程<br>用户登录-&gt;账号密码传至后端，服务器数据库验证，正确则发放cookie-&gt;后续浏览器将自动把当前域下的cookie都发送至服务器。但浏览器存储不是十分安全，因此引入了session。</p>\n<p>session技术实际将数据存在了服务器里，对于不同的浏览器有不同的存储空间，生成空间后，会将一个sessionID返还给浏览器，浏览器会将sessionID存储在Cookies，之后每次返还给服务器。</p>\n<p>session是在服务器上开辟一段空间用于保留浏览器和服务器交互时的重要数据。</p>\n<p>session初始配置：</p>\n<ul>\n<li>1.INSTALLED_APPS:django.contrib.sessions</li>\n<li>2.MIDDLEWARE:<br>  ‘django.contrib.sessions.middleware.SessionMiddleware’</li>\n</ul>\n<p>session的使用：<br>session对象是一个类似于字典的SessionStore类型的对象。</p>\n<ul>\n<li>保存session的值到服务器：<br>  request.session[‘KEY’] &#x3D; VALUE</li>\n<li>获取session的值<br>  value &#x3D; request.session[‘KEY’]<br>  value &#x3D; request.session.get(‘KEY’,默认值)</li>\n<li>删除session<br>  del request.session[‘KEY’]</li>\n</ul>\n<p>干预session时间：settings.py里的SESSION_COOKIE_AGE指定cookies中的保存时间，默认两周<br>SESSION_EXPIRE_AT_BROWSER_CLOSE &#x3D; True,关闭浏览器自动清除session，默认False<br>SESSION的数据在Django中保存在数据库中，因此需要保证已经执行过了migrate</p>\n<p>Django session的问题：</p>\n<ul>\n<li>1.django session的表是单表设计，且该表数据量不会自动清理，哪怕是已经过期。</li>\n<li>2.可以每晚执行python manage.py clearsessions，会自动删除已经过期的session数据。</li>\n</ul>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p><strong>定义</strong>：缓存是一类可以更快的读取数据的介质统称，也指其他可以加快数据读取的存储方式。一般用来存储临时数据，常用介质的是读取速度很快的内存。<br><strong>意义</strong>：视图渲染有一定成本，数据库的频繁查询过高；所以对于低频变动的页面可以考虑使用缓存技术，减少实际渲染次数；用户拿到响应的时间成本会更低。<br><strong>场景</strong>：1.博客列表页；2.电商商品详情页<br>场景特点：数据变动频率较少</p>\n<h3 id=\"Django中设置缓存：-settings-py\"><a href=\"#Django中设置缓存：-settings-py\" class=\"headerlink\" title=\"Django中设置缓存：(settings.py)\"></a>Django中设置缓存：(settings.py)</h3><ul>\n<li>数据库缓存：将缓存存储在数据库中，尽管存储介质还是数据库，但把一次复杂查询的结果直接存储在表里，可避免重复进行复杂查询，提升效率。</li>\n</ul>\n<p>配置方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">CACHES<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">'default'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">'BACKEND'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'django.core.cache.backends.db.DatabaseCache'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">#引擎</span>\n        <span class=\"token string\">'LOCATION'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'my_cache_table'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">#指定用于缓存的表</span>\n        <span class=\"token string\">'TIMEOUT'</span><span class=\"token punctuation\">:</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token comment\">#缓存时间</span>\n        <span class=\"token string\">'OPTIONS'</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token string\">'MAX_ENTRIES'</span><span class=\"token punctuation\">:</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token comment\">#最大存储条数</span>\n            <span class=\"token string\">'CULL_FREQUENCY'</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token comment\">#缓存条数达到最大值时，删除1/x的数据</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>缓存到服务器内存中<br>  配置方法：</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">CACHES<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n    default<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">'BACKEND'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'django.core.cache.backends.locmem.LocMemCache'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">#引擎</span>\n        <span class=\"token string\">'LOCATION'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'unique-snowflake'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">#雪花算法内存寻址</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>将缓存数据存储到本地文件中<br>  配置方法：</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">CACHES<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n    default<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">'BACKEND'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'django.core.cache.backends.filebased.FileBasedCache'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">#引擎</span>\n        <span class=\"token string\">'LOCATION'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'/var/tmp/django_cache'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">#存储路径</span>\n        <span class=\"token comment\"># win'c:\\test\\cache'</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"整体缓存策略\"><a href=\"#整体缓存策略\" class=\"headerlink\" title=\"整体缓存策略\"></a>整体缓存策略</h3><ul>\n<li>视图函数中<br>  django还是使用了装饰器来实现缓存逻辑</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>decorators<span class=\"token punctuation\">.</span>cache <span class=\"token keyword\">import</span> cache_page\n<span class=\"token decorator annotation punctuation\">@cache_page</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token comment\"># 单位秒</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">my_view</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>路由中<br>  一个道理，在进入视图函数前首先使用装饰器。换个地方写而已。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>decorators<span class=\"token punctuation\">.</span>cache <span class=\"token keyword\">import</span> cache_page\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'foo/'</span><span class=\"token punctuation\">,</span>cache_page<span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>my_view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用简单粗暴，但是无法控制。</p>\n<h3 id=\"局部缓存策略\"><a href=\"#局部缓存策略\" class=\"headerlink\" title=\"局部缓存策略\"></a>局部缓存策略</h3><p>相较于整体缓存更加灵活，复用性更好。<br>缓存api的使用：</p>\n<ul>\n<li>方式1：使用caches[‘CACHE配置key’]导入具体对象</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>caches <span class=\"token keyword\">import</span> caches\ncache1 <span class=\"token operator\">=</span> caches<span class=\"token punctuation\">[</span><span class=\"token string\">'myalias'</span><span class=\"token punctuation\">]</span>\ncache2 <span class=\"token operator\">=</span> caches<span class=\"token punctuation\">[</span><span class=\"token string\">'myalias_2'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>方式2</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">直接调用CACHE中的default值。相当于<span class=\"token number\">1</span>中的\ncache <span class=\"token operator\">=</span> caches<span class=\"token punctuation\">[</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>caches <span class=\"token keyword\">import</span> cache<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>缓存api：</p>\n<ul>\n<li>1.cache.set(key,value,timeout)-存储缓存<br>  key:缓存的key，字符串类型<br>  value:python对象<br>  timeout：缓存存储时间，默认为CACHES中的TIMEOUT值<br>  返回值：None</li>\n<li>2.cacahe.get(key)-获取缓存<br>  key：缓存的key<br>  返回值，key的对应值，没有则返回None</li>\n<li>3.cache.add(key,value)-存储缓存，只在key不存在的时候生效<br>  返回值：True或False</li>\n<li>4.cache.get_or_set(key,value,timeout)</li>\n<li>5.cache.set_many(dict,timeout)</li>\n<li>6.cache.get_many(key_list)</li>\n<li>7.cache.delete(key)</li>\n<li>8.cache.delete_many(key_list)</li>\n</ul>\n<h3 id=\"浏览器缓存策略-强缓存\"><a href=\"#浏览器缓存策略-强缓存\" class=\"headerlink\" title=\"浏览器缓存策略-强缓存\"></a>浏览器缓存策略-强缓存</h3><p>不会向服务器发送请求，直接从缓存中读取资源</p>\n<ul>\n<li>1.响应头-Expires：定义缓存过期时间，是服务器端的具体的时间点<br>  样例：Expires:Thu,02 Apr 2030 05:14:08 GMT</li>\n<li>2.响应头-Cache-Control<br>  ‘Cache-Control:max-age&#x3D;120’120秒后缓存失效<br>  说明：目前服务器都会带着这两个头同时响应给浏览器，浏览器优先使用Cache-Control<br>  cache-page整体缓存自带强缓存功能</li>\n</ul>\n<h3 id=\"浏览器缓存策略-协商缓存\"><a href=\"#浏览器缓存策略-协商缓存\" class=\"headerlink\" title=\"浏览器缓存策略-协商缓存\"></a>浏览器缓存策略-协商缓存</h3><p>强缓存的对象是一些静态文件、大图片等，考虑到这类资源比较费带宽且不易变化，强缓存到期后，浏览器会根服务器进行协商，当前缓存是否可用，如果可用，服务器不必返回数据，浏览器继续使用原来缓存的数据，如果文件不可用，则返回最新数据。</p>\n<ul>\n<li>1.Last-Modified响应头：文件的最近修改时间，同时告诉服务器到期后协商</li>\n<li>2.If-Modified-Since请求头，浏览器向服务器请求协商，如果资源未发生变化，则返回304（响应体为空），否则返回200代表缓存不可用（响应体为最新资源）</li>\n</ul>\n<p>上述的两个头仅通过精确到秒的时间来判断缓存是否有效，不是特别精准，后来HTTP又引入了新的缓存头：</p>\n<ul>\n<li>3.Etag响应头：返回当前资源的唯一标识（由服务器生成），只要资源变化，Etag就会重新生成</li>\n<li>4.缓存到期，浏览器返回If-None-Match请求头，给服务器请求协商，服务器比对文件标识，不一致则认为资源不可用。</li>\n</ul>\n<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h2><ul>\n<li>中间件是请求&#x2F;响应的钩子框架，用于全局改变Django的输入和输出。</li>\n<li>中间件以类的形式体现</li>\n<li>每个中间件负责一些特定的功能</li>\n</ul>\n<h3 id=\"中间件方法\"><a href=\"#中间件方法\" class=\"headerlink\" title=\"中间件方法\"></a>中间件方法</h3><p>继承django.utils.deprecation.MiddlewareMixin类<br>中间件类须实现下列五个方法中的一个或多个：</p>\n<ul>\n<li>process_request(self,request)<br>  执行路由之前被调用，在每个请求上调用，只能返回None或HttpResponse对象，None则通过。</li>\n<li>process_view(self,request,callback,callback_args,callback_kwargs)<br>  在视图之前调用，在每个请求上调用，返回None或HttpResponse对象。</li>\n<li>process_response(self,request,response)<br>  在响应返回浏览器被调用，在每个请求调用，返回HttpResponse对象。</li>\n<li>process_exception(self,request,exception)<br>  当处理过程中抛出异常时调用，返回一个HttpResponse对象。用来统一抓所有视图函数的异常。</li>\n<li>process_template_response(self,request,response)<br>  在响应中包含render方法时被调用，该方法返回二次封装后的render响应对象。</li>\n</ul>\n<p>中间件中的大部分方法返回None则表示进入下一项时间，返回HttpResponse则被拦截。</p>\n<h3 id=\"编写中间件\"><a href=\"#编写中间件\" class=\"headerlink\" title=\"编写中间件\"></a>编写中间件</h3><ul>\n<li>1.注册中间件settngs.py-MIDDLEWARE</li>\n<li>2.建立中间件包，编写中间件’</li>\n</ul>\n<p>中间件的执行顺序<br>先由上到下，在进入视图后变为由下至上<br><img src=\"https://cdn.jsdelivr.net/gh/wkif/ImageHosting/video/20210805152039.jpeg\" alt=\"Django工作流程图片\"></p>\n<h2 id=\"CSRF-跨站伪造请求攻击\"><a href=\"#CSRF-跨站伪造请求攻击\" class=\"headerlink\" title=\"CSRF - 跨站伪造请求攻击\"></a>CSRF - 跨站伪造请求攻击</h2><p>利用Cookies自动提交功能，同时利用了form表单及一些html控件的跨域提交。</p>\n<p>django的防御机制：页面和COOKIE都有一个暗号，只有两个暗号同时发送到服务器并且能够匹配，才允许POST。<br>配置步骤：</p>\n<ul>\n<li><p>保证django.middleware.csrf.CsrfViewMiddleware打开</p>\n</li>\n<li><p>模板中，form标签下添加如下标签：</p>\n  <pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;% csrf_token %&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<p>当个别视图不需要django进行csrf保护可以用装饰器关闭对此视图的检查</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views<span class=\"token punctuation\">.</span>decorators<span class=\"token punctuation\">.</span>csrf <span class=\"token keyword\">import</span> csrf_exempt\n\n<span class=\"token decorator annotation punctuation\">@csrf_exempt</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">my_view</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> …<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h2><p>分页指在web页面有大量数据需要显示，为了阅读方便在每个页中只显示部分数据。</p>\n<p>优点：</p>\n<ul>\n<li><ol>\n<li>方便阅读</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>减少数据提取量，减轻服务器压力。</li>\n</ol>\n</li>\n</ul>\n<p>Django提供了Paginator类可以方便的实现分页功能<br>Paginator类位于’django.core.paginator’模块中</p>\n<h3 id=\"paginator对象\"><a href=\"#paginator对象\" class=\"headerlink\" title=\"paginator对象\"></a>paginator对象</h3><p>负责分页数据整体的管理</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>pagenator &#x3D; Paginator(object_list,per_page)</p></blockquote>\n<ul>\n<li>object_list 需要分页数据的对象列表，如QuerySet</li>\n<li>per_page 分页数据个数</li>\n<li>返回值：Paginator对象</li>\n</ul>\n<p>Paginator对象属性</p>\n<ul>\n<li>count：需要分页的数据对象总数</li>\n<li>num_pages:分页后的页面总数</li>\n<li>page_range：从1开始的range对象，用于记录当前页码数</li>\n<li>per_page：每页数据个数</li>\n</ul>\n<p>Paginator方法<br>paginator对象.page(number)<br>    -参数number为页码信息(从1开始)<br>    -返回当前number页对应的页信息<br>    -如果提供的页码不存在，抛出InvalidPage异常，包含两种异常子类-PageNotInteger页码不是整数和-EmptyPage页码超页</p>\n<h3 id=\"page对象\"><a href=\"#page对象\" class=\"headerlink\" title=\"page对象\"></a>page对象</h3><p>Paginator对象的page()方法返回Page对象<br>page &#x3D; paginator.page(页码)</p>\n<p>page对象属性：</p>\n<ul>\n<li>object_list：当前页上所有数据对象的列表</li>\n<li>number:当前页面的序号，从1开始</li>\n<li>paginator：当前page对象相关的Paginator对象</li>\n</ul>\n<p>Page对象方法： </p>\n<ul>\n<li>has_next():如果有下一页返回True</li>\n<li>next_page_number():下一页页码，如果下一页不存在，抛出InvalidPage异常</li>\n<li>has_previous:如果有上一页返回True</li>\n<li>previous_page_number():返回上一页的页码，如果上一页不存在，抛出InvalidPage异常。</li>\n<li>has_other_pages：如果有上一页或者有下一页返回True</li>\n</ul>\n<h2 id=\"csv文件\"><a href=\"#csv文件\" class=\"headerlink\" title=\"csv文件\"></a>csv文件</h2><ul>\n<li>csv文件：逗号分隔值文件，其文件以纯文本形式存储表格数据（数字或文本）<br>  说明：可被常见制表工具，如excel等直接进行读取</li>\n</ul>\n<h3 id=\"python中生成csv文件\"><a href=\"#python中生成csv文件\" class=\"headerlink\" title=\"python中生成csv文件\"></a>python中生成csv文件</h3><p>python提供了内建库 -csv；可直接通过该库操作csv文件。<br>案例：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> csv\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'eggs.csv'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> newline<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> csvfile<span class=\"token punctuation\">:</span><span class=\"token comment\"># newline指文件输出时换行符怎么处理，空字符串将不会转义</span>\n    writer <span class=\"token operator\">=</span> csv<span class=\"token punctuation\">.</span>writer<span class=\"token punctuation\">(</span>csvfile<span class=\"token punctuation\">)</span>\n    writer<span class=\"token punctuation\">.</span>writerow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"csv文件下载\"><a href=\"#csv文件下载\" class=\"headerlink\" title=\"csv文件下载\"></a>csv文件下载</h3><p>在网站中实现下载csv，注意如下：</p>\n<ul>\n<li>响应Content-Type类型需修改为text&#x2F;csv。这告诉浏览器该文档是CSV文件，而不是HTML文件</li>\n<li>响应为额外添加一个Content-Disposition标头，其中包含CSV文件的名称，它将被浏览器用于开启”另存为”对话框。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> csv\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpResponse\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Book\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">make_csv_view</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> HttpResponse<span class=\"token punctuation\">(</span>content_type <span class=\"token operator\">=</span> <span class=\"token string\">'text/csv'</span><span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Disposition'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'attachment;filename = \"mybook.csv\"'</span>\n    all_book <span class=\"token operator\">=</span> Book<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    writer <span class=\"token operator\">=</span> csv<span class=\"token punctuation\">.</span>writer<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n    writer<span class=\"token punctuation\">.</span>writerow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> b <span class=\"token keyword\">in</span> all_book<span class=\"token punctuation\">:</span>\n        writer<span class=\"token punctuation\">.</span>writerow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> response<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"内建用户系统\"><a href=\"#内建用户系统\" class=\"headerlink\" title=\"内建用户系统\"></a>内建用户系统</h2><p>模型类位置<br>from django.contrib.auth.models import User<br>（mysql中auth_user表）<br>字段（属性）：</p>\n<ul>\n<li>username 用户名</li>\n<li>password 密码</li>\n<li>email 邮箱</li>\n<li>first_name 名</li>\n<li>last_name 姓</li>\n<li>is_superuser 是否为超级用户</li>\n<li>is_staff 是否为内部员工</li>\n<li>is_active 伪删除</li>\n<li>last_login 上次登陆时间</li>\n<li>date_joined 用户创建时间</li>\n</ul>\n<p>命令：</p>\n<ul>\n<li>1.创建普通用户create_user,主要是需要处理密码，将自动转化密码为hash值。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> User\nuser <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create_user<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">\"用户名\"</span><span class=\"token punctuation\">,</span>password<span class=\"token operator\">=</span><span class=\"token string\">\"密码\"</span><span class=\"token punctuation\">,</span>email<span class=\"token operator\">=</span><span class=\"token string\">\"邮箱\"</span><span class=\"token punctuation\">,</span>…<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>2.创建超级用户create_superuser</p>\n</li>\n<li><p>3.删除用户(伪删除，更新操作)</p>\n</li>\n<li><p>4.校验密码</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth <span class=\"token keyword\">import</span> authenticate\n\nuser <span class=\"token operator\">=</span> authenticate<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>username<span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span>password<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果用户名密码校验成功则返回用户对象，否则返回None</p>\n<ul>\n<li><p>5.修改密码set_password</p>\n</li>\n<li><p>6.登录状态保持<br>  只存session，且时间不可控</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth <span class=\"token keyword\">import</span> login\n<span class=\"token keyword\">def</span> <span class=\"token function\">login_view</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>：\n    user <span class=\"token operator\">=</span> authenticate<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>username<span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span>password<span class=\"token punctuation\">)</span>\n    login<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>user<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>7.登录状态校验</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>decorators <span class=\"token keyword\">import</span> login_required\n<span class=\"token decorator annotation punctuation\">@login_required</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">index_view</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    login_user <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>user<span class=\"token comment\">#直接能拿到usert对象</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>8.登录状态取消</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth <span class=\"token keyword\">import</span> logout\n<span class=\"token keyword\">def</span> <span class=\"token function\">logout_view</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    logout<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>内建用户表-扩展字段</strong><br>方案1:通过建立细腻哦啊，和内建表做1对1映射<br>方案2：继承抽象user模型类<br>方案2步骤：</p>\n<ul>\n<li>1.添加应用</li>\n<li>2.定义模型类，继承AbastractUser</li>\n<li>3.settings.py中指明AUTH USER MODEL &#x3D; ‘应用名.类名’</li>\n</ul>\n<p><strong>！！注意：此操作需要在第一次migrate之前进行！！</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> AbstractUser\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserInfo</span><span class=\"token punctuation\">(</span>Abstractuser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    phone <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> default <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在settings.py里面添加配置：<br>AUTH_USER_MODEL &#x3D; ‘user.UserInfo’</p>\n<p>添加用户<br>from user.models import UserInfo</p>\n<p>UserInfo.objects.create_user(username&#x3D;……,phone&#x3D;’’)</p>\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><p>定义：用户可以通过浏览器将图片等文件传至网站<br>场景：</p>\n<ul>\n<li>上传头像</li>\n<li>上传流程性的文件</li>\n</ul>\n<h3 id=\"上传规范-前端\"><a href=\"#上传规范-前端\" class=\"headerlink\" title=\"上传规范-前端\"></a>上传规范-前端</h3><p>上传必须为POST提交方式<br>表单’&lt;\\form&gt;’中文件上传时必须有带有enctype&#x3D;’multipart&#x2F;form-data’时才会包含文件内容数据。<br>表单中用&lt;input type &#x3D; ‘files’ name&#x3D;’xxx’&gt;标签上传文件</p>\n<h3 id=\"上传规范-后端\"><a href=\"#上传规范-后端\" class=\"headerlink\" title=\"上传规范-后端\"></a>上传规范-后端</h3><p>视图函数中，需要用request.FILES取文件框的内容<br>file&#x3D;request.FILES[‘xxx’]<br>说明：</p>\n<ul>\n<li>1.FILES的key对应页面中file框的name值</li>\n<li>2.file绑定文件流对象</li>\n<li>3.file.name文件名</li>\n<li>4.file.file文件的字节流数据</li>\n</ul>\n<p>配置文件的访问路径和存储路径<br>在settings.py中设置MEDIA相关配置，Django将用户上传的文件统称为media资源</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">MEDIA_URL<span class=\"token operator\">=</span><span class=\"token string\">'/media/'</span>\nMEDIA_ROOT <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'media'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>同时MEDIA_URL和MEDIA_ROOT还需要手动绑定：在主路由添加：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>conf <span class=\"token keyword\">import</span> settings\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>urls<span class=\"token punctuation\">.</span>static <span class=\"token keyword\">import</span> static\nurlpatterns <span class=\"token operator\">+=</span> static<span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>MEDIA_URL<span class=\"token punctuation\">,</span>document_root<span class=\"token operator\">=</span>settings<span class=\"token punctuation\">.</span>MEDIA_ROOT<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>等价于做了MEDIA_URL开头的路由，Django接到该特征请求后去MEDIA_ROOT路径查找资源</p>\n<p>文件写入：</p>\n<ul>\n<li>1.open方法<br>  可能出现文件名称的重名问题</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 在视图函数POST中</span>\na_file <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>FILES<span class=\"token punctuation\">[</span><span class=\"token string\">'myfile'</span><span class=\"token punctuation\">]</span>\nfileadd <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>MEDIA_ROOT<span class=\"token punctuation\">,</span>afile<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span><span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> afile<span class=\"token punctuation\">.</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span> HttpResponse<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>2.借助ORM<br>  字段FileField(upload &#x3D; ‘子目录名’)<br>  建表时增加一个字段即可，实际收到后直接在视图函数中将绑定文件流对象扔给对应字段即可</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">Content<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>desc <span class=\"token operator\">=</span> title<span class=\"token punctuation\">,</span> content <span class=\"token operator\">=</span> a_file<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>该方法若文件名重复则django将自动添加后缀</p>\n<h2 id=\"django发送邮件\"><a href=\"#django发送邮件\" class=\"headerlink\" title=\"django发送邮件\"></a>django发送邮件</h2><p>业务场景：</p>\n<ul>\n<li>业务报警</li>\n<li>邮件验证</li>\n<li>密码找回</li>\n</ul>\n<h3 id=\"邮件相关协议\"><a href=\"#邮件相关协议\" class=\"headerlink\" title=\"邮件相关协议\"></a>邮件相关协议</h3><ul>\n<li><p>SMTP：Simple Mail Transfer Protocol，简单邮件传输协议（port：25）<br>  负责邮件的发送，属于“推送”协议</p>\n</li>\n<li><p>IMAP：Internet Mail Access Protocol，交互式邮件访问协议，应用层协议（port：143）<br>  负责本地邮件客户端访问远程服务器上的邮件，属于“拉取”协议</p>\n</li>\n<li><p>POP3：Post Office Protocol3：邮局协议第3个版本，是TCP&#x2F;IP协议族中的一员（port：110）<br>  本协议主要用于支持使用客户端远程管理在服务器上的电子邮件，同样属于“拉取”协议。</p>\n</li>\n</ul>\n<p><strong>IMAP VS POP3:</strong></p>\n<ul>\n<li>两者均为“拉取”协议，负责从邮件服务器中下载邮件</li>\n<li>IMAP支持摘要浏览功能，并且是双向协议，客户端操作可以反馈给服务器</li>\n<li>POP3必须下载全部邮件，且为单向协议，客户端操作无法同步服务器。</li>\n</ul>\n<h3 id=\"Django发邮件\"><a href=\"#Django发邮件\" class=\"headerlink\" title=\"Django发邮件\"></a>Django发邮件</h3><p>Django中配置邮件功能，主要为SMTP协议，负责发邮件<br>原理：</p>\n<ul>\n<li>给Django授权一个邮箱</li>\n<li>Django用该邮箱给对应收件人发送邮件</li>\n<li>django.core.mail封装了电子邮件的自动发送SMTP协议</li>\n</ul>\n<p>授权：</p>\n<ul>\n<li>邮箱端修改<br>  开启SMTP相关的功能，获得授权码。</li>\n<li>Django修改(settings.py添加)</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">EMAIL_BACKEND <span class=\"token operator\">=</span> <span class=\"token string\">'django.core.mail.backends.smtp.EmailBackend'</span><span class=\"token comment\"># 引擎：写死</span>\nEMAIL_HOST <span class=\"token operator\">=</span> <span class=\"token string\">'smtp.qq.com'</span><span class=\"token comment\"># 腾讯qq邮箱的SMTP服务器地址</span>\nEMAIL_PORT <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token comment\"># 默认25</span>\nEMAIL_HOST_USER <span class=\"token operator\">=</span> <span class=\"token string\">'xxxx@qq.com'</span>\nEMAIL_HOST_PASSWORD <span class=\"token operator\">=</span> <span class=\"token string\">'*******'</span><span class=\"token comment\"># 指的是授权码</span>\nEMAIL_USE_TLS <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span> <span class=\"token comment\"># 与SMTP服务器通讯时，是否启动TLS连接（安全链接）默认为False，安全协议比较耗时</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>发送：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core <span class=\"token keyword\">import</span> mail\nmail<span class=\"token punctuation\">.</span>send_mail<span class=\"token punctuation\">(</span>\n    subject<span class=\"token punctuation\">,</span>\n    message<span class=\"token punctuation\">,</span>\n    from_email<span class=\"token punctuation\">,</span><span class=\"token comment\"># 发送邮箱</span>\n    recipient_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'xxx@qq.com'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token comment\"># 接受者邮箱列表</span>\n<span class=\"token punctuation\">)</span>\n返回<span class=\"token number\">1</span>则成功发送<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过中间件可以捕获所有视图函数的异常，并发送到指定邮箱<br>process_exception(self,request,exception)<br>定位错误位置：异常追溯</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> traceback\ntraceback<span class=\"token punctuation\">.</span>format_exc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\"># 直接获得错误具体位置及出错信息</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>邮箱里可以直接发送traceback.format_exc()</p>\n<p>自定义收件人：<br>在settings里自定义属性，在调用send_mail位置</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>conf <span class=\"token keyword\">import</span> settings\nrecipient_list <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>自定义属性<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"项目部署\"><a href=\"#项目部署\" class=\"headerlink\" title=\"项目部署\"></a>项目部署</h2><p>在软件开发完毕后，将开发机器上运行的软件实际安装到服务器上进行长期运行</p>\n<ol>\n<li>安装机器上安装和配置同版本的环境[py,数据库等]</li>\n<li>django项目迁移，第三方工具：finalshare等<br> ubuntu直接用scp命令<br> sudo scp 需要复制文件路径 远程ip:路径</li>\n<li>用uWSGI替代python manage.py runserver方法</li>\n<li>配置nginx反向代理服务器</li>\n<li>用nginx配置静态文件路径，解决静态路径问题</li>\n</ol>\n<h3 id=\"uWSGI\"><a href=\"#uWSGI\" class=\"headerlink\" title=\"uWSGI\"></a>uWSGI</h3><p>WSGI：Web Server Gateway Interface，Web服务器网关接口，是Pyhton应用程序或框架和Web服务器之间的一种接口。<br>uWSGI：WSGI的一种，实现了http协议、WSGI协议、uwsgi协议等多种协议。在python web圈热度极高，主要以学习配置为主。</p>\n<p>uWSGI安装<br>pip命令可以安装<br>[ubuntu验证安装]:sudo pip3 freeze|grep -i ‘uwsgi’<br>[ubuntu安装]:sudo pip3 install uwsgi&#x3D;&#x3D;2.0.18 -i <a href=\"https://pypi.tuna.tsinghua.edu.cn/simple/\">https://pypi.tuna.tsinghua.edu.cn/simple/</a></p>\n<p>配置uWSGI:</p>\n<ul>\n<li>项目同名文件夹&#x2F;uwsgi.ini</li>\n</ul>\n<p>如mysite1&#x2F;mysite1&#x2F;uwsgi.ini<br>文件以[uwsgi]开头，有如下配置项：</p>\n<ul>\n<li>1监听端口<br>  套接字方式的IP地址：端口号[此模式需要有nginx]<br>  socket&#x3D;127.0.0.1:8000<br>  Http通信凡是的IP地址：端口号<br>  http&#x3D;127.0.0.1:8000</li>\n<li>2项目当前工作目录<br>  chdir&#x3D;<strong>绝对路径</strong></li>\n<li>3项目中wsgi.py文件目录，相对于当前工作目录<br>  wsgi-file&#x3D;<strong>相对路径</strong></li>\n<li>4进程个数(最多为cpu核数)<br>  process&#x3D;4</li>\n<li>5每个进程的线程个数<br>  threads&#x3D;2</li>\n<li>6服务的pid记录文件<br>  pidfile&#x3D;uwsgi.pid</li>\n<li>7服务的日志文件位置(后台启动以及所有日志位置)<br>  daemonize&#x3D;uwsgi.log</li>\n<li>8开启主进程管理模式<br>  master&#x3D;true</li>\n</ul>\n","text":"基本介绍Django 是一个由 Python 编写的一个开放源代码的 Web 应用框架。 使用 Django，只要很少的代码，Python 的程序开发人员就可以轻松地完成一个正式网站所需要的大部分内容，并进一步开发出全功能的 Web 服务 Django 本身基于 MVC 模型，即...","link":"","photos":[],"count_time":{"symbolsCount":"31k","symbolsTime":"28 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":23,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"Django","slug":"Django","count":1,"path":"api/tags/Django.json"},{"name":"Python","slug":"Python","count":1,"path":"api/tags/Python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">基本介绍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">特点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MVC-%E4%B8%8E-MTV%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">MVC 与 MTV模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MVC-%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">MVC 模型</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MTV-%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">MTV 模型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">创建项目</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">使用命令行创建项目</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE-1\"><span class=\"toc-text\">创建项目</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1%EF%BC%88%E6%B5%8B%E8%AF%95%E7%94%A8%EF%BC%8C%E5%89%8D%E5%8F%B0%E5%90%AF%E5%8A%A8%EF%BC%89\"><span class=\"toc-text\">启动服务（测试用，前台启动）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%97%AD%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">关闭服务</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">启动应用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E7%9A%84%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">列出所有的命令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">生成数据库迁移文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB\"><span class=\"toc-text\">执行数据库迁移</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E5%85%A5-Django-Shell\"><span class=\"toc-text\">进入 Django Shell</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAadmin\"><span class=\"toc-text\">创建admin</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B8%85%E7%90%86%E5%B7%B2%E8%BF%87%E6%9C%9FSessions\"><span class=\"toc-text\">清理已过期Sessions</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90requirements-txt%EF%BC%9B\"><span class=\"toc-text\">生成requirements.txt；</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%86%85%E5%AD%98%E8%A1%A8\"><span class=\"toc-text\">创建内存表</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#settings-py\"><span class=\"toc-text\">settings.py</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#URL\"><span class=\"toc-text\">URL</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%86%E5%9B%BE%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">视图函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">路由配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HTTP%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">HTTP请求</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82-x2F-%E5%93%8D%E5%BA%94\"><span class=\"toc-text\">请求&#x2F;响应</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#GET%E8%AF%B7%E6%B1%82%E5%92%8CPOST%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">GET请求和POST请求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CSRF%E9%AA%8C%E8%AF%81%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">CSRF验证问题</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Django%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">Django的设计模式</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Django%E6%A8%A1%E6%9D%BF%E5%B1%82\"><span class=\"toc-text\">Django模板层</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E6%9D%BF%E5%B1%82%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">模板层创建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">模板的变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E6%9D%BF%E5%B1%82%E7%9A%84%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">模板层的标签</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E6%9D%BF%E5%B1%82%E8%BF%87%E6%BB%A4%E5%99%A8\"><span class=\"toc-text\">模板层过滤器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E6%9D%BF%E7%9A%84%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">模板的继承</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#url%E5%8F%8D%E5%90%91%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">url反向解析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">静态文件</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">应用创建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">分布式路由</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E4%B8%8B%E7%9A%84%E6%A8%A1%E6%9D%BF\"><span class=\"toc-text\">应用下的模板</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9E%8B%E5%B1%82%E5%8F%8AORM%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">模型层及ORM介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ORM%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">ORM框架</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9E%8B%E7%B1%BB\"><span class=\"toc-text\">模型类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9E%8B%E7%B1%BB-%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B%EF%BC%9A\"><span class=\"toc-text\">模型类-字段类型：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9E%8B%E7%B1%BB-%E5%AD%97%E6%AE%B5%E9%80%89%E9%A1%B9%EF%BC%9A\"><span class=\"toc-text\">模型类-字段选项：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9E%8B%E7%B1%BB-Meta%E5%86%85%E9%83%A8%E7%B1%BB\"><span class=\"toc-text\">模型类-Meta内部类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ORM-%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">ORM-创建数据</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ORM\"><span class=\"toc-text\">ORM</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">查询操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2%E8%B0%93%E8%AF%8D\"><span class=\"toc-text\">查询谓词</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%96%B0%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">更新操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">删除操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#F%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">F对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Q%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">Q对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">聚合查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%94%9F%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%EF%BC%9A\"><span class=\"toc-text\">原生数据库操作：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#admin%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">admin后台管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%8E%E5%8F%B0%E7%9A%84%E5%88%9B%E5%BB%BA%EF%BC%9A\"><span class=\"toc-text\">后台的创建：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E5%86%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9E%8B%E7%B1%BB\"><span class=\"toc-text\">注册自定义模型类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9E%8B%E7%AE%A1%E7%90%86%E5%99%A8%E7%B1%BB\"><span class=\"toc-text\">模型管理器类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">关系映射</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E5%AF%B9%E4%B8%80%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">一对一映射</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">一对多查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">多对多映射</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Cookies%E5%92%8CSession\"><span class=\"toc-text\">Cookies和Session</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%9A%E8%AF%9D\"><span class=\"toc-text\">会话</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Cookies\"><span class=\"toc-text\">Cookies</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#session\"><span class=\"toc-text\">session</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">缓存</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Django%E4%B8%AD%E8%AE%BE%E7%BD%AE%E7%BC%93%E5%AD%98%EF%BC%9A-settings-py\"><span class=\"toc-text\">Django中设置缓存：(settings.py)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B4%E4%BD%93%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">整体缓存策略</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">局部缓存策略</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5-%E5%BC%BA%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">浏览器缓存策略-强缓存</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5-%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">浏览器缓存策略-协商缓存</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">中间件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">中间件方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">编写中间件</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CSRF-%E8%B7%A8%E7%AB%99%E4%BC%AA%E9%80%A0%E8%AF%B7%E6%B1%82%E6%94%BB%E5%87%BB\"><span class=\"toc-text\">CSRF - 跨站伪造请求攻击</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E9%A1%B5\"><span class=\"toc-text\">分页</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#paginator%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">paginator对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#page%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">page对象</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#csv%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">csv文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#python%E4%B8%AD%E7%94%9F%E6%88%90csv%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">python中生成csv文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#csv%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD\"><span class=\"toc-text\">csv文件下载</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%BB%BA%E7%94%A8%E6%88%B7%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">内建用户系统</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0\"><span class=\"toc-text\">文件上传</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8A%E4%BC%A0%E8%A7%84%E8%8C%83-%E5%89%8D%E7%AB%AF\"><span class=\"toc-text\">上传规范-前端</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8A%E4%BC%A0%E8%A7%84%E8%8C%83-%E5%90%8E%E7%AB%AF\"><span class=\"toc-text\">上传规范-后端</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#django%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6\"><span class=\"toc-text\">django发送邮件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%82%AE%E4%BB%B6%E7%9B%B8%E5%85%B3%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">邮件相关协议</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Django%E5%8F%91%E9%82%AE%E4%BB%B6\"><span class=\"toc-text\">Django发邮件</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">项目部署</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#uWSGI\"><span class=\"toc-text\">uWSGI</span></a></li></ol>","author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"计算机网络--重传时间计算","uid":"e70ac243ed96ebe126ae5c93419396bc","slug":"计算机网络-重传时间计算","date":"2021-06-22T05:48:00.000Z","updated":"2022-03-30T16:05:12.921Z","comments":true,"path":"api/articles/计算机网络-重传时间计算.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforhexo/202203310005647.png","text":"我们都知道，TCP发送方在规定时间内没有收到确认就要重传已发送的报文段（里面有一个超时计数器），这个逻辑很简单，但是这个超时计数器的值每次都是不一样的，也就是说：重传时间的选择是不一样的，它是如何确定的呢？？？ TCP下层是互联网环境，发送的报文段可能只经过一个高速率的局域网，也...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":23,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"计算机网络","slug":"计算机网络","count":2,"path":"api/tags/计算机网络.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}},"next_post":{"title":"微信小程序云开发实现图片的上传、存储、访问","uid":"f5218906270dc804bb69eb4b82ceca1a","slug":"微信小程序云开发实现图片的上传、存储、访问","date":"2021-04-10T13:36:00.000Z","updated":"2022-04-24T08:02:42.189Z","comments":true,"path":"api/articles/微信小程序云开发实现图片的上传、存储、访问.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310008758.jpg","text":"我们在进行项目开发时，经常需要处理用户上传的图片，如果用传统的后端开发，处理起来是比较繁琐的。微信小程序云开发提供了一系列API供开发者完成想要的效果。下面我们要实现用户图片的上传、存储及访问。 &lt;button type&#x3D;&quot;primary&quot; b...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":23,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"微信小程序","slug":"微信小程序","count":4,"path":"api/tags/微信小程序.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}}}