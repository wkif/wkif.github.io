{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"C语言知识点","date":"2021-01-05T06:52:00.000Z","updated":"2022-03-30T16:10:12.416Z","comments":true,"path":"api/articles/C语言知识点.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310008758.jpg","content":"<h2 id=\"输入未知长度字符数组\"><a href=\"#输入未知长度字符数组\" class=\"headerlink\" title=\"输入未知长度字符数组\"></a>输入未知长度字符数组</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">#include &lt;stdio.h&gt;\nint main()\n&#123;\n\tchar array_num[100] ;\n\tint i &#x3D; 0, length;\n\tdo\n\t&#123;\n\t\tscanf(&quot;%c&quot;, &amp;array_num[i]);\n\t\ti++;\n\t&#125; while (array_num[i - 1] !&#x3D; &#39;\\n&#39;);\n\tlength &#x3D; i-1;\n\n\tfor (i &#x3D; 0; i &lt; length; i++)\n\t\tprintf(&quot;%c&quot;, array_num[i]);\n\n\tgetchar();&#x2F;&#x2F;VS2017中特殊设置，解决CMD窗口闪退问题\n\t\n\treturn 0;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">#include &lt;stdio.h&gt;\nvoid fun1(int num[], int length);\n\nint main() &#123;\n\tint a[1001];\n\tint k, i, j;\n\tscanf(&quot;%d&quot;, &amp;k);\n\tfor (i &#x3D; 0; i &lt; k; i++) &#123;\n\t\tscanf(&quot;%d&quot;, &amp;a[i]);\n\t&#125;\n\tfun1(a, k);\n\t\n\tfor (i &#x3D; 0; i &lt; k; i++) &#123;\n\t\tprintf(&quot;%d &quot;, a[i]);\n\t&#125;\n&#125;\n\nvoid fun1(int num[], int length) &#123;\n\tint i, j;\n\tfor (i &#x3D; 0; i &lt; length - 1; ++i) &#123;\n\t\tfor (j &#x3D; 0; j &lt; length - i - 1; ++j) &#123;\n\t\t\tif (num[j] &gt; num[j + 1]) &#123;\n\t\t\t\tint t;\n\t\t\t\tt &#x3D; num[j];\n\t\t\t\tnum[j] &#x3D; num[j + 1];\n\t\t\t\tnum[j + 1] &#x3D; t;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h2 id=\"折半查找\"><a href=\"#折半查找\" class=\"headerlink\" title=\"折半查找\"></a>折半查找</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">#include &lt;stdio.h&gt;\nvoid fun1(int num[], int length);\nint fun2(int num[], int length, int x);\n\nint main() &#123;\n\tint a[1001];\n\tint k, i, j;\n\tscanf(&quot;%d&quot;, &amp;k);\n\tfor (i &#x3D; 0; i &lt; k; i++) &#123;\n\t\tscanf(&quot;%d&quot;, &amp;a[i]);\n\t&#125;\n\tfun1(a, k);\n\n\tfor (i &#x3D; 0; i &lt; k; i++) &#123;\n\t\tif (i &#x3D;&#x3D; 0) &#123;\n\t\t\tprintf(&quot;%d&quot;, a[i]);\n\t\t&#125; else &#123;\n\t\t\tprintf(&quot; %d&quot;, a[i]);\n\t\t&#125;\n\n\t&#125;\n\tprintf(&quot;\\n&quot;);\n\tint flag &#x3D; fun2(a, k, 4);\n\tprintf(&quot;%d\\n&quot;, flag);\n&#125;\n\nvoid fun1(int num[], int length) &#123;\n\tint i, j;\n\tfor (i &#x3D; 0; i &lt; length - 1; ++i) &#123;\n\t\tfor (j &#x3D; 0; j &lt; length - i - 1; ++j) &#123;\n\t\t\tif (num[j] &gt; num[j + 1]) &#123;\n\t\t\t\tint t;\n\t\t\t\tt &#x3D; num[j];\n\t\t\t\tnum[j] &#x3D; num[j + 1];\n\t\t\t\tnum[j + 1] &#x3D; t;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\n&#125;\n\nint fun2(int num[], int length, int x) &#123;\n\tint low &#x3D; 0;\n\tint high &#x3D; length - 1;\n\twhile (low &lt; high) &#123;\n\t\tint mid &#x3D; (high + low) &#x2F; 2;\n\t\tif (x &#x3D; num[mid]) &#123;\n\t\t\treturn mid;\n\t\t&#125; else if (num[mid] &gt; x) &#123;\n\t\t\thigh &#x3D; mid - 1;\n\t\t&#125; else &#123;\n\t\t\tlow &#x3D; mid+1;;\n\t\t&#125;\n\t&#125;\n\treturn 0;\n\n\n\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\nint main()\n&#123;\n\tchar str[100];\n\tint book[100] &#x3D; &#123; 0 &#125;;\n\twhile (scanf(&quot;%s&quot;, str) !&#x3D; EOF)\n\t&#123;\n\t\tint len &#x3D; strlen(str);\n\t\tfor (int i &#x3D; 0; i &lt; len; i++)\n\t\t&#123;\n\t\t\tbook[str[i]]++;\n\t\t&#125;\n\t\tfor (int i &#x3D; 0; i &lt; 95; i++)\n\t\t&#123;\n\t\t\tif (book[i] !&#x3D; 0)\n\t\t\t&#123;\n\t\t\t\tprintf(&quot;%c&quot;, i);\n\t\t\t&#125;\n\t\t&#125;\n\t\tprintf(&quot;\\n&quot;);\n\t&#125;\n\t\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">#include&lt;stdio.h&gt;\nint num[100];\nint n;\n\nvoid quicksort(int left, int right)\n&#123;\n\tint i, j,t, temp;\n\tif (left &gt; right)\n\t&#123;\n\t\treturn;\n\t&#125;\n\ttemp &#x3D; num[left];\n\ti &#x3D; left;\n\tj &#x3D; right;\n\twhile (i !&#x3D; j)\n\t&#123;\n\t\twhile (num[j] &gt;&#x3D; temp &amp;&amp; j &gt; i)\n\t\t&#123;\n\t\t\tj--;\n\t\t&#125;\n\t\twhile (num[i] &lt;&#x3D; temp &amp;&amp; i &lt; j)\n\t\t&#123;\n\t\t\ti++;\n\t\t&#125;\n\t\tif (i &lt; j)\n\t\t&#123;\n\t\t\tt &#x3D; num[i];\n\t\t\tnum[i] &#x3D; num[j];\n\t\t\tnum[j] &#x3D; t;\n\t\t&#125;\n\t&#125;\n\t\n\tnum[left] &#x3D; num[i];\n\tnum[i] &#x3D; temp;\n\tquicksort(left, i - 1);\n\tquicksort(i + 1, right);\n\n\treturn;\n&#125;\n\nint main()\n&#123;\n\t\n\tscanf(&quot;%d&quot;, &amp; n);\n\tint i;\n\tfor (i &#x3D; 0; i &lt; n; i++)\n\t&#123;\n\t\tscanf(&quot;%d&quot;, &amp;num[i]);\n\t&#125;\n\n\tquicksort(0, n-1);\n\tfor (i &#x3D; 0; i &lt; n; i++)\n\t&#123;\n\t\tif (i &#x3D;&#x3D; 0)\n\t\t&#123;\n\t\t\tprintf(&quot;%d&quot;, num[0]);\n\t\t&#125;\n\t\telse\n\t\t&#123;\n\t\t\tprintf(&quot; %d&quot;, num[i]);\n\t\t&#125;\n\t\t\n\n\t&#125;\n\tprintf(&quot;\\n&quot;);\n\t\n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"埃氏筛法\"><a href=\"#埃氏筛法\" class=\"headerlink\" title=\"埃氏筛法\"></a>埃氏筛法</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">#include &lt;stdio.h&gt;\nint fun(int n);\n\nint main() &#123;\n\tint n;\n\tscanf(&quot;%d&quot;, &amp;n);\n\tint k;\n\tk &#x3D; fun(n);\n\tprintf(&quot;%d\\n&quot;, k);\n\treturn 0;\n&#125;\n\nint fun(int n) &#123;\n\tint count &#x3D; 0;\n\tint num[n + 1];\n\tint i;\n\tnum[0] &#x3D; 0;\n\tnum[1] &#x3D; 0;\n\tfor (i &#x3D; 2; i &lt; n; i++) &#123;\n\t\tnum[i] &#x3D; 1;\n\t&#125;\n\tint j;\n\tfor (j &#x3D; 2; j &lt;&#x3D; n; j++) &#123;\n\t\tif (num[j] &#x3D;&#x3D; 1) &#123;\n\t\t\tcount++;\n\t\t\tint x;\n\t\t\tfor (x &#x3D; 2 * j; x &lt;&#x3D; n; x &#x3D; x + j) &#123;\n\t\t\t\tnum[x] &#x3D; 0;\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\treturn count;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><p>结构体</p>\n<p>解密：一串字符，第1个数删除，第2个数放到最后；第3个数删除，第4个数放到最后.。。。。</p>\n<p>例如：631758924加密后为615947283</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">queue</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> data<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> head<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> tail<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">queue</span> q<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tq<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tq<span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>head <span class=\"token operator\">&lt;</span> q<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tq<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">.</span>head <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tq<span class=\"token punctuation\">.</span>tail<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\tq<span class=\"token punctuation\">.</span>head <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2><p>判断回文串</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">gets</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlen <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> len <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/// &lt;summary></span>\n\t<span class=\"token comment\">///  左边压栈</span>\n\t<span class=\"token comment\">/// &lt;/summary></span>\n\t<span class=\"token comment\">/// &lt;returns>&lt;/returns></span>\n\t<span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tstr<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">/// &lt;summary></span>\n\t<span class=\"token comment\">/// 判断</span>\n\t<span class=\"token comment\">/// &lt;/summary></span>\n\t<span class=\"token comment\">/// &lt;returns>&lt;/returns></span>\n\t<span class=\"token keyword\">int</span> next<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tnext <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tnext <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> str<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\ttop<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yes\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"深度优先\"><a href=\"#深度优先\" class=\"headerlink\" title=\"深度优先\"></a>深度优先</h2><h3 id=\"1-10中选数字，使得a’b’c-def-x3D-hij-不能重复选\"><a href=\"#1-10中选数字，使得a’b’c-def-x3D-hij-不能重复选\" class=\"headerlink\" title=\"1-10中选数字，使得a’b’c+def&#x3D;hij;不能重复选\"></a>1-10中选数字，使得a’b’c+def&#x3D;hij;不能重复选</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">void dfs(int step)\n&#123; \n\t判断边界\n\t尝试每一中可能for(i&#x3D;0;i&lt;&#x3D;n;i++)\n\t&#123;\n\t\t继续下一步dfs(step+1)\n\t&#125;\n\t返回\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>book<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> step<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>step<span class=\"token operator\">==</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            sum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d%d+%d%d%d=%d%d%d\\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            a<span class=\"token punctuation\">[</span>step<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n            book<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>step<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            book<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total ： %d\\n\"</span><span class=\"token punctuation\">,</span>sum<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"迷宫\"><a href=\"#迷宫\" class=\"headerlink\" title=\"迷宫\"></a>迷宫</h3><p>n行m列，0表示可走，1表示障碍，从（startx，starty）到（p，q)，找最短路径</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> min<span class=\"token operator\">=</span><span class=\"token number\">999</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">51</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">51</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nbook<span class=\"token punctuation\">[</span><span class=\"token number\">51</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">51</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> p<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> next<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> step<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">==</span>p<span class=\"token operator\">&amp;&amp;</span>y<span class=\"token operator\">==</span>q<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>step<span class=\"token operator\">&lt;</span>min<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            min<span class=\"token operator\">=</span>step<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> tx <span class=\"token operator\">=</span> x<span class=\"token operator\">+</span>next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> ty <span class=\"token operator\">=</span> y<span class=\"token operator\">+</span>next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tx<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>tx<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">&amp;&amp;</span>ty<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>ty<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>a<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                book<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span>ty<span class=\"token punctuation\">,</span>step<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                book<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> startx<span class=\"token punctuation\">,</span>starty<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>startx<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>starty<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    book<span class=\"token punctuation\">[</span>startx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>starty<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>startx<span class=\"token punctuation\">,</span>starty<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>样例输入</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">5 4\n0 0 1 0\n0 0 0 0\n0 0 1 0\n0 1 0 0\n0 0 0 1\n0 0 3 2\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>样例输出</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20210629015235.png\"></p>\n<h2 id=\"广度优先\"><a href=\"#广度优先\" class=\"headerlink\" title=\"广度优先\"></a>广度优先</h2><h3 id=\"迷宫-1\"><a href=\"#迷宫-1\" class=\"headerlink\" title=\"迷宫\"></a>迷宫</h3><p>n行m列，0表示可走，1表示障碍，从（startx，starty）到（p，q)，找最短路径</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">note</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//    横坐标</span>\n    <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//    纵坐标</span>\n    <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//    步数</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">note</span> que<span class=\"token punctuation\">[</span><span class=\"token number\">2501</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">51</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">51</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> book<span class=\"token punctuation\">[</span><span class=\"token number\">51</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">51</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> next<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> head<span class=\"token punctuation\">,</span>tail<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> startx<span class=\"token punctuation\">,</span>starty<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d %d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>startx<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>starty<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    head<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    tail<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    que<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>startx<span class=\"token punctuation\">;</span>\n    que<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>starty<span class=\"token punctuation\">;</span>\n    que<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>s<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    tail<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    book<span class=\"token punctuation\">[</span>startx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>starty<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span>tx<span class=\"token punctuation\">,</span>ty<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> flag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">&lt;</span>tail<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            tx<span class=\"token operator\">=</span>que<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span>next<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            ty<span class=\"token operator\">=</span>que<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span>next<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tx<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>tx<span class=\"token operator\">&lt;=</span>n<span class=\"token operator\">&amp;&amp;</span>ty<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>ty<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span>book<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    book<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ty<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    que<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span>tx<span class=\"token punctuation\">;</span>\n                    que<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span>ty<span class=\"token punctuation\">;</span>\n                    que<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>s<span class=\"token operator\">=</span>que<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    tail<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tx<span class=\"token operator\">==</span>p<span class=\"token operator\">&amp;&amp;</span>ty<span class=\"token operator\">==</span>q<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                flag<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        head<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>que<span class=\"token punctuation\">[</span>tail<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>样例输入</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">5 4\n0 0 1 0\n0 0 0 0\n0 0 1 0\n0 1 0 0\n0 0 0 1\n0 0 3 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>样例输出</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20210629015218.png\"></p>\n<h2 id=\"不要输出多余的零\"><a href=\"#不要输出多余的零\" class=\"headerlink\" title=\"不要输出多余的零\"></a>不要输出多余的零</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">%g<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20210105214833.png\"></p>\n<h2 id=\"定义一个未知行数和列数的二维数组\"><a href=\"#定义一个未知行数和列数的二维数组\" class=\"headerlink\" title=\"定义一个未知行数和列数的二维数组\"></a>定义一个未知行数和列数的二维数组</h2><pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">#include &lt;stdio.h&gt;\nint main()\n&#123;\n    int n;\n    scanf(&quot;%d&quot;,&amp;n);\n    int **num &#x3D; (int**)malloc(sizeof(int*)*n);\n    int i;\n    for(i&#x3D;0;i&lt;n;i++)&#123;\n        num[i]&#x3D;(int*)malloc(sizeof(int)*n);\n    &#125;\n    int j;\n    for(i&#x3D;0;i&lt;n;i++)&#123;\n        for(j&#x3D;0;j&lt;n;j++)&#123;\n            scanf(&quot;%d&quot;,&amp;num[i][j]);\n        &#125;\n    &#125;\n\n    return 0;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"前缀和\"><a href=\"#前缀和\" class=\"headerlink\" title=\"前缀和\"></a>前缀和</h2><p>前缀和是指某序列的前n项和，可以把它理解为数学上的数列的前n项和，而差分可以看成前缀和的逆运算。合理的使用前缀和与差分，可以将某些复杂的问题简单化。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/ImageHosting/img/202111282131742.png\" alt=\"20201213215001825\"></p>\n<h3 id=\"一维前缀和\"><a href=\"#一维前缀和\" class=\"headerlink\" title=\"一维前缀和\"></a>一维前缀和</h3><p>输入一个长度为n的整数序列。接下来再输入m个询问，每个询问输入一对l, r。对于每个询问，输出原序列中从第l个数到第r个数的和。</p>\n<p>我们很容易想出暴力解法，遍历区间求和。</p>\n<p><strong>代码如下：</strong></p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">int n,m;\nscanf(&quot;%d%d&quot;,&amp;n,&amp;m);\nfor(int i&#x3D;1;i&lt;&#x3D;n;i++) scanf(&quot;%d&quot;,&amp;a[i]);\nwhile(m--)\n&#123;\n    int l,r;\n    int sum&#x3D;0;\n    scanf(&quot;%d%d&quot;,&amp;l,&amp;r);\n    for(int i&#x3D;l;i&lt;&#x3D;r;i++)\n    &#123; \n        sum+&#x3D;a[i];\n    &#125;\n    printf(&quot;%d\\n&quot;,sum);\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样的时间复杂度为<code>O(n*m)</code>，如果<code>n</code>和<code>m</code>的数据量稍微大一点就有可能超时，而我们如果使用前缀和的方法来做的话就能够将时间复杂度降到<code>O(n+m)</code>,大大提高了运算效率。</p>\n<p><strong>具体做法：</strong></p>\n<p>首先做一个预处理，定义一个<code>sum[]</code>数组，<code>sum[i]</code>代表<code>a</code>数组中前<code>i</code>个数的和。</p>\n<p><strong>求前缀和运算：</strong></p>\n<pre class=\"line-numbers language-C\" data-language=\"C\"><code class=\"language-C\">const int N&#x3D;1e5+10;\nint sum[N],a[N]; &#x2F;&#x2F;sum[i]&#x3D;a[1]+a[2]+a[3].....a[i];\nfor(int i&#x3D;1;i&lt;&#x3D;n;i++)\n&#123; \n    sum[i]&#x3D;sum[i-1]+a[i];   \n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后查询操作：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"> scanf(&quot;%d%d&quot;,&amp;l,&amp;r);\n printf(&quot;%d\\n&quot;, sum[r]-sum[l-1]);\n对于每次查询，只需执行sum[r]-sum[l-1] ，时间复杂度为O(1)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>原理</p>\n<p>sum[r] &#x3D;a[1]+a[2]+a[3]+a[l-1]+a[l]+a[l+1]……a[r];<br>sum[l-1]&#x3D;a[1]+a[2]+a[3]+a[l-1];<br>sum[r]-sum[l-1]&#x3D;a[l]+a[l+1]+……+a[r];</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/ImageHosting/img/202111282133888.png\" alt=\"image-20211128213310790\"></p>\n<h3 id=\"二维前缀和\"><a href=\"#二维前缀和\" class=\"headerlink\" title=\"二维前缀和\"></a>二维前缀和</h3><p><img src=\"https://cdn.jsdelivr.net/gh/wkif/ImageHosting/img/202111282134178.png\" alt=\"image-20211128213459086\"></p>\n<p>知道了两个点的位置和他们的二维前缀和<br>图中红色是左上角的那个点的二维前缀和<br>红色+黄色部分是右下角的那个点的二维前缀和<br>是不是可以用这个来求出他们之间的矩阵的和呢？<br>也就是这一部分：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/ImageHosting/img/202111282135865.png\" alt=\"image-20211128213533794\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">D - B - C + A<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/ImageHosting/img/202111282136635.png\" alt=\"image-20211128213609552\"></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">#include&lt;iostream&gt;\n#include&lt;cstdio&gt;\n#define int long long\nusing namespace std;\nconst int Max &#x3D; 1003;\nint a[Max][Max];\nint f[Max][Max];\nsigned main()\n&#123;\n\tfreopen(&quot;acioi.in&quot;,&quot;r&quot;,stdin);\n\tint n,m,c;\n\tcin &gt;&gt; n &gt;&gt; m &gt;&gt; c;\n\tfor(register int i &#x3D; 1;i &lt;&#x3D; n;++ i)\n\t\tfor(register int j &#x3D; 1;j &lt;&#x3D; m;++ j)\n\t\t\tcin &gt;&gt; a[i][j],f[i][j] &#x3D; f[i - 1][j] + f[i][j - 1] - f[i - 1][j - 1] + a[i][j];\n\tint k;\n\tcin &gt;&gt; k;\n\tfor(register int i &#x3D; 1;i &lt;&#x3D; k;++ i)\n\t&#123;\n\t\tint x1,x2,y1,y2;&#x2F;&#x2F;x1,y1是左上角的坐标，另一对是右下角的坐标 \n\t\tcin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;\n\t\tcout &lt;&lt; f[x2][y2] - f[x1 - 1][y2] - f[x2][y1 - 1] + f[x1 - 1][y1 - 1]; \n\t&#125;\n\tcout &lt;&lt; M &lt;&lt; endl; \n\treturn 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n<h1 id=\"2021计设\"><a href=\"#2021计设\" class=\"headerlink\" title=\"2021计设\"></a>2021计设</h1><h2 id=\"2021年程序设计实践练习1\"><a href=\"#2021年程序设计实践练习1\" class=\"headerlink\" title=\"2021年程序设计实践练习1\"></a>2021年程序设计实践练习1</h2><h3 id=\"1123：\"><a href=\"#1123：\" class=\"headerlink\" title=\"1123：\"></a>1123：</h3><table>\n<thead>\n<tr>\n<th>duoxida的数字游戏</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[ <a href=\"http://202.197.224.59/exam/index.php/solution/submit/id/1123/exam_id/336\">Submit Code</a> ] [ <a href=\"http://202.197.224.59/exam/index.php/solution/top20/pid/1123\">Top 20 Runs</a> ] [ <a href=\"http://202.197.224.59/exam/index.php/solution/onlinestatus/exam_id/336/problem_id/1123\">Runs Status</a> ]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Acceteped : 892</td>\n<td></td>\n<td>Submit : 2072</td>\n</tr>\n<tr>\n<td>Time Limit : 1000 MS</td>\n<td></td>\n<td>Memory Limit : 65536 KB</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Description</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>题目描述duoxida很喜欢玩数字游戏，某天无聊的时候，他决定一个人玩数字游戏。他黑板上写下了一行总共有n个数，然后对其重复进行一个操作: 找到从左到右第k个的数x，在数字序列的最右边增加一个x，删除最左边的第一个数字。 duoxida很想知道知道多少次操作后，这个序列就变得完全一样。输入数据的第一行为一个整数t,1&lt;&#x3D;t&lt;&#x3D;10，表示测试用例的个数。每组样例的第一行是n，k,(1≤k≤n≤1000)。 接下来一行有n个整数。输出每个用例输出一行，即操作次数，如果这个序列无法变得完全一样，输出”-1”。样例输入<code>2  3 2  3 1 1  3 1  3 1 1 </code>样例输出<code>1  -1</code></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">!=</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> k <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> a<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    sum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> k <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"1127：\"><a href=\"#1127：\" class=\"headerlink\" title=\"1127：\"></a>1127：</h3><table>\n<thead>\n<tr>\n<th>数列</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[ <a href=\"http://202.197.224.59/exam/index.php/solution/submit/id/1127/exam_id/336\">Submit Code</a> ] [ <a href=\"http://202.197.224.59/exam/index.php/solution/top20/pid/1127\">Top 20 Runs</a> ] [ <a href=\"http://202.197.224.59/exam/index.php/solution/onlinestatus/exam_id/336/problem_id/1127\">Runs Status</a> ]</td>\n</tr>\n<tr>\n<td>Acceteped : 567</td>\n</tr>\n<tr>\n<td>Time Limit : 3000 MS</td>\n</tr>\n<tr>\n<td></td>\n</tr>\n<tr>\n<td>Description</td>\n</tr>\n<tr>\n<td>题目描述数列生成规则如下：第一项的值为a,第二项的值为b, (0 ≤ a,b ≤ 9)前两项之积，如果为一位数，则为本项的值；如果为两位数，则十位为本项，个位为后一项。比如a&#x3D;2,b&#x3D;3,那么数列为2,3,6,1,8,8,…。 请写一个程序，输出数列的第n个元素的值。输入第一行是一个整数K，表示样例的个数。 每个样例的第一行是三个整数a,b,Q(1 ≤ Q ≤ 1,000),其中Q表示查询的次数。 以后的Q行，每行一个整数n,(1 ≤ n ≤ 1,000,000,000)。输出每个样例的每个查询输出一行，即对应元素的值。样例输入<code>3 2 3 4 1 2 3 4 3 3 4 1 2 3 4 9 9 1 100000000 </code>样例输出<code>2 3 6 1 3 3 9 2 2 </code></td>\n</tr>\n<tr>\n<td></td>\n</tr>\n<tr>\n<td></td>\n</tr>\n<tr>\n<td></td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">shulie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1001</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>c<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>o<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">108</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">&#123;</span>\n           n<span class=\"token operator\">=</span>x<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>x<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n               x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">else</span>\n           <span class=\"token punctuation\">&#123;</span>\n            x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>n<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n           x<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>n<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n           i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">&lt;</span><span class=\"token number\">108</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">[</span>o<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">-</span><span class=\"token number\">108</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">8</span><span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">[</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>k<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">shulie</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"1163：\"><a href=\"#1163：\" class=\"headerlink\" title=\"1163：\"></a>1163：</h3><table>\n<thead>\n<tr>\n<th>ASCII</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[ <a href=\"http://202.197.224.59/exam/index.php/solution/submit/id/1163/exam_id/336\">Submit Code</a> ] [ <a href=\"http://202.197.224.59/exam/index.php/solution/top20/pid/1163\">Top 20 Runs</a> ] [ <a href=\"http://202.197.224.59/exam/index.php/solution/onlinestatus/exam_id/336/problem_id/1163\">Runs Status</a> ]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Acceteped : 1654</td>\n<td></td>\n<td>Submit : 5058</td>\n</tr>\n<tr>\n<td>Time Limit : 1000 MS</td>\n<td></td>\n<td>Memory Limit : 65536 KB</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Description</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>题目描述给你一段ASCII编码的文字，输出其每个字符的ASCII码。输入一段文字，由ASCII码字符组成。输出先输出行号，行号为16进制，占5位，从0开始计数，行号前导为0，然后空一格。 每行最多输出32个字符的ASCII码，每个ASCII码为16进制，占2位，前导为0，中间用空格隔开。 所有16进制使用大写A<del>F表示10</del>15。最后一行行末无空格，无换行。样例输入<code>ACM International Collegiate Programming Contest, I LOVE YOU Lotus is a mystic symbol.  </code>样例输出<code>00000 41 43 4D 20 49 6E 74 65 72 6E 61 74 69 6F 6E 61 00001 6C 20 43 6F 6C 6C 65 67 69 61 74 65 20 50 72 6F 00002 67 72 61 6D 6D 69 6E 67 20 43 6F 6E 74 65 73 74 00003 2C 0A 49 20 4C 4F 56 45 20 59 4F 55 0A 4C 6F 74 00004 75 73 20 69 73 20 61 20 6D 79 73 74 69 63 20 73 00005 79 6D 62 6F 6C 2E 20 0A </code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">100000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        s<span class=\"token punctuation\">[</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> lineCnt<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> line <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">%</span> <span class=\"token number\">16</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        lineCnt <span class=\"token operator\">=</span> a <span class=\"token operator\">/</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        lineCnt <span class=\"token operator\">=</span> a <span class=\"token operator\">/</span> <span class=\"token number\">16</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lineCnt <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%05X \"</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%02X \"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span><span class=\"token number\">16</span><span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%02X\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span><span class=\"token number\">16</span><span class=\"token operator\">+</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%05X \"</span><span class=\"token punctuation\">,</span> line<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> a<span class=\"token operator\">%</span><span class=\"token number\">16</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%02X \"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>lineCnt<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">16</span><span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%02X\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>lineCnt<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">16</span><span class=\"token operator\">+</span>a<span class=\"token operator\">%</span><span class=\"token number\">16</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"1170：\"><a href=\"#1170：\" class=\"headerlink\" title=\"1170：\"></a>1170：</h3><table>\n<thead>\n<tr>\n<th>ICPC</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[ <a href=\"http://202.197.224.59/exam/index.php/solution/submit/id/1170/exam_id/336\">Submit Code</a> ] [ <a href=\"http://202.197.224.59/exam/index.php/solution/top20/pid/1170\">Top 20 Runs</a> ] [ <a href=\"http://202.197.224.59/exam/index.php/solution/onlinestatus/exam_id/336/problem_id/1170\">Runs Status</a> ]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Acceteped : 1009</td>\n<td></td>\n<td>Submit : 2432</td>\n</tr>\n<tr>\n<td>Time Limit : 1000 MS</td>\n<td></td>\n<td>Memory Limit : 65536 KB</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Description</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>题目描述ACM&#x2F;ICPC比赛涉及的知识点非常多，一个队伍三个人需要能够互补。一个队伍某个知识点的高度是三个人中水平最高的那个人决定。现在给你三个人的每个知识点的水平情况，请计算一下这个队伍的水平。输入存在多个样例。每个样例的第一行是一个整数N(3≤N≤100)，表示所有知识点的个数。 以后三行为每个人每个知识点的水平情况。水平用A到E表示，一共5级，A最强，E最弱，依次递减。输出每个样例输出两行，第一行为一个字符串，一个队伍的各个知识点的水平情况。第二行是5个整数，表示5个级别知识点的个数,每个整数之间有一个空格。样例输入<code>3 ABC BBB AAE 4 DDBD DEDC CDDE 0 </code>样例输出<code>AAB 2 1 0 0 0 CDBC 0 1 2 1 0 </code></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">char</span> max<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> t<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    \n    <span class=\"token keyword\">char</span> max1<span class=\"token operator\">=</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>max1<span class=\"token operator\">></span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                max1<span class=\"token operator\">=</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>    \n        <span class=\"token punctuation\">&#125;</span>\n        max<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>max1<span class=\"token punctuation\">;</span>\n        t<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>d<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>e<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>t<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span>max<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'A'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'B'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'C'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            c<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token char\">'D'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            d<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d %d %d\\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n \n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"1241\"><a href=\"#1241\" class=\"headerlink\" title=\"1241:\"></a>1241:</h3><table>\n<thead>\n<tr>\n<th>Permutation</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[ <a href=\"http://202.197.224.59/exam/index.php/solution/submit/id/1241/exam_id/336\">Submit Code</a> ] [ <a href=\"http://202.197.224.59/exam/index.php/solution/top20/pid/1241\">Top 20 Runs</a> ] [ <a href=\"http://202.197.224.59/exam/index.php/solution/onlinestatus/exam_id/336/problem_id/1241\">Runs Status</a> ]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Acceteped : 1179</td>\n<td></td>\n<td>Submit : 2750</td>\n</tr>\n<tr>\n<td>Time Limit : 1000 MS</td>\n<td></td>\n<td>Memory Limit : 65536 KB</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Description</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20210627165947.png\"></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>输入第一行是一个整数K(1≤K≤1000)，表示样例的个数。 每个样例占一行，第一个整数是n(1≤n≤100)，以后的n个整数xi,1≤xi≤n且 xi是唯一的, (1x12x2⋯⋯nxn)表示一个置换。输出输出一个样例的结果。样例输入<code>3 3 1 2 3 3 2 1 3 3 2 3 1 </code>样例输出<code>1 2 3 </code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span>a<span class=\"token operator\">%</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">120</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n            \n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pos<span class=\"token operator\">!=</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                tmp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                pos <span class=\"token operator\">=</span> num<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            res <span class=\"token operator\">=</span> res <span class=\"token operator\">*</span> tmp <span class=\"token operator\">/</span><span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"1251\"><a href=\"#1251\" class=\"headerlink\" title=\"1251:\"></a>1251:</h3><table>\n<thead>\n<tr>\n<th>Colombian Number</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[ <a href=\"http://202.197.224.59/exam/index.php/solution/submit/id/1251/exam_id/336\">Submit Code</a> ] [ <a href=\"http://202.197.224.59/exam/index.php/solution/top20/pid/1251\">Top 20 Runs</a> ] [ <a href=\"http://202.197.224.59/exam/index.php/solution/onlinestatus/exam_id/336/problem_id/1251\">Runs Status</a> ]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Acceteped : 2630</td>\n<td></td>\n<td>Submit : 6299</td>\n</tr>\n<tr>\n<td>Time Limit : 1000 MS</td>\n<td></td>\n<td>Memory Limit : 65536 KB</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Description</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Colombian Number题目描述对于正整数n,不存在整数k,使得n等于k加上k的数码累加和，我们称这样的数是哥伦比亚数或者自我数。 比如 11就不是一个哥伦比亚数，因为10加上10的数码累加和1等于11;而20则是一个哥伦比亚数。输入第一行是一个整数K(K≤10,000)，表示样例的个数。 以后每行一个正整数n(1≤n≤1,000,000,000)输出每行输出一个样例的结果，如果是哥伦比亚数输出”Yes”,否则输出”No”。样例输入<code>5 1 2 3 20 21 </code>样例输出<code>Yes No Yes Yes No</code></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">Colnum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        m <span class=\"token operator\">+=</span> i<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        i <span class=\"token operator\">/=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">></span> n<span class=\"token operator\">-</span><span class=\"token number\">81</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">Colnum</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yes\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n            \n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n            \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":"输入未知长度字符数组#include &lt;stdio.h&gt; int main() &#123; char array_num[100] ; int i &#x3D; 0, length; do &#123; scanf(&quot;%c&quot;, &amp;arra...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"19 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":23,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"C语言","slug":"C语言","count":3,"path":"api/tags/C语言.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%9C%AA%E7%9F%A5%E9%95%BF%E5%BA%A6%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">输入未知长度字符数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">冒泡排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\">折半查找</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A1%B6%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">桶排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">快速排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%83%E6%B0%8F%E7%AD%9B%E6%B3%95\"><span class=\"toc-text\">埃氏筛法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%98%9F%E5%88%97\"><span class=\"toc-text\">队列</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%88\"><span class=\"toc-text\">栈</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88\"><span class=\"toc-text\">深度优先</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-10%E4%B8%AD%E9%80%89%E6%95%B0%E5%AD%97%EF%BC%8C%E4%BD%BF%E5%BE%97a%E2%80%99b%E2%80%99c-def-x3D-hij-%E4%B8%8D%E8%83%BD%E9%87%8D%E5%A4%8D%E9%80%89\"><span class=\"toc-text\">1-10中选数字，使得a’b’c+def&#x3D;hij;不能重复选</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%B7%E5%AE%AB\"><span class=\"toc-text\">迷宫</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88\"><span class=\"toc-text\">广度优先</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%B7%E5%AE%AB-1\"><span class=\"toc-text\">迷宫</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E8%A6%81%E8%BE%93%E5%87%BA%E5%A4%9A%E4%BD%99%E7%9A%84%E9%9B%B6\"><span class=\"toc-text\">不要输出多余的零</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">数据类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E6%9C%AA%E7%9F%A5%E8%A1%8C%E6%95%B0%E5%92%8C%E5%88%97%E6%95%B0%E7%9A%84%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">定义一个未知行数和列数的二维数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%BC%80%E5%92%8C\"><span class=\"toc-text\">前缀和</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C\"><span class=\"toc-text\">一维前缀和</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C\"><span class=\"toc-text\">二维前缀和</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2021%E8%AE%A1%E8%AE%BE\"><span class=\"toc-text\">2021计设</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2021%E5%B9%B4%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E8%B7%B5%E7%BB%83%E4%B9%A01\"><span class=\"toc-text\">2021年程序设计实践练习1</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1123%EF%BC%9A\"><span class=\"toc-text\">1123：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1127%EF%BC%9A\"><span class=\"toc-text\">1127：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1163%EF%BC%9A\"><span class=\"toc-text\">1163：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1170%EF%BC%9A\"><span class=\"toc-text\">1170：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1241\"><span class=\"toc-text\">1241:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1251\"><span class=\"toc-text\">1251:</span></a></li></ol></li></ol>","author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Javascript字符串处理","uid":"a6e4e55029c5e4aec2417aca65ffdd26","slug":"Javascript字符串处理","date":"2021-01-10T10:38:00.000Z","updated":"2022-03-30T16:10:51.350Z","comments":true,"path":"api/articles/Javascript字符串处理.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforhexo/20201202142640.jpg","text":" 作为JavaScript基础数据类型，字符串具有一些很强大的方法，在平时的工作中用到的地方也特别的多，很多时候因为不熟悉某个字符串的方法，往往走了很多弯路，所以整理了15个常用又高效的字符串方法，来一起看看这15个提升工作效率的方法吧！ 1. 字符串去除首尾空格 —— trim...","link":"","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":23,"path":"api/categories/学习笔记.json"},{"name":"转载","slug":"学习笔记/转载","count":1,"path":"api/categories/学习笔记/转载.json"}],"tags":[{"name":"javascript","slug":"javascript","count":5,"path":"api/tags/javascript.json"},{"name":"前端","slug":"前端","count":1,"path":"api/tags/前端.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}},"next_post":{"title":"vue axios传中文参数导致乱码的解决方案","uid":"77ab0fbeb021db0c986d25c4c83eb7f1","slug":"vue-axios传中文参数导致乱码的解决方案","date":"2020-12-25T09:59:00.000Z","updated":"2022-10-14T06:37:44.485Z","comments":true,"path":"api/articles/vue-axios传中文参数导致乱码的解决方案.json","keywords":null,"cover":[],"text":"问题描述var that &#x3D; this; var name &#x3D; that.signform.signname; var username &#x3D; that.signform.signusername; var password &#x3D; that.s...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Axios","slug":"Axios","count":3,"path":"api/tags/Axios.json"},{"name":"Vue.js","slug":"Vue-js","count":2,"path":"api/tags/Vue-js.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}}}