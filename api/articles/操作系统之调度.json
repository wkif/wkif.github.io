{"title":"操作系统之调度","uid":"6636482fc925ef3fdf260b6b326d9fbf","slug":"操作系统之调度","date":"2020-12-09T13:40:00.000Z","updated":"2022-03-30T15:59:38.731Z","comments":true,"path":"api/articles/操作系统之调度.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforhexo/20201202142647.jpg","content":"<h1 id=\"调度\"><a href=\"#调度\" class=\"headerlink\" title=\"调度\"></a>调度</h1><h2 id=\"调度的基本概念\"><a href=\"#调度的基本概念\" class=\"headerlink\" title=\"调度的基本概念\"></a>调度的基本概念</h2><p>调度研究的问题：当有一堆任务要处理，但由于资源有限，这些事情没法同时处理。这就需要确定某种规则来决定处理这些任务的顺序，这就是调度研究的问题。</p>\n<p><em><em>举个有味道的例子：<br>现在有4个人要上厕所(他们几乎同时到达)，他们分别需要使用厕所3分钟、10分钟、1分钟、4分钟。但是他们面前只有一个厕所，而且厕所里面只有一个马桶，那我们应该怎么确定他们上厕所的顺序呢？<br>*</em><br>我们有以下的方案：*</em><br>*<em>1. 谁先来，谁就先用厕所。<br>\\2. 谁需要使用的时间少，谁先用厕所。*</em><br>**<br>我们先说说第一种方案，这种方案很公平，谁先来谁先用，但是这样会产生一个问题。假如他们来的顺序是10分钟、4分钟、3分钟、1分钟，显然，采用这种方案的话，对于最后一个人，他上厕所1分钟要等17分钟，估计翔都憋不住了吧…<br>我们再说下第二种方案，采用这种方案的话，虽然没有第一种方案公平，但是这4个人的整体平均等待时间是最少的。(平均等待时间 &#x3D; 每个人等待的时间的和 &#x2F; 人数)****</p>\n<p>在上面的例子中，厕所就是资源，方案就是调度的规则，而调度就是安排他们上厕所。</p>\n<p><strong>我们回到操作系统，在多道程序系统中，进程的数量往往是多于处理机个数的，这样就导致处理机不能并行的处理所有进程。处理机调度，就是从就绪队列中按照某种的算法选择一个进程并将处理机分配给它，以实现进程的并发运行。</strong></p>\n<p><strong>操作系统的调度有三个层次，分别是高级调度、中级调度和低级调度。下面分别介绍它们。</strong></p>\n<h2 id=\"高级调度-外存-–-gt-内存\"><a href=\"#高级调度-外存-–-gt-内存\" class=\"headerlink\" title=\"高级调度 (外存 –&gt; 内存)\"></a>高级调度 (外存 –&gt; 内存)</h2><p>我们知道是计算机的内存空间是有限，所以有时操作系统无法将用户提交的作业全部放入内存 (在单道批系统时)，因此操作系统就需要确定某种算法，决定作业调度内存的顺序。<br><strong>高级调度，就是按某种算法在外存中处于后备队列的作业中挑选一个(或多个)作业，给它分配内存等必要资源，并建立相应的进程(建立PCB)，以使它(们)获得竞争处理机的权利。</strong><br>高级调度是外存与内存之间的调度。在这里，每个作业只调入一次，调出一次。作业调入时会建立相应的PCB，作业调出时才撤销PCB。<strong>高级调度主要是指调入的问题</strong>，因为只有调入的时机需要操作系统来确定，而调出的时机必然是作业运行结束后。<br>这种调度就好像刚刚的上厕所问题，厕所外的人处于后备队列，而高级调度的任务就类似把人从厕所外调入到厕所内。</p>\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201209214206.png\"></p>\n<h2 id=\"中级调度-外存-–-gt-内存\"><a href=\"#中级调度-外存-–-gt-内存\" class=\"headerlink\" title=\"中级调度 (外存 –&gt; 内存)\"></a>中级调度 (外存 –&gt; 内存)</h2><p>背景：在引入了虚拟存储技术之后，操作系统可将暂时不能运行的进程调至外存等待。等它重新具备了运行条件且内存稍有空闲时，操作系统再把它调回内存。<br>回顾一下，我们之前说过进程有几种状态，如 就绪态、阻塞态、运行态…，那被调到外存等待的进程处于什么状态呢？<strong>这些进程会处于挂起态。</strong>值得注意的，该进程的数据段和代码段会被调回外存，但PCB依旧会留在内存中的，并不会被调回外存，因为操作系统只有通过该进程的PCB，才能对其进行管理。<strong>被挂起进程的PCB会被操作系统放到挂起队列中。</strong></p>\n<p><strong>中级调度，就是决定将哪个挂起状态的进程从外存重新调回内存。</strong><br><strong>注意和高级调度区分，虽然同样是从外存调到内存，但高级调度是调入，中级调度是调回。</strong><br>由于一个进程可能会被多次调出、调回内存，因此<strong>中级调度发生的频率要比高级调度的高。</strong></p>\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201209214223.png\"></p>\n<h3 id=\"补充：进程的挂起态与七状态模型\"><a href=\"#补充：进程的挂起态与七状态模型\" class=\"headerlink\" title=\"补充：进程的挂起态与七状态模型\"></a>补充：进程的挂起态与七状态模型</h3><p>暂时调到外存等待的进程状态为挂起态。挂起态其实又可以进一步细分为就绪挂起、阻塞挂起两种状态，于是，五状态模型现在变成了七状态模型。<br><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201209214245.png\"> </p>\n<p><strong>注意：</strong></p>\n<ul>\n<li><strong>注意”挂起态”和”阻塞态”的区别，两种状态都是暂时不能获得CPU的服务，但挂起态是将进程实体(除PCB外)调到外存，而阻塞态的进程实体还留存在内存中。</strong></li>\n<li><strong>有的操作系统不只把挂起态分为阻塞挂起和就绪挂起，甚至会根据阻塞原因的不同把阻塞挂起态的进程进一步细分为多个队列。</strong></li>\n</ul>\n<h2 id=\"低级调度-内存-–-gt-CPU\"><a href=\"#低级调度-内存-–-gt-CPU\" class=\"headerlink\" title=\"低级调度 (内存 –&gt; CPU)\"></a>低级调度 (内存 –&gt; CPU)</h2><p><strong>低级调度的主要任务是按照某种规则从就绪队列中选取一个进程，将CPU分配给它。</strong>低级调度是操作系统中最基本的一种调度，在一般的操作系统中都必须配置低级调度。而且低级调度的频率很高，一般几十毫秒一次。</p>\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201209214129.png\"></p>\n<h2 id=\"又是一个有味道的例子\"><a href=\"#又是一个有味道的例子\" class=\"headerlink\" title=\"又是一个有味道的例子\"></a>又是一个有味道的例子</h2><p><strong>故事背景：现在有很多个人想上厕所，他们面前有一间厕所，厕所里面有三个马桶。</strong></p>\n<p><strong>接下来，我们把厕所看作是内存，马桶看作是CPU，现在我们来看看这三种调度与这例子的类比。</strong></p>\n<ul>\n<li><strong>高级调度：研究怎么让还没进入过厕所的人进入厕所。(厕所外 –&gt; 厕所内，之前一直在厕所外)</strong></li>\n<li><strong>中级调度：有的人进入了厕所，但是尿不出来，于是他们被赶了出去。中级调度就是研究怎么让这些被赶出去的人再次回到厕所。 (厕所外 –&gt; 厕所内，之前进入过厕所)</strong></li>\n<li><strong>低级调度：研究怎么给厕所内的人分配马桶。(厕所内 –&gt; 马桶上)</strong></li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201209214323.png\"></p>\n<h1 id=\"调度的算法\"><a href=\"#调度的算法\" class=\"headerlink\" title=\"调度的算法\"></a>调度的算法</h1><h3 id=\"先来先服务调度算法（FCFS）\"><a href=\"#先来先服务调度算法（FCFS）\" class=\"headerlink\" title=\"先来先服务调度算法（FCFS）\"></a><strong>先来先服务调度算法</strong>（FCFS）</h3><p>最简单的一个调度算法，就是非抢占式的<strong>先来先服务（*First Come First Severd, FCFS*）算法</strong>了。</p>\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201209221801.png\"></p>\n<p>顾名思义，先来后到，<strong>每次从就绪队列选择最先进入队列的进程，然后一直运行，直到进程退出或被阻塞，才会继续从队列中选择第一个进程接着运行。</strong></p>\n<p>这似乎很公平，但是当一个长作业先运行了，那么后面的短作业等待的时间就会很长，不利于短作业。</p>\n<p>FCFS 对长作业有利，适用于 CPU 繁忙型作业的系统，而不适用于 I&#x2F;O 繁忙型作业的系统。</p>\n<h3 id=\"最短作业优先调度算法（SJF）\"><a href=\"#最短作业优先调度算法（SJF）\" class=\"headerlink\" title=\"最短作业优先调度算法（SJF）\"></a><strong>最短作业优先调度算法</strong>（SJF）</h3><p><strong>最短作业优先（*Shortest Job First, SJF*）调度算法</strong>同样也是顾名思义，它会<strong>优先选择运行时间最短的进程来运行</strong>，这有助于提高系统的吞吐量。</p>\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201209221833.png\"></p>\n<p>这显然对长作业不利，很容易造成一种极端现象。</p>\n<p>比如，一个长作业在就绪队列等待运行，而这个就绪队列有非常多的短作业，那么就会使得长作业不断的往后推，周转时间变长，致使长作业长期不会被运行。</p>\n<h3 id=\"高响应比优先调度算法（HRRN）\"><a href=\"#高响应比优先调度算法（HRRN）\" class=\"headerlink\" title=\"高响应比优先调度算法（HRRN）\"></a><strong>高响应比优先调度算法</strong>（HRRN）</h3><p>前面的「先来先服务调度算法」和「最短作业优先调度算法」都没有很好的权衡短作业和长作业。</p>\n<p>那么，<strong>高响应比优先 （*Highest Response Ratio Next, HRRN*）调度算法</strong>主要是权衡了短作业和长作业。</p>\n<p><strong>每次进行进程调度时，先计算「响应比优先级」，然后把「响应比优先级」最高的进程投入运行</strong>，「响应比优先级」的计算公式：</p>\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201209222002.png\"></p>\n<h3 id=\"时间片轮转调度算法（RR）\"><a href=\"#时间片轮转调度算法（RR）\" class=\"headerlink\" title=\"时间片轮转调度算法（RR）\"></a><strong>时间片轮转调度算法</strong>（RR）</h3><p>最古老、最简单、最公平且使用最广的算法就是<strong>时间片轮转（*Round Robin, RR*）调度算法</strong>。</p>\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201210144712.png\"></p>\n<p><strong>每个进程被分配一个时间段，称为时间片（*Quantum*），即允许该进程在该时间段中运行。</strong></p>\n<ul>\n<li>如果时间片用完，进程还在运行，那么将会把此进程从 CPU 释放出来，并把 CPU 分配另外一个进程；</li>\n<li>如果该进程在时间片结束前阻塞或结束，则 CPU 立即进行切换；</li>\n</ul>\n<p>另外，时间片的长度就是一个很关键的点：</p>\n<ul>\n<li>如果时间片设得太短会导致过多的进程上下文切换，降低了 CPU 效率；</li>\n<li>如果设得太长又可能引起对短作业进程的响应时间变长。将</li>\n</ul>\n<p>通常时间片设为 <code>20ms~50ms</code> 通常是一个比较合理的折中值。</p>\n<h3 id=\"多级反馈队列调度算法\"><a href=\"#多级反馈队列调度算法\" class=\"headerlink\" title=\"多级反馈队列调度算法\"></a><strong>多级反馈队列调度算法</strong></h3><p><strong>多级反馈队列（*Multilevel Feedback Queue*）调度算法</strong>是「时间片轮转算法」和「最高优先级算法」的综合和发展。</p>\n<p>顾名思义：</p>\n<ul>\n<li>「多级」表示有多个队列，每个队列优先级从高到低，同时优先级越高时间片越短。</li>\n<li>「反馈」表示如果有新的进程加入优先级高的队列时，立刻停止当前正在运行的进程，转而去运行优先级高的队列；</li>\n</ul>\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201210144819.png\"></p>\n<p>来看看，它是如何工作的：</p>\n<ul>\n<li>设置了多个队列，赋予每个队列不同的优先级，每个<strong>队列优先级从高到低</strong>，同时<strong>优先级越高时间片越短</strong>；</li>\n<li>新的进程会被放入到第一级队列的末尾，按先来先服务的原则排队等待被调度，如果在第一级队列规定的时间片没运行完成，则将其转入到第二级队列的末尾，以此类推，直至完成；</li>\n<li>当较高优先级的队列为空，才调度较低优先级的队列中的进程运行。如果进程运行时，有新进程进入较高优先级的队列，则停止当前运行的进程并将其移入到原队列末尾，接着让较高优先级的进程运行；</li>\n</ul>\n<p>可以发现，对于短作业可能可以在第一级队列很快被处理完。对于长作业，如果在第一级队列处理不完，可以移入下次队列等待被执行，虽然等待的时间变长了，但是运行时间也会更长了，所以该算法很好的<strong>兼顾了长短作业，同时有较好的响应时间。</strong></p>\n<h1 id=\"几种调度算法的比较：\"><a href=\"#几种调度算法的比较：\" class=\"headerlink\" title=\"几种调度算法的比较：\"></a>几种调度算法的比较：</h1><p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201210144950.png\"></p>\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201210145320.png\"></p>\n<p>参考文章：</p>\n<p><a href=\"https://blog.csdn.net/u013616945/article/details/69569267\">CPU调度算法总结</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/225162322\">大厂面试爱问的「调度算法」，20 张图一举拿下</a></p>\n","text":"调度调度的基本概念调度研究的问题：当有一堆任务要处理，但由于资源有限，这些事情没法同时处理。这就需要确定某种规则来决定处理这些任务的顺序，这就是调度研究的问题。 举个有味道的例子：现在有4个人要上厕所(他们几乎同时到达)，他们分别需要使用厕所3分钟、10分钟、1分钟、4分钟。但是...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":27,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"操作系统","slug":"操作系统","count":3,"path":"api/tags/操作系统.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%B0%83%E5%BA%A6\"><span class=\"toc-text\">调度</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B0%83%E5%BA%A6%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">调度的基本概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%AB%98%E7%BA%A7%E8%B0%83%E5%BA%A6-%E5%A4%96%E5%AD%98-%E2%80%93-gt-%E5%86%85%E5%AD%98\"><span class=\"toc-text\">高级调度 (外存 –&gt; 内存)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E7%BA%A7%E8%B0%83%E5%BA%A6-%E5%A4%96%E5%AD%98-%E2%80%93-gt-%E5%86%85%E5%AD%98\"><span class=\"toc-text\">中级调度 (外存 –&gt; 内存)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E5%85%85%EF%BC%9A%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%8C%82%E8%B5%B7%E6%80%81%E4%B8%8E%E4%B8%83%E7%8A%B6%E6%80%81%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">补充：进程的挂起态与七状态模型</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%8E%E7%BA%A7%E8%B0%83%E5%BA%A6-%E5%86%85%E5%AD%98-%E2%80%93-gt-CPU\"><span class=\"toc-text\">低级调度 (内存 –&gt; CPU)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%88%E6%98%AF%E4%B8%80%E4%B8%AA%E6%9C%89%E5%91%B3%E9%81%93%E7%9A%84%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">又是一个有味道的例子</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%B0%83%E5%BA%A6%E7%9A%84%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">调度的算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%88%E6%9D%A5%E5%85%88%E6%9C%8D%E5%8A%A1%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%EF%BC%88FCFS%EF%BC%89\"><span class=\"toc-text\">先来先服务调度算法（FCFS）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%80%E7%9F%AD%E4%BD%9C%E4%B8%9A%E4%BC%98%E5%85%88%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%EF%BC%88SJF%EF%BC%89\"><span class=\"toc-text\">最短作业优先调度算法（SJF）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%AB%98%E5%93%8D%E5%BA%94%E6%AF%94%E4%BC%98%E5%85%88%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%EF%BC%88HRRN%EF%BC%89\"><span class=\"toc-text\">高响应比优先调度算法（HRRN）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%EF%BC%88RR%EF%BC%89\"><span class=\"toc-text\">时间片轮转调度算法（RR）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%BA%A7%E5%8F%8D%E9%A6%88%E9%98%9F%E5%88%97%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">多级反馈队列调度算法</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%87%A0%E7%A7%8D%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%E7%9A%84%E6%AF%94%E8%BE%83%EF%BC%9A\"><span class=\"toc-text\">几种调度算法的比较：</span></a></li></ol>","author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"vue axios传中文参数导致乱码的解决方案","uid":"77ab0fbeb021db0c986d25c4c83eb7f1","slug":"vue-axios传中文参数导致乱码的解决方案","date":"2020-12-25T09:59:00.000Z","updated":"2022-10-14T06:37:44.485Z","comments":true,"path":"api/articles/vue-axios传中文参数导致乱码的解决方案.json","keywords":null,"cover":[],"text":"问题描述var that &#x3D; this; var name &#x3D; that.signform.signname; var username &#x3D; that.signform.signusername; var password &#x3D; that.s...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Axios","slug":"Axios","count":3,"path":"api/tags/Axios.json"},{"name":"Vue.js","slug":"Vue-js","count":2,"path":"api/tags/Vue-js.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}},"next_post":{"title":"操作系统之信号量、P、V操作","uid":"510210968f59787c491612129c395946","slug":"操作系统之信号量、P、V操作","date":"2020-12-09T07:43:00.000Z","updated":"2022-03-30T16:00:00.487Z","comments":true,"path":"api/articles/操作系统之信号量、P、V操作.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforhexo/20201202142708.jpg","text":"信号量是最早出现的用来解决进程同步与互斥问题的机制(也可实现进程通信)，包括一个称为信 号量的变量及对它进行的两个原语操作。信号量为一个整数，我们设这个信号量为：sem。很显然，我们规定在sem大于等于零的时候代表可供并发进程使用的 资源实体数，sem小于零的时候，表示正在等待使...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"操作系统","slug":"操作系统","count":3,"path":"api/tags/操作系统.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}}}