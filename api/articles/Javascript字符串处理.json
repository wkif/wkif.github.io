{"title":"Javascript字符串处理","uid":"a6e4e55029c5e4aec2417aca65ffdd26","slug":"Javascript字符串处理","date":"2021-01-10T10:38:00.000Z","updated":"2022-03-30T16:10:51.350Z","comments":true,"path":"api/articles/Javascript字符串处理.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforhexo/20201202142640.jpg","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>作为JavaScript基础数据类型，字符串具有一些很强大的方法，在平时的工作中用到的地方也特别的多，很多时候因为不熟悉某个字符串的方法，往往走了很多弯路，所以整理了15个常用又高效的字符串方法，来一起看看这15个提升工作效率的方法吧！</p></blockquote>\n<h2 id=\"1-字符串去除首尾空格-——-trim\"><a href=\"#1-字符串去除首尾空格-——-trim\" class=\"headerlink\" title=\"1. 字符串去除首尾空格 —— trim()\"></a>1. 字符串去除首尾空格 —— trim()</h2><p><strong>说明：</strong> 去除字符串两边的空白。</p>\n<p><strong>需求场景：</strong> 用户搜索前去除输入的首尾空格。</p>\n<p><strong>用法：</strong> <code>string.trim()</code></p>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let str &#x3D; &quot;    白色不白，黑色不黑，我...我不喜欢你   &quot;\nlet result &#x3D; str.trim()\nconsole.log(result); &#x2F;&#x2F; 控制台打印：&quot;白色不白，黑色不黑，我...我不喜欢你&quot;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"2-字符串替换指定字符（串）——-replace\"><a href=\"#2-字符串替换指定字符（串）——-replace\" class=\"headerlink\" title=\"2. 字符串替换指定字符（串）—— replace()\"></a>2. 字符串替换指定字符（串）—— replace()</h2><p><strong>说明：</strong> 字符串替换字符还是<code>replace()</code>最强大~默认替换第一个符合条件的字符串，也可用正则做全局匹配</p>\n<p><strong>需求场景：</strong> 字符串的替换，关键词的屏蔽隐藏等</p>\n<p><strong>用法：</strong> <code>string.replace(searchvalue,newvalue)</code></p>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let str &#x3D; &quot;你知道吗？世界上有60亿人，宇宙有60万亿小行星，你比小行星还要珍贵一万倍&quot;\nlet result1 &#x3D; str.replace(&quot;亿&quot;,&quot;个&quot;)\nlet result2 &#x3D; str.replace(&#x2F;亿&#x2F;g,&quot;个&quot;)\nconsole.log(result1)  &#x2F;&#x2F; 控制台打印：&quot;你知道吗？世界上有60个人，宇宙有60万亿小行星，你比小行星还要珍贵一万倍&quot;\nconsole.log(result2)  &#x2F;&#x2F; 控制台打印：&quot;你知道吗？世界上有60个人，宇宙有60万个小行星，你比小行星还要珍贵一万倍&quot;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3-字符串合并-——-concat\"><a href=\"#3-字符串合并-——-concat\" class=\"headerlink\" title=\"3. 字符串合并 —— concat()\"></a>3. 字符串合并 —— concat()</h2><p><strong>说明：</strong> 连接两个或更多字符串，并返回新的字符串。（悄悄告诉你，数组也可以使用哦~）</p>\n<p><strong>需求场景：</strong> 字符串合并展示。</p>\n<p><strong>用法：</strong> <code>string.concat()</code></p>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let str1 &#x3D; &quot;我有很多好听的情话,&quot;\nlet str2 &#x3D; &quot;可面对你都不敢说不出口。&quot;\nlet result &#x3D; str1.concat(str2)\nconsole.log(result) &#x2F;&#x2F; 控制台打印：&quot;我有很多好听的情话,可面对你都不敢说不出口。&quot;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-字符串转数组-——-split\"><a href=\"#4-字符串转数组-——-split\" class=\"headerlink\" title=\"4. 字符串转数组 —— split()\"></a>4. 字符串转数组 —— split()</h2><p><strong>说明：</strong> 把字符串通过特定字符分割为字符串数组，<code>split</code>还可以使用正则表达式实现拆分多个分隔符。</p>\n<p><strong>需求场景：</strong> 字符串转数组进行遍历等操作。</p>\n<p><strong>用法1：</strong> <code>string.split()</code></p>\n<p><strong>用法2：</strong> <code>string.split(/[*]/)</code></p>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let str &#x3D; &quot;张三,李四;王五&quot;\nlet result1 &#x3D; str.split(&#39;,&#39;)\nlet result2 &#x3D; str.split(&#x2F;[,;]&#x2F;)\nconsole.log(result1) &#x2F;&#x2F; 控制台打印：[&quot;张三&quot;, &quot;李四;王五&quot;]\nconsole.log(result2) &#x2F;&#x2F; 控制台打印：[&quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;]\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"5-字符串转数组-——-…string\"><a href=\"#5-字符串转数组-——-…string\" class=\"headerlink\" title=\"5. 字符串转数组 —— […string]\"></a>5. 字符串转数组 —— […string]</h2><p><strong>说明：</strong> 说起来，这并不是字符串的方法，主要是我觉得ES6语法中的扩展操作符的…语法是转数组最简洁的方法。它和<code>split()</code>区别在于：<code>...</code>语法不根据特定字符切割，而是把每个字符都当作单独的元素添加到数组中。</p>\n<p><strong>需求场景：</strong> 字符串全部分割成字符数组。</p>\n<p><strong>用法：</strong> <code>[...string]</code></p>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let str &#x3D; &#39;这是一个字符串string&#39;\nlet arr &#x3D; [...str]\nconsole.log(arr) &#x2F;&#x2F; 控制台打印：[&quot;这&quot;, &quot;是&quot;, &quot;一&quot;, &quot;个&quot;, &quot;字&quot;, &quot;符&quot;, &quot;串&quot;, &quot;s&quot;, &quot;t&quot;, &quot;r&quot;, &quot;i&quot;, &quot;n&quot;, &quot;g&quot;]\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"6-字符串反转-——-…string-reverse-join-“”\"><a href=\"#6-字符串反转-——-…string-reverse-join-“”\" class=\"headerlink\" title=\"6. 字符串反转 —— […string].reverse().join(“”)\"></a>6. 字符串反转 —— […string].reverse().join(“”)</h2><p><strong>说明：</strong> 这个也不能算是字符串方法，但是好用。本质上还是转成数组，数组反转之后，再拼接成字符串。</p>\n<p><strong>需求场景：</strong> 将当前字符串反转输出</p>\n<p><strong>用法：</strong> <code>[...string].reverse().join(&quot;&quot;)</code></p>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let str &#x3D; &quot;两极反转，龙卷风摧毁停车场!&quot;\nlet result &#x3D; [...str].reverse().join(&quot;&quot;)\nconsole.log(result) &#x2F;&#x2F; 控制台打印：!场车停毁摧风卷龙，转反极两\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"7-字符串的多次复制-——-repeat\"><a href=\"#7-字符串的多次复制-——-repeat\" class=\"headerlink\" title=\"7. 字符串的多次复制 —— repeat ()\"></a>7. 字符串的多次复制 —— repeat ()</h2><p><strong>说明：</strong> 复制字符串指定次数，并将它们连接在一起返回。</p>\n<p><strong>需求场景：</strong> 字符串需要进行 n 次自动复制。</p>\n<p><strong>用法：</strong> <code>string.repeat(n)</code></p>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let str1 &#x3D; &#39;复制&#39;\nlet result &#x3D; str1.repeat(2)\nconsol.log(result) &#x2F;&#x2F; 控制台打印：复制复制\n\nlet str2 &#x3D; &#39;10&#39;\nlet result &#x3D; str2.repeat(5)\nconsole.log(result) &#x2F;&#x2F; 控制台打印：1010101010\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"8-字符串是否包含某字符-（串）——-search\"><a href=\"#8-字符串是否包含某字符-（串）——-search\" class=\"headerlink\" title=\"8. 字符串是否包含某字符 （串）—— search()\"></a>8. 字符串是否包含某字符 （串）—— search()</h2><p><strong>说明：</strong>检索字符串中指定的或与正则表达式相匹配的首个子字符串。如果匹配到了则返回匹配字符串首字符下标，如果没有匹配到，则返回 -1。</p>\n<p><strong>需求场景：</strong> 字符串内关键字的搜索查询定位。</p>\n<p><strong>用法：</strong> <code>string.search(searchvalue)</code>。</p>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let str &#x3D; &quot;今天的夜色很好，月亮也很圆，唯一遗憾的是，我不是从你的窗子里看到的月亮。&quot;\nlet result1 &#x3D; str.search(&quot;月亮&quot;)\nlet result2 &#x3D; str.search(&#x2F;[，。]&#x2F;)\nconsole.log(result1) &#x2F;&#x2F; 控制台打印：8\nconsole.log(result2) &#x2F;&#x2F; 控制台打印：7\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"9-字符串内是否包含某字符（串）——-includes\"><a href=\"#9-字符串内是否包含某字符（串）——-includes\" class=\"headerlink\" title=\"9. 字符串内是否包含某字符（串）—— includes()\"></a>9. 字符串内是否包含某字符（串）—— includes()</h2><p><strong>说明：</strong> <code>includes()</code>可选择从某处下标之后开始查找，返回true或false。第二个参数代表从某下标处开始查找，忽略则代表从下标0开始查找。</p>\n<p>它和search()区别在于：<code>search()</code>返回指定下标， <code>includes()</code>返回true或false；<code>search()</code>不能从指定下标开始查找， <code>includes()</code>可以从指定下标处开始查找。</p>\n<p><strong>需求场景：</strong> 判断字符串中是否有不合法字符等</p>\n<p><strong>用法：</strong> <code>string.includes(searchvalue, start)</code></p>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let str &#x3D; &quot;没有夏日的的凉风，也没有冬日的暖阳，它们只是恰好出现在了合适的时间罢了&quot;\nlet result1 &#x3D; str.includes(&quot;冬日&quot;)\nlet result2 &#x3D; str.includes(&quot;冬日&quot;,20)\nconsole.log(result1); &#x2F;&#x2F; 控制台打印：true\nconsole.log(result2); &#x2F;&#x2F; 控制台打印：false\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"10-字符串中指定的字符串值在首次或最后一次出现的位置-——-indexOf-和-lastIndexOf\"><a href=\"#10-字符串中指定的字符串值在首次或最后一次出现的位置-——-indexOf-和-lastIndexOf\" class=\"headerlink\" title=\"10. 字符串中指定的字符串值在首次或最后一次出现的位置 —— indexOf() 和 lastIndexOf()\"></a>10. 字符串中指定的字符串值在首次或最后一次出现的位置 —— indexOf() 和 lastIndexOf()</h2><p><strong>说明：</strong></p>\n<p><code>indexOf()</code> 方法可返回某个指定的字符串值首次出现的位置，即从前向后搜索。如果指定第二个参数 start，则在字符串中的指定位置开始从前向后搜索。</p>\n<p><code>lastIndexOf()</code> 方法可返回某个指定的字符串值最后出现的位置，即从后向前搜索。如果指定第二个参数 start，则在字符串中的指定位置从后向前搜索。</p>\n<p><strong>需求场景：</strong> 关键字首次或最后一次出现的位置</p>\n<p><strong>用法1：</strong> <code>string.indexOf(searchvalue,start)</code> 指定的字符串值首次出现的位置</p>\n<p><strong>用法2：</strong> <code>string.lastIndexOf(searchvalue,start)</code> 指定的字符串值最后出现的位置</p>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let str &#x3D; &quot;你来人间一趟，你要看看太阳。和你的心上人一起走在街上，了解她，也要了解太阳&quot;\nlet result1 &#x3D; str.indexOf(&quot;太阳&quot;)\nlet result2 &#x3D; str.indexOf(&quot;太阳&quot;,10)  &#x2F;&#x2F; 从10下标的字符开始查找&quot;太阳&quot;，查找范围是&quot;太阳。和你的心上人一起走在街上，了解她，也要了解太阳&quot;，下标还是相对原字符串而言的，因此返回11。\nlet result3 &#x3D; str.lastIndexOf(&quot;太阳&quot;) \nlet result4 &#x3D; str.lastIndexOf(&quot;太阳&quot;,10)  &#x2F;&#x2F; 0-10下标的字符串为&quot;你来人间一趟，你要看看&quot;，没有&quot;太阳&quot;，返回-1\nconsole.log(result1) &#x2F;&#x2F; 控制台打印：11\nconsole.log(result2) &#x2F;&#x2F; 控制台打印：11\nconsole.log(result3) &#x2F;&#x2F; 控制台打印：35\nconsole.log(result4) &#x2F;&#x2F; 控制台打印：-1\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"11-字符串转大小写-——-toLowerCase-和-toUpperCase\"><a href=\"#11-字符串转大小写-——-toLowerCase-和-toUpperCase\" class=\"headerlink\" title=\"11. 字符串转大小写 —— toLowerCase() 和 toUpperCase()\"></a>11. 字符串转大小写 —— toLowerCase() 和 toUpperCase()</h2><p><strong>说明：</strong> 字符串大小写之间的转换</p>\n<p><strong>需求场景：</strong> 网址，英文名，首字母大写等要求。</p>\n<p><strong>用法1：</strong> <code>string.toLowerCase()</code> 转成小写字母</p>\n<p><strong>用法2：</strong> <code>string.toUpperCase()</code> 转成大写字母</p>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let str &#x3D; &quot;For you, A thousand times over&quot;\nlet result1 &#x3D; str.toLowerCase()\nlet result2 &#x3D; str.toUpperCase()\nconsole.log(result1) &#x2F;&#x2F; 控制台打印：&quot;for you, a thousand times over&quot;\nconsole.log(result2) &#x2F;&#x2F; 控制台打印：&quot;FOR YOU, A THOUSAND TIMES OVER&quot;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"12-字符串填充到指定长度-——-padStart-和-padEnd\"><a href=\"#12-字符串填充到指定长度-——-padStart-和-padEnd\" class=\"headerlink\" title=\"12. 字符串填充到指定长度 —— padStart () 和 padEnd ()\"></a>12. 字符串填充到指定长度 —— padStart () 和 padEnd ()</h2><p><strong>说明：</strong> 字符串填充指定字符到指定长度</p>\n<p><strong>需求场景：</strong> 字符串长度不足，需要补充至指定长度n，如年月日，隐藏手机号，隐藏昵称等。</p>\n<p><strong>用法1：</strong> <code>string.padStart(n,&#39;补充内容&#39;)</code> 从字符串前添加补充内容。</p>\n<p><strong>用法2：</strong> <code>string.padEnd (n,&#39;补充内容&#39;)</code> 从字符串后添加补充内容。</p>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 在字符串前补充&quot;-&quot;，直到字符串的长度为5\nlet str1 &#x3D; &#39;预备开始&#39;\nlet result &#x3D; str1.padStart(5, &#39;-&#39;)\nconsole.log(result) &#x2F;&#x2F; 控制台打印：&quot;---预备开始&quot;\n\n&#x2F;&#x2F;在末尾添加&quot;*&quot;，直到字符串的长度为11\nlet str2 &#x3D; &quot;184&quot;\nlet result &#x3D; str2.padEnd(11, &quot;*&quot;)\nconsole.log(result) &#x2F;&#x2F; 控制台打印：&quot;184********&quot;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"13-字符串是否以特定字符（串）开头或结尾-——-startsWith-、endsWith\"><a href=\"#13-字符串是否以特定字符（串）开头或结尾-——-startsWith-、endsWith\" class=\"headerlink\" title=\"13. 字符串是否以特定字符（串）开头或结尾 —— startsWith()、endsWith()\"></a>13. 字符串是否以特定字符（串）开头或结尾 —— startsWith()、endsWith()</h2><p><strong>说明：</strong> 用于检测字符串是否以指定的子字符串开始。如果是以指定的子字符串开头返回 true，否则 false。<code>startsWith()</code>、<code>endsWith()</code>方法区分大小写。第二个参数代表从某下标处开始判断是否以特定字符（串）开头或结尾，忽略则<code>startsWith()</code>从下标0开始检测，<code>endsWith()</code>从字符串最后一位下标开始检测。</p>\n<p><strong>值得注意的是：</strong></p>\n<p>当<code>startsWith()</code> 的第二个参数如果超出了当前字符串的最大长度，依旧生效，返回false。</p>\n<p>当<code>endsWith()</code> 的第二个参数如果超出了当前字符串的最大长度，会不生效，改为从字符串最后一位下标开始检测。</p>\n<p><strong>需求场景：</strong> 判断字符串是否以指定字符开头或结尾</p>\n<p><strong>用法1：</strong> <code>string.startsWith(searchvalue, start)</code></p>\n<p><strong>用法2：</strong> <code>string.endsWith(searchvalue, start)</code></p>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let str &#x3D; &quot;过去的时候，我们相视一笑，就已过了大半辈子&quot;\nlet result1 &#x3D; str.startsWith(&quot;过去&quot;)\nlet result2 &#x3D; str.startsWith(&quot;过去&quot;,10)\nlet result3 &#x3D; str.endsWith(&quot;半辈子&quot;)\nlet result4 &#x3D; str.endsWith(&quot;半辈子&quot;,20)\nconsole.log(result1); &#x2F;&#x2F; 控制台打印：true\nconsole.log(result2); &#x2F;&#x2F; 控制台打印：false\nconsole.log(result3); &#x2F;&#x2F; 控制台打印：true\nconsole.log(result4); &#x2F;&#x2F; 控制台打印：false\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"14-字符串长度计算-——-length\"><a href=\"#14-字符串长度计算-——-length\" class=\"headerlink\" title=\"14. 字符串长度计算 —— length\"></a>14. 字符串长度计算 —— length</h2><p><strong>说明：</strong> length属性不仅是数组的属性，同时伪数组，字符串都有length属性。但是遇到某些生僻字如“𩸽”或者表情符号“🙂”，它们的length为2，这时候返回的length可能不是我们真正想要的。这是因为js字符串是由16位的代码单元组成，而不是由Unicode代码点组成。同时js使用两个代码单元表示216及其以上的Unicode代码点。这两个代码单元被称为代理对。一个代码单元被默认为1个长度单位，像“𩸽”或者“🙂”是由两个代码单元组成的代理对，因此它们的length为2。</p>\n<p><strong>需求场景：</strong> 求出当前字符串长度</p>\n<p><strong>用法：</strong> <code>string.length</code></p>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let str &#x3D; &quot;相约白头偕老，你却悄悄秃了头&quot;\nlet result &#x3D; str.length\nconsole.log(result) &#x2F;&#x2F; 控制台打印：14\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"15-字符串截取-——-substr-和-slice-和-substring\"><a href=\"#15-字符串截取-——-substr-和-slice-和-substring\" class=\"headerlink\" title=\"15. 字符串截取 —— substr() 和 slice() 和 substring()\"></a>15. 字符串截取 —— substr() 和 slice() 和 substring()</h2><p><strong>说明：</strong> 字符串截取和拼接是字符串最常用也是最易错的方法。主要原因是 <code>substr()</code> 、 <code>slice()</code> 和 <code>substring()</code>的区别有很多小伙伴还不太明白。</p>\n<p><strong>substr()：</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>参数一（必须）：一个整数，要开始截取字符的下标，如为负则代表从尾部开始截取。参数二（可选）：一个整数，要截取字符的数量。如果省略该参数，则默认为<code>string.length</code>，即当前字符串的长度。</p></blockquote>\n<p><strong>slice() ：</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>参数一（必须）：一个整数，要开始截取字符的下标，如为负则代表从尾部开始截取。参数二（可选）：一个整数，要结束截取字符的下标，如为负则代表从尾部截取多少个字符。如果省略该参数，则默认为string.length，即当前字符串的长度。</p></blockquote>\n<p><strong>substring() ：</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>参数一（必须）：一个非负的整数，要开始截取字符的下标。参数二（可选）：一个非负的整数，要结束截取字符的下标。如果省略该参数，则默认为string.length，即当前字符串的长度。</p></blockquote>\n<p><strong>需求场景：</strong> 截取指定下标指定长度的字符串</p>\n<p><strong>用法1：</strong> string.substr(<em>start</em>,<em>length</em>)</p>\n<p><strong>用法2：</strong> string.slice(<em>start</em>,<em>end</em>)</p>\n<p><strong>用法3：</strong> string.substring(<em>start</em>,<em>end</em>)</p>\n<p><strong>例子：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let str &#x3D; &#39;0123456789&#39;\nlet result1 &#x3D; str.substr(2,5) &#x2F;&#x2F; 从下标2开始截取，截取5位\nlet result2 &#x3D; str.slice(2,5)  &#x2F;&#x2F; 从下标2开始截取，截取到下标5（不含下标5）\nlet result3 &#x3D; str.substring(2,5) &#x2F;&#x2F; 从下标2开始截取，截取到下标5（不含下标5）\n\nconsole.log(result1) &#x2F;&#x2F; 控制台打印：23456\nconsole.log(result2) &#x2F;&#x2F; 控制台打印：234\nconsole.log(result3) &#x2F;&#x2F; 控制台打印：234\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这就是关于字符串常用的15个方法详细说明，可在我们工作中的很多时候，可能并不能很好的使用它们。大多是因为不够熟练，看一遍容易忘记，所以我们要时常翻一翻这些常用的方法，也许就能节省你工作中几十分钟~ 为摸鱼大业添砖加瓦 ~</p>\n<p>转自：<a href=\"https://mp.weixin.qq.com/s/RjSx5K11Z06C-Yl381m7zQ\">《看完就懂系列》15个方法教你玩转字符串</a></p>\n","text":" 作为JavaScript基础数据类型，字符串具有一些很强大的方法，在平时的工作中用到的地方也特别的多，很多时候因为不熟悉某个字符串的方法，往往走了很多弯路，所以整理了15个常用又高效的字符串方法，来一起看看这15个提升工作效率的方法吧！ 1. 字符串去除首尾空格 —— trim...","link":"","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":25,"path":"api/categories/学习笔记.json"},{"name":"转载","slug":"学习笔记/转载","count":1,"path":"api/categories/学习笔记/转载.json"}],"tags":[{"name":"javascript","slug":"javascript","count":7,"path":"api/tags/javascript.json"},{"name":"前端","slug":"前端","count":1,"path":"api/tags/前端.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%BB%E9%99%A4%E9%A6%96%E5%B0%BE%E7%A9%BA%E6%A0%BC-%E2%80%94%E2%80%94-trim\"><span class=\"toc-text\">1. 字符串去除首尾空格 —— trim()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9B%BF%E6%8D%A2%E6%8C%87%E5%AE%9A%E5%AD%97%E7%AC%A6%EF%BC%88%E4%B8%B2%EF%BC%89%E2%80%94%E2%80%94-replace\"><span class=\"toc-text\">2. 字符串替换指定字符（串）—— replace()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%90%88%E5%B9%B6-%E2%80%94%E2%80%94-concat\"><span class=\"toc-text\">3. 字符串合并 —— concat()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B0%E7%BB%84-%E2%80%94%E2%80%94-split\"><span class=\"toc-text\">4. 字符串转数组 —— split()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B0%E7%BB%84-%E2%80%94%E2%80%94-%E2%80%A6string\"><span class=\"toc-text\">5. 字符串转数组 —— […string]</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E8%BD%AC-%E2%80%94%E2%80%94-%E2%80%A6string-reverse-join-%E2%80%9C%E2%80%9D\"><span class=\"toc-text\">6. 字符串反转 —— […string].reverse().join(“”)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%A4%9A%E6%AC%A1%E5%A4%8D%E5%88%B6-%E2%80%94%E2%80%94-repeat\"><span class=\"toc-text\">7. 字符串的多次复制 —— repeat ()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E6%9F%90%E5%AD%97%E7%AC%A6-%EF%BC%88%E4%B8%B2%EF%BC%89%E2%80%94%E2%80%94-search\"><span class=\"toc-text\">8. 字符串是否包含某字符 （串）—— search()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%86%85%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E6%9F%90%E5%AD%97%E7%AC%A6%EF%BC%88%E4%B8%B2%EF%BC%89%E2%80%94%E2%80%94-includes\"><span class=\"toc-text\">9. 字符串内是否包含某字符（串）—— includes()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%8C%87%E5%AE%9A%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%80%BC%E5%9C%A8%E9%A6%96%E6%AC%A1%E6%88%96%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E5%87%BA%E7%8E%B0%E7%9A%84%E4%BD%8D%E7%BD%AE-%E2%80%94%E2%80%94-indexOf-%E5%92%8C-lastIndexOf\"><span class=\"toc-text\">10. 字符串中指定的字符串值在首次或最后一次出现的位置 —— indexOf() 和 lastIndexOf()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%A4%A7%E5%B0%8F%E5%86%99-%E2%80%94%E2%80%94-toLowerCase-%E5%92%8C-toUpperCase\"><span class=\"toc-text\">11. 字符串转大小写 —— toLowerCase() 和 toUpperCase()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A1%AB%E5%85%85%E5%88%B0%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6-%E2%80%94%E2%80%94-padStart-%E5%92%8C-padEnd\"><span class=\"toc-text\">12. 字符串填充到指定长度 —— padStart () 和 padEnd ()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#13-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E4%BB%A5%E7%89%B9%E5%AE%9A%E5%AD%97%E7%AC%A6%EF%BC%88%E4%B8%B2%EF%BC%89%E5%BC%80%E5%A4%B4%E6%88%96%E7%BB%93%E5%B0%BE-%E2%80%94%E2%80%94-startsWith-%E3%80%81endsWith\"><span class=\"toc-text\">13. 字符串是否以特定字符（串）开头或结尾 —— startsWith()、endsWith()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14-%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E8%AE%A1%E7%AE%97-%E2%80%94%E2%80%94-length\"><span class=\"toc-text\">14. 字符串长度计算 —— length</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#15-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%88%AA%E5%8F%96-%E2%80%94%E2%80%94-substr-%E5%92%8C-slice-%E5%92%8C-substring\"><span class=\"toc-text\">15. 字符串截取 —— substr() 和 slice() 和 substring()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"微信小程序开发笔记","uid":"3e7ce6d43f68f0f7c89b0717b8394e60","slug":"微信小程序开发笔记","date":"2021-01-16T15:17:00.000Z","updated":"2022-03-30T16:08:25.809Z","comments":true,"path":"api/articles/微信小程序开发笔记.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310008758.jpg","text":"1.跳转方式&#x2F;&#x2F;只能跳转到tabBar配置页面 wx.switchTab(&#123; url: &#39;&#x2F;pages&#x2F;index&#x2F;index&#39;, &#125;); &#x2F;&#x2F;返回上一级页面（delta：返...","link":"","photos":[],"count_time":{"symbolsCount":564,"symbolsTime":"1 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":25,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"微信小程序","slug":"微信小程序","count":4,"path":"api/tags/微信小程序.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"C语言知识点","date":"2021-01-05T06:52:00.000Z","updated":"2022-03-30T16:10:12.416Z","comments":true,"path":"api/articles/C语言知识点.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/wkif/imgforTeachingDemo/202203310008758.jpg","text":"输入未知长度字符数组#include &lt;stdio.h&gt; int main() &#123; char array_num[100] ; int i &#x3D; 0, length; do &#123; scanf(&quot;%c&quot;, &amp;arra...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"19 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":25,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"C语言","slug":"C语言","count":3,"path":"api/tags/C语言.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}}}