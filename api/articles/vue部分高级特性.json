{"title":"vue部分知识点","uid":"95705889e919323e9ce5ee71abf5183c","slug":"vue部分高级特性","date":"2021-07-16T05:22:00.000Z","updated":"2022-04-24T08:00:40.660Z","comments":true,"path":"api/articles/vue部分高级特性.json","keywords":null,"cover":[],"content":"<h3 id=\"vue是什么\"><a href=\"#vue是什么\" class=\"headerlink\" title=\"vue是什么\"></a>vue是什么</h3><p>用于构建用户界面的渐进式开源JS框架，是创建单页应用的Web框架</p>\n<p>核心特征：</p>\n<ol>\n<li>数据驱动mvvm</li>\n<li>组件化</li>\n<li>指令系统</li>\n</ol>\n<h3 id=\"SPA与MPA\"><a href=\"#SPA与MPA\" class=\"headerlink\" title=\"SPA与MPA\"></a>SPA与MPA</h3><h4 id=\"SPA\"><a href=\"#SPA\" class=\"headerlink\" title=\"SPA\"></a>SPA</h4><p>单页应用：</p>\n<p>动态重写当前页面数据用以用户交互</p>\n<h4 id=\"MPA：\"><a href=\"#MPA：\" class=\"headerlink\" title=\"MPA：\"></a>MPA：</h4><p>多页应用，每一个页面都是主页面</p>\n<h4 id=\"SPA首加载慢：\"><a href=\"#SPA首加载慢：\" class=\"headerlink\" title=\"SPA首加载慢：\"></a>SPA首加载慢：</h4><p>原因：网络延时，资源体积太大</p>\n<p>解决办法：减小入口文件体积，Gzip压缩，静态资源缓存</p>\n<h3 id=\"v-if和v-show\"><a href=\"#v-if和v-show\" class=\"headerlink\" title=\"v-if和v-show\"></a>v-if和v-show</h3><p>作用：都是控制元素显示与否</p>\n<p>不同点：</p>\n<p>作用机理，v-if控制的是元素是否渲染，而v-show控制css的display属性，故频繁改变现隐状态使用v-show可以减少消耗</p>\n<h3 id=\"Vue实例挂载过程\"><a href=\"#Vue实例挂载过程\" class=\"headerlink\" title=\"Vue实例挂载过程\"></a>Vue实例挂载过程</h3><ol>\n<li>调用_init方法(其中定义set、get、delete、destory方法；定义on,off,emit事件；定义update,forceupdate,destoryed生命周期)</li>\n<li>调用$mount挂载实例对象</li>\n<li>挂载是执行mountcomponent方法</li>\n<li>调用render函数创建虚拟dom</li>\n<li>调用updatemount将虚拟DOM挂载到真实DOM，并渲染到页面中</li>\n</ol>\n<h3 id=\"v-if和v-for\"><a href=\"#v-if和v-for\" class=\"headerlink\" title=\"v-if和v-for\"></a>v-if和v-for</h3><p>不建议同时作用于同一元素，v-for优先级高于v-if，故每次都会现循环渲染，在逻辑判断</p>\n<h3 id=\"路由懒加载\"><a href=\"#路由懒加载\" class=\"headerlink\" title=\"路由懒加载\"></a>路由懒加载</h3><p>整个网页默认是刚打开就去加载所有页面，路由懒加载就是只加载你当前点击的那个模块。</p>\n<p>按需去加载路由对应的资源，提高首屏加载速度（tip:首页不用设置懒加载，而且一个页面加载过后再次访问不会重复加载）。</p>\n<p>实现原理：将路由相关的组件，不再直接导入了，而是改写成异步组件的写法，只有当函数被调用的时候，才去加载对应的组件内容。</p>\n<p>未启用：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> Router <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\n<span class=\"token keyword\">import</span> HelloWorld <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/HelloWorld'</span>\n\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Router<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n       <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'HelloWorld'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>HelloWorld\n        <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>ES 提出的import方法启用：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> Router <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\n\n\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Router<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">HelloWorld</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@/components/HelloWorld\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n       <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'HelloWorld'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span>HelloWorld\n        <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>简化：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> Router <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\n\n\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Router<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//const HelloWorld =()=>inport(\"@/components/HelloWorld\")</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n       <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'HelloWorld'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@/components/HelloWorld\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"为什么data是函数不是对象\"><a href=\"#为什么data是函数不是对象\" class=\"headerlink\" title=\"为什么data是函数不是对象\"></a>为什么data是函数不是对象</h3><ul>\n<li>根实例对象<code>data</code>可以是对象也可以是函数（根实例是单例），不会产生数据污染情况</li>\n<li>组件实例对象<code>data</code>必须为函数，目的是为了防止多个组件实例对象之间共用一个<code>data</code>，产生数据污染。采用函数的形式，<code>initData</code>时会将其作为工厂函数都会返回全新<code>data</code>对象</li>\n</ul>\n<h3 id=\"vue2和vue3双向绑定\"><a href=\"#vue2和vue3双向绑定\" class=\"headerlink\" title=\"vue2和vue3双向绑定\"></a>vue2和vue3双向绑定</h3><h4 id=\"vue2：\"><a href=\"#vue2：\" class=\"headerlink\" title=\"vue2：\"></a>vue2：</h4><p>通过 object.defineProperty 实现，这种方法不会监听到属性变化和数组变化，会造成</p>\n<h5 id=\"问题：动态给vue的data添加一个新的属性时页面不会刷新\"><a href=\"#问题：动态给vue的data添加一个新的属性时页面不会刷新\" class=\"headerlink\" title=\"问题：动态给vue的data添加一个新的属性时页面不会刷新\"></a>问题：<strong>动态给vue的data添加一个新的属性时页面不会刷新</strong></h5><p>Object.defineProperty原理：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obk<span class=\"token punctuation\">,</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> val\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newVal<span class=\"token operator\">!=</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n           val <span class=\"token operator\">=</span> newVal\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>​    所以set只能对初始化是已经存在的属性进行赋值，无法拦截到新增属性；</p>\n<h5 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h5><ol>\n<li>Vue.set()</li>\n<li>object.assign()</li>\n<li>forceUpdate()强制刷新</li>\n</ol>\n<h4 id=\"vue3\"><a href=\"#vue3\" class=\"headerlink\" title=\"vue3\"></a>vue3</h4><p>针对vue2中的问题，Vue3 使用了ES6新增的Proxy代理来拦截变化，可以监听到属性以及数组变化</p>\n<h3 id=\"Vue中组件和插件\"><a href=\"#Vue中组件和插件\" class=\"headerlink\" title=\"Vue中组件和插件\"></a>Vue中组件和插件</h3><h4 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h4><p>定义：每一个.vue文件都可以视作一个组件，方便调试， 利于维护等；</p>\n<h5 id=\"编写模式：\"><a href=\"#编写模式：\" class=\"headerlink\" title=\"编写模式：\"></a>编写模式：</h5><p>每一个vue文件模板：</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;&lt;&#x2F;template&gt;\n&lt;script&gt;\nexprot default&#123;\n    \n    &#125;\n&lt;&#x2F;script&gt;\n&lt;style&gt;&lt;&#x2F;style&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们还可以通过<code>template</code>属性来编写一个组件，如果组件内容多，我们可以在外部定义<code>template</code>组件内容，如果组件内容并不多，我们可直接写在<code>template</code>属性上</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>template id<span class=\"token operator\">=</span><span class=\"token string\">\"testComponent\"</span><span class=\"token operator\">></span>     <span class=\"token comment\">// 组件显示的内容</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>component<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>   \n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">'componentA'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span> \n    <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">'#testComponent'</span>  \n    <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div>component&lt;/div></span><span class=\"token template-punctuation string\">`</span></span>  <span class=\"token comment\">// 组件内容少可以通过这种形式</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"注册形式：\"><a href=\"#注册形式：\" class=\"headerlink\" title=\"注册形式：\"></a>注册形式：</h5><h3 id=\"Vue组件之间的通信方式\"><a href=\"#Vue组件之间的通信方式\" class=\"headerlink\" title=\"Vue组件之间的通信方式\"></a>Vue组件之间的通信方式</h3><ul>\n<li>父子关系的组件数据传递选择 <code>props</code> 与 <code>$emit</code>进行传递，也可选择<code>ref</code></li>\n<li>兄弟关系的组件数据传递可选择<code>$bus</code>，其次可以选择<code>$parent</code>进行传递</li>\n<li>祖先与后代组件数据传递可选择<code>attrs</code>与<code>listeners</code>或者 <code>Provide</code>与 <code>Inject</code></li>\n<li>复杂关系的组件数据传递可以通过<code>vuex</code>存放共享的变量</li>\n</ul>\n<h3 id=\"vue的mixin\"><a href=\"#vue的mixin\" class=\"headerlink\" title=\"vue的mixin\"></a>vue的mixin</h3><p><code>mixin</code>（混入），提供了一种非常灵活的方式，来分发 <code>Vue</code> 组件中的可复用功能。</p>\n<p>本质其实就是一个<code>js</code>对象，它可以包含我们组件中任意功能选项，如<code>data</code>、<code>components</code>、<code>methods</code>、<code>created</code>、<code>computed</code>等等</p>\n<p>我们只要将共用的功能以对象的方式传入 <code>mixins</code>选项中，当组件使用 <code>mixins</code>对象时所有<code>mixins</code>对象的选项都将被混入该组件本身的选项中来</p>\n<p>在<code>Vue</code>中我们可以<strong>局部混入</strong>跟<strong>全局混入</strong></p>\n<h3 id=\"vue中key的原理\"><a href=\"#vue中key的原理\" class=\"headerlink\" title=\"vue中key的原理\"></a>vue中key的原理</h3><ol>\n<li>当我们在使用<code>v-for</code>时，需要给单元加上<code>key</code></li>\n<li>用<code>+new Date()</code>生成的时间戳作为<code>key</code>，手动强制触发重新渲染</li>\n</ol>\n<h3 id=\"keep-alive\"><a href=\"#keep-alive\" class=\"headerlink\" title=\"keep-alive\"></a>keep-alive</h3><p>某些情况下不需要对组件重新加载，使用 kepp-alive使得组件可以缓存起来</p>\n<p>使用方法：</p>\n<p>路由中设置是否缓存</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'list'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'itemList'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/conponents/list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">meta</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token literal-property property\">keepalive</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span><span class=\"token string\">'标题页'</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;div&gt;\n    &lt;keep-alive&gt;\n        &lt;router-view v-if&#x3D;&#39;$route.meta.keepalive&#39;&gt;&lt;&#x2F;router-view&gt;\n    &lt;&#x2F;keep-alive&gt;\n&lt;&#x2F;div&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Vue常用的修饰符\"><a href=\"#Vue常用的修饰符\" class=\"headerlink\" title=\"Vue常用的修饰符\"></a>Vue常用的修饰符</h3><p><code>vue</code>中修饰符分为以下五种：</p>\n<ul>\n<li>表单修饰符</li>\n<li>事件修饰符</li>\n<li>鼠标按键修饰符</li>\n<li>键值修饰符</li>\n<li>v-bind修饰符</li>\n</ul>\n<h4 id=\"表单修饰符\"><a href=\"#表单修饰符\" class=\"headerlink\" title=\"表单修饰符\"></a>表单修饰符</h4><h6 id=\"lazy\"><a href=\"#lazy\" class=\"headerlink\" title=\"lazy\"></a>lazy</h6><p>在我们填完信息，光标离开标签的时候，才会将值赋予给<code>value</code>，也就是在<code>change</code>事件之后再进行信息同步</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;input type&#x3D;&#39;text&#39; v-model.lazy&#x3D;&quot;message&quot;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h6 id=\"trim\"><a href=\"#trim\" class=\"headerlink\" title=\"trim\"></a>trim</h6><p>自动过滤用户输入的首空格字符，而中间的空格不会过滤</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;input type&#x3D;&#39;text&#39; v-model.trim&#x3D;&quot;value&quot;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h6 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\"number\"></a>number</h6><p>自动将输入的值转为number</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;input type&#x3D;&quot;number&quot; v-model.number&#x3D;&quot;value&quot;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h4><h6 id=\"stop\"><a href=\"#stop\" class=\"headerlink\" title=\"stop\"></a>stop</h6><p>阻止冒泡事件，相当与调用event.stopPropagation()</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;button @click.stop&#x3D;&quot;on&quot;&gt;\n    点击\n&lt;&#x2F;button&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"prevent\"><a href=\"#prevent\" class=\"headerlink\" title=\"prevent\"></a>prevent</h6><p>阻止默认事件</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;button @click.prevent&#x3D;&quot;on&quot;&gt;\n    dian\n&lt;&#x2F;button&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"once\"><a href=\"#once\" class=\"headerlink\" title=\"once\"></a>once</h6><p>只触发一次</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;button @click.once&#x3D;&quot;shout(1)&quot;&gt;ok&lt;&#x2F;button&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"鼠标按钮修饰符\"><a href=\"#鼠标按钮修饰符\" class=\"headerlink\" title=\"鼠标按钮修饰符\"></a>鼠标按钮修饰符</h4><p>鼠标按钮修饰符针对的就是左键、右键、中键点击，有如下：</p>\n<ul>\n<li>left 左键点击</li>\n<li>right 右键点击</li>\n<li>middle 中键点击</li>\n</ul>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;button @click.left&#x3D;&quot;shout(1)&quot;&gt;ok&lt;&#x2F;button&gt;\n&lt;button @click.right&#x3D;&quot;shout(1)&quot;&gt;ok&lt;&#x2F;button&gt;\n&lt;button @click.middle&#x3D;&quot;shout(1)&quot;&gt;ok&lt;&#x2F;button&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"v-bind修饰符\"><a href=\"#v-bind修饰符\" class=\"headerlink\" title=\"v-bind修饰符\"></a>v-bind修饰符</h4><h6 id=\"async\"><a href=\"#async\" class=\"headerlink\" title=\"async\"></a>async</h6><p>能对<code>props</code>进行一个双向绑定</p>\n<pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">\n&#x2F;&#x2F;父组件\n&lt;comp :myMessage.sync&#x3D;&quot;bar&quot;&gt;&lt;&#x2F;comp&gt; \n&#x2F;&#x2F;子组件\nthis.$emit(&#39;update:myMessage&#39;,params);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h3><h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>自定义指令有全局注册与局部注册</p>\n<h6 id=\"全局注册\"><a href=\"#全局注册\" class=\"headerlink\" title=\"全局注册\"></a>全局注册</h6><p><code>Vue.directive</code>第一个参数是指令的名字（不需要写上<code>v-</code>前缀），第二个参数可以是对象数据，也可以是一个指令函数</p>\n<h6 id=\"局部注册\"><a href=\"#局部注册\" class=\"headerlink\" title=\"局部注册\"></a>局部注册</h6><p>局部注册通过在组件<code>options</code>选项中设置<code>directive</code>属性</p>\n<p>使用自定义指令可以满足我们日常一些场景，这里给出几个自定义指令的案例：</p>\n<ul>\n<li>防抖</li>\n<li>图片懒加载</li>\n<li>一键 Copy的功能</li>\n</ul>\n<h3 id=\"diff算法\"><a href=\"#diff算法\" class=\"headerlink\" title=\"diff算法\"></a>diff算法</h3><p>作用：同级树节点的高效比较算法</p>\n<p>特点：同级比较，循环从两边向中间</p>\n<p>新旧<code>VNode</code>节点如下图所示：</p>\n<p><img src=\"https://static001.infoq.cn/resource/image/80/6d/80dc339f73b186479e6d1fc18bfbf66d.png\" alt=\"img\"></p>\n<p>第一次循环后，发现旧节点D与新节点D相同，直接复用旧节点D作为<code>diff</code>后的第一个真实节点，同时旧节点<code>endIndex</code>移动到C，新节点的 <code>startIndex</code> 移动到了 C</p>\n<p><img src=\"https://static001.infoq.cn/resource/image/76/54/76032c78c8ef74047efd42c070e48854.png\" alt=\"img\"></p>\n<p>第二次循环后，同样是旧节点的末尾和新节点的开头(都是 C)相同，同理，<code>diff</code> 后创建了 C 的真实节点插入到第一次创建的 B 节点后面。同时旧节点的 <code>endIndex</code> 移动到了 B，新节点的 <code>startIndex</code> 移动到了 E</p>\n<p><img src=\"https://static001.infoq.cn/resource/image/1c/d7/1c76e7489660188d35f0a38ea8c8ecd7.png\" alt=\"img\"></p>\n<p>第三次循环中，发现E没有找到，这时候只能直接创建新的真实节点 E，插入到第二次创建的 C 节点之后。同时新节点的 <code>startIndex</code> 移动到了 A。旧节点的 <code>startIndex</code> 和 <code>endIndex</code> 都保持不动</p>\n<p><img src=\"https://static001.infoq.cn/resource/image/4b/08/4b622c0d61673ec5474465d82305d308.png\" alt=\"img\"></p>\n<p>第四次循环中，发现了新旧节点的开头(都是 A)相同，于是 <code>diff</code> 后创建了 A 的真实节点，插入到前一次创建的 E 节点后面。同时旧节点的 <code>startIndex</code> 移动到了 B，新节点的<code>startIndex</code> 移动到了 B</p>\n<p><img src=\"https://static001.infoq.cn/resource/image/59/b4/5982417c3e0b2fa9ae940354a0e67ab4.png\" alt=\"img\"></p>\n<p>第五次循环中，情形同第四次循环一样，因此 <code>diff</code> 后创建了 B 真实节点 插入到前一次创建的 A 节点后面。同时旧节点的 <code>startIndex</code>移动到了 C，新节点的 startIndex 移动到了 F</p>\n<p><img src=\"https://static001.infoq.cn/resource/image/16/86/16cf0ef90f6e19d26c0ddffeca067e86.png\" alt=\"img\"></p>\n<p>新节点的 <code>startIndex</code> 已经大于 <code>endIndex</code> 了，需要创建 <code>newStartIdx</code> 和 <code>newEndIdx</code> 之间的所有节点，也就是节点F，直接创建 F 节点对应的真实节点放到 B 节点后面</p>\n<p><img src=\"https://static001.infoq.cn/resource/image/dc/ad/dc215b45682cf6c9cc4700a5425673ad.png\" alt=\"img\"></p>\n<h3 id=\"Axios\"><a href=\"#Axios\" class=\"headerlink\" title=\"Axios\"></a>Axios</h3><p>定义：是轻量级的Http库，基于XMLHttpRequest,支持promise</p>\n<h4 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h4><p>项目中对于请求的header，超时时间，不同环境的不同api地址等问题，统一管理便于代码维护</p>\n<h5 id=\"设置请求前缀\"><a href=\"#设置请求前缀\" class=\"headerlink\" title=\"设置请求前缀\"></a>设置请求前缀</h5><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL<span class=\"token operator\">=</span><span class=\"token string\">'a'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL<span class=\"token operator\">=</span><span class=\"token string\">'b'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h5 id=\"封装请求\"><a href=\"#封装请求\" class=\"headerlink\" title=\"封装请求\"></a>封装请求</h5><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">//get</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">httpGet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span>\n    url<span class=\"token punctuation\">,</span>\n    params <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n            params\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//post</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">httpPost</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span>\n    url<span class=\"token punctuation\">,</span>\n    params <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            url<span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> data<span class=\"token punctuation\">,</span>\n            params\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">resilve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"拦截器interceptors\"><a href=\"#拦截器interceptors\" class=\"headerlink\" title=\"拦截器interceptors\"></a>拦截器interceptors</h4><h5 id=\"请求拦截器\"><a href=\"#请求拦截器\" class=\"headerlink\" title=\"请求拦截器\"></a>请求拦截器</h5><p>如有token时header加入token</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">axios<span class=\"token punctuation\">.</span>intercepter<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        config<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>Authorization <span class=\"token operator\">=</span> token\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> config\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h5 id=\"响应拦截器\"><a href=\"#响应拦截器\" class=\"headerlink\" title=\"响应拦截器\"></a>响应拦截器</h5><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">axios<span class=\"token punctuation\">.</span>intercepter<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status<span class=\"token operator\">==</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"SSR解决了什么问题？有做过SSR吗？你是怎么做的\"><a href=\"#SSR解决了什么问题？有做过SSR吗？你是怎么做的\" class=\"headerlink\" title=\"SSR解决了什么问题？有做过SSR吗？你是怎么做的\"></a>SSR解决了什么问题？有做过SSR吗？你是怎么做的</h3><p>SSR主要解决了以下两种问题：</p>\n<ul>\n<li>seo：搜索引擎优先爬取页面<code>HTML</code>结构，使用<code>ssr</code>时，服务端已经生成了和业务想关联的<code>HTML</code>，有利于<code>seo</code></li>\n<li>首屏呈现渲染：用户无需等待页面所有<code>js</code>加载完成就可以看到页面视图（压力来到了服务器，所以需要权衡哪些用服务端渲染，哪些交给客户端）</li>\n</ul>\n<h3 id=\"vue要做权限管理该怎么做？如果控制到按钮级别的权限怎么做？\"><a href=\"#vue要做权限管理该怎么做？如果控制到按钮级别的权限怎么做？\" class=\"headerlink\" title=\"vue要做权限管理该怎么做？如果控制到按钮级别的权限怎么做？\"></a>vue要做权限管理该怎么做？如果控制到按钮级别的权限怎么做？</h3><h4 id=\"接口权限\"><a href=\"#接口权限\" class=\"headerlink\" title=\"接口权限\"></a>接口权限</h4><p>后端JWT，登录完拿到<code>token</code>，将<code>token</code>存起来，通过<code>axios</code>请求拦截器进行拦截，每次请求的时候头部携带<code>token</code></p>\n<h5 id=\"路由权限控制\"><a href=\"#路由权限控制\" class=\"headerlink\" title=\"路由权限控制\"></a>路由权限控制</h5><h3 id=\"Vue项目中你是如何解决跨域\"><a href=\"#Vue项目中你是如何解决跨域\" class=\"headerlink\" title=\"Vue项目中你是如何解决跨域\"></a>Vue项目中你是如何解决跨域</h3><p>跨域本质是浏览器基于<strong>同源策略</strong>的一种安全手段</p>\n<p>同源策略：</p>\n<ol>\n<li>协议</li>\n<li>主机</li>\n<li>端口</li>\n</ol>\n<p>解决跨域的方法有很多，下面列举了三种：</p>\n<ul>\n<li>JSONP</li>\n<li>CORS</li>\n<li>PROXY</li>\n</ul>\n<h4 id=\"cors\"><a href=\"#cors\" class=\"headerlink\" title=\"cors\"></a>cors</h4><p>后端方案</p>\n<p>django模块：django-cors-headers</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">pip install django-cors-headers<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h4 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h4><ol>\n<li>webpack可以设置</li>\n<li>服务端设置</li>\n<li>nginx设置反向代理</li>\n</ol>\n<p>特性以及部分原理<br>自定义指令（directive）<br>除了核心功能默认内置的指令 (v-model 和 v-show)，Vue 也允许注册自定义指令。有时候我们想对dom进行操作的时候，就可以使用自定义指令，比如设置标题样式并且让标题一直固定在页面上方，可以使用全局注册或者局部注册。然后你可以在模板中任何元素上使用新的 v-title property。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;全局注册\n&lt;div id&#x3D;&quot;app&quot;&gt;\n    &lt;div v-title&gt;hello world&lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n&lt;script&gt;\n    Vue.directive(&#39;title&#39;, &#123;\n        inserted: function (el) &#123;\n            console.log(el)\n            el.style.position &#x3D; &#39;fixed&#39; \n            el.style.top &#x3D; &#39;50px&#39; \n            el.style.left &#x3D; &#39;48%&#39; \n            el.style.color &#x3D; &#39;#409EFF&#39; \n        &#125;\n    &#125;)\n\n    new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n            message: &#39;hello!&#39;\n        &#125;\n    &#125;)\n&lt;&#x2F;script&gt;\n&lt;style&gt;\n   #app&#123;\n       height: 1000px\n   &#125; \n&lt;&#x2F;style&gt;\n&#x2F;&#x2F;局部注册\n  new Vue(&#123;\n    el: &#39;#app&#39;,\n    directives: &#123;\n        title: &#123;\n            inserted: function (el) &#123;\n                console.log(el)\n                el.style.position &#x3D; &#39;fixed&#39;\n                el.style.top &#x3D; &#39;50px&#39;\n                el.style.left &#x3D; &#39;48%&#39;\n                el.style.color &#x3D; &#39;#409EFF&#39;\n            &#125;\n        &#125;\n    &#125;\n  &#125;)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20210716132337.png\" alt=\"image-20210716132337860\"></p>\n<h4 id=\"irective钩子函数参数\"><a href=\"#irective钩子函数参数\" class=\"headerlink\" title=\"irective钩子函数参数\"></a>irective钩子函数参数</h4><p>指令钩子函数会被传入以下参数：</p>\n<ul>\n<li>el：指令所绑定的元素，可以用来直接操作 DOM。</li>\n<li>binding：一个对象，包含以下 property：</li>\n</ul>\n<ol>\n<li>name：指令名，不包括 v- 前缀。</li>\n<li>value：指令的绑定值，例如：v-my-directive&#x3D;”1 + 1” 中，绑定值为 2。</li>\n<li>oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</li>\n<li>expression：字符串形式的指令表达式。例如 v-my-directive&#x3D;”1 + 1” 中，表达式为 “1 + 1”。</li>\n<li>arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 “foo”。</li>\n<li>modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。</li>\n</ol>\n<ul>\n<li>vnode：Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。</li>\n<li>oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</li>\n</ul>\n<p>我们打印下函数传入的参数，其实简单来说就是el就是绑定dom元素，binging指令：后所携带的具体内容，VNode就当还未生成的节点好了。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;div v-title:arr&#x3D;&quot;message&quot;&gt;hello world&lt;&#x2F;div&gt;\nVue.directive(&#39;title&#39;, &#123;\n        inserted: function (el, binding, vnode) &#123;\n            console.log(el, binding, vnode)\n            el.style.position &#x3D; &#39;fixed&#39; \n            el.style.top &#x3D; &#39;50px&#39; \n            el.style.left &#x3D; &#39;48%&#39; \n            el.style.color &#x3D; &#39;#409EFF&#39; \n        &#125;\n    &#125;)\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20210716132408.png\" alt=\"image-20210716132408088\"></p>\n<h4 id=\"钩子函数\"><a href=\"#钩子函数\" class=\"headerlink\" title=\"钩子函数\"></a>钩子函数</h4><p>一个指令定义对象可以提供如下几个钩子函数 (均为可选)：</p>\n<ul>\n<li>bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</li>\n<li>inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</li>\n<li>update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。</li>\n<li>componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用</li>\n<li>unbind：只调用一次，指令与元素解绑时调用。</li>\n</ul>\n<p>我们可以测试下钩子函数的调用时机：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;div id&#x3D;&quot;app&quot;&gt;\n    &lt;div id&#x3D;&quot;txt&quot; v-title:data&#x3D;&quot;sum&quot;&gt;value: &#123;&#123;sum&#125;&#125;&lt;&#x2F;div&gt;\n&lt;&#x2F;div&gt;\n&lt;script&gt;\n    new Vue(&#123;\n        el: &#39;#app&#39;,\n        data: &#123;\n            sum: 0\n        &#125;,\n        directives: &#123;\n            title: &#123;\n                bind: (el, bind) &#x3D;&gt; &#123; console.log(bind.value, &#39;a&#39;) &#125;,&#x2F;&#x2F; 第一次绑定元素时调用\n                inserted: (el, bind) &#x3D;&gt; &#123; console.log(bind.value, &#39;b&#39;) &#125;,&#x2F;&#x2F; 当被绑定的元素插入到 DOM 中时……\n                update: (el, bind) &#x3D;&gt; &#123; console.log(bind.value, &#39;c&#39;) &#125;,&#x2F;&#x2F; 所在组件VNode发生更新时调用\n                componentUpdated: (el, bind) &#x3D;&gt; &#123; console.log(bind.value, &#39;d&#39;) &#125;, &#x2F;&#x2F; 指令所在组件的 VNode 及其子 VNode 全部更新后调用\n                unbind: (el, bind) &#x3D;&gt; &#123; console.log(bind.value, &#39;e&#39;) &#125;    &#x2F;&#x2F; 只调用一次，指令与元素解绑时调用\n            &#125;\n        &#125;,\n        mounted() &#123;\n            console.log(this.sum, &#39;???&#39;)\n            let timer &#x3D; setInterval(() &#x3D;&gt; &#123;\n                this.sum++\n            &#125;, 200)\n            setTimeout(() &#x3D;&gt; &#123;\n                clearInterval(timer)\n            &#125;, 3000)\n        &#125;\n    &#125;)\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20210716132434.png\" alt=\"image-20210716132434649\"></p>\n<h4 id=\"指令大致原理\"><a href=\"#指令大致原理\" class=\"headerlink\" title=\"指令大致原理\"></a>指令大致原理</h4><p>在页面渲染的过程中，分别有创建(create)、激活(avtivate)、更新(update)、移除(remove)、销毁(destroy)，在这些过程中，框架在每个时段都会调用相应的钩子函数，这些hooks中一部分的函数就包含了我们的指令。源码部分我了解的不多，给大家推荐一篇vue指令原理相关博文<a href=\"https://link.juejin.cn/?target=https://www.cnblogs.com/gerry2019/p/14940770.html%E3%80%82\">www.cnblogs.com/gerry2019/p…</a></p>\n<h3 id=\"混入\"><a href=\"#混入\" class=\"headerlink\" title=\"混入\"></a>混入</h3><p>官方是这样定义的：混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。其实就是vue实例的一个复用。实用场景：公共组件或者功能，例如获取用户白名单、菜单返回、公共基础table。 值得注意的点：</p>\n<ol>\n<li>当组件和混入对象含有同名选项时，这些选项将以恰当的方式混合。比如，数据对象在内部会进行浅合并 (一层属性深度)，在和组件的数据发生冲突时以组件数据优先。</li>\n<li>同名钩子函数将混合为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用。</li>\n<li>值为对象的选项，例如 methods, components 和 directives，将被混合为同一个对象。两个对象键名冲突时，取组件对象的键值对。</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var mixin &#x3D; &#123;\n  data: function () &#123;\n    return &#123;\n      message: &#39;hello&#39;,\n      foo: &#39;abc&#39;\n    &#125;\n  &#125;\n&#125;\n\nnew Vue(&#123;\n  mixins: [mixin],\n  data: function () &#123;\n    return &#123;\n      message: &#39;goodbye&#39;,\n      bar: &#39;def&#39;\n    &#125;\n  &#125;,\n  created: function () &#123;\n    console.log(this.$data)\n    &#x2F;&#x2F; &#x3D;&gt; &#123; message: &quot;goodbye&quot;, foo: &quot;abc&quot;, bar: &quot;def&quot; &#125;\n  &#125;\n&#125;)\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"高阶组件\"><a href=\"#高阶组件\" class=\"headerlink\" title=\"高阶组件\"></a>高阶组件</h3><p>一个函数接受一个组件为参数，返回一个包装后的组件。其实在vue中，组件可以当做一个函数，那从本质上来说，高阶组件就是高阶函数（JavaScript的函数其实都指向某个变量。既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数）</p>\n<h4 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h4><p>举例一个最简单的高阶函数计算次方</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"> function pow(x, y, f)&#123;\n    return f(x, y);\n  &#125;\n  pow(3, 3, Math.pow)\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在es6中也有很多高阶函数，如map、reduce、filter。</p>\n<h4 id=\"高阶组件的例子\"><a href=\"#高阶组件的例子\" class=\"headerlink\" title=\"高阶组件的例子\"></a>高阶组件的例子</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;div id&#x3D;&quot;app&quot;&gt;\n    &lt;hoc&gt;&lt;&#x2F;hoc&gt;\n&lt;&#x2F;div&gt;\n&lt;script&gt;\n    const view &#x3D; &#123;\n        template: &#96;&lt;span&gt;\n                    &lt;span&gt;test hoc ...&lt;&#x2F;span&gt;\n                    &lt;&#x2F;span&gt;&#96;,\n        props: [&quot;result&quot;, &quot;loading&quot;],\n    &#125;;\n    const test &#x3D; (wrapped, txt &#x3D; &#39;hello&#39;) &#x3D;&gt; &#123;\n        return &#123;\n            render(h) &#123;\n                const args &#x3D; &#123;\n                    props: &#123;\n                        result: this.result,\n                        loading: this.loading,\n                    &#125;,\n                &#125;;\n                const wrapper &#x3D; h(&quot;div&quot;, [\n                    h(wrapped, args),\n                    &#39;loading&#39;\n                ]);\n                return wrapper\n            &#125;\n        &#125;\n    &#125;\n    const hoc &#x3D; test(view, &#39;hui&#39;)\n    console.log(hoc);\n\n    new Vue(&#123;\n        el: &#39;#app&#39;,\n        components: &#123;\n            hoc\n        &#125;,\n        data: &#123;\n            sum: 0\n        &#125;\n    &#125;)\n&lt;&#x2F;script&gt;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20210716132510.png\" alt=\"image-20210716132510491\"></p>\n<h4 id=\"值得注意的点\"><a href=\"#值得注意的点\" class=\"headerlink\" title=\"值得注意的点\"></a>值得注意的点</h4><ol>\n<li>高阶组件(HOC)应该是无副作用的纯函数，且不应该修改原组件,就是组件是一个新的组件，不会对原组件做修改。</li>\n<li>高阶组件(HOC)不关心你传递的数据(props)是什么，并且被包装组件(WrappedComponent)不关心数据来源</li>\n<li>高阶组件(HOC)接收到的 props 应该透传给被包装组件(WrappedComponent)</li>\n<li>在高阶组件中渲染函数向子组件中传递作用域插槽时候要注意上下文</li>\n</ol>\n<h3 id=\"动态组件-异步组件-递归组件\"><a href=\"#动态组件-异步组件-递归组件\" class=\"headerlink\" title=\"动态组件 异步组件 递归组件\"></a>动态组件 异步组件 递归组件</h3><h4 id=\"动态组件\"><a href=\"#动态组件\" class=\"headerlink\" title=\"动态组件\"></a>动态组件</h4><p>可以在同组件之间进行动态切换， 动态切换可以通过 Vue 的  元素加一个特殊的 is attribute 来实现：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;!-- 组件会在 &#96;currentTabComponent&#96; 改变时改变 --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Dynamic Components Example&lt;&#x2F;title&gt;\n    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;vue&quot;&gt;&lt;&#x2F;script&gt;\n    &lt;style&gt;\n      .tab-button &#123;\n        padding: 6px 10px;\n        border-top-left-radius: 3px;\n        border-top-right-radius: 3px;\n        border: 1px solid #ccc;\n        cursor: pointer;\n        background: #f0f0f0;\n        margin-bottom: -1px;\n        margin-right: -1px;\n      &#125;\n      .tab-button:hover &#123;\n        background: #e0e0e0;\n      &#125;\n      .tab-button.active &#123;\n        background: #e0e0e0;\n      &#125;\n      .tab &#123;\n        border: 1px solid #ccc;\n        padding: 10px;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div id&#x3D;&quot;dynamic-component-demo&quot; class&#x3D;&quot;demo&quot;&gt;\n      &lt;button\n        v-for&#x3D;&quot;tab in tabs&quot;\n        v-bind:key&#x3D;&quot;tab&quot;\n        v-bind:class&#x3D;&quot;[&#39;tab-button&#39;, &#123; active: currentTab &#x3D;&#x3D;&#x3D; tab &#125;]&quot;\n        v-on:click&#x3D;&quot;currentTab &#x3D; tab&quot;\n      &gt;\n        &#123;&#123; tab &#125;&#125;\n      &lt;&#x2F;button&gt;\n\n      &lt;component v-bind:is&#x3D;&quot;currentTabComponent&quot; class&#x3D;&quot;tab&quot;&gt;&lt;&#x2F;component&gt;\n    &lt;&#x2F;div&gt;\n\n    &lt;script&gt;\n      Vue.component(&quot;tab-home&quot;, &#123;\n        template: &quot;&lt;div&gt;Home component&lt;&#x2F;div&gt;&quot;\n      &#125;);\n      Vue.component(&quot;tab-posts&quot;, &#123;\n        template: &quot;&lt;div&gt;Posts component&lt;&#x2F;div&gt;&quot;\n      &#125;);\n      Vue.component(&quot;tab-archive&quot;, &#123;\n        template: &quot;&lt;div&gt;Archive component&lt;&#x2F;div&gt;&quot;\n      &#125;);\n\n      new Vue(&#123;\n        el: &quot;#dynamic-component-demo&quot;,\n        data: &#123;\n          currentTab: &quot;Home&quot;,\n          tabs: [&quot;Home&quot;, &quot;Posts&quot;, &quot;Archive&quot;]\n        &#125;,\n        computed: &#123;\n          currentTabComponent: function() &#123;\n            return &quot;tab-&quot; + this.currentTab.toLowerCase();\n          &#125;\n        &#125;\n      &#125;);\n    &lt;&#x2F;script&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"异步组件\"><a href=\"#异步组件\" class=\"headerlink\" title=\"异步组件\"></a>异步组件</h4><p>在大型应用中，我们可能需要将应用分割成小一些的代码块，并且只在需要的时候才从服务器加载一个模块。为了简化，Vue 允许你以一个工厂函数的方式定义你的组件，这个工厂函数会异步解析你的组件定义。Vue 只有在这个组件需要被渲染的时候才会触发该工厂函数，且会把结果缓存起来供未来重渲染。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Vue.component(&#39;async-example&#39;, function (resolve, reject) &#123;\n  setTimeout(function () &#123;\n    &#x2F;&#x2F; 向 &#96;resolve&#96; 回调传递组件定义\n    resolve(&#123;\n      template: &#39;&lt;div&gt;I am async!&lt;&#x2F;div&gt;&#39;\n    &#125;)\n  &#125;, 1000)\n&#125;)\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在vue-cli中在使用异步组件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const first &#x3D;()&#x3D;&gt;import(&#x2F;* webpackChunkName: &quot;group-foo&quot; *&#x2F; &quot;..&#x2F;components&#x2F;first.vue&quot;);\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"vue中部分钩子函数-hook\"><a href=\"#vue中部分钩子函数-hook\" class=\"headerlink\" title=\"vue中部分钩子函数(@hook)\"></a>vue中部分钩子函数(@hook)</h3><p>Vue 实例同时在其事件接口中提供了其它的方法。我们可以：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>通过 $on(eventName, eventHandler) 侦听一个事件</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>通过 $once(eventName, eventHandler) 一次性侦听一个事件</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>通过 $off(eventName, eventHandler) 停止侦听一个事件</p></blockquote>\n<p>你通常不会用到这些，但是当你需要在一个组件实例上手动侦听事件时，它们是派得上用场的。它们也可以用于代码组织工具。例如，你可能经常看到这种集成一个第三方库的模式。官网提供一个案例：在不使用beforeDestroy钩子清picker</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;案例一\nmounted: function () &#123;\n  var picker &#x3D; new Pikaday(&#123;\n    field: this.$refs.input,\n    format: &#39;YYYY-MM-DD&#39;\n  &#125;)\n\n  this.$once(&#39;hook:beforeDestroy&#39;, function () &#123;\n    picker.destroy()\n  &#125;)\n&#125;\n&#x2F;&#x2F;案例二\n&#x2F;&#x2F;在父组件在子组件渲染阶段做一些操作\n&lt;child\n  @hook:mounted&#x3D;&quot;handle&quot;\n  @hook:beforeUpdated&#x3D;&quot;xxx&quot;\n  @hook:updated&#x3D;&quot;xxx&quot;\n&#x2F;&gt;\nmethod () &#123;\n  handle() &#123;\n  &#x2F;&#x2F; do something...\n  &#125;\n&#125;,\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在vue生命周期中周期都有对应的钩子函数</p>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><p>插件通常用来为 Vue 添加全局功能。插件的功能范围没有严格的限制——一般有下面几种：</p>\n<ul>\n<li>添加全局方法或者 property。如：vue-custom-element</li>\n<li>添加全局资源：指令&#x2F;过滤器&#x2F;过渡等。如 vue-touch</li>\n<li>通过全局混入来添加一些组件选项。如 vue-router</li>\n<li>添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。</li>\n<li>一个库，提供自己的 API，同时提供上面提到的一个或多个功能。如 vue-router</li>\n</ul>\n<p>自定义插件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">MyPlugin.install &#x3D; function (Vue, options) &#123;\n  &#x2F;&#x2F; 1. 添加全局方法或 property\n  Vue.myGlobalMethod &#x3D; function () &#123;\n    &#x2F;&#x2F; 逻辑...\n  &#125;\n\n  &#x2F;&#x2F; 2. 添加全局资源\n  Vue.directive(&#39;my-directive&#39;, &#123;\n    bind (el, binding, vnode, oldVnode) &#123;\n      &#x2F;&#x2F; 逻辑...\n    &#125;\n    ...\n  &#125;)\n\n  &#x2F;&#x2F; 3. 注入组件选项\n  Vue.mixin(&#123;\n    created: function () &#123;\n      &#x2F;&#x2F; 逻辑...\n    &#125;\n    ...\n  &#125;)\n\n  &#x2F;&#x2F; 4. 添加实例方法\n  Vue.prototype.$myMethod &#x3D; function (methodOptions) &#123;\n    &#x2F;&#x2F; 逻辑...\n  &#125;\n&#125;\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>部分参考：<br>作者：仅九<br>链接：<a href=\"https://juejin.cn/post/6985035199432097823\">https://juejin.cn/post/6985035199432097823</a></p>\n","text":"vue是什么用于构建用户界面的渐进式开源JS框架，是创建单页应用的Web框架 核心特征： 数据驱动mvvm 组件化 指令系统 SPA与MPASPA单页应用： 动态重写当前页面数据用以用户交互 MPA：多页应用，每一个页面都是主页面 SPA首加载慢：原因：网络延时，资源体积太大 解...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":23,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"Vue.js","slug":"Vue-js","count":2,"path":"api/tags/Vue-js.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#vue%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">vue是什么</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SPA%E4%B8%8EMPA\"><span class=\"toc-text\">SPA与MPA</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SPA\"><span class=\"toc-text\">SPA</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#MPA%EF%BC%9A\"><span class=\"toc-text\">MPA：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SPA%E9%A6%96%E5%8A%A0%E8%BD%BD%E6%85%A2%EF%BC%9A\"><span class=\"toc-text\">SPA首加载慢：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#v-if%E5%92%8Cv-show\"><span class=\"toc-text\">v-if和v-show</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Vue%E5%AE%9E%E4%BE%8B%E6%8C%82%E8%BD%BD%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">Vue实例挂载过程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#v-if%E5%92%8Cv-for\"><span class=\"toc-text\">v-if和v-for</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">路由懒加载</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88data%E6%98%AF%E5%87%BD%E6%95%B0%E4%B8%8D%E6%98%AF%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">为什么data是函数不是对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#vue2%E5%92%8Cvue3%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">vue2和vue3双向绑定</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#vue2%EF%BC%9A\"><span class=\"toc-text\">vue2：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%EF%BC%9A%E5%8A%A8%E6%80%81%E7%BB%99vue%E7%9A%84data%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E5%B1%9E%E6%80%A7%E6%97%B6%E9%A1%B5%E9%9D%A2%E4%B8%8D%E4%BC%9A%E5%88%B7%E6%96%B0\"><span class=\"toc-text\">问题：动态给vue的data添加一个新的属性时页面不会刷新</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">解决方法</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#vue3\"><span class=\"toc-text\">vue3</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Vue%E4%B8%AD%E7%BB%84%E4%BB%B6%E5%92%8C%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">Vue中组件和插件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">组件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99%E6%A8%A1%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">编写模式：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E5%86%8C%E5%BD%A2%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">注册形式：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Vue%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">Vue组件之间的通信方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#vue%E7%9A%84mixin\"><span class=\"toc-text\">vue的mixin</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#vue%E4%B8%ADkey%E7%9A%84%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">vue中key的原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#keep-alive\"><span class=\"toc-text\">keep-alive</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Vue%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">Vue常用的修饰符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E5%8D%95%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">表单修饰符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#lazy\"><span class=\"toc-text\">lazy</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#trim\"><span class=\"toc-text\">trim</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#number\"><span class=\"toc-text\">number</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">事件修饰符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#stop\"><span class=\"toc-text\">stop</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#prevent\"><span class=\"toc-text\">prevent</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#once\"><span class=\"toc-text\">once</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%BC%A0%E6%A0%87%E6%8C%89%E9%92%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">鼠标按钮修饰符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#v-bind%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">v-bind修饰符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#async\"><span class=\"toc-text\">async</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">自定义指令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C\"><span class=\"toc-text\">全局注册</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C\"><span class=\"toc-text\">局部注册</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#diff%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">diff算法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Axios\"><span class=\"toc-text\">Axios</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B0%81%E8%A3%85\"><span class=\"toc-text\">封装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AE%E8%AF%B7%E6%B1%82%E5%89%8D%E7%BC%80\"><span class=\"toc-text\">设置请求前缀</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%B0%81%E8%A3%85%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">封装请求</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8B%A6%E6%88%AA%E5%99%A8interceptors\"><span class=\"toc-text\">拦截器interceptors</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">请求拦截器</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%93%8D%E5%BA%94%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">响应拦截器</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SSR%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F%E6%9C%89%E5%81%9A%E8%BF%87SSR%E5%90%97%EF%BC%9F%E4%BD%A0%E6%98%AF%E6%80%8E%E4%B9%88%E5%81%9A%E7%9A%84\"><span class=\"toc-text\">SSR解决了什么问题？有做过SSR吗？你是怎么做的</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#vue%E8%A6%81%E5%81%9A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E8%AF%A5%E6%80%8E%E4%B9%88%E5%81%9A%EF%BC%9F%E5%A6%82%E6%9E%9C%E6%8E%A7%E5%88%B6%E5%88%B0%E6%8C%89%E9%92%AE%E7%BA%A7%E5%88%AB%E7%9A%84%E6%9D%83%E9%99%90%E6%80%8E%E4%B9%88%E5%81%9A%EF%BC%9F\"><span class=\"toc-text\">vue要做权限管理该怎么做？如果控制到按钮级别的权限怎么做？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E6%9D%83%E9%99%90\"><span class=\"toc-text\">接口权限</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">路由权限控制</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%A0%E6%98%AF%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F\"><span class=\"toc-text\">Vue项目中你是如何解决跨域</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#cors\"><span class=\"toc-text\">cors</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Proxy\"><span class=\"toc-text\">Proxy</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#irective%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">irective钩子函数参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">钩子函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E5%A4%A7%E8%87%B4%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">指令大致原理</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%B7%E5%85%A5\"><span class=\"toc-text\">混入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">高阶组件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">高阶函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">高阶组件的例子</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%80%BC%E5%BE%97%E6%B3%A8%E6%84%8F%E7%9A%84%E7%82%B9\"><span class=\"toc-text\">值得注意的点</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6-%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6-%E9%80%92%E5%BD%92%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">动态组件 异步组件 递归组件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">动态组件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">异步组件</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#vue%E4%B8%AD%E9%83%A8%E5%88%86%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0-hook\"><span class=\"toc-text\">vue中部分钩子函数(@hook)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">插件</span></a></li></ol>","author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"重温前端-js篇","uid":"1c758d147c4078e17f7ecc45f0df48d9","slug":"重温前端-js篇","date":"2022-02-03T07:42:00.000Z","updated":"2022-10-14T06:35:32.861Z","comments":true,"path":"api/articles/重温前端-js篇.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/project/202204241829907.jpg","text":"Javascript1、JS中的instanceof运算符instanceof运算符用来判断一个构造函数的prototype属性所指向的对象是否存在另外一个要检测对象的原型链上 obj instanceof Object;&#x2F;&#x2F;true 实例obj在不在Obje...","link":"","photos":[],"count_time":{"symbolsCount":"81k","symbolsTime":"1:14"},"categories":[{"name":"学习笔记","slug":"学习笔记","count":23,"path":"api/categories/学习笔记.json"},{"name":"前端","slug":"学习笔记/前端","count":3,"path":"api/categories/学习笔记/前端.json"}],"tags":[{"name":"javascript","slug":"javascript","count":5,"path":"api/tags/javascript.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}},"next_post":{"title":"标准分类的IP地址","uid":"28d0a4fcfbc7fc3606b73b8705c12a98","slug":"标准分类的IP地址","date":"2021-06-22T06:28:00.000Z","updated":"2022-03-30T15:58:58.944Z","comments":true,"path":"api/articles/标准分类的IP地址.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforhexo/20201202142630.jpg","text":"一、标准分类的IP地址 每台计算机都要有IP地址，有了IP地址才能互相通信，计算机之间只能互相认识IP地址。IP地址可以理解为计算机的×××号。 （一）二进制和十进制数转换(★记住) 11111111→128＋64＋32＋16＋8＋4＋2＋1＝240＋15＝255 举例： 101...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":23,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"计算机网络","slug":"计算机网络","count":2,"path":"api/tags/计算机网络.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}}}