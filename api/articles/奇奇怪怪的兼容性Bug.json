{"title":"奇奇怪怪的兼容性Bug","uid":"311754d371a04ae5df8f53f2dae3f317","slug":"奇奇怪怪的兼容性Bug","date":"2022-12-05T16:28:00.000Z","updated":"2022-12-07T15:11:38.910Z","comments":true,"path":"api/articles/奇奇怪怪的兼容性Bug.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/img/202212060030103.png","content":"<h2 id=\"IOS-不支持this-router-go\"><a href=\"#IOS-不支持this-router-go\" class=\"headerlink\" title=\"IOS 不支持this.$router.go\"></a>IOS 不支持this.$router.go</h2><p>项目中遇到需要刷新当前界面，就使用了this.$router.go(0)，结果ios端不生效,this.router.go(0) 和 window.location.reload() 都是刷新当前页面的方法,Vue 写H5页面时，用 this.$router.go(0); 方法刷新当前页面，在苹果手机失效，安卓、pc、开发工具等都可以改用 <em><strong>*window.location.reload()*</strong></em> 问题解决！</p>\n<h2 id=\"微信端input-type-x3D-file-无法上传图片\"><a href=\"#微信端input-type-x3D-file-无法上传图片\" class=\"headerlink\" title=\"微信端input type&#x3D;file 无法上传图片\"></a>微信端input type&#x3D;file 无法上传图片</h2><p>在做一个上传头像功能时</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;input id&#x3D;&quot;photo&quot; type&#x3D;&quot;file&quot; accept&#x3D;&quot;image&#x2F;jpeg, image&#x2F;x-png, image&#x2F;gif&quot; capture&#x3D;&quot;camera&quot;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这段代码在非微信浏览器内能选中图片并上传，而在微信浏览器内就失效了，查了各种资料并没有找个解决方案，一次 偶然的机会将代码改成</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;input id&#x3D;&quot;photo&quot; type&#x3D;&quot;file&quot; accept&#x3D;&quot;image&#x2F;*&quot; capture&#x3D;&quot;camera&quot;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>发现奇迹般的在微信里成功了。</p>\n<p>自己猜测，可能是 accept&#x3D;”image&#x2F;jpeg, image&#x2F;x-png, image&#x2F;gif” 这个属性在微信里寻找手机里的图片的时候类型不匹配，导致上传失败，将其改成 accept&#x3D;”image&#x2F;*” 这个时候就能成功。可能是微信浏览器内对input的配置问题。</p>\n<p>最后发现可以不要 capture&#x3D;”camera” 也能调用摄像头。最后代码为</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;input id&#x3D;&quot;photo&quot; type&#x3D;&quot;file&quot; accept&#x3D;&quot;image&#x2F;*&quot;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>或者使用JSSDK</p>\n<p>参考：<a href=\"https://cloud.tencent.com/developer/article/1399109\">微信端input type&#x3D;file 无法上传图片</a></p>\n<h2 id=\"网页刷新或标签页关闭时发个请求\"><a href=\"#网页刷新或标签页关闭时发个请求\" class=\"headerlink\" title=\"网页刷新或标签页关闭时发个请求\"></a>网页刷新或标签页关闭时发个请求</h2><p>应用场景：一般来说埋点数据请求遇到这个场景可能比较多，项目需要对信息编辑页内容进行数据缓存，由于操作会到其他分包，所以基于vueRouter的keepalive便失去了效果，诚然，这种情况使用localStorage才是更好的，但是这个信息编辑页数据之间太复杂，接手项目再来梳理时间成本太高，考虑到已经有保存草稿这个功能，遂打算稍微改造这个接口用来做信息缓存，故需要考虑到网页刷新或标签页关闭时发个请求。</p>\n<p>项目中使用Axios做数据请求，但Axios异步的，不支持同步的请求，请求会被cancel。</p>\n<p>与浏览器关闭事件相关事件有onunload和onbeforeunload两个。区别在于onbeforeunload在onunload之前执行，它还可以阻止onunload的执行。因此我们着重关注onbeforeunload事件。</p>\n<h3 id=\"fetch\"><a href=\"#fetch\" class=\"headerlink\" title=\"fetch\"></a>fetch</h3><p>Fetch 的keepalive属性提供了一套健壮的与服务器端交互的方式，提供了跨越不同平台 API 的一致接口。它提供了一个keepalive属性，保证不管发送请求的页面关闭与否，请求都会持续直到结束。不过上传数据的限制是64 KB。写法如下：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>‘onbeforeunload’<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> data<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">keepalive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个方法可以在刷新或标签页关闭前把请求发出去，但是 <strong>企业微信</strong>中不支持</p>\n<h3 id=\"SendBeacon\"><a href=\"#SendBeacon\" class=\"headerlink\" title=\"SendBeacon()\"></a>SendBeacon()</h3><p><img src=\"https://kifimg.oss-cn-beijing.aliyuncs.com/img/202212072259919.png\" alt=\"image-20221207225912863\"></p>\n<p>群里一问了解到这个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/sendBeacon\">Navigator.sendBeacon()</a></p>\n<p>但<img src=\"https://kifimg.oss-cn-beijing.aliyuncs.com/img/202212072300083.png\" alt=\"img\"></p>\n<p>只能吐槽企微和微信。。。</p>\n<p>最终考虑到最不想用的：使用定时器检查编辑数据和上次提交的数据有无变化，此处可以用diff的包也可以自己写，如果变了就发个请求，缺陷在于定时diff性能消耗可能有点大。</p>\n<p>待續……</p>\n","feature":true,"text":"IOS 不支持this.$router.go项目中遇到需要刷新当前界面，就使用了this.$router.go(0)，结果ios端不生效,this.router.go(0) 和 window.location.reload() 都是刷新当前页面的方法,Vue 写H5页面时，用 t...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"开发笔记","slug":"开发笔记","count":2,"path":"api/categories/开发笔记.json"}],"tags":[{"name":"兼容性","slug":"兼容性","count":1,"path":"api/tags/兼容性.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#IOS-%E4%B8%8D%E6%94%AF%E6%8C%81this-router-go\"><span class=\"toc-text\">IOS 不支持this.$router.go</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BE%AE%E4%BF%A1%E7%AB%AFinput-type-x3D-file-%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87\"><span class=\"toc-text\">微信端input type&#x3D;file 无法上传图片</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BD%91%E9%A1%B5%E5%88%B7%E6%96%B0%E6%88%96%E6%A0%87%E7%AD%BE%E9%A1%B5%E5%85%B3%E9%97%AD%E6%97%B6%E5%8F%91%E4%B8%AA%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">网页刷新或标签页关闭时发个请求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#fetch\"><span class=\"toc-text\">fetch</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SendBeacon\"><span class=\"toc-text\">SendBeacon()</span></a></li></ol></li></ol>","author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"vue3+vite+ts配置eslint+husky","uid":"59055f5d64cb45bdfcbaa23146e2d50d","slug":"vue3-vite-ts配置eslint-husky","date":"2022-11-19T08:06:00.000Z","updated":"2022-11-19T08:09:05.319Z","comments":true,"path":"api/articles/vue3-vite-ts配置eslint-husky.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/img/202211191608596.jpg","text":"vue3+vite+ts配置eslint+husky创建项目命令 yarn create vite vue3-vite-ts –template vue-ts eslint代码风格检查，prettier进行格式化代码 安装相关依赖 ； yarn add eslint eslint...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"开发记录","slug":"开发记录","count":3,"path":"api/categories/开发记录.json"}],"tags":[{"name":"开发规范","slug":"开发规范","count":2,"path":"api/tags/开发规范.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}},"feature":true}}