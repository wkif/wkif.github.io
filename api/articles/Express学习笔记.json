{"title":"Express学习笔记","uid":"21bb48a1d155e2a691456134eb3d7736","slug":"Express学习笔记","date":"2022-11-08T10:46:00.000Z","updated":"2022-11-12T06:20:43.023Z","comments":true,"path":"api/articles/Express学习笔记.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/img/202211081857301.png","content":"<h1 id=\"Express的安装\"><a href=\"#Express的安装\" class=\"headerlink\" title=\"Express的安装\"></a>Express的安装</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install express -g<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h1 id=\"脚手架工具\"><a href=\"#脚手架工具\" class=\"headerlink\" title=\"脚手架工具\"></a>脚手架工具</h1><p>安装express的脚手架工具<code>express-generator</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install express-generator -g<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> 创建项目</p>\n<pre class=\"line-numbers language-crystal\" data-language=\"crystal\"><code class=\"language-crystal\">express express<span class=\"token operator\">-</span>demo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>安装依赖</p>\n<pre class=\"line-numbers language-crystal\" data-language=\"crystal\"><code class=\"language-crystal\">cd express<span class=\"token operator\">-</span>demo <span class=\"token operator\">&amp;&amp;</span> npm install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>运行</p>\n<pre class=\"line-numbers language-crystal\" data-language=\"crystal\"><code class=\"language-crystal\">npm start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>  在浏览器里面输入：<a href=\"http://localhost:3000/\">http://localhost:3000/</a></p>\n<h1 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h1><h2 id=\"路由方法\"><a href=\"#路由方法\" class=\"headerlink\" title=\"路由方法\"></a>路由方法</h2><p>Express方法源于 HTTP 方法之一，附加到 express 类的实例。它可请求的方法包括：</p>\n<p>get、post、put、head、delete、options、trace、copy、lock、mkcol、move、purge、propfind、proppatch、unlock、report、mkactivity、checkout、merge、m-search、notify、subscribe、unsubscribe、patch、search 和 connect。</p>\n<h2 id=\"路径\"><a href=\"#路径\" class=\"headerlink\" title=\"路径\"></a>路径</h2><p>Express路径包含三种表达形式，分别为字符串、字符串模式、正则表达式</p>\n<h4 id=\"1-字符串路径\"><a href=\"#1-字符串路径\" class=\"headerlink\" title=\"1.字符串路径\"></a>1.字符串路径</h4><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kif\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>此路径地址将与&#x2F;login匹配</p>\n<h4 id=\"2-字符串模式路径\"><a href=\"#2-字符串模式路径\" class=\"headerlink\" title=\"2.字符串模式路径\"></a>2.字符串模式路径</h4><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/ab+cd\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kif\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>此路径地址将与acd和abcd匹配</p>\n<h4 id=\"3-正则表达式路径\"><a href=\"#3-正则表达式路径\" class=\"headerlink\" title=\"3.正则表达式路径\"></a>3.正则表达式路径</h4><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^a</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kif\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>匹配开头必须是a的路径</p>\n<p>eg:</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;h1>主页&lt;/h1></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>“登录页面”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/registe\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>“注册页面”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h2><p>动态路由使得我们不必向之前那样每一个路由路径都必须亲自设定，大大提高了开发上的效率，通过下面代码，在自定义路由之后，可通过req.params来获取路由信息：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;h1>oh no&lt;/h1></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login/:aid\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get\"></a>get</h1><p>获取get参数:</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录路由，user为：\"</span><span class=\"token operator\">+</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>user<span class=\"token operator\">+</span><span class=\"token string\">\"==>   password为：\"</span><span class=\"token operator\">+</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"post\"><a href=\"#post\" class=\"headerlink\" title=\"post\"></a>post</h1><p>使用npm提供的body-parser或者connect-multiparty来获取post数据</p>\n<h3 id=\"body-parser\"><a href=\"#body-parser\" class=\"headerlink\" title=\"body-parser\"></a>body-parser</h3><p>Express中默认都使用body-parser作为请求体解析post数据，这个模块也能解析：JSON、Raw、文本、URL-encoded格式的请求体。<br>首先在项目目录安装body-parser：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install body-parser --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在项目app.js中,引用和设置该模块：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> bodyParser<span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body-parser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// parse application/x-www-form-urlencoded</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">urlencoded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">extended</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// parse application/json</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 全局 中间件  解决所有路由的 跨域问题</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Headers'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'X-Requested-With,Content-Type'</span><span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Methods'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'GET,POST,OPTIONS'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>bodyParser.json()很明显是将json作为消息主体，再且常见的语言和浏览器大都支持json规范，使得json处理起来不会遇上兼容性问题。<br>application&#x2F;x-www-form-urlencoded：<br>如果form表单不设置enctype属性，那么他默认就会是这种。<br>之后获取数据：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span>urlencodedParser<span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// req: 客户端 携带的信息</span>\n  <span class=\"token comment\">// console.log(req.query)</span>\n  <span class=\"token comment\">// console.log(req.params)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// console.log(req.get('Origin'))</span>\n  <span class=\"token comment\">// console.log(req.url)</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在中间添加urlencodedParser，请求是依然使用req.body获取数据。</p>\n<h4 id=\"connect-multiparty\"><a href=\"#connect-multiparty\" class=\"headerlink\" title=\"connect-multiparty\"></a>connect-multiparty</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install connect-multiparty --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h1><p>中间件也分为应用层中间件、路由中间件、内置中间件、错误处理中间件和第三方中间件。</p>\n<h3 id=\"应用层中间件\"><a href=\"#应用层中间件\" class=\"headerlink\" title=\"应用层中间件\"></a>应用层中间件</h3><p>应用层中间件绑定到app对象使用app.use和app.METHOD()-需要处理http请求的方法，例如GET、PUT、POST，将之前的get或者post替换为use就行。<br>例如下面实例：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express<span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> app<span class=\"token operator\">=</span><span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//匹配路由之前的操作</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"访问之前\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主页\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这时我们会发现<a href=\"http://localhost:8080/%E5%9C%B0%E5%9D%80%E4%B8%80%E7%9B%B4%E5%9C%A8%E5%8A%A0%E8%BD%BD%EF%BC%8C%E4%BD%86%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%87%8C%E6%98%BE%E7%A4%BA%E4%BA%86%E2%80%9C%E8%AE%BF%E9%97%AE%E4%B9%8B%E5%89%8D%E2%80%9D%EF%BC%8C%E8%AF%B4%E6%98%8E%E7%A8%8B%E5%BA%8F%E5%B9%B6%E4%B8%8D%E4%BC%9A%E5%90%8C%E6%AD%A5%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%BD%BF%E7%94%A8next%E6%9D%A5%E6%98%AF%E8%B7%AF%E7%94%B1%E7%BB%A7%E7%BB%AD%E5%90%91%E4%B8%8B%E5%8C%B9%E9%85%8D%EF%BC%8C%E9%82%A3%E4%B9%88%E5%B0%B1%E8%83%BD%E5%8F%88%E5%BE%97%E5%88%B0%E4%B8%BB%E9%A1%B5%E6%95%B0%E6%8D%AE%E4%BA%86%EF%BC%9A\">http://localhost:8080/地址一直在加载，但命令行里显示了“访问之前”，说明程序并不会同步执行，如果使用next来是路由继续向下匹配，那么就能又得到主页数据了：</a></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express<span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> app<span class=\"token operator\">=</span><span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//匹配路由之前的操作</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"访问之前\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主页\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当然也可以简化写法：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express<span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> app<span class=\"token operator\">=</span><span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"访问之前\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主页\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>因此，在进行路由匹配之前又要继续向下执行时想做个操作，那么应用层中间件无疑是好的选择。</p>\n<h3 id=\"路由中间件\"><a href=\"#路由中间件\" class=\"headerlink\" title=\"路由中间件\"></a>路由中间件</h3><p>路由级中间件和应用级中间件类似，只不过他需要绑定express.Router();</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var router &#x3D; express.Router()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在匹配路由时，我们使用 router.use() 或 router.VERB() ,路由中间件结合多次callback可用于用户登录及用户状态检测。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/postTest'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'访问前'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// req: 客户端 携带的信息</span>\n  <span class=\"token comment\">// console.log(req.query)</span>\n  <span class=\"token comment\">// console.log(req.params)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// console.log(req.get('Origin'))</span>\n  <span class=\"token comment\">// console.log(req.url)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Express'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>总之在检测用户登录和引导用户应该访问哪个页面是，路由中间件绝对好用。</p>\n<h3 id=\"错误处理中间件\"><a href=\"#错误处理中间件\" class=\"headerlink\" title=\"错误处理中间件\"></a>错误处理中间件</h3><p>顾名思义，它是指当我们匹配不到路由时所执行的操作。错误处理中间件和其他中间件基本一样，只不过其需要开发者提供4个自变量参数。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">sendStatus</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>httpStatusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>一般情况下，我们把错误处理放在最下面，这样我们即可对错误进行集中处理。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// error handler</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// set locals, only providing error in development</span>\n  res<span class=\"token punctuation\">.</span>locals<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span>locals<span class=\"token punctuation\">.</span>error <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'env'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span> <span class=\"token operator\">?</span> err <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n  logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// render the error page</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>status <span class=\"token operator\">||</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"内置中间件\"><a href=\"#内置中间件\" class=\"headerlink\" title=\"内置中间件\"></a>内置中间件</h3><p>从版本4.x开始，Express不再依赖Content，也就是说Express以前的内置中间件作为单独模块，express.<a href=\"https://so.csdn.net/so/search?q=static&spm=1001.2101.3001.7020\">static</a>是Express的唯一内置中间件。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">express.static(root, [options]);\n1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>通过express.static我们可以指定要加载的静态资源。root代表加载静态资源的路径，options作为可选参数拥有一下属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n<th>类型</th>\n<th>缺省值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dotfiles</td>\n<td>是否对外输出文件名以点（.）开头的文件。有效值包括“allow”、“deny”和“ignore”</td>\n<td>字符串</td>\n<td>“ignore”</td>\n</tr>\n<tr>\n<td>etag</td>\n<td>启用或禁用 etag 生成</td>\n<td>布尔</td>\n<td>true</td>\n</tr>\n<tr>\n<td>extensions</td>\n<td>用于设置后备文件扩展名。</td>\n<td>数组</td>\n<td>[]</td>\n</tr>\n<tr>\n<td>index</td>\n<td>发送目录索引文件。设置为 false 可禁用建立目录索引。</td>\n<td>混合</td>\n<td>“index.html”</td>\n</tr>\n<tr>\n<td>lastModified</td>\n<td>将 Last-Modified 的头设置为操作系统上该文件的上次修改日期。有效值包括 true 或 false。</td>\n<td>布尔</td>\n<td>true</td>\n</tr>\n<tr>\n<td>maxAge</td>\n<td>设置 Cache-Control 头的 max-age 属性（以毫秒或者 ms 格式中的字符串为单位）</td>\n<td>数字</td>\n<td>0</td>\n</tr>\n<tr>\n<td>redirect</td>\n<td>当路径名是目录时重定向到结尾的“&#x2F;”。</td>\n<td>布尔</td>\n<td></td>\n</tr>\n<tr>\n<td>setHeaders</td>\n<td>用于设置随文件一起提供的 HTTP 头的函数。</td>\n<td>函数</td>\n<td>true</td>\n</tr>\n</tbody></table>\n<p>以下示例将使用了 express.static 中间件，并且提供了一个详细的’options’对象（作为示例）：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var options &#x3D; &#123;\n  dotfiles: &#39;ignore&#39;,\n  etag: false,\n  extensions: [&#39;htm&#39;, &#39;html&#39;],\n  index: false,\n  maxAge: &#39;1d&#39;,\n  redirect: false,\n  setHeaders: function (res, path, stat) &#123;\n    res.set(&#39;x-timestamp&#39;, Date.now());\n  &#125;\n&#125;\n\napp.use(express.static(&#39;public&#39;, options));<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h1><p>1.安装</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install cookie-parser --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>2.引入</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const cookieParser&#x3D;require(&quot;cookie-parser&quot;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>3.设置中间件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">app.use(cookieParser());<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>4.设置cookie</p>\n<p>res.cookie(名称,值,{配置信息})</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">res<span class=\"token punctuation\">.</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'zhangsan'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">maxAge</span><span class=\"token operator\">:</span> <span class=\"token number\">900000</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">httpOnly</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>关于设置cookie的参数说明：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">domain: 域名  \n\nname&#x3D;value：键值对，可以设置要保存的 Key&#x2F;Value，注意这里的 name 不能和其他属性项的名字一样 \n\nExpires： 过期时间（秒），在设置的某个时间点后该 Cookie 就会失效，如 expires&#x3D;Wednesday, 09-Nov-99 23:12:40 GMT。\n\nmaxAge： 最大失效时间（毫秒），设置在多少后失效 。\n\nsecure： 当 secure 值为 true 时，cookie 在 HTTP 中是无效，在 HTTPS 中才有效 。\n\nPath： 表示 在那个路由下可以访问到cookie。\n\nhttpOnly：是微软对 COOKIE 做的扩展。如果在 COOKIE 中设置了“httpOnly”属性，则通过程序（JS 脚本、applet 等）将无法读取到COOKIE 信息，防止 XSS 攻击的产生 。\n\nsinged：表示是否签名cookie, 设为true 会对这个 cookie 签名，这样就需要用 res.signedCookies 而不是 res.cookies 访问它。被篡改的签名 cookie 会被服务器拒绝，并且 cookie 值会重置为它的原始值。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>5.获取cookie</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">req.cookie.name;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>下面是一个基础实例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cookieParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cookie-parser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cookieParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/* GET home page. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'11111'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">maxAge</span><span class=\"token operator\">:</span> <span class=\"token number\">40000</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Express'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/postTest'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'访问前'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// req: 客户端 携带的信息</span>\n  <span class=\"token comment\">// console.log(req.query)</span>\n  <span class=\"token comment\">// console.log(req.params)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'req.cookies'</span><span class=\"token punctuation\">,</span>req<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// console.log(req.get('Origin'))</span>\n  <span class=\"token comment\">// console.log(req.url)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Express'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当访问set路由后会设置cookie，当访问get路由后会获取到设置的cookie值。当然你也可以在其他页面继续获取当前cookie，以实现cookie共享。</p>\n<p>三、多个二级域名共享cookie</p>\n<p>只需要增加res.cookie中option对象的值，即可实现对相应路由下多个二级路由的cookie进行共享，代码如下：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express<span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cookieParser<span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cookie-parser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> app<span class=\"token operator\">=</span><span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//设置中间件</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cookieParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"首页\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//设置cookie</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/set\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userName\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">maxAge</span><span class=\"token operator\">:</span> <span class=\"token number\">200000</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">httpOnly</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">domain</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ccc.com\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"设置cookie成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//获取cookie</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/get\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取cookie成功，cookie为：\"</span><span class=\"token operator\">+</span> req<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"session\"><a href=\"#session\" class=\"headerlink\" title=\"session\"></a>session</h1><p>我们使用<a href=\"https://so.csdn.net/so/search?q=express&spm=1001.2101.3001.7020\">express</a>-session模块来设置session</p>\n<p>1.安装express-session</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install express-session --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>2.引入express-session模块</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const session&#x3D;require(&quot;express-session&quot;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>3.设置session</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">session(options);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如下列代码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cookieParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cookie-parser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> session<span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express-session\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cookieParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">secret</span><span class=\"token operator\">:</span> <span class=\"token string\">\"keyboard cat\"</span><span class=\"token punctuation\">,</span>\n\t <span class=\"token literal-property property\">resave</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\t <span class=\"token literal-property property\">saveUninitialized</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t <span class=\"token literal-property property\">cookie</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'sesionToken'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123123'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">maxAge</span><span class=\"token operator\">:</span>  <span class=\"token number\">5</span><span class=\"token operator\">*</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">secure</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* GET home page. */</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'11111'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">maxAge</span><span class=\"token operator\">:</span> <span class=\"token number\">40000</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//设置session</span>\n\treq<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>userName<span class=\"token operator\">=</span><span class=\"token string\">'kif'</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Express'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/postTest'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'访问前'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// req: 客户端 携带的信息</span>\n  <span class=\"token comment\">// console.log(req.query)</span>\n  <span class=\"token comment\">// console.log(req.params)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'req.cookies'</span><span class=\"token punctuation\">,</span>req<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'req.session.userName'</span><span class=\"token punctuation\">,</span>req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>userName<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// console.log(req.get('Origin'))</span>\n  <span class=\"token comment\">// console.log(req.url)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Express'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router<span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在session(option)中对session进行设置，它的主要参数是：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token number\">1.</span> name <span class=\"token operator\">-</span> cookie的名字（原属性名为 key）。（默认：’connect<span class=\"token punctuation\">.</span>sid’）\n<span class=\"token number\">2.</span> store <span class=\"token operator\">-</span> session存储实例\n<span class=\"token number\">3.</span> secret <span class=\"token operator\">-</span> 用它来对session cookie签名，防止篡改\n<span class=\"token number\">4.</span> cookie <span class=\"token operator\">-</span> session cookie设置 （默认：<span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> ‘<span class=\"token operator\">/</span>‘<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">httpOnly</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">secure</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">maxAge</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#125;</span>）\n<span class=\"token number\">5.</span> genid <span class=\"token operator\">-</span> 生成新session <span class=\"token constant\">ID</span>的函数 （默认使用uid2库）\n<span class=\"token number\">6.</span> rolling <span class=\"token operator\">-</span> 在每次请求时强行设置cookie，这将重置cookie过期时间（默认：<span class=\"token boolean\">false</span>）\n<span class=\"token number\">7.</span> resave <span class=\"token operator\">-</span> 强制保存session即使它并没有变化 （默认： <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> 建议设为：<span class=\"token boolean\">false</span>）\n<span class=\"token number\">8.</span> proxy <span class=\"token operator\">-</span> 当设置了secure cookies（通过”x<span class=\"token operator\">-</span>forwarded<span class=\"token operator\">-</span>proto” header ）时信任反向代理。当设定为<span class=\"token boolean\">true</span>时，\n”x<span class=\"token operator\">-</span>forwarded<span class=\"token operator\">-</span>proto” header 将被使用。当设定为<span class=\"token boolean\">false</span>时，所有headers将被忽略。当该属性没有被设定时，将使用Express的trust proxy。\n<span class=\"token number\">9.</span> saveUninitialized <span class=\"token operator\">-</span> 强制将未初始化的session存储。当新建了一个session且未设定属性或值时，它就处于未初始化状态。在设定一个cookie前，这对于登陆验证，减轻服务端存储压力，权限控制是有帮助的。（默认：<span class=\"token boolean\">true</span>）\n<span class=\"token number\">10.</span> unset <span class=\"token operator\">-</span> 控制req<span class=\"token punctuation\">.</span>session是否取消（例如通过 <span class=\"token keyword\">delete</span>，或者将它的值设置为<span class=\"token keyword\">null</span>）。这可以使session保持存储状态但忽略修改或删除的请求（默认：keep）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>三、session的常用方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//设置session</span>\nreq<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>username<span class=\"token operator\">=</span><span class=\"token string\">\"张三\"</span>\n\n<span class=\"token comment\">//获取session</span>\nreq<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>username\n\n<span class=\"token comment\">//重新设置cookie的过期时间</span>\nreq<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">.</span>maxAge<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//销毁session</span>\nreq<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以下演示通过销毁session的方式来退出登录</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> express<span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> session<span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express-session\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> app<span class=\"token operator\">=</span><span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//配置中间件</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">secret</span><span class=\"token operator\">:</span> <span class=\"token string\">\"keyboard cat\"</span><span class=\"token punctuation\">,</span>\n\t <span class=\"token literal-property property\">resave</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\t <span class=\"token literal-property property\">saveUninitialized</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t <span class=\"token literal-property property\">cookie</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\t<span class=\"token literal-property property\">maxAge</span><span class=\"token operator\">:</span>  <span class=\"token number\">5</span><span class=\"token operator\">*</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t<span class=\"token literal-property property\">secure</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"seName\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t<span class=\"token literal-property property\">resave</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//设置session</span>\n\treq<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>userinfo<span class=\"token operator\">=</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">;</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登陆成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/loginOut'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//注销session</span>\n\treq<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"退出登录！\"</span><span class=\"token operator\">+</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//获取session</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>userinfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello \"</span><span class=\"token operator\">+</span>req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>userinfo<span class=\"token operator\">+</span><span class=\"token string\">\"，welcome to index\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\tres<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未登陆\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当我们进入到主页时，未显示任何信息，进入login路由后，自动设置session，这是回到主页则显示session信息，之后进入loginOut路由已注销session信息，再回到首页显示为登陆。</p>\n<h1 id=\"jade模板引擎\"><a href=\"#jade模板引擎\" class=\"headerlink\" title=\"jade模板引擎\"></a>jade模板引擎</h1><p>安装jade：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install jade --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在程序中引入jade：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'views'</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'views'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'view engine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jade'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">engine</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jade'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jade'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__express<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>特定路由渲染：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index.jade\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>完整实例：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express<span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> jade<span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jade\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fs<span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> app<span class=\"token operator\">=</span><span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//引用jade</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'views'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"public\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//设置视图的对应目录</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"view engine\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"jade\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//设置默认的模板引擎</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">engine</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jade'</span><span class=\"token punctuation\">,</span> jade<span class=\"token punctuation\">.</span>__express<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//定义模板引擎</span>\n\n<span class=\"token comment\">//获取jade文件</span>\n<span class=\"token keyword\">var</span> str<span class=\"token operator\">=</span>jade<span class=\"token punctuation\">.</span><span class=\"token function\">renderFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./public/index.jade\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">pretty</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index.jade\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"jade基础语法\"><a href=\"#jade基础语法\" class=\"headerlink\" title=\"jade基础语法\"></a>jade基础语法</h2><h5 id=\"1、jade对很多html操作进行了简化，如下：\"><a href=\"#1、jade对很多html操作进行了简化，如下：\" class=\"headerlink\" title=\"1、jade对很多html操作进行了简化，如下：\"></a>1、jade对很多html操作进行了简化，如下：</h5><pre class=\"line-numbers language-jade\" data-language=\"jade\"><code class=\"language-jade\">html\n\thead\n\t\tstyle\n\tbody\n\t\tdiv(class&#x3D;&quot;content&quot;)\n\t\t\th1 正文<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>了解过html语句的，从结构上一定会发现，它将原本的双标签省略了，尖括号也不见了，而层级的划分则由缩进实现，默认的，jade会把几乎所有缩进后的字母变为标签(行内元素)。以下代码会变为：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>正文<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>也将用div(class&#x3D;”content”)代表，简化了代码的书写；</p>\n<h5 id=\"2、“-”符号的作用\"><a href=\"#2、“-”符号的作用\" class=\"headerlink\" title=\"2、“|”符号的作用\"></a>2、“|”符号的作用</h5><p>有时我们想让我们的标签成为文字，那么“|”成为了绝好的工具：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">div(class&#x3D;&quot;content&quot;,id&#x3D;&quot;content&quot;)\n\t\t\t| center<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>我们可以看到，他将center作为文字原封不动的写入了html中，而不是作为一个标签渲染。<br>当然我们用它来转换js语句：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">script\n\t\t| var cli &#x3D; document.getElementById(&quot;content&quot;);\n\t\t| cli.onclick&#x3D;function()&#123;\n\t\t|\talert(&quot;aaa&quot;);\n\t\t| &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>他将会变为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;script&gt;\n    var cli &#x3D; document.getElementById(&quot;content&quot;);\n    cli.onclick&#x3D;function()&#123;\n        alert(&quot;aaa&quot;);\n    &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"3、识别js语句：\"><a href=\"#3、识别js语句：\" class=\"headerlink\" title=\"3、识别js语句：\"></a>3、识别js语句：</h5><p>可以通过 script. 来识别js语法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">script.\n\t\tvar cli &#x3D; document.getElementById(&quot;content&quot;);\n\t\tcli.onclick&#x3D;function()&#123;\n\t\t\talert(&quot;aaa&quot;);\n\t\t&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>他也会变为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;script&gt;\n    var cli &#x3D; document.getElementById(&quot;content&quot;);\n    cli.onclick&#x3D;function()&#123;\n        alert(&quot;aaa&quot;);\n    &#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们可以看到，相比于用 | 使用script. 更加方便快捷。</p>\n<h5 id=\"4、引入其他js文件：\"><a href=\"#4、引入其他js文件：\" class=\"headerlink\" title=\"4、引入其他js文件：\"></a>4、引入其他js文件：</h5><p>想在jade的js标签中引入其他js文件？没错，它也支持。前提请确保他们在同一文件夹下：<br><img src=\"https://img-blog.csdnimg.cn/20190429222159109.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25vMTAwODY=,size_16,color_FFFFFF,t_70\" alt=\"引入js\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">script\n\t\tinclude click.js\n12\n&lt;script&gt;var cli &#x3D; document.getElementById(&quot;content&quot;);\n\tcli.onclick&#x3D;function()&#123;\n       \t\talert(&quot;aaa&quot;);\n\t&#125;\n&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"5、表达式\"><a href=\"#5、表达式\" class=\"headerlink\" title=\"5、表达式\"></a>5、表达式</h5><p>“-”允许我们直接写js语法，在变量调用时，通过 #{a+b} 或 div&#x3D;a+b 进行：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">html\n\thead\n\t\t\n\tbody\n\t\t-var a&#x3D;10\n\t\t-var b&#x3D;20\n\t\tdiv a+b为:#&#123;a+b&#125;\n\t\tdiv&#x3D;a+b<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>会得到：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;html&gt;\n  &lt;head&gt;&lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div&gt;a+b为:30&lt;&#x2F;div&gt;\n    &lt;div&gt;30&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"6、for循环：\"><a href=\"#6、for循环：\" class=\"headerlink\" title=\"6、for循环：\"></a>6、for循环：</h5><p>“-“也可以用于循环语句的使用</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">html\n\thead\n\t\n\tbody\n\t\t-var arr&#x3D;0;\n\t\t-for(var i&#x3D;5;i&gt;arr;i--)\n\t\t\tdiv&#x3D;i\n\t\tdiv the number &#x3D; #&#123;i&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>得到：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;html&gt;\n  &lt;head&gt;&lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div&gt;5&lt;&#x2F;div&gt;\n    &lt;div&gt;4&lt;&#x2F;div&gt;\n    &lt;div&gt;3&lt;&#x2F;div&gt;\n    &lt;div&gt;2&lt;&#x2F;div&gt;\n    &lt;div&gt;1&lt;&#x2F;div&gt;\n    &lt;div&gt;the number &#x3D; 0&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"7、case-，when\"><a href=\"#7、case-，when\" class=\"headerlink\" title=\"7、case ，when\"></a>7、case ，when</h5><p>类似于switch case语句：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">html\n\thead\n\t\n\tbody\n\t\t- var test &#x3D; &quot;汉子&quot;\n\t\t-var none &#x3D; &quot;无&quot;\n\t\tdiv The word is #&#123;test&#125;\n\t\tcase test\n\t\t\twhen &quot;a&quot;: div the when is a\n\t\t\twhen &quot;b&quot;: div the second is b\n\t\t\twhen &quot;汉子&quot;: div the Third is 汉子\n\t\t\tdefault: The words is #&#123;none&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>得到：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;html&gt;\n  &lt;head&gt;&lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div&gt;The word is 汉子。&lt;&#x2F;div&gt;\n    &lt;div&gt;the Third is 汉子&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>类似于switch case，只执行when中与case对应的代码块，在匹配后面用 : 来作为要执行的代码，后面跟上标签和对应语句</p>\n<h5 id=\"8、if-else条件判断\"><a href=\"#8、if-else条件判断\" class=\"headerlink\" title=\"8、if else条件判断\"></a>8、if else条件判断</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">html\n\thead\n\t\n\tbody\n\t\t-for(var i&#x3D;12;i&gt;0;i--)\n\t\t\t-if(i%2&#x3D;&#x3D;0)\n\t\t\t\tdiv(style&#x3D;&#123;background:&#39;#eee&#39;,width:&#39;100%&#39;,height:&#39;20px&#39;,color: &#39;#333&#39;&#125;)\t偶数\n\t\t\t-else\n\t\t\t\tdiv(style&#x3D;&#123;background:&#39;#333&#39;,width:&#39;100%&#39;,height:&#39;20px&#39;,color: &#39;#eee&#39;&#125;)\t奇数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>得到：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;html&gt;\n  &lt;head&gt;&lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div style&#x3D;&quot;background:#eee;width:100%;height:20px;color:#333&quot;&gt;     偶数&lt;&#x2F;div&gt;\n    &lt;div style&#x3D;&quot;background:#333;width:100%;height:20px;color:#eee&quot;&gt;     奇数&lt;&#x2F;div&gt;\n    &lt;div style&#x3D;&quot;background:#eee;width:100%;height:20px;color:#333&quot;&gt;     偶数&lt;&#x2F;div&gt;\n    &lt;div style&#x3D;&quot;background:#333;width:100%;height:20px;color:#eee&quot;&gt;     奇数&lt;&#x2F;div&gt;\n    &lt;div style&#x3D;&quot;background:#eee;width:100%;height:20px;color:#333&quot;&gt;     偶数&lt;&#x2F;div&gt;\n    &lt;div style&#x3D;&quot;background:#333;width:100%;height:20px;color:#eee&quot;&gt;     奇数&lt;&#x2F;div&gt;\n    &lt;div style&#x3D;&quot;background:#eee;width:100%;height:20px;color:#333&quot;&gt;     偶数&lt;&#x2F;div&gt;\n    &lt;div style&#x3D;&quot;background:#333;width:100%;height:20px;color:#eee&quot;&gt;     奇数&lt;&#x2F;div&gt;\n    &lt;div style&#x3D;&quot;background:#eee;width:100%;height:20px;color:#333&quot;&gt;     偶数&lt;&#x2F;div&gt;\n    &lt;div style&#x3D;&quot;background:#333;width:100%;height:20px;color:#eee&quot;&gt;     奇数&lt;&#x2F;div&gt;\n    &lt;div style&#x3D;&quot;background:#eee;width:100%;height:20px;color:#333&quot;&gt;     偶数&lt;&#x2F;div&gt;\n    &lt;div style&#x3D;&quot;background:#333;width:100%;height:20px;color:#eee&quot;&gt;     奇数&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"9、style的写法：\"><a href=\"#9、style的写法：\" class=\"headerlink\" title=\"9、style的写法：\"></a>9、style的写法：</h5><p>在对style样式进行修改时，与script相同，也可使用 . 对其进行编辑，之后对不同的标签在其后面加{}，大括号里写css语句1，并使用 ; 隔开</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">html\n\thead\n\t\tmeta(charset&#x3D;&quot;utf-8&quot;)\n\t\ttitle jade测试页面\n\t\tstyle.\n\t\t\tbody&#123;margin:0;padding:0&#125;\n\t\t\tdiv\n\t\t\t&#123;width: 100px;height: 100px;background: #ccc;text-align: center;line-height: 100px;margin: 10px auto&#125;\n\t\t\tdiv.last&#123;clear:left&#125;\n\tbody\n\t\t-var a&#x3D;0;\n\t\twhile a&lt;12\n\t\t\tif a%2&#x3D;&#x3D;0 &amp;&amp; a!&#x3D;0\n\t\t\t\tdiv.last&#x3D;a++\n\t\t\telse\n\t\t\t\tdiv&#x3D;a++<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>得到：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;utf-8&quot;&#x2F;&gt;\n    &lt;title&gt;jade测试页面&lt;&#x2F;title&gt;\n    &lt;style&gt;\n      body&#123;margin:0;padding:0&#125;\n      div\n      &#123;width: 100px;height: 100px;background: #ccc;text-align: center;line-height: 100px;margin: 10px auto&#125;\n      div.last&#123;clear:left&#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div&gt;0&lt;&#x2F;div&gt;\n    &lt;div&gt;1&lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;last&quot;&gt;2&lt;&#x2F;div&gt;\n    &lt;div&gt;3&lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;last&quot;&gt;4&lt;&#x2F;div&gt;\n    &lt;div&gt;5&lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;last&quot;&gt;6&lt;&#x2F;div&gt;\n    &lt;div&gt;7&lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;last&quot;&gt;8&lt;&#x2F;div&gt;\n    &lt;div&gt;9&lt;&#x2F;div&gt;\n    &lt;div class&#x3D;&quot;last&quot;&gt;10&lt;&#x2F;div&gt;\n    &lt;div&gt;11&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"10、Mixin\"><a href=\"#10、Mixin\" class=\"headerlink\" title=\"10、Mixin\"></a>10、Mixin</h5><p>Mixin的作用是对模块的复用，当重复代码有不同内容时，起作用就来了：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">- var num &#x3D; 0;\nmixin node\n    div The number in mixin node is #&#123;num++&#125;\n+node()\n+node()\n+node()\ndiv At last, the number in mixin node is #&#123;num++&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>得到：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;div&gt;The number in mixin node is 0&lt;&#x2F;div&gt;\n&lt;div&gt;The number in mixin node is 1&lt;&#x2F;div&gt;\n&lt;div&gt;The number in mixin node is 2&lt;&#x2F;div&gt;\n&lt;div&gt;At last, the number in mixin node is 3&lt;&#x2F;div&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上则是jade的一些常用语法，如果平常使用jade作为开发，那么这些是非常基础的，也希望大家有所体会</p>\n<h1 id=\"express连接mysql\"><a href=\"#express连接mysql\" class=\"headerlink\" title=\"express连接mysql\"></a><a href=\"https://so.csdn.net/so/search?q=express&spm=1001.2101.3001.7020\">express</a>连接mysql</h1><p>在确保mysql数据库已开启的情况下，直接使用mysql.creatConnection(option,callback);<br>具体如下：<br>先安装mysql数据库：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm install mysqll --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>引入mysql模块：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const mysql &#x3D; require(&quot;mysql&quot;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>之后仅需在代码中添加如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var db&#x3D;mysql.creatConnection(&#123;host:&#39;localhost&#39;,port:&#39;3306&#39;,user:&quot;root&quot;,password:&#39;password&#39;,database:&#39;dataName&#39;&#125;);\n\ndb.query(&#39;sql语句&#39;,(err,data)&#x3D;&gt;&#123;\n\tif(err)&#123;\n\t\tconsole.log(&#39;出错了!&#39;,err);\n\t&#125;else&#123;\n\t\tconsole.log(&quot;成功！&quot;,JSON.stringify(data));\n\t&#125;\n&#125;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如下实例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const express&#x3D;require(&quot;express&quot;);\nconst mysql&#x3D;require(&quot;mysql&quot;);\n\nvar app&#x3D;express();\n\n&#x2F;&#x2F;连接数据库\nvar db&#x3D;mysql.createConnection(&#123;host: &quot;localhost&quot;,\n\t\t\t\t\t\t\tport: &quot;3306&quot;,\n\t\t\t\t\t\t\tuser: &quot;root&quot;,\n\t\t\t\t\t\t\tpassword: &quot;123456&quot;,\n\t\t\t\t\t\t\tdatabase: &quot;new_lib&quot;&#125;);\n&#x2F;&#x2F;2.发送请求(查询)\ndb.query(&quot;SELECT * FROM students&quot;,function(err,data)&#123;\n\tif(err)&#123;\n\t\tconsole.log(&quot;数据库访问出错&quot;,err);\n\t&#125;else&#123;\n\t\tconsole.log(data);\n\t&#125;\n&#125;)\n\napp.get(&quot;&#x2F;&quot;,function(req,res)&#123;\n\tres.send(&quot;express&quot;);\n&#125;);\n\napp.listen(8080);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"二、mysql的基本语法\"><a href=\"#二、mysql的基本语法\" class=\"headerlink\" title=\"二、mysql的基本语法\"></a>二、mysql的基本语法</h2><p>mysql基本分为增，删，改，查四部分，其中又以查为中心，毕竟对数据进行筛选管理是最频繁的。</p>\n<h5 id=\"1-增\"><a href=\"#1-增\" class=\"headerlink\" title=\"1.增\"></a>1.增</h5><p>顾名思义，即为向数据库添加数据，它用到的关键字为：INSERT</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">INSERT INTO table_name ( 字段1,字段2,...字段N )\n                       VALUES\n                       ( 值1, 值2,...值N );<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"2-删\"><a href=\"#2-删\" class=\"headerlink\" title=\"2.删\"></a>2.删</h5><p>一般删除数据都会设立一个条件，如where指令，他可以指定任何条件。一般语法是：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">DELETE FROM table_name [WHERE Clause]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>值得注意的是：<br>如果没有指定 WHERE 子句，MySQL 表中的所有记录将被删除。</p>\n<h5 id=\"3-改\"><a href=\"#3-改\" class=\"headerlink\" title=\"3.改\"></a>3.改</h5><p>修改也需要通过查找到对应数据来进行修改：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">UPDATE table_name SET field1&#x3D;new-value1, field2&#x3D;new-value2\n1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>当然，修改也能一次性修改多条数据，只要查询条件满足。</p>\n<h5 id=\"4-查\"><a href=\"#4-查\" class=\"headerlink\" title=\"4.查\"></a>4.查</h5><p>mysql基本分为5种查询方式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">where：条件查询\ngroup by：分组\nhaving子句：有group by才能having子句，只有满足“条件表达式”中指定的条件的才能够输出。\norder by：排序\nlimit：记录数\n12345<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"1、where\"><a href=\"#1、where\" class=\"headerlink\" title=\"1、where\"></a>1、where</h6><p>where支持基本运算符：&gt;,&gt;&#x3D;,&lt;,&lt;&#x3D;,!&#x3D;,&#x3D;,in(在集合内),between(在某范围内)、以及逻辑运算符：not或！(非)、or或||（或）、and或&amp;&amp;（与）</p>\n<h6 id=\"2-group-by\"><a href=\"#2-group-by\" class=\"headerlink\" title=\"2.group by\"></a>2.group by</h6><p>相当于合并统计，通常和聚合函数同时使用，如下面的例子：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">*统计每个班的平均分(student_table)\n\nID\t\tclass\t  name\t\t\tscroe\n&quot;1&quot;\t\t&quot;1&quot;\t\t&quot;小虎&quot;\t\t\t&quot;36&quot;\n&quot;2&quot;\t\t&quot;2&quot;\t\t&quot;小胖&quot;\t\t\t&quot;56&quot;\n&quot;3&quot;\t\t&quot;1&quot;\t\t&quot;小明&quot;\t\t\t&quot;48&quot;\n&quot;4&quot;\t\t&quot;2&quot;\t\t&quot;小心&quot;\t\t\t&quot;66&quot;\n&quot;5&quot;\t\t&quot;3&quot;\t\t&quot;小刚&quot;\t\t\t&quot;71&quot;\n&quot;6&quot;\t\t&quot;4&quot;\t\t&quot;小强&quot;\t\t\t&quot;46&quot;\n&quot;7&quot;\t\t&quot;4&quot;\t\t&quot;小达&quot;\t\t\t&quot;51&quot;\n&quot;8&quot;\t\t&quot;1&quot;\t\t&quot;小贺&quot;\t\t\t&quot;80&quot;\n\nSELECT class,AVG(scroe) FROM student_table GROUP BY class;\n12345678910111213<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"3-having\"><a href=\"#3-having\" class=\"headerlink\" title=\"3.having\"></a>3.having</h6><p>having的用法和where类似，一个在form后，一个在group by后面；就是说其是对group by后的信息进行筛选。having筛选时，只能根据select子句中可出现的字段（数据）来进行条件设定。<br>如下面例子：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">数据还是上面那个\n筛选出平均成绩大于60的班级：\n\nSELECT class,AVG(scroe) FROM student_table GROUP BY class HAVING AVG(scroe)&gt;60 ;\n1234<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"4-order-by\"><a href=\"#4-order-by\" class=\"headerlink\" title=\"4.order by\"></a>4.order by</h6><p>order by用于对数据进行排序：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ORDER BY age ASC\t&#x2F;&#x2F;升序\nORDER BY age DESC\t&#x2F;&#x2F;降序\n\n*价格排序(price)升序排序，再按销量(sale)降序排序：\nORDER BY price ASC,sale DESC\n12345<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h6 id=\"5-limit\"><a href=\"#5-limit\" class=\"headerlink\" title=\"5.limit\"></a>5.limit</h6><p>limit用于查询需要的数据量，它接受一到两个整数参数。如果给定两个参数，第一个参数指定第一个返回记录行的初始量(默认初始为0)，第二个参数指定返回记录行的最大数目。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">查询第5-10个选择的数据\nSELECT * FROM table LIMIT 5,10;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>","text":"Express的安装npm install express -g 脚手架工具安装express的脚手架工具express-generator npm install express-generator -g 创建项目 express express-demo 安装依赖 cd ex...","link":"","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":27,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"node.js","slug":"node-js","count":2,"path":"api/tags/node-js.json"},{"name":"express","slug":"express","count":1,"path":"api/tags/express.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Express%E7%9A%84%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">Express的安装</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%89%8B%E6%9E%B6%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">脚手架工具</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">路由</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">路由方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">路径</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">1.字符串路径</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E5%BC%8F%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">2.字符串模式路径</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">3.正则表达式路径</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">动态路由</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#get\"><span class=\"toc-text\">get</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#post\"><span class=\"toc-text\">post</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#body-parser\"><span class=\"toc-text\">body-parser</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#connect-multiparty\"><span class=\"toc-text\">connect-multiparty</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">中间件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%B1%82%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">应用层中间件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">路由中间件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">错误处理中间件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E7%BD%AE%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">内置中间件</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Cookie\"><span class=\"toc-text\">Cookie</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#session\"><span class=\"toc-text\">session</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#jade%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E\"><span class=\"toc-text\">jade模板引擎</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#jade%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">jade基础语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1%E3%80%81jade%E5%AF%B9%E5%BE%88%E5%A4%9Ahtml%E6%93%8D%E4%BD%9C%E8%BF%9B%E8%A1%8C%E4%BA%86%E7%AE%80%E5%8C%96%EF%BC%8C%E5%A6%82%E4%B8%8B%EF%BC%9A\"><span class=\"toc-text\">1、jade对很多html操作进行了简化，如下：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2%E3%80%81%E2%80%9C-%E2%80%9D%E7%AC%A6%E5%8F%B7%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">2、“|”符号的作用</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3%E3%80%81%E8%AF%86%E5%88%ABjs%E8%AF%AD%E5%8F%A5%EF%BC%9A\"><span class=\"toc-text\">3、识别js语句：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%BC%95%E5%85%A5%E5%85%B6%E4%BB%96js%E6%96%87%E4%BB%B6%EF%BC%9A\"><span class=\"toc-text\">4、引入其他js文件：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5%E3%80%81%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">5、表达式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6%E3%80%81for%E5%BE%AA%E7%8E%AF%EF%BC%9A\"><span class=\"toc-text\">6、for循环：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#7%E3%80%81case-%EF%BC%8Cwhen\"><span class=\"toc-text\">7、case ，when</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8%E3%80%81if-else%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD\"><span class=\"toc-text\">8、if else条件判断</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#9%E3%80%81style%E7%9A%84%E5%86%99%E6%B3%95%EF%BC%9A\"><span class=\"toc-text\">9、style的写法：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#10%E3%80%81Mixin\"><span class=\"toc-text\">10、Mixin</span></a></li></ol></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#express%E8%BF%9E%E6%8E%A5mysql\"><span class=\"toc-text\">express连接mysql</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81mysql%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">二、mysql的基本语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E5%A2%9E\"><span class=\"toc-text\">1.增</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%88%A0\"><span class=\"toc-text\">2.删</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E6%94%B9\"><span class=\"toc-text\">3.改</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-%E6%9F%A5\"><span class=\"toc-text\">4.查</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#1%E3%80%81where\"><span class=\"toc-text\">1、where</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#2-group-by\"><span class=\"toc-text\">2.group by</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#3-having\"><span class=\"toc-text\">3.having</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#4-order-by\"><span class=\"toc-text\">4.order by</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#5-limit\"><span class=\"toc-text\">5.limit</span></a></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"小程序开发格式化代码ESLint、Prettier、husky、lint-stage","uid":"cda59d058e4a4f6c68fab1d6f2eeb3e5","slug":"格式化代码ESLint、Prettier、husky、lint-stage","date":"2022-11-19T07:56:00.000Z","updated":"2022-11-19T08:05:46.100Z","comments":true,"path":"api/articles/格式化代码ESLint、Prettier、husky、lint-stage.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/img/202211191605164.jpg","text":"依赖yarn init yarn add --dev babel-eslint@10.0.3 yarn add --dev eslint@6.7.1 yarn add --dev eslint-config-alloy@3.7.1 yarn add --dev eslint-co...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"开发记录","slug":"开发记录","count":3,"path":"api/categories/开发记录.json"}],"tags":[{"name":"开发规范","slug":"开发规范","count":2,"path":"api/tags/开发规范.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}},"next_post":{"title":"Vue富文本编辑器-Ckeditor4","uid":"6a32b67b896744689e1672530d5c4943","slug":"Vue富文本编辑器-Ckeditor4","date":"2022-11-08T10:46:00.000Z","updated":"2022-12-02T07:01:36.219Z","comments":true,"path":"api/articles/Vue富文本编辑器-Ckeditor4.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/img/202212021459403.png","text":"Ckeditor4的下载link: https://ckeditor.com/ckeditor-4/download/ 下载好后解压, 打开index, 打开后就是配置界面 在这里进行增删移动，看自己需求,调整好后 这里就是配置文件了，复制 导入将整个目录放在你的项目下 在需要用...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"开发笔记","slug":"开发笔记","count":3,"path":"api/categories/开发笔记.json"}],"tags":[{"name":"Ckeditor4","slug":"Ckeditor4","count":1,"path":"api/tags/Ckeditor4.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}}}