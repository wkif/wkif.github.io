{"title":"RSA数据加解密算法","uid":"705be767dc4b6801a58c10ebc10269e4","slug":"RSA数据加解密算法","date":"2022-05-30T14:49:00.000Z","updated":"2022-05-30T14:52:16.745Z","comments":true,"path":"api/articles/RSA数据加解密算法.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/project/202205302251490.png","content":"<p>主要代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># /*</span>\n<span class=\"token comment\">#  * @Author: kif kif101001000@163.com </span>\n<span class=\"token comment\">#  * @Date: 2022-05-30 22:34:47 </span>\n<span class=\"token comment\">#  * @Last Modified by:   kif kif101001000@163.com  </span>\n<span class=\"token comment\">#  * @Last Modified time: 2022-05-30 22:34:47 </span>\n<span class=\"token comment\">#  */</span>\n\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> math\n\n<span class=\"token comment\"># 模N大数的幂乘的快速算法</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fastExpMod</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 底数，幂，大数N</span>\n    result <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    e <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span> e <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> e <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 按位与</span>\n            e <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> m\n            <span class=\"token keyword\">continue</span>\n        e <span class=\"token operator\">>></span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> m\n    <span class=\"token keyword\">return</span> result\n\n\n\n<span class=\"token comment\"># 针对随机取得p，q两个数的素性检测</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">miller_rabin_test</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># p为要检验得数</span>\n    p <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    r <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token comment\"># P110定理5.17 P108定理5.3.6</span>\n    <span class=\"token comment\"># 寻找满足n-1 = 2^s  * m 的s,m两个数</span>\n    <span class=\"token comment\">#  n -1 = 2^r * p</span>\n    <span class=\"token keyword\">while</span> p <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 最后得到为奇数的p(即m)</span>\n        r <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        p <span class=\"token operator\">/=</span> <span class=\"token number\">2</span>\n    b <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 随机取b=（0.n）</span>\n    <span class=\"token comment\"># 如果情况1    b得p次方  与1  同余  mod n</span>\n    <span class=\"token keyword\">if</span> fastExpMod<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>  <span class=\"token comment\"># 通过测试,可能为素数</span>\n    <span class=\"token comment\"># 情况2  b得（2^r  *p）次方  与-1 (n-1) 同余  mod n</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 检验六次</span>\n        <span class=\"token keyword\">if</span> fastExpMod<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>  <span class=\"token comment\"># 如果该数可能为素数，</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>  <span class=\"token comment\"># 不可能是素数</span>\n\n\n<span class=\"token comment\"># 生成大素数：</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_prime_num</span><span class=\"token punctuation\">(</span>keylength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 为了确保两素数乘积n  长度不会太长，使用keylength/2</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Select a random number n</span>\n        <span class=\"token comment\"># n = random.randint(0, 1&lt;&lt;int(halfkeyLength))</span>\n        n <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> keylength<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            found <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n            <span class=\"token comment\"># 如果经过10次素性检测，那么很大概率上，这个数就是素数</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> miller_rabin_test<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">pass</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    found <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n                    <span class=\"token keyword\">break</span>\n            <span class=\"token keyword\">if</span> found<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> n\n\n\n<span class=\"token comment\"># 生成密钥（包括公钥和私钥）</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_keys</span><span class=\"token punctuation\">(</span>keylength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    p <span class=\"token operator\">=</span> create_prime_num<span class=\"token punctuation\">(</span>keylength <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    q <span class=\"token operator\">=</span> create_prime_num<span class=\"token punctuation\">(</span>keylength <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    n <span class=\"token operator\">=</span> p <span class=\"token operator\">*</span> q\n    <span class=\"token comment\"># euler函数值</span>\n    fn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>q <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    e <span class=\"token operator\">=</span> selectE<span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> keylength <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    d <span class=\"token operator\">=</span> match_d<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># 随机在（1，fn）选择一个E，  满足gcd（e,fn）=1</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">selectE</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> halfkeyLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># e and fn are relatively prime</span>\n        e <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> math<span class=\"token punctuation\">.</span>gcd<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> e\n\n\n<span class=\"token comment\"># 根据选择的e，匹配出唯一的d</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">match_d</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    d <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span> d<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> fn <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> d\n        d <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> fastExpMod<span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span> C<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> fastExpMod<span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span>\n\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">encrypt_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    mess<span class=\"token operator\">=</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    n<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> d <span class=\"token operator\">=</span> create_keys<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span>\n    s <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> mess<span class=\"token punctuation\">:</span>\n        c <span class=\"token operator\">=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>encrypt<span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        s <span class=\"token operator\">+=</span> c\n    f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./pass.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Encrypt Done!\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">decrypt_file</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./pass.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span>\n    mess <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n    f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    n<span class=\"token punctuation\">,</span>d<span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"（n,d）:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    s <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> mess<span class=\"token punctuation\">:</span>\n        c <span class=\"token operator\">=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>decrypt<span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        s <span class=\"token operator\">+=</span> c\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Decrypt Done!\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":"主要代码： # /* # * @Author: kif kif101001000@163.com # * @Date: 2022-05-30 22:34:47 # * @Last Modified by: kif kif101001000@163.com # * @Last Mo...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"课程笔记","slug":"课程笔记","count":1,"path":"api/categories/课程笔记.json"}],"tags":[{"name":"RSA","slug":"RSA","count":1,"path":"api/tags/RSA.json"}],"toc":"","author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"js发布订阅","uid":"44dcd935b56d2f04aff94002ff328fc3","slug":"js发布订阅","date":"2022-06-10T11:52:00.000Z","updated":"2022-06-10T11:55:15.209Z","comments":true,"path":"api/articles/js发布订阅.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/project/202206101955855.png","text":" 发布-订阅模式，看似陌生，其实不然。工作中经常会用到，例如 Node.js EventEmitter 中的 on 和 emit 方法；Vue 中的 $on 和 $emit 方法。他们都使用了发布-订阅模式，让开发变得更加高效方便。 一、 什么是发布-订阅模式1. 定义发布-订阅...","link":"","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":22,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"js","slug":"js","count":1,"path":"api/tags/js.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}},"next_post":{"title":"JS数组reduce()方法详解及高级技巧","uid":"0dd2f8e1d48b223c2f63dbed14392a9e","slug":"JS数组reduce-方法详解及高级技巧","date":"2022-05-23T03:47:00.000Z","updated":"2022-05-23T03:50:09.955Z","comments":true,"path":"api/articles/JS数组reduce-方法详解及高级技巧.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforhexo/20201202142640.jpg","text":" reduce()方法可以搞定的东西，for循环，或者forEach方法有时候也可以搞定，那为啥要用reduce()？这个问题，之前我也想过，要说原因还真找不到，唯一能找到的是：通往成功的道路有很多，但是总有一条路是最捷径的，亦或许reduce()逼格更高… 1、语法arr.re...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":22,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"Javascript","slug":"Javascript","count":2,"path":"api/tags/Javascript.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}}}