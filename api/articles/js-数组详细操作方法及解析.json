{"title":"js 数组详细操作方法及解析","uid":"24deb55255063425129571f44dab3ef2","slug":"js-数组详细操作方法及解析","date":"2023-01-10T03:18:00.000Z","updated":"2023-01-10T03:23:08.955Z","comments":true,"path":"api/articles/js-数组详细操作方法及解析.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/img/202301101122188.png","content":"<h3 id=\"创建一个数组\"><a href=\"#创建一个数组\" class=\"headerlink\" title=\"创建一个数组:\"></a>创建一个数组:</h3><pre class=\"line-numbers language-less\" data-language=\"less\"><code class=\"language-less\">    <span class=\"token comment\">// 字面量方式:</span>\n    <span class=\"token comment\">// 这个方法也是我们最常用的，在初始化数组的时候 相当方便</span>\n    var a = [3<span class=\"token punctuation\">,</span> 11<span class=\"token punctuation\">,</span> 8]<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [3,11,8];</span>\n    <span class=\"token comment\">// 构造器:</span>\n    <span class=\"token comment\">// 实际上 new Array === Array,加不加new 一点影响都没有。</span>\n    var a = <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [] </span>\n    var a = <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [,,] </span>\n    var a = <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">,</span>11<span class=\"token punctuation\">,</span>8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 3,11,8 ]</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"ES6-Array-of-返回由所有参数值组成的数组\"><a href=\"#ES6-Array-of-返回由所有参数值组成的数组\" class=\"headerlink\" title=\"ES6 Array.of()  返回由所有参数值组成的数组\"></a>ES6 Array.of()  返回由所有参数值组成的数组</h4><p>定义：返回由所有参数值组成的数组，如果没有参数，就返回一个空数组。</p>\n<p>目的：Array.of() 出现的目的是为了解决上述构造器因参数个数不同，导致的行为有差异的问题。</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">    <span class=\"token key attr-name\">let a</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">Array.of(3, 11, 8); // [3,11,8]</span>\n    <span class=\"token key attr-name\">let a</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">Array.of(3); // [3]</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"ES6-Arrary-from-将两类对象转为真正的数组\"><a href=\"#ES6-Arrary-from-将两类对象转为真正的数组\" class=\"headerlink\" title=\"ES6 Arrary.from() 将两类对象转为真正的数组\"></a>ES6 Arrary.from() 将两类对象转为真正的数组</h4><p>定义：用于将两类对象转为真正的数组（不改变原对象，返回新的数组）。</p>\n<p>参数：</p>\n<p>第一个参数(必需):要转化为真正数组的对象。</p>\n<p>第二个参数(可选): 类似数组的map方法，对每个元素进行处理，将处理后的值放入返回的数组。</p>\n<p>第三个参数(可选): 用来绑定this。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">    <span class=\"token selector\">// 1. 对象拥有length属性\n    let obj =</span> <span class=\"token punctuation\">&#123;</span>0<span class=\"token punctuation\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> 1<span class=\"token punctuation\">:</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> 2<span class=\"token punctuation\">:</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token property\">length</span><span class=\"token punctuation\">:</span> 3<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    let arr = Array.<span class=\"token function\">from</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // [<span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span>]<span class=\"token punctuation\">;</span>\n    // 2. 部署了 Iterator接口的数据结构 <span class=\"token property\">比如</span><span class=\"token punctuation\">:</span>字符串、Set、NodeList对象\n    let arr = Array.<span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // [<span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'o'</span>]\n    let arr = Array.<span class=\"token function\">from</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>[<span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // [<span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span>]\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法:\"></a>方法:</h2><p>数组原型提供了非常多的方法，这里分为三类来讲，一类会改变原数组的值，一类是不会改变原数组，以及数组的遍历方法。</p>\n<h3 id=\"改变原数组的方法-9个\"><a href=\"#改变原数组的方法-9个\" class=\"headerlink\" title=\"改变原数组的方法(9个):\"></a>改变原数组的方法(9个):</h3><pre class=\"line-numbers language-less\" data-language=\"less\"><code class=\"language-less\">    let a = [1<span class=\"token punctuation\">,</span>2<span class=\"token punctuation\">,</span>3]<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">ES5</span><span class=\"token punctuation\">:</span>\n     a.<span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span> a.<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> a.<span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span> a.<span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>  a.<span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span> a.<span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span> a.<span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token property\">ES6</span><span class=\"token punctuation\">:</span>\n    a.<span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> a.fill\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于这些能够改变原数组的方法，要注意避免在循环遍历中改变原数组的选项，比如: 改变数组的长度，导致遍历的长度出现问题。</p>\n<h4 id=\"splice-添加-x2F-删除数组元素\"><a href=\"#splice-添加-x2F-删除数组元素\" class=\"headerlink\" title=\"splice() 添加&#x2F;删除数组元素\"></a>splice() 添加&#x2F;删除数组元素</h4><p>定义： splice() 方法<strong>向&#x2F;从数组中添加&#x2F;删除</strong>项目，然后返回被删除的项目</p>\n<p>语法： <code>array.splice(index,howmany,item1,.....,itemX)</code></p>\n<p>参数:</p>\n<ol>\n<li>index：必需。整数，规定添加&#x2F;删除项目的位置，使用负数可从数组结尾处规定位置。</li>\n<li>howmany：可选。要删除的项目数量。如果设置为 0，则不会删除项目。</li>\n<li>item1, …, itemX： 可选。向数组添加的新项目。</li>\n</ol>\n<p>返回值: 如果有元素被删除,返回包含被删除项目的新数组。</p>\n<p>eg1:删除元素</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">    <span class=\"token key attr-name\">let a</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">[1, 2, 3, 4, 5, 6, 7];</span>\n    <span class=\"token key attr-name\">let item</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">a.splice(0, 3); // [1,2,3]</span>\n    console.log(a); // [4,5,6,7]\n    // 从数组下标0开始，删除3个元素\n    <span class=\"token key attr-name\">let item</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">a.splice(-1, 3); // [7]</span>\n    // 从最后一个元素开始删除3个元素，因为最后一个元素，所以只删除了7\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>eg2: 删除并添加</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">     <span class=\"token key attr-name\">let a</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">[1, 2, 3, 4, 5, 6, 7];</span>\n    <span class=\"token key attr-name\">let item</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">a.splice(0,3,'添加'); // [1,2,3]</span>\n    console.log(a); // ['添加',4,5,6,7]\n    // 从数组下标0开始，删除3个元素，并添加元素'添加'\n     <span class=\"token key attr-name\">let b</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">[1, 2, 3, 4, 5, 6, 7];</span>\n    <span class=\"token key attr-name\">let item</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">b.splice(-2,3,'添加1','添加2'); // [6,7]</span>\n    console.log(b); // [1,2,3,4,5,'添加1','添加2']\n    // 从数组最后第二个元素开始，删除3个元素，并添加两个元素'添加1'、'添加2'\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>eg3: 不删除只添加:</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">    <span class=\"token key attr-name\">let a</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">[1, 2, 3, 4, 5, 6, 7];</span>\n    <span class=\"token key attr-name\">let item</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">a.splice(0,0,'添加1','添加2'); // [] 没有删除元素，返回空数组</span>\n    console.log(a); // ['添加1','添加2',1,2,3,4,5,6,7]\n    <span class=\"token key attr-name\">let b</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">[1, 2, 3, 4, 5, 6, 7];</span>\n    <span class=\"token key attr-name\">let item</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">b.splice(-1,0,'添加1','添加2'); // [] 没有删除元素，返回空数组</span>\n    console.log(b); // [1,2,3,4,5,6,'添加1','添加2',7] 在最后一个元素的前面添加两个元素\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>从上述三个栗子可以得出:</p>\n<ol>\n<li>数组如果元素不够，会删除到最后一个元素为止</li>\n<li>操作的元素，包括开始的那个元素</li>\n<li>可以添加很多个元素</li>\n<li>添加是在开始的元素前面添加的</li>\n</ol>\n<h4 id=\"sort-数组排序\"><a href=\"#sort-数组排序\" class=\"headerlink\" title=\"sort() 数组排序\"></a>sort() 数组排序</h4><p>定义: sort()方法对数组元素进行排序，并返回这个数组。</p>\n<p>参数可选: 规定排序顺序的比较函数。</p>\n<p>默认情况下sort()方法没有传比较函数的话，默认按字母升序，如果不是元素不是字符串的话，会调用<code>toString()</code>方法将元素转化为字符串的Unicode(万国码)位点，然后再比较字符。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">    // 字符串排列 看起来很正常\n    var a = [<span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Orange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mango\"</span>]<span class=\"token punctuation\">;</span>\n    a.<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // [<span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Mango\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Orange\"</span>]\n    // 数字排序的时候 因为转换成Unicode字符串之后，有些数字会比较大会排在后面 这显然不是我们想要的\n    var\ta = [10<span class=\"token punctuation\">,</span> 1<span class=\"token punctuation\">,</span> 3<span class=\"token punctuation\">,</span> 20<span class=\"token punctuation\">,</span>25<span class=\"token punctuation\">,</span>8]<span class=\"token punctuation\">;</span>\n    console.<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a.<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> // [1<span class=\"token punctuation\">,</span>10<span class=\"token punctuation\">,</span>20<span class=\"token punctuation\">,</span>25<span class=\"token punctuation\">,</span>3<span class=\"token punctuation\">,</span>8]<span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>比较函数的两个参数：</strong></p>\n<p>sort的比较函数有两个默认参数，要在函数中接收这两个参数，这两个参数是数组中两个要比较的元素，通常我们用 a 和 b 接收两个将要比较的元素：</p>\n<ul>\n<li>若比较函数返回值&lt;0，那么a将排到b的前面;</li>\n<li>若比较函数返回值&#x3D;0，那么a 和 b 相对位置不变；</li>\n<li>若比较函数返回值&gt;0，那么b 排在a 将的前面；</li>\n</ul>\n<p>对于sort()方法更深层级的内部实现以及处理机制可以看一下这篇文章<a href=\"https://juejin.cn/post/6844903507439419399\">深入了解javascript的sort方法</a></p>\n<p><strong>sort排序常见用法</strong>：</p>\n<ol>\n<li><p>数组元素为数字的升序、降序:</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"> var array =  [10<span class=\"token punctuation\">,</span> 1<span class=\"token punctuation\">,</span> 3<span class=\"token punctuation\">,</span> 4<span class=\"token punctuation\">,</span>20<span class=\"token punctuation\">,</span>4<span class=\"token punctuation\">,</span>25<span class=\"token punctuation\">,</span>8]<span class=\"token punctuation\">;</span>\n <span class=\"token selector\">// 升序 a-b &lt; 0   a将排到b的前面，按照a的大小来排序的 \n // 比如被减数a是10，减数是20  10-20 &lt; 0   被减数a(10)在减数b(20)前面   \n array.sort(function(a,b)</span><span class=\"token punctuation\">&#123;</span>\n   return a-b<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n console.<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // [1<span class=\"token punctuation\">,</span>3<span class=\"token punctuation\">,</span>4<span class=\"token punctuation\">,</span>4<span class=\"token punctuation\">,</span>8<span class=\"token punctuation\">,</span>10<span class=\"token punctuation\">,</span>20<span class=\"token punctuation\">,</span>25]<span class=\"token punctuation\">;</span>\n <span class=\"token selector\">// 降序 被减数和减数调换了  20-10>0 被减数b(20)在减数a(10)的前面\n array.sort(function(a,b)</span><span class=\"token punctuation\">&#123;</span>\n   return b-a<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n console.<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // [25<span class=\"token punctuation\">,</span>20<span class=\"token punctuation\">,</span>10<span class=\"token punctuation\">,</span>8<span class=\"token punctuation\">,</span>4<span class=\"token punctuation\">,</span>4<span class=\"token punctuation\">,</span>3<span class=\"token punctuation\">,</span>1]<span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>数组多条件排序</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"> var array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>id:10,age:2<span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span>id:5,age:4<span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span>id:6,age:10<span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span>id:9,age:6<span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span>id:2,age:8<span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span>id:10,age:9<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n     array.sort<span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">(</span>a,b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n         if<span class=\"token punctuation\">(</span>a.id <span class=\"token operator\">==</span><span class=\"token operator\">=</span> b.id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>// 如果id的值相等，按照age的值降序\n             <span class=\"token builtin class-name\">return</span> b.age - a.age\n         <span class=\"token punctuation\">&#125;</span>else<span class=\"token punctuation\">&#123;</span> // 如果id的值不相等，按照id的值升序\n             <span class=\"token builtin class-name\">return</span> a.id - b.id\n         <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  // <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"id\"</span>:2,<span class=\"token string\">\"age\"</span>:8<span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"id\"</span>:5,<span class=\"token string\">\"age\"</span>:4<span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"id\"</span>:6,<span class=\"token string\">\"age\"</span>:10<span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"id\"</span>:9,<span class=\"token string\">\"age\"</span>:6<span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"id\"</span>:10,<span class=\"token string\">\"age\"</span>:9<span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"id\"</span>:10,<span class=\"token string\">\"age\"</span>:2<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span> \n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>自定义比较函数，天空才是你的极限</p>\n</li>\n</ol>\n<p>类似的：<strong>运用好返回值，我们可以写出任意符合自己需求的比较函数</strong></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">    <span class=\"token selector\">var array = [</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">name</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Koro1'</span><span class=\"token punctuation\">&#125;</span><span class=\"token selector\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">name</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Koro1'</span><span class=\"token punctuation\">&#125;</span><span class=\"token selector\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">name</span><span class=\"token punctuation\">:</span><span class=\"token string\">'OB'</span><span class=\"token punctuation\">&#125;</span><span class=\"token selector\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">name</span><span class=\"token punctuation\">:</span><span class=\"token string\">'Koro1'</span><span class=\"token punctuation\">&#125;</span><span class=\"token selector\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">name</span><span class=\"token punctuation\">:</span><span class=\"token string\">'OB'</span><span class=\"token punctuation\">&#125;</span><span class=\"token selector\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">name</span><span class=\"token punctuation\">:</span><span class=\"token string\">'OB'</span><span class=\"token punctuation\">&#125;</span>]<span class=\"token punctuation\">;</span>\n    <span class=\"token selector\">array.sort(function(a,b)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token selector\">if(a.name === 'Koro1')</span><span class=\"token punctuation\">&#123;</span>// 如果name是<span class=\"token string\">'Koro1'</span> 返回-1 ，-1&lt;0 a排在b的前面\n            return -1\n        <span class=\"token punctuation\">&#125;</span><span class=\"token selector\">else</span><span class=\"token punctuation\">&#123;</span> // 如果不是的话，a排在b的后面\n          return 1\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token selector\">)\n    // [</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Koro1\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token selector\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Koro1\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token selector\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Koro1\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token selector\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"OB\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token selector\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"OB\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token selector\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"OB\"</span><span class=\"token punctuation\">&#125;</span>] \n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"pop-删除一个数组中的最后的一个元素\"><a href=\"#pop-删除一个数组中的最后的一个元素\" class=\"headerlink\" title=\"pop() 删除一个数组中的最后的一个元素\"></a>pop() 删除一个数组中的最后的一个元素</h4><p>定义: pop() 方法删除一个数组中的最后的一个元素，并且返回这个元素。</p>\n<p>参数: 无。</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">    <span class=\"token key attr-name\">let  a</span> <span class=\"token punctuation\">=</span>  <span class=\"token value attr-value\">[1,2,3];</span>\n    <span class=\"token key attr-name\">let item</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">a.pop();  // 3</span>\n    console.log(a); // [1,2]\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"shift-删除数组的第一个元素\"><a href=\"#shift-删除数组的第一个元素\" class=\"headerlink\" title=\"shift() 删除数组的第一个元素\"></a>shift() 删除数组的第一个元素</h4><p>定义: shift()方法删除数组的第一个元素，并返回这个元素。</p>\n<p>参数: 无。</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">    <span class=\"token key attr-name\">let  a</span> <span class=\"token punctuation\">=</span>  <span class=\"token value attr-value\">[1,2,3];</span>\n    <span class=\"token key attr-name\">let item</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">a.shift();  // 1</span>\n    console.log(a); // [2,3]\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"push-向数组的末尾添加元素\"><a href=\"#push-向数组的末尾添加元素\" class=\"headerlink\" title=\"push() 向数组的末尾添加元素\"></a>push() 向数组的末尾添加元素</h4><p>定义：push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。</p>\n<p>参数:  item1, item2, …, itemX ,要添加到数组末尾的元素</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">    <span class=\"token key attr-name\">let  a</span> <span class=\"token punctuation\">=</span>  <span class=\"token value attr-value\">[1,2,3];</span>\n    <span class=\"token key attr-name\">let item</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">a.push('末尾');  // 4</span>\n    console.log(a); // [1,2,3,'末尾']\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"unshift()\"></a>unshift()</h4><p>定义：unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度。</p>\n<p>参数:  item1, item2, …, itemX ,要添加到数组开头的元素</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">    <span class=\"token key attr-name\">let  a</span> <span class=\"token punctuation\">=</span>  <span class=\"token value attr-value\">[1,2,3];</span>\n    <span class=\"token key attr-name\">let item</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">a.unshift('开头');  // 4</span>\n    console.log(a); // ['开头',1,2,3]\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"reverse-颠倒数组中元素的顺序\"><a href=\"#reverse-颠倒数组中元素的顺序\" class=\"headerlink\" title=\"reverse() 颠倒数组中元素的顺序\"></a>reverse() 颠倒数组中元素的顺序</h4><p>定义: reverse() 方法用于颠倒数组中元素的顺序。</p>\n<p>参数: 无</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">    let  a =  [1<span class=\"token punctuation\">,</span>2<span class=\"token punctuation\">,</span>3]<span class=\"token punctuation\">;</span>\n    a.<span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    console.<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // [3<span class=\"token punctuation\">,</span>2<span class=\"token punctuation\">,</span>1]\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"ES6-copyWithin-指定位置的成员复制到其他位置\"><a href=\"#ES6-copyWithin-指定位置的成员复制到其他位置\" class=\"headerlink\" title=\"ES6: copyWithin() 指定位置的成员复制到其他位置\"></a>ES6: copyWithin() 指定位置的成员复制到其他位置</h4><p>定义: 在当前数组内部，将指定位置的成员复制到其他位置,并返回这个数组。</p>\n<p>语法:</p>\n<pre class=\"line-numbers language-arduino\" data-language=\"arduino\"><code class=\"language-arduino\">    <span class=\"token keyword\">array</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">end</span> <span class=\"token operator\">=</span> this<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>参数:</p>\n<p>三个参数都是数值，如果不是，会自动转为数值.</p>\n<ol>\n<li>target（必需）：从该位置开始替换数据。如果为负值，表示倒数。</li>\n<li>start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。</li>\n<li>end（可选）：到该位置前停止读取数据，默认等于数组长度。使用负数可从数组结尾处规定位置。</li>\n</ol>\n<p>浏览器兼容(MDN): chrome 45,Edge 12,Firefox32,Opera 32,Safari 9, IE 不支持</p>\n<p>eg:</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">        // -2相当于3号位，-1相当于4号位\n        [1<span class=\"token punctuation\">,</span> 2<span class=\"token punctuation\">,</span> 3<span class=\"token punctuation\">,</span> 4<span class=\"token punctuation\">,</span> 5].<span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> -2<span class=\"token punctuation\">,</span> -1<span class=\"token punctuation\">)</span>\n        // [4<span class=\"token punctuation\">,</span> 2<span class=\"token punctuation\">,</span> 3<span class=\"token punctuation\">,</span> 4<span class=\"token punctuation\">,</span> 5]\n        var a=[<span class=\"token string\">'OB1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Koro1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'OB2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Koro2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'OB3'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Koro3'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'OB4'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Koro4'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'OB5'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Koro5'</span>]\n        // 2位置开始被替换<span class=\"token punctuation\">,</span>3位置开始读取要替换的 5位置前面停止替换\n        a.<span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span>2<span class=\"token punctuation\">,</span>3<span class=\"token punctuation\">,</span>5<span class=\"token punctuation\">)</span>\n        // [<span class=\"token string\">\"OB1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Koro1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Koro2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"OB3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"OB3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Koro3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"OB4\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Koro4\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"OB5\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Koro5\"</span>] \n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>从上述栗子:</p>\n<ol>\n<li>第一个参数是开始被替换的元素位置</li>\n<li>要替换数据的位置范围:从第二个参数是开始读取的元素，在第三个参数前面一个元素停止读取</li>\n<li>数组的长度不会改变</li>\n<li><strong>读了几个元素就从开始被替换的地方替换几个元素</strong></li>\n</ol>\n<h4 id=\"ES6-fill-填充数组\"><a href=\"#ES6-fill-填充数组\" class=\"headerlink\" title=\"ES6: fill() 填充数组\"></a>ES6: fill() 填充数组</h4><p>定义:  使用给定值，填充一个数组。</p>\n<p>参数:</p>\n<p>第一个元素(必须): 要填充数组的值</p>\n<p>第二个元素(可选): 填充的开始位置,默认值为0</p>\n<p>第三个元素(可选)：填充的结束位置，默认是为<code>this.length</code></p>\n<p><a href=\"https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill%23%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7\">MDN浏览器兼容</a></p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">    [<span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span>].<span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>7<span class=\"token punctuation\">)</span>\n    // [7<span class=\"token punctuation\">,</span> 7<span class=\"token punctuation\">,</span> 7]\n    [<span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span>].<span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>7<span class=\"token punctuation\">,</span> 1<span class=\"token punctuation\">,</span> 2<span class=\"token punctuation\">)</span>\n    // [<span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> 7<span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span>]\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"不改变原数组的方法-8个\"><a href=\"#不改变原数组的方法-8个\" class=\"headerlink\" title=\"不改变原数组的方法(8个):\"></a>不改变原数组的方法(8个):</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">    ES5：\n    slice、join、toLocateString、toStrigin、cancat、indexOf、lastIndexOf、\n    ES7：\n    includes\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"slice-浅拷贝数组的元素\"><a href=\"#slice-浅拷贝数组的元素\" class=\"headerlink\" title=\"slice() 浅拷贝数组的元素\"></a>slice() 浅拷贝数组的元素</h4><p>定义： 方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象，且原数组不会被修改。</p>\n<p><strong>注意</strong>：字符串也有一个slice() 方法是用来提取字符串的，不要弄混了。</p>\n<p>语法:</p>\n<pre class=\"line-numbers language-arduino\" data-language=\"arduino\"><code class=\"language-arduino\">    <span class=\"token keyword\">array</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">begin</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">end</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>参数:</p>\n<p>begin(可选): 索引数值,接受负值，从该索引处开始提取原数组中的元素,默认值为0。</p>\n<p>end(可选):索引数值(不包括),接受负值，在该索引处前结束提取原数组元素，默认值为数组末尾(包括最后一个元素)。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">    let a= [<span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'world'</span>]<span class=\"token punctuation\">;</span>\n    let b=a.<span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span>1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // [<span class=\"token string\">'hello'</span>]\n    a[0]=<span class=\"token string\">'改变原数组'</span><span class=\"token punctuation\">;</span>\n    console.<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // [<span class=\"token string\">'改变原数组'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'world'</span>] [<span class=\"token string\">'hello'</span>]\n    b[0]=<span class=\"token string\">'改变拷贝的数组'</span><span class=\"token punctuation\">;</span>\n     console.<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // [<span class=\"token string\">'改变原数组'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'world'</span>] [<span class=\"token string\">'改变拷贝的数组'</span>]\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如上：新数组是浅拷贝的，<strong>元素是简单数据类型，改变之后不会互相干扰</strong>。</p>\n<p>如果是<strong>复杂数据类型(对象,数组)的话，改变其中一个，另外一个也会改变</strong>。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">    <span class=\"token selector\">let a= [</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">name</span><span class=\"token punctuation\">:</span><span class=\"token string\">'OBKoro1'</span><span class=\"token punctuation\">&#125;</span>]<span class=\"token punctuation\">;</span>\n    let b=a.<span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console.<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token selector\">// [</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"OBKoro1\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token selector\">]  [</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"OBKoro1\"</span><span class=\"token punctuation\">&#125;</span>]\n    // a[0].name=<span class=\"token string\">'改变原数组'</span><span class=\"token punctuation\">;</span>\n    // console.<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token selector\">// [</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"改变原数组\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token selector\">] [</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"改变原数组\"</span><span class=\"token punctuation\">&#125;</span>]\n    // b[0].name=<span class=\"token string\">'改变拷贝数组'</span><span class=\"token punctuation\">,</span>b[0].koro=<span class=\"token string\">'改变拷贝数组'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token selector\">//  [</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"改变拷贝数组\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"koro\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"改变拷贝数组\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token selector\">] [</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"改变拷贝数组\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"koro\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"改变拷贝数组\"</span><span class=\"token punctuation\">&#125;</span>]\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>原因在定义上面说过了的：slice()是浅拷贝，对于复杂的数据类型浅拷贝，拷贝的只是指向原数组的指针，所以无论改变原数组，还是浅拷贝的数组，都是改变原数组的数据。</p>\n<h4 id=\"join-数组转字符串\"><a href=\"#join-数组转字符串\" class=\"headerlink\" title=\"join()  数组转字符串\"></a>join()  数组转字符串</h4><p>定义:  join() 方法用于把数组中的所有元素通过指定的分隔符进行分隔放入一个字符串，返回生成的字符串。</p>\n<p>语法:</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">    array<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>参数:</p>\n<p>str(可选): 指定要使用的分隔符，默认使用逗号作为分隔符。</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">    <span class=\"token key attr-name\">let a</span><span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">['hello','world'];</span>\n    <span class=\"token key attr-name\">let str</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">a.join(); // 'hello,world'</span>\n    <span class=\"token key attr-name\">let str2</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">a.join('+'); // 'hello+world'</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用join方法或者下文说到的toString方法时，当数组中的元素也是数组或者是对象时会出现什么情况？</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">    <span class=\"token key attr-name\">let a</span><span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">[['OBKoro1','23'],'test'];</span>\n    <span class=\"token key attr-name\">let str1</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">a.join(); // OBKoro1,23,test</span>\n    <span class=\"token key attr-name\">let b</span><span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">[&#123;name:'OBKoro1',age:'23'&#125;,'test'];</span>\n    <span class=\"token key attr-name\">let str2</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">b.join(); // [object Object],test</span>\n    // 对象转字符串推荐JSON.stringify(obj);\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以，<code>join()/toString()</code>方法在数组元素是数组的时候，会将里面的数组也调用<code>join()/toString()</code>,如果是对象的话，对象会被转为<code>[object Object]</code>字符串。</p>\n<h4 id=\"toLocaleString-数组转字符串\"><a href=\"#toLocaleString-数组转字符串\" class=\"headerlink\" title=\"toLocaleString() 数组转字符串\"></a>toLocaleString() 数组转字符串</h4><p>定义: 返回一个表示数组元素的字符串。该字符串由数组中的每个元素的 toLocaleString() 返回值经调用 join() 方法连接（由逗号隔开）组成。</p>\n<p>语法:</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">    array<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>参数：无。</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">    <span class=\"token key attr-name\">let a</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">[&#123;name:'OBKoro1'&#125;,23,'abcd',new Date()];</span>\n    <span class=\"token key attr-name\">let str</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">a.toLocaleString(); // [object Object],23,abcd,2018/5/28 下午1:52:20</span> \n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如上述栗子：调用数组的<code>toLocaleString</code>方法，数组中的每个元素都会调用自身的<code>toLocaleString</code>方法，对象调用对象的<code>toLocaleString</code>,Date调用Date的<code>toLocaleString</code>。</p>\n<h4 id=\"toString-数组转字符串-不推荐\"><a href=\"#toString-数组转字符串-不推荐\" class=\"headerlink\" title=\"toString() 数组转字符串 不推荐\"></a>toString() 数组转字符串 不推荐</h4><p>定义: toString() 方法可把数组转换为由逗号链接起来的字符串。</p>\n<p>语法:</p>\n<pre class=\"line-numbers language-vbscript\" data-language=\"vbscript\"><code class=\"language-vbscript\">    array.toString()\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>参数: 无。</p>\n<p>该方法的效果和join方法一样，都是用于数组转字符串的，但是与join方法相比没有优势，也不能自定义字符串的分隔符，因此不推荐使用。</p>\n<p><strong>值得注意的是</strong>：当数组和字符串操作的时候，js 会调用这个方法将数组自动转换成字符串</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">   <span class=\"token key attr-name\">let b</span><span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">[ 'toString','演示'].toString(); // toString,演示</span>\n   <span class=\"token key attr-name\">let a</span><span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">['调用toString','连接在我后面']+'啦啦啦'; // 调用toString,连接在我后面啦啦啦</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"cancat\"><a href=\"#cancat\" class=\"headerlink\" title=\"cancat\"></a>cancat</h4><p>定义： 方法用于合并两个或多个数组，返回一个新数组。</p>\n<p>语法：</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">    <span class=\"token key attr-name\">var newArr</span> <span class=\"token punctuation\">=</span><span class=\"token value attr-value\">oldArray.concat(arrayX,arrayX,......,arrayX)</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>参数：</p>\n<p>arrayX（必须）：该参数可以是具体的值，也可以是数组对象。可以是任意多个。</p>\n<p>eg1:</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">    <span class=\"token key attr-name\">let a</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">[1, 2, 3];</span>\n    <span class=\"token key attr-name\">let b</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">[4, 5, 6];</span>\n    //连接两个数组\n    <span class=\"token key attr-name\">let newVal</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">a.concat(b); // [1,2,3,4,5,6]</span>\n    // 连接三个数组\n    <span class=\"token key attr-name\">let c</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">[7, 8, 9]</span>\n    <span class=\"token key attr-name\">let newVal2</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">a.concat(b, c); // [1,2,3,4,5,6,7,8,9]</span>\n    // 添加元素\n    <span class=\"token key attr-name\">let newVal3</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">a.concat('添加元素',b, c,'再加一个');</span> \n    // [1,2,3,\"添加元素\",4,5,6,7,8,9,\"再加一个\"]\n   // 合并嵌套数组  会浅拷贝嵌套数组\n   <span class=\"token key attr-name\">let d</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">[1,2 ];</span>\n   <span class=\"token key attr-name\">let f</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">[3,[4]];</span>\n   <span class=\"token key attr-name\">let newVal4</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">d.concat(f); // [1,2,3,[4]]</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>ES6扩展运算符<code>...</code>合并数组</strong>：</p>\n<p>因为ES6的语法更简洁易懂，所以现在合并数组我大部分采用<code>...</code>来处理，<code>...</code>运算符可以实现<code>cancat</code>的每个栗子，且更简洁和具有高度自定义数组元素位置的效果。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">    let a = [2<span class=\"token punctuation\">,</span> 3<span class=\"token punctuation\">,</span> 4<span class=\"token punctuation\">,</span> 5]\n    let b = [ 4<span class=\"token punctuation\">,</span>...a<span class=\"token punctuation\">,</span> 4<span class=\"token punctuation\">,</span> 4]\n    console.<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //  [2<span class=\"token punctuation\">,</span> 3<span class=\"token punctuation\">,</span> 4<span class=\"token punctuation\">,</span> 5] [4<span class=\"token punctuation\">,</span>2<span class=\"token punctuation\">,</span>3<span class=\"token punctuation\">,</span>4<span class=\"token punctuation\">,</span>5<span class=\"token punctuation\">,</span>4<span class=\"token punctuation\">,</span>4]\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>更多关于扩展符的详细内容移步阮一峰大神的<a href=\"https://link.juejin.cn/?target=http://es6.ruanyifeng.com/%23docs/array%23%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6\">ECMAScript 6 入门</a></p>\n<h4 id=\"indexOf-查找数组是否存在某个元素，返回下标\"><a href=\"#indexOf-查找数组是否存在某个元素，返回下标\" class=\"headerlink\" title=\"indexOf() 查找数组是否存在某个元素，返回下标\"></a>indexOf() 查找数组是否存在某个元素，返回下标</h4><p>定义: 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</p>\n<p>语法:</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">    array<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>searchElement<span class=\"token punctuation\">,</span>fromIndex<span class=\"token punctuation\">)</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>参数:</p>\n<p>searchElement(必须):被查找的元素</p>\n<p>fromIndex(可选):开始查找的位置(不能大于等于数组的长度，返回-1)，接受负值，默认值为0。</p>\n<p>严格相等的搜索:</p>\n<p>数组的indexOf搜索跟字符串的indexOf不一样,数组的indexOf使用严格相等<code>===</code>搜索元素，即<strong>数组元素要完全匹配</strong>才能搜索成功。</p>\n<p><strong>注意</strong>：indexOf()不能识别<code>NaN</code></p>\n<p>eg:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'啦啦'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">]</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'啦'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// -1 </span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NaN'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// -1 </span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'啦啦'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用场景：</p>\n<ol>\n<li><a href=\"https://juejin.cn/post/6844903577421365255#heading-10\">数组去重</a></li>\n<li>根据获取的数组下标执行操作，改变数组中的值等。</li>\n<li>判断是否存在，执行操作。</li>\n</ol>\n<h4 id=\"lastIndexOf-查找指定元素在数组中的最后一个位置\"><a href=\"#lastIndexOf-查找指定元素在数组中的最后一个位置\" class=\"headerlink\" title=\"lastIndexOf() 查找指定元素在数组中的最后一个位置\"></a>lastIndexOf() 查找指定元素在数组中的最后一个位置</h4><p>定义:  方法返回指定元素,在数组中的最后一个的索引，如果不存在则返回 -1。（从数组后面往前查找）</p>\n<p>语法:</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">    arr.lastIndexOf(searchElement,fromIndex)\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>参数:</p>\n<p>searchElement(必须): 被查找的元素</p>\n<p>fromIndex(可选): 逆向查找开始位置，默认值数组的长度-1，即查找整个数组。</p>\n<p>关于fromIndex有三个规则:</p>\n<ol>\n<li><p>正值。如果该值大于或等于数组的长度，则整个数组会被查找。</p>\n</li>\n<li><p>负值。将其视为从数组末尾向前的偏移。(比如-2，从数组最后第二个元素开始往前查找)</p>\n</li>\n<li><p>负值。其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\"> <span class=\"token key attr-name\">let a</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">['OB',4,'Koro1',1,2,'Koro1',3,4,5,'Koro1']; // 数组长度为10</span>\n <span class=\"token key attr-name\">// let b</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">a.lastIndexOf('Koro1',4); // 从下标4开始往前找 返回下标2</span>\n <span class=\"token key attr-name\">// let b</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">a.lastIndexOf('Koro1',100); //  大于或数组的长度 查找整个数组 返回9</span>\n <span class=\"token key attr-name\">// let b</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">a.lastIndexOf('Koro1',-11); // -1 数组不会被查找</span>\n <span class=\"token key attr-name\">let b</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">a.lastIndexOf('Koro1',-9); // 从第二个元素4往前查找，没有找到 返回-1</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h4 id=\"ES7-includes-查找数组是否包含某个元素-返回布尔\"><a href=\"#ES7-includes-查找数组是否包含某个元素-返回布尔\" class=\"headerlink\" title=\"ES7 includes() 查找数组是否包含某个元素 返回布尔\"></a>ES7 includes() 查找数组是否包含某个元素 返回布尔</h4><p>定义： 返回一个布尔值，表示某个数组是否包含给定的值</p>\n<p>语法：</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">    <span class=\"token key attr-name\">array.includes(searchElement,fromIndex</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">0)</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>参数：</p>\n<p>searchElement(必须):被查找的元素</p>\n<p>fromIndex(可选):默认值为0，参数表示搜索的起始位置，接受负值。正值超过数组长度，数组不会被搜索，返回false。负值绝对值超过长数组度，重置从0开始搜索。</p>\n<p><strong>includes方法是为了弥补indexOf方法的缺陷而出现的:</strong></p>\n<ol>\n<li>indexOf方法不能识别<code>NaN</code></li>\n<li>indexOf方法检查是否包含某个值不够语义化，需要判断是否不等于<code>-1</code>，表达不够直观</li>\n</ol>\n<p>eg:</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">    <span class=\"token key attr-name\">let a</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">['OB','Koro1',1,NaN];</span>\n    <span class=\"token key attr-name\">// let b</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">a.includes(NaN); // true 识别NaN</span>\n    <span class=\"token key attr-name\">// let b</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">a.includes('Koro1',100); // false 超过数组长度 不搜索</span>\n    <span class=\"token key attr-name\">// let b</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">a.includes('Koro1',-3);  // true 从倒数第三个元素开始搜索</span> \n    <span class=\"token key attr-name\">// let b</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">a.includes('Koro1',-100);  // true 负值绝对值超过数组长度，搜索整个数组</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>兼容性(MDN): chrome47, Firefox 43,Edge 14,Opera 34, Safari 9,IE 未实现。</p>\n<hr>\n<h3 id=\"遍历方法-12个\"><a href=\"#遍历方法-12个\" class=\"headerlink\" title=\"遍历方法(12个):\"></a>遍历方法(12个):</h3><p>js中遍历数组并不会改变原始数组的方法总共有12个:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">    ES5：\n    forEach、every 、<span class=\"token keyword\">some</span>、 filter、map、reduce、reduceRight、\n    ES6：\n    find、findIndex、<span class=\"token keyword\">keys</span>、<span class=\"token keyword\">values</span>、entries\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"关于遍历：\"><a href=\"#关于遍历：\" class=\"headerlink\" title=\"关于遍历：\"></a>关于遍历：</h4><ul>\n<li>关于遍历的效率，可以看一下这篇<a href=\"https://link.juejin.cn/?target=http://louiszhai.github.io/2015/12/18/traverse/%23%E6%B5%8B%E8%AF%95%E5%90%84%E6%96%B9%E6%B3%95%E6%95%88%E7%8E%87\">详解JS遍历</a></li>\n<li>尽量不要在遍历的时候，修改后面要遍历的值</li>\n<li>尽量不要在遍历的时候修改数组的长度（删除&#x2F;添加）</li>\n</ul>\n<h4 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h4><p>定义: 按升序为数组中含有效值的每一项执行一次回调函数。</p>\n<p>语法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">    array<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentValue<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> thisValue<span class=\"token punctuation\">)</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>参数:</p>\n<p>function(必须): 数组中每个元素需要调用的函数。</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">    <span class=\"token comment\">// 回调函数的参数</span>\n    1. <span class=\"token function\">currentValue</span><span class=\"token punctuation\">(</span>必须<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>数组当前元素的值\n    2. <span class=\"token function\">index</span><span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 当前元素的索引值\n    3. <span class=\"token function\">arr</span><span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>数组对象本身\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p>\n<p><strong>关于forEach()你要知道</strong>：</p>\n<ul>\n<li>无法中途退出循环，只能用<code>return</code>退出本次回调，进行下一次回调。</li>\n<li>它总是返回 undefined值,即使你return了一个值。</li>\n</ul>\n<h4 id=\"下面类似语法同样适用这些规则\"><a href=\"#下面类似语法同样适用这些规则\" class=\"headerlink\" title=\"下面类似语法同样适用这些规则\"></a>下面类似语法同样适用这些规则</h4><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">    <span class=\"token list punctuation\">1.</span> 对于空数组是不会执行回调函数的\n    <span class=\"token list punctuation\">2.</span> 对于已在迭代过程中删除的元素，或者空元素会跳过回调函数\n    <span class=\"token list punctuation\">3.</span> 遍历次数再第一次循环前就会确定，再添加到数组中的元素不会被遍历。\n    <span class=\"token list punctuation\">4.</span> 如果已经存在的值被改变，则传递给 callback 的值是遍历到他们那一刻的值。\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>eg:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最后第二个元素是空的，不会遍历(undefined、null会遍历)</span>\n    <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'OBKoro1'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n      a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'改变元素'</span><span class=\"token punctuation\">;</span>\n      a<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'添加到尾端，不会被遍历'</span><span class=\"token punctuation\">)</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token string\">'forEach传递的第一个参数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 分别打印 1 ,2 ,改变元素</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OBKoro1 打印三次 this绑定在obj对象上</span>\n      <span class=\"token comment\">// break; // break会报错</span>\n      <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// return只能结束本次回调 会执行下次回调</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不会执行，因为return 会执行下一次循环回调'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 即使return了一个值,也还是返回undefined</span>\n    <span class=\"token comment\">// 回调函数也接受接头函数写法</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"every-检测数组所有元素是否都符合判断条件\"><a href=\"#every-检测数组所有元素是否都符合判断条件\" class=\"headerlink\" title=\"every 检测数组所有元素是否都符合判断条件\"></a>every 检测数组所有元素是否都符合判断条件</h4><p>定义: 方法用于检测数组所有元素是否都符合函数定义的条件</p>\n<p>语法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">    array<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentValue<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> thisValue<span class=\"token punctuation\">)</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>参数:(这几个方法的参数，语法都类似)</p>\n<p>function(必须): 数组中每个元素需要调用的函数。</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">    <span class=\"token comment\">// 回调函数的参数</span>\n    1. <span class=\"token function\">currentValue</span><span class=\"token punctuation\">(</span>必须<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>数组当前元素的值\n    2. <span class=\"token function\">index</span><span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 当前元素的索引值\n    3. <span class=\"token function\">arr</span><span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>数组对象本身\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p>\n<p>方法返回值规则:</p>\n<ol>\n<li>如果数组中检测到<strong>有一个元素不满足，则整个表达式返回 false</strong>，且剩余的元素不会再进行检测。</li>\n<li>如果所有元素<strong>都满足条件，则返回 true</strong>。&#x3D;</li>\n</ol>\n<p>eg:</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">    function <span class=\"token function\">isBigEnough</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n      return element <span class=\"token operator\">>=</span> 10<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 判断数组中的所有元素是否都大于10</span>\n    <span class=\"token punctuation\">&#125;</span>\n    let result = [12<span class=\"token punctuation\">,</span> 5<span class=\"token punctuation\">,</span> 8<span class=\"token punctuation\">,</span> 130<span class=\"token punctuation\">,</span> 44].<span class=\"token function\">every</span><span class=\"token punctuation\">(</span>isBigEnough<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// false</span>\n    let result = [12<span class=\"token punctuation\">,</span> 54<span class=\"token punctuation\">,</span> 18<span class=\"token punctuation\">,</span> 130<span class=\"token punctuation\">,</span> 44].<span class=\"token function\">every</span><span class=\"token punctuation\">(</span>isBigEnough<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n    <span class=\"token comment\">// 接受箭头函数写法 </span>\n    [12<span class=\"token punctuation\">,</span> 5<span class=\"token punctuation\">,</span> 8<span class=\"token punctuation\">,</span> 130<span class=\"token punctuation\">,</span> 44].<span class=\"token function\">every</span><span class=\"token punctuation\">(</span>x => x <span class=\"token operator\">>=</span> 10<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n    [12<span class=\"token punctuation\">,</span> 54<span class=\"token punctuation\">,</span> 18<span class=\"token punctuation\">,</span> 130<span class=\"token punctuation\">,</span> 44].<span class=\"token function\">every</span><span class=\"token punctuation\">(</span>x => x <span class=\"token operator\">>=</span> 10<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"some-数组中的是否有满足判断条件的元素\"><a href=\"#some-数组中的是否有满足判断条件的元素\" class=\"headerlink\" title=\"some 数组中的是否有满足判断条件的元素\"></a>some 数组中的是否有满足判断条件的元素</h4><p>定义：数组中的是否有满足判断条件的元素</p>\n<p>语法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">    array<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentValue<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> thisValue<span class=\"token punctuation\">)</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>参数:(这几个方法的参数，语法都类似)</p>\n<p>function(必须): 数组中每个元素需要调用的函数。</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">    <span class=\"token comment\">// 回调函数的参数</span>\n    1. <span class=\"token function\">currentValue</span><span class=\"token punctuation\">(</span>必须<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>数组当前元素的值\n    2. <span class=\"token function\">index</span><span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 当前元素的索引值\n    3. <span class=\"token function\">arr</span><span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>数组对象本身\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p>\n<p>方法返回值规则：</p>\n<ol>\n<li><p>如果<strong>有一个元素满足条件，则表达式返回true</strong>, 剩余的元素不会再执行检测。</p>\n</li>\n<li><p>如果<strong>没有满足条件的元素，则返回false</strong>。</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\"> function <span class=\"token function\">isBigEnough</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   return <span class=\"token punctuation\">(</span>element <span class=\"token operator\">>=</span> 10<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//数组中是否有一个元素大于 10</span>\n <span class=\"token punctuation\">&#125;</span>\n let result = [2<span class=\"token punctuation\">,</span> 5<span class=\"token punctuation\">,</span> 8<span class=\"token punctuation\">,</span> 1<span class=\"token punctuation\">,</span> 4].<span class=\"token function\">some</span><span class=\"token punctuation\">(</span>isBigEnough<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n let result = [12<span class=\"token punctuation\">,</span> 5<span class=\"token punctuation\">,</span> 8<span class=\"token punctuation\">,</span> 1<span class=\"token punctuation\">,</span> 4].<span class=\"token function\">some</span><span class=\"token punctuation\">(</span>isBigEnough<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h4 id=\"filter-过滤原始数组，返回新数组\"><a href=\"#filter-过滤原始数组，返回新数组\" class=\"headerlink\" title=\"filter 过滤原始数组，返回新数组\"></a>filter 过滤原始数组，返回新数组</h4><p>定义: 返回一个新数组, 其包含通过所提供函数实现的测试的所有元素。</p>\n<p>语法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">let</span> new_array <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentValue<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">)</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>参数:(这几个方法的参数，语法都类似)</p>\n<p>function(必须): 数组中每个元素需要调用的函数。</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">    <span class=\"token comment\">// 回调函数的参数</span>\n    1. <span class=\"token function\">currentValue</span><span class=\"token punctuation\">(</span>必须<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>数组当前元素的值\n    2. <span class=\"token function\">index</span><span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 当前元素的索引值\n    3. <span class=\"token function\">arr</span><span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>数组对象本身\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p>\n<p>eg:</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">     <span class=\"token key attr-name\">let a</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">[32, 33, 16, 40];</span>\n    <span class=\"token key attr-name\">let result</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">a.filter(function (value, index, array) &#123;</span>\n      <span class=\"token key attr-name\">return value ></span><span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">18; // 返回a数组中所有大于18的元素</span>\n    &#125;);\n    console.log(result,a);// [32,33,40] [32,33,16,40]\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"map-对数组中的每个元素进行处理，返回新的数组\"><a href=\"#map-对数组中的每个元素进行处理，返回新的数组\" class=\"headerlink\" title=\"map 对数组中的每个元素进行处理，返回新的数组\"></a>map 对数组中的每个元素进行处理，返回新的数组</h4><p>定义：创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p>\n<p>语法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">let</span> new_array <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentValue<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">)</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>参数:(这几个方法的参数，语法都类似)</p>\n<p>function(必须): 数组中每个元素需要调用的函数。</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">    <span class=\"token comment\">// 回调函数的参数</span>\n    1. <span class=\"token function\">currentValue</span><span class=\"token punctuation\">(</span>必须<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>数组当前元素的值\n    2. <span class=\"token function\">index</span><span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 当前元素的索引值\n    3. <span class=\"token function\">arr</span><span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>数组对象本身\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p>\n<p>eg:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">let a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nlet result <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">index</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span> &#123;\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">value</span> <span class=\"token operator\">+</span> <span class=\"token string\">'新数组的新元素'</span>\n&#125;<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// [\"1新数组的新元素\",\"2新数组的新元素\",\"3新数组的新元素\",\"4新数组的新元素\"] [\"1\",\"2\",\"3\",\"4\"]</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"reduce-为数组提供累加器，合并为一个值\"><a href=\"#reduce-为数组提供累加器，合并为一个值\" class=\"headerlink\" title=\"reduce 为数组提供累加器，合并为一个值\"></a>reduce 为数组提供累加器，合并为一个值</h4><p>定义：reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，最终合并为一个值。</p>\n<p>语法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">    array<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">total<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">,</span> currentIndex<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> initialValue<span class=\"token punctuation\">)</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>参数：</p>\n<p>function(必须): 数组中每个元素需要调用的函数。</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">    <span class=\"token comment\">// 回调函数的参数</span>\n    1. <span class=\"token function\">total</span><span class=\"token punctuation\">(</span>必须<span class=\"token punctuation\">)</span>，初始值<span class=\"token punctuation\">,</span> 或者上一次调用回调返回的值\n    2. <span class=\"token function\">currentValue</span><span class=\"token punctuation\">(</span>必须<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>数组当前元素的值\n    3. <span class=\"token function\">index</span><span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 当前元素的索引值\n    4. <span class=\"token function\">arr</span><span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>数组对象本身\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>initialValue(可选): 指定第一次回调 的第一个参数。</p>\n<p>回调第一次执行时:</p>\n<ul>\n<li>如果 initialValue 在调用 reduce 时被提供，那么第一个 total 将等于 initialValue，此时 currentValue 等于数组中的第一个值；</li>\n<li>如果 initialValue 未被提供，那么 total 等于数组中的第一个值，currentValue 等于数组中的第二个值。此时如果数组为空，那么将抛出 TypeError。</li>\n<li>如果数组仅有一个元素，并且没有提供 initialValue，或提供了 initialValue 但数组为空，那么回调不会被执行，数组的唯一值将被返回。</li>\n</ul>\n<p>eg:</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">    <span class=\"token selector\">// 数组求和 \n    let sum = [0, 1, 2, 3].reduce(function (a, b)</span> <span class=\"token punctuation\">&#123;</span>\n      return a + b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    // 6\n    // 将二维数组转化为一维 将数组元素展开\n    let flattened = [[0<span class=\"token punctuation\">,</span> 1]<span class=\"token punctuation\">,</span> [2<span class=\"token punctuation\">,</span> 3]<span class=\"token punctuation\">,</span> [4<span class=\"token punctuation\">,</span> 5]].<span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> => a.<span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      []\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     // [0<span class=\"token punctuation\">,</span> 1<span class=\"token punctuation\">,</span> 2<span class=\"token punctuation\">,</span> 3<span class=\"token punctuation\">,</span> 4<span class=\"token punctuation\">,</span> 5]\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"reduceRight-从右至左累加\"><a href=\"#reduceRight-从右至左累加\" class=\"headerlink\" title=\"reduceRight  从右至左累加\"></a>reduceRight  从右至左累加</h4><p>这个方法除了与reduce执行方向相反外，其他完全与其一致，请参考上述 reduce 方法介绍。</p>\n<h4 id=\"ES6：find-amp-findIndex-根据条件找到数组成员\"><a href=\"#ES6：find-amp-findIndex-根据条件找到数组成员\" class=\"headerlink\" title=\"ES6：find()&amp; findIndex() 根据条件找到数组成员\"></a>ES6：find()&amp; findIndex() 根据条件找到数组成员</h4><p>find()定义：用于找出第一个符合条件的数组成员，并返回该成员，如果没有符合条件的成员，则返回undefined。</p>\n<p>findIndex()定义：返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。</p>\n<p>这两个方法</p>\n<p>语法：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">let</span> new_array <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentValue<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">let</span> new_array <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">currentValue<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">)</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>参数:(这几个方法的参数，语法都类似)</p>\n<p>function(必须): 数组中每个元素需要调用的函数。</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\">    <span class=\"token comment\">// 回调函数的参数</span>\n    1. <span class=\"token function\">currentValue</span><span class=\"token punctuation\">(</span>必须<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>数组当前元素的值\n    2. <span class=\"token function\">index</span><span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> 当前元素的索引值\n    3. <span class=\"token function\">arr</span><span class=\"token punctuation\">(</span>可选<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>数组对象本身\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>thisValue(可选):  当执行回调函数时this绑定对象的值，默认值为<code>undefined</code></p>\n<p>这两个方法都可以识别<code>NaN</code>,弥补了<code>indexOf</code>的不足.</p>\n<p>eg:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">        <span class=\"token comment\">// find</span>\n        <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回元素-5</span>\n        <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回元素NaN</span>\n        <span class=\"token comment\">// findIndex</span>\n        <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回索引2</span>\n        <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回索引4</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>浏览器兼容(MDN):Chrome 45,Firefox 25,Opera 32, Safari 8, Edge yes,</p>\n<h4 id=\"ES6-keys-amp-values-amp-entries-遍历键名、遍历键值、遍历键名-键值\"><a href=\"#ES6-keys-amp-values-amp-entries-遍历键名、遍历键值、遍历键名-键值\" class=\"headerlink\" title=\"ES6 keys()&amp;values()&amp;entries() 遍历键名、遍历键值、遍历键名+键值\"></a>ES6 keys()&amp;values()&amp;entries() 遍历键名、遍历键值、遍历键名+键值</h4><p>定义：三个方法都返回一个新的 Array Iterator 对象，对象根据方法不同包含不同的值。</p>\n<p>语法：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">    array<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    array<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    array<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>参数：无。</p>\n<p>遍历栗子(摘自<a href=\"https://link.juejin.cn/?target=http://es6.ruanyifeng.com/%23docs/array%23%E6%95%B0%E7%BB%84%E5%AE%9E%E4%BE%8B%E7%9A%84-entries%EF%BC%8Ckeys-%E5%92%8C-values\">ECMAScript 6 入门</a>)：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token keyword\">of</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 0</span>\n    <span class=\"token comment\">// 1</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> elem <span class=\"token keyword\">of</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 'a'</span>\n    <span class=\"token comment\">// 'b'</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 0 \"a\"</span>\n    <span class=\"token comment\">// 1 \"b\"</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在<code>for..of</code>中如果遍历中途要退出，可以使用<code>break</code>退出循环。</p>\n<p>如果不使用<code>for...of</code>循环，可以手动调用遍历器对象的next方法，进行遍历:</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">    <span class=\"token key attr-name\">let letter</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">['a', 'b', 'c'];</span>\n    <span class=\"token key attr-name\">let entries</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">letter.entries();</span>\n    console.log(entries.next().value); // [0, 'a']\n    console.log(entries.next().value); // [1, 'b']\n    console.log(entries.next().value); // [2, 'c']\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>entries()浏览器兼容性(MDN):Chrome 38, Firefox 28,Opera 25,Safari 7.1</p>\n<p>keys()浏览器兼容性(MDN):Chrome 38, Firefox 28,Opera 25,Safari 8,</p>\n<p><strong>注意</strong>:目前只有Safari 9支持,，其他浏览器未实现，babel转码器也还未实现</p>\n<p>转载自 <a href=\"https://juejin.cn/post/6844903614918459406\">https://juejin.cn/post/6844903614918459406</a></p>\n","text":"创建一个数组: // 字面量方式: // 这个方法也是我们最常用的，在初始化数组的时候 相当方便 var a = [3, 11, 8]; // [3,11,8]; // 构造器: // 实际上 new Array === Array,加不加new 一点影响都没有。 var a =...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"转载","slug":"转载","count":1,"path":"api/categories/转载.json"},{"name":"学习笔记","slug":"转载/学习笔记","count":1,"path":"api/categories/转载/学习笔记.json"}],"tags":[{"name":"javascript","slug":"javascript","count":7,"path":"api/tags/javascript.json"},{"name":"数组","slug":"数组","count":1,"path":"api/tags/数组.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">创建一个数组:</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ES6-Array-of-%E8%BF%94%E5%9B%9E%E7%94%B1%E6%89%80%E6%9C%89%E5%8F%82%E6%95%B0%E5%80%BC%E7%BB%84%E6%88%90%E7%9A%84%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">ES6 Array.of()  返回由所有参数值组成的数组</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ES6-Arrary-from-%E5%B0%86%E4%B8%A4%E7%B1%BB%E5%AF%B9%E8%B1%A1%E8%BD%AC%E4%B8%BA%E7%9C%9F%E6%AD%A3%E7%9A%84%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">ES6 Arrary.from() 将两类对象转为真正的数组</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">方法:</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%94%B9%E5%8F%98%E5%8E%9F%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95-9%E4%B8%AA\"><span class=\"toc-text\">改变原数组的方法(9个):</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#splice-%E6%B7%BB%E5%8A%A0-x2F-%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">splice() 添加&#x2F;删除数组元素</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#sort-%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">sort() 数组排序</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#pop-%E5%88%A0%E9%99%A4%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%90%8E%E7%9A%84%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">pop() 删除一个数组中的最后的一个元素</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#shift-%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">shift() 删除数组的第一个元素</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#push-%E5%90%91%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%AB%E5%B0%BE%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">push() 向数组的末尾添加元素</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#unshift\"><span class=\"toc-text\">unshift()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#reverse-%E9%A2%A0%E5%80%92%E6%95%B0%E7%BB%84%E4%B8%AD%E5%85%83%E7%B4%A0%E7%9A%84%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">reverse() 颠倒数组中元素的顺序</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ES6-copyWithin-%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE%E7%9A%84%E6%88%90%E5%91%98%E5%A4%8D%E5%88%B6%E5%88%B0%E5%85%B6%E4%BB%96%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">ES6: copyWithin() 指定位置的成员复制到其他位置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ES6-fill-%E5%A1%AB%E5%85%85%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">ES6: fill() 填充数组</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E6%94%B9%E5%8F%98%E5%8E%9F%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95-8%E4%B8%AA\"><span class=\"toc-text\">不改变原数组的方法(8个):</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#slice-%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%95%B0%E7%BB%84%E7%9A%84%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">slice() 浅拷贝数组的元素</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#join-%E6%95%B0%E7%BB%84%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">join()  数组转字符串</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#toLocaleString-%E6%95%B0%E7%BB%84%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">toLocaleString() 数组转字符串</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#toString-%E6%95%B0%E7%BB%84%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2-%E4%B8%8D%E6%8E%A8%E8%8D%90\"><span class=\"toc-text\">toString() 数组转字符串 不推荐</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#cancat\"><span class=\"toc-text\">cancat</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#indexOf-%E6%9F%A5%E6%89%BE%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E6%9F%90%E4%B8%AA%E5%85%83%E7%B4%A0%EF%BC%8C%E8%BF%94%E5%9B%9E%E4%B8%8B%E6%A0%87\"><span class=\"toc-text\">indexOf() 查找数组是否存在某个元素，返回下标</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#lastIndexOf-%E6%9F%A5%E6%89%BE%E6%8C%87%E5%AE%9A%E5%85%83%E7%B4%A0%E5%9C%A8%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">lastIndexOf() 查找指定元素在数组中的最后一个位置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ES7-includes-%E6%9F%A5%E6%89%BE%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E6%9F%90%E4%B8%AA%E5%85%83%E7%B4%A0-%E8%BF%94%E5%9B%9E%E5%B8%83%E5%B0%94\"><span class=\"toc-text\">ES7 includes() 查找数组是否包含某个元素 返回布尔</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95-12%E4%B8%AA\"><span class=\"toc-text\">遍历方法(12个):</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E9%81%8D%E5%8E%86%EF%BC%9A\"><span class=\"toc-text\">关于遍历：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#forEach\"><span class=\"toc-text\">forEach</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E9%9D%A2%E7%B1%BB%E4%BC%BC%E8%AF%AD%E6%B3%95%E5%90%8C%E6%A0%B7%E9%80%82%E7%94%A8%E8%BF%99%E4%BA%9B%E8%A7%84%E5%88%99\"><span class=\"toc-text\">下面类似语法同样适用这些规则</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#every-%E6%A3%80%E6%B5%8B%E6%95%B0%E7%BB%84%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0%E6%98%AF%E5%90%A6%E9%83%BD%E7%AC%A6%E5%90%88%E5%88%A4%E6%96%AD%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">every 检测数组所有元素是否都符合判断条件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#some-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%98%AF%E5%90%A6%E6%9C%89%E6%BB%A1%E8%B6%B3%E5%88%A4%E6%96%AD%E6%9D%A1%E4%BB%B6%E7%9A%84%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">some 数组中的是否有满足判断条件的元素</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#filter-%E8%BF%87%E6%BB%A4%E5%8E%9F%E5%A7%8B%E6%95%B0%E7%BB%84%EF%BC%8C%E8%BF%94%E5%9B%9E%E6%96%B0%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">filter 过滤原始数组，返回新数组</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#map-%E5%AF%B9%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E8%BF%9B%E8%A1%8C%E5%A4%84%E7%90%86%EF%BC%8C%E8%BF%94%E5%9B%9E%E6%96%B0%E7%9A%84%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">map 对数组中的每个元素进行处理，返回新的数组</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#reduce-%E4%B8%BA%E6%95%B0%E7%BB%84%E6%8F%90%E4%BE%9B%E7%B4%AF%E5%8A%A0%E5%99%A8%EF%BC%8C%E5%90%88%E5%B9%B6%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%80%BC\"><span class=\"toc-text\">reduce 为数组提供累加器，合并为一个值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#reduceRight-%E4%BB%8E%E5%8F%B3%E8%87%B3%E5%B7%A6%E7%B4%AF%E5%8A%A0\"><span class=\"toc-text\">reduceRight  从右至左累加</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ES6%EF%BC%9Afind-amp-findIndex-%E6%A0%B9%E6%8D%AE%E6%9D%A1%E4%BB%B6%E6%89%BE%E5%88%B0%E6%95%B0%E7%BB%84%E6%88%90%E5%91%98\"><span class=\"toc-text\">ES6：find()&amp; findIndex() 根据条件找到数组成员</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ES6-keys-amp-values-amp-entries-%E9%81%8D%E5%8E%86%E9%94%AE%E5%90%8D%E3%80%81%E9%81%8D%E5%8E%86%E9%94%AE%E5%80%BC%E3%80%81%E9%81%8D%E5%8E%86%E9%94%AE%E5%90%8D-%E9%94%AE%E5%80%BC\"><span class=\"toc-text\">ES6 keys()&amp;values()&amp;entries() 遍历键名、遍历键值、遍历键名+键值</span></a></li></ol></li></ol>","author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"lerna+yarn workspace+monorepo项目的最佳实践","uid":"8194451e25c86b4d1b6b68c34d396a48","slug":"lerna-yarn-workspace-monorepo项目的最佳实践","date":"2023-01-26T11:01:00.000Z","updated":"2023-01-26T11:06:33.710Z","comments":true,"path":"api/articles/lerna-yarn-workspace-monorepo项目的最佳实践.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/img/202301261903204.png","text":"1.monorepo 管理对于维护过多个package(功能相近)的同学来说，都会遇到一个选择题，这些 package 是放在一个仓库里维护还是放在多个仓库里单独维护。Multirepo 是比较传统的做法，即每一个 package 都单独用一个仓库来进行管理。Monorepo 是...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"开发笔记","slug":"开发笔记","count":3,"path":"api/categories/开发笔记.json"},{"name":"转载","slug":"开发笔记/转载","count":1,"path":"api/categories/开发笔记/转载.json"}],"tags":[{"name":"lerna","slug":"lerna","count":1,"path":"api/tags/lerna.json"},{"name":"workspace","slug":"workspace","count":1,"path":"api/tags/workspace.json"},{"name":"monorepo","slug":"monorepo","count":1,"path":"api/tags/monorepo.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}},"next_post":{"title":"奇奇怪怪的兼容性Bug","uid":"311754d371a04ae5df8f53f2dae3f317","slug":"奇奇怪怪的兼容性Bug","date":"2022-12-05T16:28:00.000Z","updated":"2022-12-07T15:11:38.910Z","comments":true,"path":"api/articles/奇奇怪怪的兼容性Bug.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/img/202212060030103.png","text":"IOS 不支持this.$router.go项目中遇到需要刷新当前界面，就使用了this.$router.go(0)，结果ios端不生效,this.router.go(0) 和 window.location.reload() 都是刷新当前页面的方法,Vue 写H5页面时，用 t...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"开发笔记","slug":"开发笔记","count":3,"path":"api/categories/开发笔记.json"}],"tags":[{"name":"兼容性","slug":"兼容性","count":1,"path":"api/tags/兼容性.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}}}