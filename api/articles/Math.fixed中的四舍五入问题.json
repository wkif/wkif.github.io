{"title":"Math.toFixed中的四舍五入问题","uid":"6514695d9ddb3c6dddb5452c70383bdb","slug":"Math.fixed中的四舍五入问题","date":"2023-08-28T03:09:00.000Z","updated":"2023-08-28T01:45:36.982Z","comments":true,"path":"api/articles/Math.fixed中的四舍五入问题.json","keywords":null,"cover":"https://kiftravel.oss-cn-beijing.aliyuncs.com/img/202308280943672.jpg","content":"<h1 id=\"Math-toFixed中的四舍五入问题\"><a href=\"#Math-toFixed中的四舍五入问题\" class=\"headerlink\" title=\"Math.toFixed中的四舍五入问题\"></a>Math.toFixed中的四舍五入问题</h1><h2 id=\"MDN\"><a href=\"#MDN\" class=\"headerlink\" title=\"MDN\"></a>MDN</h2><h3 id=\"Number-prototype-toFixed\"><a href=\"#Number-prototype-toFixed\" class=\"headerlink\" title=\"Number.prototype.toFixed()\"></a>Number.prototype.toFixed()</h3><p><strong><code>toFixed()</code></strong> 方法使用定点表示法来格式化一个数值。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed#%E8%AF%AD%E6%B3%95\">语法</a></h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">numObj.toFixed(digits)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed#%E5%8F%82%E6%95%B0\">参数</a></h4><ul>\n<li><p>digits</p>\n<p>小数点后数字的个数；介于 0 到 20（包括）之间，实现环境可能支持更大范围。如果忽略该参数，则默认为 0。</p>\n</li>\n</ul>\n<h4 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed#%E8%BF%94%E5%9B%9E%E5%80%BC\">返回值</a></h4><p>使用定点表示法表示给定数字的字符串。</p>\n<h4 id=\"抛出异常\"><a href=\"#抛出异常\" class=\"headerlink\" title=\"抛出异常\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed#%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8\">抛出异常</a></h4><ul>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a></p>\n<p>如果 <em>digits</em> 参数太小或太大。0 到 20（包括）之间的值不会引起 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a>。实现环境（implementations）也可以支持更大或更小的值。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a></p>\n<p>如果该方法在一个非<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>类型的对象上调用。</p>\n</li>\n</ul>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed#%E6%8F%8F%E8%BF%B0\">描述</a></h3><p>一个数值的字符串表现形式，不使用指数记数法，而是在小数点后有 digits（注：digits 具体值取决于传入参数）位数字。该数值在必要时进行四舍五入，另外在必要时会用 0 来填充小数部分，以便小数部分有指定的位数。如果数值大于 1e+21，该方法会简单调用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\"><code>Number.prototype.toString()</code></a>并返回一个指数记数法格式的字符串。</p>\n<p><strong>警告：</strong> 浮点数不能精确地用二进制表示所有小数。这可能会导致意外的结果，例如 <code>0.1 + 0.2 === 0.3</code> 返回 <code>false</code> .</p>\n<h2 id=\"问题表现\"><a href=\"#问题表现\" class=\"headerlink\" title=\"问题表现\"></a>问题表现</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token number\">2.005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// '2.00'</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1.45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// '1.4'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"问题纠因\"><a href=\"#问题纠因\" class=\"headerlink\" title=\"问题纠因\"></a>问题纠因</h2><p>重点：<strong>该数值在必要时进行四舍五入，另外在必要时会用 0 来填充小数部分，以便小数部分有指定的位数。</strong></p>\n<p>那么，什么时候是 必要，什么时候是不必要呢？</p>\n<p>查阅 <a href=\"https://link.juejin.cn/?target=https://www.w3.org/html/ig/zh/wiki/ES5/%E6%A0%87%E5%87%86_ECMAScript_%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%23Number.prototype.toFixed_.28fractionDigits.29\">W3C文档</a>，但是却没有看到对于 <code>round/四舍五入</code> 规则的说明；</p>\n<p>查阅<a href=\"https://link.juejin.cn/?target=https://www.cnblogs.com/ranyonsue/p/11388281.html\">社区文章</a>发现，这个 四舍五入问题和 <a href=\"https://link.juejin.cn/?target=https://zh.wikipedia.org/wiki/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95\">银行家算法</a> 有关；</p>\n<p>猜测，这个 四舍五入错误 应该和这几个个因素有关系：</p>\n<ul>\n<li>IEEE-754 标准</li>\n<li>浮点数的精度</li>\n<li>银行家算法</li>\n</ul>\n<h3 id=\"IEEE-754-标准和浮点数的精度\"><a href=\"#IEEE-754-标准和浮点数的精度\" class=\"headerlink\" title=\"IEEE-754 标准和浮点数的精度\"></a>IEEE-754 标准和浮点数的精度</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://link.juejin.cn/?target=https://zh.wikipedia.org/wiki/IEEE_754\">IEEE 754-维基百科</a></p>\n<p><a href=\"https://link.juejin.cn/?target=https://en.wikipedia.org/wiki/Floating-point_arithmetic%23IEEE_754:_floating_point_in_modern_computers\">浮点运算</a></p></blockquote>\n<p>IEEE二进制浮点数算术标准（IEEE 754）是20世纪80年代以来最广泛使用的浮点数运算标准，为许多CPU与浮点运算器所采用。</p>\n<p>以及 它定义的 两种基本的浮点格式：单精度和双精度。我们知道， JavaScript的<code>Number</code>类型为<a href=\"https://link.juejin.cn/?target=https://en.wikipedia.org/wiki/Floating-point_arithmetic\">双精度IEEE 754 64位浮点</a>类型</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>以下内容参考 <a href=\"https://juejin.cn/post/6844903663790473229\">你不是真正的四舍五入</a></p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">IEEE 单精度格式具有 24 位有效数字精度，并总共占用 32 位。\n\nIEEE 双精度格式具有 53 位有效数字精度，并总共占用 64 位。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>在 IEEE-754 标准中，定义 科学计数法 来表示浮点数：</p>\n<p>如：123.45 用十进制科学计数法可以表达为 1.2345 × 10 ^ 2 ，其中 1.2345 为尾数，10 为基数，2 为指数。</p>\n<p>那么，上面浮点数在空间上的表示大致如下图：</p>\n<p><img src=\"https://kiftravel.oss-cn-beijing.aliyuncs.com/img/202308280945463.png\" alt=\"Snipaste_2023-08-28_09-45-03\"></p>\n<p>也就是说，1.2345 × 10 ^ 2 最终展示为：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">符号位： + 占 1  位\n指数位： 2 占 11 位\n小数位： 2345 占 52 位<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>那么问题来了，如果一个数52位存储空间不够，也就是二进制也会出现想十进制一样的无限数的时候，会发生什么事情呢？</p>\n<p>IEEE754采用的浮点数舍入规则有时被称为 舍入到偶数（Round to Even）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">这有点像我们熟悉的十进制的四舍五入，即不足一半则舍，一半以上（包括一半）则进。\n不过对于二进制浮点数而言，还多一条规矩，就是当需要舍入的值刚好是一半时，不是简单地进，\n而是在前后两个等距接近的可保存的值中，取其中最后一位有效数字为零者。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>也就是这个规则，带来的精度问题：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">0.1 + 0.2 <span class=\"token tag\">!==</span> 0.3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>两个数的加法运算，通过十进制转二进制后相加计算的二进制然后转换成十进制，转换成的结果为</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0.30000000000000004<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这就带来了精度问题。</p>\n<p>因为数字运算将十进制转换成二进制，浮点数的二进制又存在 舍入规则，</p>\n<p>那么加减运算存在精度问题，乘除运算也存在；</p>\n<p>总结一句话：<a href=\"https://link.juejin.cn/?target=https://stackoverflow.com/questions/588004/is-floating-point-math-broken\">浮点数不能精确的代表二进制</a></p>\n<h3 id=\"银行家算法\"><a href=\"#银行家算法\" class=\"headerlink\" title=\"银行家算法\"></a>银行家算法</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>以下内容为引入简书的文章内容，作者：littleyu 链接：<a href=\"https://link.juejin.cn/?target=https://www.jianshu.com/p/acbb6f6095e1\">www.jianshu.com/p/acbb6f609…</a></p></blockquote>\n<p>一句话介绍银行家算法：<strong>四舍六入五考虑，五后非零就进一，五后为零看奇偶，五前为偶应舍去，五前为奇要进一。</strong></p>\n<p>银行家舍入法是由 IEEE 754 标准规定的浮点数取整算法，大部分的编程软件都使用这种方法。</p>\n<ul>\n<li>场景</li>\n</ul>\n<p>我们知道银行的盈利渠道主要是利息差，从储户手里收拢资金，然后放贷出去，其间的利息差额便是所获得的利润。对一个银行来说，对付给储户的利息的计算非常频繁。</p>\n<p>假如我们使用四舍五入法，且假设银行收到的钱中，要舍入的那位数在0~9是等概率的，那么假设银行分别收到了 <code>0.000, 0.001, ..., 0.009</code> 元，然后通过四舍五入法，银行能够得到五个 <code>0.000</code> 和五个 <code>1.000</code>，也许在概率上看起来是公平的；</p>\n<p>但是：</p>\n<p>以银行家的身份来思考这个算法：</p>\n<ul>\n<li>（1）四舍：舍弃的数值：0.000、0.001、0.002、0.003、0.004，因为是舍弃，对银行家来说，就是不用付款给储户的，那每舍弃一个数字就会赚取相应的金额：0.000、0.001、0.002、0.003、0.004。</li>\n<li>（2）五入：进位的数值：0.005、0.006、0.007、0.008、0.009，因为是进位，对银行家来说，每进一位就会多付款给储户，也就是亏损了，那亏损部分就是其对应的10进制补数：0.005、0.004、0.003、0.002、0.001</li>\n</ul>\n<p>因为舍弃和进位的数字是在 0 到 9 之间均匀分布的，所以对于银行家来说，每10 笔存款的利息因采用四舍五入而获得的盈利是：</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">0.000 + 0.001 + 0.002 + 0.003 + 0.004 - 0.005 - 0.004 - 0.003 - 0.002 - 0.001</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">-0.005</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>也就是说，每10笔的利息计算中就亏损 0.005 元，即每笔利息计算损失 0.0005 元</p>\n<p><strong>为什么银行家舍入是合理的？</strong></p>\n<ul>\n<li>四舍六入本身没问题，5前偶舍奇进也没问题，关键在为什么5后有非0数要进位？</li>\n<li>遇5舍弃的情况只有一种，即5是最后一位有效的数字且前一位数是偶数</li>\n<li>当数值精度达到5后一位，其为0的概率为1&#x2F;10，5前为偶数的概率是1&#x2F;2，所以舍5的概率是1&#x2F;10 * 1&#x2F;2 &#x3D; 1&#x2F;20，而进5的概率是19&#x2F;20</li>\n<li>当数值精度越大，舍5个概率就越低，无限趋近于0，也就是说，当数值精度越高，该算法越像“四舍五入”</li>\n</ul>\n<p><strong>那么，为什么这个算法是合理的呢？</strong></p>\n<ul>\n<li>现实情况就是数值的精度<strong>不可能无限大</strong>，存款利息率一般为百分之零点几，而数值精度一般 4 位，5 后存在非 0 数的概率相对较小；</li>\n<li>所以计算结果 趋近于1&#x2F;2 舍 5，1&#x2F;2 进 5</li>\n</ul>\n<h3 id=\"但是！\"><a href=\"#但是！\" class=\"headerlink\" title=\"但是！\"></a>但是！</h3><p>银行家算法依然不是完全正确的，0既不是奇数也不是偶数，所以对于5前面为0的情况并不适用</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.00005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 1.0001</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1.0005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 1.000</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.005</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 1.00</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.05</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 1.01</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>貌似变得不可控起来了</p>\n<h2 id=\"自用解决版本\"><a href=\"#自用解决版本\" class=\"headerlink\" title=\"自用解决版本\"></a>自用解决版本</h2><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\">&#x2F;**\n *  四舍五入\n * @param number  数字\n * @param precision 精度\n * @returns   number\n *&#x2F;\nfunction toFixed(number: number, precision: number) &#123;\n  const multiplier &#x3D; Math.pow(10, precision + 1),\n    wholeNumber &#x3D; Math.floor(number * multiplier);\n  return (Math.round(wholeNumber &#x2F; 10) * 10) &#x2F; multiplier;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但该方法并未解决5前为0的问题，推荐下面方法：</p>\n<p>使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\"><strong>toLocaleString</strong></a></p>\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\">&#x2F;**\n *  四舍五入\n * @param number  数字\n * @param precision 精度\n * @returns   number\n *&#x2F;\nfunction toFixed(number, precision) &#123;\n  const format &#x3D; (num) &#x3D;&gt;\n    num.toLocaleString(&quot;en-US&quot;, &#123;\n      minimumFractionDigits: precision,\n      maximumFractionDigits: precision,\n    &#125;);\n  return format(number);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>参考：</p>\n<p><a href=\"https://juejin.cn/post/7050760083239600141#heading-0\">js toFixed 四舍五入问题</a></p>\n<p><a href=\"https://www.w3.org/html/ig/zh/wiki/ES5/%E6%A0%87%E5%87%86_ECMAScript_%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1#Number.prototype.toFixed_.28fractionDigits.29\">Number.prototype.toFixed (fractionDigits)</a></p>\n<p><a href=\"https://www.cnblogs.com/ranyonsue/p/11388281.html\">js中toFixed精度问题的原因及解决办法</a></p></blockquote>\n","feature":true,"text":"Math.toFixed中的四舍五入问题MDNNumber.prototype.toFixed()toFixed() 方法使用定点表示法来格式化一个数值。 语法numObj.toFixed(digits) 参数 digits 小数点后数字的个数；介于 0 到 20（包括）之间，实...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":27,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"toFixed","slug":"toFixed","count":1,"path":"api/tags/toFixed.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Math-toFixed%E4%B8%AD%E7%9A%84%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">Math.toFixed中的四舍五入问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MDN\"><span class=\"toc-text\">MDN</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Number-prototype-toFixed\"><span class=\"toc-text\">Number.prototype.toFixed()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">参数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">返回值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">抛出异常</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">描述</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E8%A1%A8%E7%8E%B0\"><span class=\"toc-text\">问题表现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E7%BA%A0%E5%9B%A0\"><span class=\"toc-text\">问题纠因</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IEEE-754-%E6%A0%87%E5%87%86%E5%92%8C%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E7%B2%BE%E5%BA%A6\"><span class=\"toc-text\">IEEE-754 标准和浮点数的精度</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">银行家算法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%86%E6%98%AF%EF%BC%81\"><span class=\"toc-text\">但是！</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E7%94%A8%E8%A7%A3%E5%86%B3%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">自用解决版本</span></a></li></ol></li></ol>","author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"React系列：Rematch","uid":"12222745b624f54de1940113dfa4ed3d","slug":"React系列：Rematch","date":"2023-08-05T03:31:00.000Z","updated":"2023-08-09T03:13:22.235Z","comments":true,"path":"api/articles/React系列：Rematch.json","keywords":null,"cover":null,"text":" link: https://rematchjs.org/ https://rematch.gitbook.io/handbook/ Rematch是没有boilerplate的Redux最佳实践。没有多余的action types，action creators，switch ...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":27,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"React","slug":"React","count":1,"path":"api/tags/React.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}},"feature":true}}