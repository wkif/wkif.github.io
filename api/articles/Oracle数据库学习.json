{"title":"Oracle数据库学习","uid":"4caa006bdb2340f9480c9d6a3166e014","slug":"Oracle数据库学习","date":"2020-11-27T00:36:00.000Z","updated":"2020-12-26T12:18:19.985Z","comments":true,"path":"api/articles/Oracle数据库学习.json","keywords":null,"cover":[],"content":"<h1 id=\"SQL基础\"><a href=\"#SQL基础\" class=\"headerlink\" title=\"SQL基础\"></a>SQL基础</h1><h2 id=\"主键\"><a href=\"#主键\" class=\"headerlink\" title=\"主键\"></a>主键</h2><hr>\n<p>在关系数据库中，一张表中的每一行数据被称为一条记录。一条记录就是由多个字段组成的。例如，<code>students</code>表的两行记录：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">id</th>\n<th align=\"left\">class_id</th>\n<th align=\"left\">name</th>\n<th align=\"left\">gender</th>\n<th align=\"left\">score</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">小明</td>\n<td align=\"left\">M</td>\n<td align=\"left\">90</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">1</td>\n<td align=\"left\">小红</td>\n<td align=\"left\">F</td>\n<td align=\"left\">95</td>\n</tr>\n</tbody></table>\n<p>每一条记录都包含若干定义好的字段。同一个表的所有记录都有相同的字段定义。</p>\n<p>对于关系表，有个很重要的约束，就是任意两条记录不能重复。不能重复不是指两条记录不完全相同，而是指能够通过某个字段唯一区分出不同的记录，这个字段被称为<em>主键</em>。</p>\n<p>例如，假设我们把<code>name</code>字段作为主键，那么通过名字<code>小明</code>或<code>小红</code>就能唯一确定一条记录。但是，这么设定，就没法存储同名的同学了，因为插入相同主键的两条记录是不被允许的。</p>\n<p>对主键的要求，最关键的一点是：记录一旦插入到表中，主键最好不要再修改，因为主键是用来唯一定位记录的，修改了主键，会造成一系列的影响。</p>\n<p>由于主键的作用十分重要，如何选取主键会对业务开发产生重要影响。如果我们以学生的身份证号作为主键，似乎能唯一定位记录。然而，身份证号也是一种业务场景，如果身份证号升位了，或者需要变更，作为主键，不得不修改的时候，就会对业务产生严重影响。</p>\n<p>所以，选取主键的一个基本原则是：不使用任何业务相关的字段作为主键。</p>\n<p>因此，身份证号、手机号、邮箱地址这些看上去可以唯一的字段，均<em>不可</em>用作主键。</p>\n<p>作为主键最好是完全业务无关的字段，我们一般把这个字段命名为<code>id</code>。常见的可作为<code>id</code>字段的类型有：</p>\n<ol>\n<li>自增整数类型：数据库会在插入数据时自动为每一条记录分配一个自增整数，这样我们就完全不用担心主键重复，也不用自己预先生成主键；</li>\n<li>全局唯一GUID类型：使用一种全局唯一的字符串作为主键，类似<code>8f55d96b-8acc-4636-8cb8-76bf8abc2f57</code>。GUID算法通过网卡MAC地址、时间戳和随机数保证任意计算机在任意时间生成的字符串都是不同的，大部分编程语言都内置了GUID算法，可以自己预算出主键。</li>\n</ol>\n<p>对于大部分应用来说，通常自增类型的主键就能满足需求。我们在<code>students</code>表中定义的主键也是<code>BIGINT NOT NULL AUTO_INCREMENT</code>类型。</p>\n<p> 如果使用INT自增类型，那么当一张表的记录数超过2147483647（约21亿）时，会达到上限而出错。使用BIGINT自增类型则可以最多约922亿亿条记录。</p>\n<h3 id=\"联合主键\"><a href=\"#联合主键\" class=\"headerlink\" title=\"联合主键\"></a>联合主键</h3><p>关系数据库实际上还允许通过多个字段唯一标识记录，即两个或更多的字段都设置为主键，这种主键被称为联合主键。</p>\n<p>对于联合主键，允许一列有重复，只要不是所有主键列都重复即可：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">id_num</th>\n<th align=\"left\">id_type</th>\n<th align=\"left\">other columns…</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">A</td>\n<td align=\"left\">…</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">A</td>\n<td align=\"left\">…</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">B</td>\n<td align=\"left\">…</td>\n</tr>\n</tbody></table>\n<p>如果我们把上述表的<code>id_num</code>和<code>id_type</code>这两列作为联合主键，那么上面的3条记录都是允许的，因为没有两列主键组合起来是相同的。</p>\n<p>没有必要的情况下，我们尽量不使用联合主键，因为它给关系表带来了复杂度的上升。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>主键是关系表中记录的唯一标识。主键的选取非常重要：主键不要带有业务含义，而应该使用BIGINT自增或者GUID类型。主键也不应该允许<code>NULL</code>。</p>\n<p>可以使用多个列作为联合主键，但联合主键并不常用。</p>\n<h2 id=\"外键\"><a href=\"#外键\" class=\"headerlink\" title=\"外键\"></a>外键</h2><hr>\n<p>当我们用主键唯一标识记录时，我们就可以在<code>students</code>表中确定任意一个学生的记录：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">id</th>\n<th align=\"left\">name</th>\n<th align=\"left\">other columns…</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">小明</td>\n<td align=\"left\">…</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">小红</td>\n<td align=\"left\">…</td>\n</tr>\n</tbody></table>\n<p>我们还可以在<code>classes</code>表中确定任意一个班级记录：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">id</th>\n<th align=\"left\">name</th>\n<th align=\"left\">other columns…</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">一班</td>\n<td align=\"left\">…</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">二班</td>\n<td align=\"left\">…</td>\n</tr>\n</tbody></table>\n<p>但是我们如何确定<code>students</code>表的一条记录，例如，<code>id=1</code>的小明，属于哪个班级呢？</p>\n<p>由于一个班级可以有多个学生，在关系模型中，这两个表的关系可以称为“一对多”，即一个<code>classes</code>的记录可以对应多个<code>students</code>表的记录。</p>\n<p>为了表达这种一对多的关系，我们需要在<code>students</code>表中加入一列<code>class_id</code>，让它的值与<code>classes</code>表的某条记录相对应：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">id</th>\n<th align=\"left\">class_id</th>\n<th align=\"left\">name</th>\n<th align=\"left\">other columns…</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">小明</td>\n<td align=\"left\">…</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">1</td>\n<td align=\"left\">小红</td>\n<td align=\"left\">…</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">2</td>\n<td align=\"left\">小白</td>\n<td align=\"left\">…</td>\n</tr>\n</tbody></table>\n<p>这样，我们就可以根据<code>class_id</code>这个列直接定位出一个<code>students</code>表的记录应该对应到<code>classes</code>的哪条记录。</p>\n<p>例如：</p>\n<ul>\n<li>小明的<code>class_id</code>是<code>1</code>，因此，对应的<code>classes</code>表的记录是<code>id=1</code>的一班；</li>\n<li>小红的<code>class_id</code>是<code>1</code>，因此，对应的<code>classes</code>表的记录是<code>id=1</code>的一班；</li>\n<li>小白的<code>class_id</code>是<code>2</code>，因此，对应的<code>classes</code>表的记录是<code>id=2</code>的二班。</li>\n</ul>\n<p>在<code>students</code>表中，通过<code>class_id</code>的字段，可以把数据与另一张表关联起来，这种列称为<code>外键</code>。</p>\n<p>外键并不是通过列名实现的，而是通过定义外键约束实现的：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ALTER TABLE students\nADD CONSTRAINT fk_class_id\nFOREIGN KEY (class_id)\nREFERENCES classes (id);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中，外键约束的名称<code>fk_class_id</code>可以任意，<code>FOREIGN KEY (class_id)</code>指定了<code>class_id</code>作为外键，<code>REFERENCES classes (id)</code>指定了这个外键将关联到<code>classes</code>表的<code>id</code>列（即<code>classes</code>表的主键）。</p>\n<p>通过定义外键约束，关系数据库可以保证无法插入无效的数据。即如果<code>classes</code>表不存在<code>id=99</code>的记录，<code>students</code>表就无法插入<code>class_id=99</code>的记录。</p>\n<p>由于外键约束会降低数据库的性能，大部分互联网应用程序为了追求速度，并不设置外键约束，而是仅靠应用程序自身来保证逻辑的正确性。这种情况下，<code>class_id</code>仅仅是一个普通的列，只是它起到了外键的作用而已。</p>\n<p>要删除一个外键约束，也是通过<code>ALTER TABLE</code>实现的：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ALTER TABLE students\nDROP FOREIGN KEY fk_class_id;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>注意：删除外键约束并没有删除外键这一列。删除列是通过<code>DROP COLUMN ...</code>实现的。</p>\n<h3 id=\"多对多\"><a href=\"#多对多\" class=\"headerlink\" title=\"多对多\"></a>多对多</h3><p>通过一个表的外键关联到另一个表，我们可以定义出一对多关系。有些时候，还需要定义“多对多”关系。例如，一个老师可以对应多个班级，一个班级也可以对应多个老师，因此，班级表和老师表存在多对多关系。</p>\n<p>多对多关系实际上是通过两个一对多关系实现的，即通过一个中间表，关联两个一对多关系，就形成了多对多关系：</p>\n<p><code>teachers</code>表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">id</th>\n<th align=\"left\">name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">张老师</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">王老师</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">李老师</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">赵老师</td>\n</tr>\n</tbody></table>\n<p><code>classes</code>表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">id</th>\n<th align=\"left\">name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">一班</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">二班</td>\n</tr>\n</tbody></table>\n<p>中间表<code>teacher_class</code>关联两个一对多关系：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">id</th>\n<th align=\"left\">teacher_id</th>\n<th align=\"left\">class_id</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">1</td>\n<td align=\"left\">2</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">2</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">3</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">4</td>\n<td align=\"left\">2</td>\n</tr>\n</tbody></table>\n<p>通过中间表<code>teacher_class</code>可知<code>teachers</code>到<code>classes</code>的关系：</p>\n<ul>\n<li><code>id=1</code>的张老师对应<code>id=1,2</code>的一班和二班；</li>\n<li><code>id=2</code>的王老师对应<code>id=1,2</code>的一班和二班；</li>\n<li><code>id=3</code>的李老师对应<code>id=1</code>的一班；</li>\n<li><code>id=4</code>的赵老师对应<code>id=2</code>的二班。</li>\n</ul>\n<p>同理可知<code>classes</code>到<code>teachers</code>的关系：</p>\n<ul>\n<li><code>id=1</code>的一班对应<code>id=1,2,3</code>的张老师、王老师和李老师；</li>\n<li><code>id=2</code>的二班对应<code>id=1,2,4</code>的张老师、王老师和赵老师；</li>\n</ul>\n<p>因此，通过中间表，我们就定义了一个“多对多”关系。</p>\n<h3 id=\"一对一\"><a href=\"#一对一\" class=\"headerlink\" title=\"一对一\"></a>一对一</h3><p>一对一关系是指，一个表的记录对应到另一个表的唯一一个记录。</p>\n<p>例如，<code>students</code>表的每个学生可以有自己的联系方式，如果把联系方式存入另一个表<code>contacts</code>，我们就可以得到一个“一对一”关系：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">id</th>\n<th align=\"left\">student_id</th>\n<th align=\"left\">mobile</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">135xxxx6300</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">138xxxx2209</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">5</td>\n<td align=\"left\">139xxxx8086</td>\n</tr>\n</tbody></table>\n<p>有细心的童鞋会问，既然是一对一关系，那为啥不给<code>students</code>表增加一个<code>mobile</code>列，这样就能合二为一了？</p>\n<p>如果业务允许，完全可以把两个表合为一个表。但是，有些时候，如果某个学生没有手机号，那么，<code>contacts</code>表就不存在对应的记录。实际上，一对一关系准确地说，是<code>contacts</code>表一对一对应<code>students</code>表。</p>\n<p>还有一些应用会把一个大表拆成两个一对一的表，目的是把经常读取和不经常读取的字段分开，以获得更高的性能。例如，把一个大的用户表分拆为用户基本信息表<code>user_info</code>和用户详细信息表<code>user_profiles</code>，大部分时候，只需要查询<code>user_info</code>表，并不需要查询<code>user_profiles</code>表，这样就提高了查询速度。</p>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>关系数据库通过外键可以实现一对多、多对多和一对一的关系。外键既可以通过数据库来约束，也可以不设置约束，仅依靠应用程序的逻辑来保证。</p>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><hr>\n<p>在关系数据库中，如果有上万甚至上亿条记录，在查找记录的时候，想要获得非常快的速度，就需要使用索引。</p>\n<p>索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。</p>\n<p>例如，对于<code>students</code>表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">id</th>\n<th align=\"left\">class_id</th>\n<th align=\"left\">name</th>\n<th align=\"left\">gender</th>\n<th align=\"left\">score</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">小明</td>\n<td align=\"left\">M</td>\n<td align=\"left\">90</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">1</td>\n<td align=\"left\">小红</td>\n<td align=\"left\">F</td>\n<td align=\"left\">95</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">1</td>\n<td align=\"left\">小军</td>\n<td align=\"left\">M</td>\n<td align=\"left\">88</td>\n</tr>\n</tbody></table>\n<p>如果要经常根据<code>score</code>列进行查询，就可以对<code>score</code>列创建索引：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ALTER TABLE students\nADD INDEX idx_score (score);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>使用<code>ADD INDEX idx_score (score)</code>就创建了一个名称为<code>idx_score</code>，使用列<code>score</code>的索引。索引名称是任意的，索引如果有多列，可以在括号里依次写上，例如：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ALTER TABLE students\nADD INDEX idx_name_score (name, score);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>索引的效率取决于索引列的值是否散列，即该列的值如果越互不相同，那么索引效率越高。反过来，如果记录的列存在大量相同的值，例如<code>gender</code>列，大约一半的记录值是<code>M</code>，另一半是<code>F</code>，因此，对该列创建索引就没有意义。</p>\n<p>可以对一张表创建多个索引。索引的优点是提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢。</p>\n<p>对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。</p>\n<h3 id=\"唯一索引\"><a href=\"#唯一索引\" class=\"headerlink\" title=\"唯一索引\"></a>唯一索引</h3><p>在设计关系数据表的时候，看上去唯一的列，例如身份证号、邮箱地址等，因为他们具有业务含义，因此不宜作为主键。</p>\n<p>但是，这些列根据业务要求，又具有唯一性约束：即不能出现两条记录存储了同一个身份证号。这个时候，就可以给该列添加一个唯一索引。例如，我们假设<code>students</code>表的<code>name</code>不能重复：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ALTER TABLE students\nADD UNIQUE INDEX uni_name (name);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>通过<code>UNIQUE</code>关键字我们就添加了一个唯一索引。</p>\n<p>也可以只对某一列添加一个唯一约束而不创建唯一索引：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ALTER TABLE students\nADD CONSTRAINT uni_name UNIQUE (name);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这种情况下，<code>name</code>列没有索引，但仍然具有唯一性保证。</p>\n<p>无论是否创建索引，对于用户和应用程序来说，使用关系数据库不会有任何区别。这里的意思是说，当我们在数据库中查询时，如果有相应的索引可用，数据库系统就会自动使用索引来提高查询效率，如果没有索引，查询也能正常执行，只是速度会变慢。因此，索引可以在使用数据库的过程中逐步优化。</p>\n<h3 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>通过对数据库表创建索引，可以提高查询速度。</p>\n<p>通过创建唯一索引，可以保证某一列的值具有唯一性。</p>\n<p>数据库索引对于用户和应用程序来说都是透明的。</p>\n<h2 id=\"基本查询\"><a href=\"#基本查询\" class=\"headerlink\" title=\"基本查询\"></a>基本查询</h2><hr>\n<p>要查询数据库表的数据，我们使用如下的SQL语句：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT * FROM &lt;表名&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>假设表名是<code>students</code>，要查询<code>students</code>表的所有行，我们用如下SQL语句：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT * FROM students;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201127093349.png\"></p>\n<p>使用<code>SELECT * FROM students</code>时，<code>SELECT</code>是关键字，表示将要执行一个查询，<code>*</code>表示“所有列”，<code>FROM</code>表示将要从哪个表查询，本例中是<code>students</code>表。</p>\n<p>该SQL将查询出<code>students</code>表的所有数据。注意：查询结果也是一个二维表，它包含列名和每一行的数据。</p>\n<p>要查询<code>classes</code>表的所有行，我们用如下SQL语句：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT * FROM classes;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201127093411.png\"></p>\n<p>运行上述SQL语句，观察查询结果。</p>\n<p><code>SELECT</code>语句其实并不要求一定要有<code>FROM</code>子句。我们来试试下面的<code>SELECT</code>语句：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 100+200;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201127093436.png\"></p>\n<p>上述查询会直接计算出表达式的结果。虽然<code>SELECT</code>可以用作计算，但它并不是SQL的强项。但是，不带<code>FROM</code>子句的<code>SELECT</code>语句有一个有用的用途，就是用来判断当前到数据库的连接是否有效。许多检测工具会执行一条<code>SELECT 1;</code>来测试数据库连接。</p>\n<h3 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>使用SELECT查询的基本语句<code>SELECT * FROM &lt;表名&gt;</code>可以查询一个表的所有行和所有列的数据。</p>\n<p>SELECT查询的结果是一个二维表。</p>\n<h2 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h2><hr>\n<p>使用<code>SELECT * FROM &lt;表名&gt;</code>可以查询到一张表的所有记录。但是，很多时候，我们并不希望获得所有记录，而是根据条件选择性地获取指定条件的记录，例如，查询分数在80分以上的学生记录。在一张表有数百万记录的情况下，获取所有记录不仅费时，还费内存和网络带宽。</p>\n<p>SELECT语句可以通过<code>WHERE</code>条件来设定查询条件，查询结果是满足查询条件的记录。例如，要指定条件“分数在80分或以上的学生”，写成<code>WHERE</code>条件就是<code>SELECT * FROM students WHERE score &gt;= 80</code>。</p>\n<p>其中，<code>WHERE</code>关键字后面的<code>score &gt;= 80</code>就是条件。<code>score</code>是列名，该列存储了学生的成绩，因此，<code>score &gt;= 80</code>就筛选出了指定条件的记录：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT * FROM students WHERE score &gt;&#x3D; 80;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>因此，条件查询的语法就是：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT * FROM &lt;表名&gt; WHERE &lt;条件表达式&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>条件表达式可以用<code>&lt;条件1&gt; AND &lt;条件2&gt;</code>表达满足条件1并且满足条件2。例如，符合条件“分数在80分或以上”，并且还符合条件“男生”，把这两个条件写出来：</p>\n<ul>\n<li>条件1：根据score列的数据判断：<code>score &gt;= 80</code>；</li>\n<li>条件2：根据gender列的数据判断：<code>gender = &#39;M&#39;</code>，注意<code>gender</code>列存储的是字符串，需要用单引号括起来。</li>\n</ul>\n<p>就可以写出<code>WHERE</code>条件：<code>score &gt;= 80 AND gender = &#39;M&#39;</code>：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT * FROM students WHERE score &gt;&#x3D; 80 AND gender &#x3D; &#39;M&#39;;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>第二种条件是<code>&lt;条件1&gt; OR &lt;条件2&gt;</code>，表示满足条件1或者满足条件2。例如，把上述<code>AND</code>查询的两个条件改为<code>OR</code>，查询结果就是“分数在80分或以上”或者“男生”，满足任意之一的条件即选出该记录：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT * FROM students WHERE score &gt;&#x3D; 80 OR gender &#x3D; &#39;M&#39;;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>很显然<code>OR</code>条件要比<code>AND</code>条件宽松，返回的符合条件的记录也更多。</p>\n<p>第三种条件是<code>NOT &lt;条件&gt;</code>，表示“不符合该条件”的记录。例如，写一个“不是2班的学生”这个条件，可以先写出“是2班的学生”：<code>class_id = 2</code>，再加上<code>NOT</code>：<code>NOT class_id = 2</code>：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT * FROM students WHERE NOT class_id &#x3D; 2;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>上述<code>NOT</code>条件<code>NOT class_id = 2</code>其实等价于<code>class_id &lt;&gt; 2</code>，因此，<code>NOT</code>查询不是很常用。</p>\n<p>要组合三个或者更多的条件，就需要用小括号<code>()</code>表示如何进行条件运算。例如，编写一个复杂的条件：分数在80以下或者90以上，并且是男生：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT * FROM students WHERE (score &lt; 80 OR score &gt; 90) AND gender &#x3D; &#39;M&#39;;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果不加括号，条件运算按照<code>NOT</code>、<code>AND</code>、<code>OR</code>的优先级进行，即<code>NOT</code>优先级最高，其次是<code>AND</code>，最后是<code>OR</code>。加上括号可以改变优先级。</p>\n<h3 id=\"常用的条件表达式\"><a href=\"#常用的条件表达式\" class=\"headerlink\" title=\"常用的条件表达式\"></a>常用的条件表达式</h3><table>\n<thead>\n<tr>\n<th align=\"left\">条件</th>\n<th align=\"left\">表达式举例1</th>\n<th align=\"left\">表达式举例2</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">使用&#x3D;判断相等</td>\n<td align=\"left\">score &#x3D; 80</td>\n<td align=\"left\">name &#x3D; ‘abc’</td>\n<td align=\"left\">字符串需要用单引号括起来</td>\n</tr>\n<tr>\n<td align=\"left\">使用&gt;判断大于</td>\n<td align=\"left\">score &gt; 80</td>\n<td align=\"left\">name &gt; ‘abc’</td>\n<td align=\"left\">字符串比较根据ASCII码，中文字符比较根据数据库设置</td>\n</tr>\n<tr>\n<td align=\"left\">使用&gt;&#x3D;判断大于或相等</td>\n<td align=\"left\">score &gt;&#x3D; 80</td>\n<td align=\"left\">name &gt;&#x3D; ‘abc’</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">使用&lt;判断小于</td>\n<td align=\"left\">score &lt; 80</td>\n<td align=\"left\">name &lt;&#x3D; ‘abc’</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">使用&lt;&#x3D;判断小于或相等</td>\n<td align=\"left\">score &lt;&#x3D; 80</td>\n<td align=\"left\">name &lt;&#x3D; ‘abc’</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">使用&lt;&gt;判断不相等</td>\n<td align=\"left\">score &lt;&gt; 80</td>\n<td align=\"left\">name &lt;&gt; ‘abc’</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">使用LIKE判断相似</td>\n<td align=\"left\">name LIKE ‘ab%’</td>\n<td align=\"left\">name LIKE ‘%bc%’</td>\n<td align=\"left\">%表示任意字符，例如’ab%’将匹配’ab’，’abc’，’abcd’</td>\n</tr>\n</tbody></table>\n<h3 id=\"小结-4\"><a href=\"#小结-4\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>通过<code>WHERE</code>条件查询，可以筛选出符合指定条件的记录，而不是整个表的所有记录。</p>\n<h2 id=\"投影查询\"><a href=\"#投影查询\" class=\"headerlink\" title=\"投影查询\"></a>投影查询</h2><hr>\n<p>使用<code>SELECT * FROM &lt;表名&gt; WHERE &lt;条件&gt;</code>可以选出表中的若干条记录。我们注意到返回的二维表结构和原表是相同的，即结果集的所有列与原表的所有列都一一对应。</p>\n<p>如果我们只希望返回某些列的数据，而不是所有列的数据，我们可以用<code>SELECT 列1, 列2, 列3 FROM ...</code>，让结果集仅包含指定列。这种操作称为投影查询。</p>\n<p>例如，从<code>students</code>表中返回<code>id</code>、<code>score</code>和<code>name</code>这三列：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT id, score, name FROM students;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样返回的结果集就只包含了我们指定的列，并且，结果集的列的顺序和原表可以不一样。</p>\n<p>使用<code>SELECT 列1, 列2, 列3 FROM ...</code>时，还可以给每一列起个别名，这样，结果集的列名就可以与原表的列名不同。它的语法是<code>SELECT 列1 别名1, 列2 别名2, 列3 别名3 FROM ...</code>。</p>\n<p>例如，以下<code>SELECT</code>语句将列名<code>score</code>重命名为<code>points</code>，而<code>id</code>和<code>name</code>列名保持不变：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT id, score points, name FROM students;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>投影查询同样可以接<code>WHERE</code>条件，实现复杂的查询：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT id, score points, name FROM students WHERE gender &#x3D; &#39;M&#39;;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"小结-5\"><a href=\"#小结-5\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>使用<code>SELECT *</code>表示查询表的所有列，使用<code>SELECT 列1, 列2, 列3</code>则可以仅返回指定列，这种操作称为投影。</p>\n<p><code>SELECT</code>语句可以对结果集的列进行重命名。</p>\n<h4 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h4><hr>\n<h3 id=\"排序-1\"><a href=\"#排序-1\" class=\"headerlink\" title=\"排序\"></a>排序</h3><p>我们使用SELECT查询时，细心的读者可能注意到，查询结果集通常是按照<code>id</code>排序的，也就是根据主键排序。这也是大部分数据库的做法。如果我们要根据其他条件排序怎么办？可以加上<code>ORDER BY</code>子句。例如按照成绩从低到高进行排序：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT id, name, gender, score FROM students ORDER BY score;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果要反过来，按照成绩从高到底排序，我们可以加上<code>DESC</code>表示“倒序”：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT id, name, gender, score FROM students ORDER BY score DESC;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果<code>score</code>列有相同的数据，要进一步排序，可以继续添加列名。例如，使用<code>ORDER BY score DESC, gender</code>表示先按<code>score</code>列倒序，如果有相同分数的，再按<code>gender</code>列排序：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT id, name, gender, score FROM students ORDER BY score DESC, gender;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>默认的排序规则是<code>ASC</code>：“升序”，即从小到大。<code>ASC</code>可以省略，即<code>ORDER BY score ASC</code>和<code>ORDER BY score</code>效果一样。</p>\n<p>如果有<code>WHERE</code>子句，那么<code>ORDER BY</code>子句要放到<code>WHERE</code>子句后面。例如，查询一班的学生成绩，并按照倒序排序：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT id, name, gender, score\nFROM students\nWHERE class_id &#x3D; 1\nORDER BY score DESC;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这样，结果集仅包含符合<code>WHERE</code>条件的记录，并按照<code>ORDER BY</code>的设定排序。</p>\n<h3 id=\"小结-6\"><a href=\"#小结-6\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>使用<code>ORDER BY</code>可以对结果集进行排序；</p>\n<p>可以对多列进行升序、倒序排序。</p>\n<h2 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h2><hr>\n<p>使用SELECT查询时，如果结果集数据量很大，比如几万行数据，放在一个页面显示的话数据量太大，不如分页显示，每次显示100条。</p>\n<p>要实现分页功能，实际上就是从结果集中显示第1<del>100条记录作为第1页，显示第101</del>200条记录作为第2页，以此类推。</p>\n<p>因此，分页实际上就是从结果集中“截取”出第M~N条记录。这个查询可以通过<code>LIMIT &lt;M&gt; OFFSET &lt;N&gt;</code>子句实现。我们先把所有学生按照成绩从高到低进行排序：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT id, name, gender, score FROM students ORDER BY score DESC;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>现在，我们把结果集分页，每页3条记录。要获取第1页的记录，可以使用<code>LIMIT 3 OFFSET 0</code>：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT id, name, gender, score\nFROM students\nORDER BY score DESC\nLIMIT 3 OFFSET 0;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上述查询<code>LIMIT 3 OFFSET 0</code>表示，对结果集从0号记录开始，最多取3条。注意SQL记录集的索引从0开始。</p>\n<p>如果要查询第2页，那么我们只需要“跳过”头3条记录，也就是对结果集从3号记录开始查询，把<code>OFFSET</code>设定为3：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT id, name, gender, score\nFROM students\nORDER BY score DESC\nLIMIT 3 OFFSET 3;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>类似的，查询第3页的时候，<code>OFFSET</code>应该设定为6:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT id, name, gender, score\nFROM students\nORDER BY score DESC\nLIMIT 3 OFFSET 6;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>查询第4页的时候，<code>OFFSET</code>应该设定为9:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT id, name, gender, score\nFROM students\nORDER BY score DESC\nLIMIT 3 OFFSET 9;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由于第4页只有1条记录，因此最终结果集按实际数量1显示。<code>LIMIT 3</code>表示的意思是“最多3条记录”。</p>\n<p>可见，分页查询的关键在于，首先要确定每页需要显示的结果数量<code>pageSize</code>（这里是3），然后根据当前页的索引<code>pageIndex</code>（从1开始），确定<code>LIMIT</code>和<code>OFFSET</code>应该设定的值：</p>\n<ul>\n<li><code>LIMIT</code>总是设定为<code>pageSize</code>；</li>\n<li><code>OFFSET</code>计算公式为<code>pageSize * (pageIndex - 1)</code>。</li>\n</ul>\n<p>这样就能正确查询出第N页的记录集。</p>\n<p>如果原本记录集一共就10条记录，但我们把<code>OFFSET</code>设置为20，会得到什么结果呢？</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT id, name, gender, score\nFROM students\nORDER BY score DESC\nLIMIT 3 OFFSET 20;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>OFFSET</code>超过了查询的最大数量并不会报错，而是得到一个空的结果集。</p>\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201220113253.png\"></p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p><code>OFFSET</code>是可选的，如果只写<code>LIMIT 15</code>，那么相当于<code>LIMIT 15 OFFSET 0</code>。</p>\n<p>在MySQL中，<code>LIMIT 15 OFFSET 30</code>还可以简写成<code>LIMIT 30, 15</code>。</p>\n<p>使用<code>LIMIT &lt;M&gt; OFFSET &lt;N&gt;</code>分页时，随着<code>N</code>越来越大，查询效率也会越来越低。</p>\n<h3 id=\"小结-7\"><a href=\"#小结-7\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>使用<code>LIMIT &lt;M&gt; OFFSET &lt;N&gt;</code>可以对结果集进行分页，每次查询返回结果集的一部分；</p>\n<p>分页查询需要先确定每页的数量和当前页数，然后确定<code>LIMIT</code>和<code>OFFSET</code>的值。</p>\n<h2 id=\"聚合查询\"><a href=\"#聚合查询\" class=\"headerlink\" title=\"聚合查询\"></a>聚合查询</h2><hr>\n<p>如果我们要统计一张表的数据量，例如，想查询<code>students</code>表一共有多少条记录，难道必须用<code>SELECT * FROM students</code>查出来然后再数一数有多少行吗？</p>\n<p>这个方法当然可以，但是比较弱智。对于统计总数、平均数这类计算，SQL提供了专门的聚合函数，使用聚合函数进行查询，就是聚合查询，它可以快速获得结果。</p>\n<p>仍然以查询<code>students</code>表一共有多少条记录为例，我们可以使用SQL内置的<code>COUNT()</code>函数查询：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT COUNT(*) FROM students;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>COUNT(*)</code>表示查询所有列的行数，要注意聚合的计算结果虽然是一个数字，但查询的结果仍然是一个二维表，只是这个二维表只有一行一列，并且列名是<code>COUNT(*)</code>。</p>\n<p>通常，使用聚合查询时，我们应该给列名设置一个别名，便于处理结果：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT COUNT(*) num FROM students;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>COUNT(*)</code>和<code>COUNT(id)</code>实际上是一样的效果。另外注意，聚合查询同样可以使用<code>WHERE</code>条件，因此我们可以方便地统计出有多少男生、多少女生、多少80分以上的学生等：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT COUNT(*) boys FROM students WHERE gender &#x3D; &#39;M&#39;;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>除了<code>COUNT()</code>函数外，SQL还提供了如下聚合函数：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">函数</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">SUM</td>\n<td align=\"left\">计算某一列的合计值，该列必须为数值类型</td>\n</tr>\n<tr>\n<td align=\"left\">AVG</td>\n<td align=\"left\">计算某一列的平均值，该列必须为数值类型</td>\n</tr>\n<tr>\n<td align=\"left\">MAX</td>\n<td align=\"left\">计算某一列的最大值</td>\n</tr>\n<tr>\n<td align=\"left\">MIN</td>\n<td align=\"left\">计算某一列的最小值</td>\n</tr>\n</tbody></table>\n<p>注意，<code>MAX()</code>和<code>MIN()</code>函数并不限于数值类型。如果是字符类型，<code>MAX()</code>和<code>MIN()</code>会返回排序最后和排序最前的字符。</p>\n<p>要统计男生的平均成绩，我们用下面的聚合查询：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT AVG(score) average FROM students WHERE gender &#x3D; &#39;M&#39;;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201220114306.png\" alt=\"、\"></p>\n<p>要特别注意：如果聚合查询的<code>WHERE</code>条件没有匹配到任何行，<code>COUNT()</code>会返回0，而<code>SUM()</code>、<code>AVG()</code>、<code>MAX()</code>和<code>MIN()</code>会返回<code>NULL</code>：</p>\n<p>每页3条记录，如何通过聚合查询获得总页数？</p>\n<p>SELECT CEILING(COUNT(*) &#x2F; 3) FROM students;</p>\n<h2 id=\"分组\"><a href=\"#分组\" class=\"headerlink\" title=\"分组\"></a>分组</h2><p>如果我们要统计一班的学生数量，我们知道，可以用<code>SELECT COUNT(*) num FROM students WHERE class_id = 1;</code>。如果要继续统计二班、三班的学生数量，难道必须不断修改<code>WHERE</code>条件来执行<code>SELECT</code>语句吗？</p>\n<p>对于聚合查询，SQL还提供了“分组聚合”的功能。我们观察下面的聚合查询：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT COUNT(*) num FROM students GROUP BY class_id;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201220115236.png\"></p>\n<p>执行这个查询，<code>COUNT()</code>的结果不再是一个，而是3个，这是因为，<code>GROUP BY</code>子句指定了按<code>class_id</code>分组，因此，执行该<code>SELECT</code>语句时，会把<code>class_id</code>相同的列先分组，再分别计算，因此，得到了3行结果。</p>\n<p>但是这3行结果分别是哪三个班级的，不好看出来，所以我们可以把<code>class_id</code>列也放入结果集中：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT class_id, COUNT(*) num FROM students GROUP BY class_id;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201220115319.png\"></p>\n<p>这下结果集就可以一目了然地看出各个班级的学生人数。我们再试试把<code>name</code>放入结果集：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT name, class_id, COUNT(*) num FROM students GROUP BY class_id;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201220115434.png\"></p>\n<p>不出意外，执行这条查询我们会得到一个语法错误，因为在任意一个分组中，只有<code>class_id</code>都相同，<code>name</code>是不同的，SQL引擎不能把多个<code>name</code>的值放入一行记录中。因此，<strong>聚合查询的列中，只能放入分组的列</strong>。</p>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><p>请使用一条SELECT查询查出每个班级的平均分：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT class_id, avg(score)   from students group by class_id\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>请使用一条SELECT查询查出每个班级男生和女生的平均分：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT class_id,gender, avg(score)   from students  group by class_id,gender;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h2><p>SELECT查询不但可以从一张表查询数据，还可以从多张表同时查询数据。查询多张表的语法是：<code>SELECT * FROM &lt;表1&gt; &lt;表2&gt;</code>。</p>\n<p>例如，同时从<code>students</code>表和<code>classes</code>表的“乘积”，即查询数据，可以这么写：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">select * from students,classes\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这种一次查询两个表的数据，查询的结果也是一个二维表，它是<code>students</code>表和<code>classes</code>表的“乘积”，即<code>students</code>表的每一行与<code>classes</code>表的每一行都两两拼在一起返回。结果集的列数是<code>students</code>表和<code>classes</code>表的列数之和，行数是<code>students</code>表和<code>classes</code>表的行数之积。</p>\n<p>这种多表查询又称笛卡尔查询，使用笛卡尔查询时要非常小心，由于结果集是目标表的行数乘积，对两个各自有100行记录的表进行笛卡尔查询将返回1万条记录，对两个各自有1万行记录的表进行笛卡尔查询将返回1亿条记录。</p>\n<p>你可能还注意到了，上述查询的结果集有两列<code>id</code>和两列<code>name</code>，两列<code>id</code>是因为其中一列是<code>students</code>表的<code>id</code>，而另一列是<code>classes</code>表的<code>id</code>，但是在结果集中，不好区分。两列<code>name</code>同理</p>\n<p>要解决这个问题，我们仍然可以利用投影查询的“设置列的别名”来给两个表各自的<code>id</code>和<code>name</code>列起别名：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT\n    students.id sid,\n    students.name,\n    students.gender,\n    students.score,\n    classes.id cid,\n    classes.name cname\nFROM students, classes;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意，多表查询时，要使用<code>表名.列名</code>这样的方式来引用列和设置别名，这样就避免了结果集的列名重复问题。但是，用<code>表名.列名</code>这种方式列举两个表的所有列实在是很麻烦，所以SQL还允许给表设置一个别名，让我们在投影查询中引用起来稍微简洁一点：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT\n    a.id sid,\n    a.name,\n    a.gender,\n    a.score,\n    b.id cid,\n    b.name cname\nFROM students a, classes b;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意到<code>FROM</code>子句给表设置别名的语法是<code>FROM &lt;表名1&gt; &lt;别名1&gt;, &lt;表名2&gt; &lt;别名2&gt;</code>。这样我们用别名<code>s</code>和<code>c</code>分别表示<code>students</code>表和<code>classes</code>表。</p>\n<p>多表查询也是可以添加<code>WHERE</code>条件的，我们来试试：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT\n    s.id sid,\n    s.name,\n    s.gender,\n    s.score,\n    c.id cid,\n    c.name cname\nFROM students s, classes c\nWHERE s.gender &#x3D; &#39;M&#39; AND c.id &#x3D; 1;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个查询的结果集每行记录都满足条件<code>s.gender = &#39;M&#39;</code>和<code>c.id = 1</code>。添加<code>WHERE</code>条件后结果集的数量大大减少了。</p>\n<h3 id=\"小结-8\"><a href=\"#小结-8\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>使用多表查询可以获取M x N行记录；</p>\n<p>多表查询的结果集可能非常巨大，要小心使用。</p>\n<h2 id=\"连接查询\"><a href=\"#连接查询\" class=\"headerlink\" title=\"连接查询\"></a>连接查询</h2><hr>\n<p>连接查询是另一种类型的多表查询。连接查询对多个表进行JOIN运算，简单地说，就是先确定一个主表作为结果集，然后，把其他表的行有选择性地“连接”在主表结果集上。</p>\n<p>例如，我们想要选出<code>students</code>表的所有学生信息，可以用一条简单的SELECT语句完成：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">select * from students;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>但是，假设我们希望结果集同时包含所在班级的名称，上面的结果集只有<code>class_id</code>列，缺少对应班级的<code>name</code>列。</p>\n<p>现在问题来了，存放班级名称的<code>name</code>列存储在<code>classes</code>表中，只有根据<code>students</code>表的<code>class_id</code>，找到<code>classes</code>表对应的行，再取出<code>name</code>列，就可以获得班级名称。</p>\n<p>这时，连接查询就派上了用场。我们先使用最常用的一种内连接——INNER JOIN来实现：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">select s.id ,s.name,s.class_id,c.name classname,s.gender, s.score\nfrom students s\ninner join classes c\non s.class_id &#x3D; c.id;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意INNER JOIN查询的写法是：</p>\n<ol>\n<li>先确定主表，仍然使用<code>FROM &lt;表1&gt;</code>的语法；</li>\n<li>再确定需要连接的表，使用<code>INNER JOIN &lt;表2&gt;</code>的语法；</li>\n<li>然后确定连接条件，使用<code>ON &lt;条件...&gt;</code>，这里的条件是<code>s.class_id = c.id</code>，表示<code>students</code>表的<code>class_id</code>列与<code>classes</code>表的<code>id</code>列相同的行需要连接；</li>\n<li>可选：加上<code>WHERE</code>子句、<code>ORDER BY</code>等子句。</li>\n</ol>\n<p>使用别名不是必须的，但可以更好地简化查询语句。</p>\n<p>那什么是内连接（INNER JOIN）呢？先别着急，有内连接（INNER JOIN）就有外连接（OUTER JOIN）。我们把内连接查询改成外连接查询，看看效果：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score\nFROM students s\nRIGHT OUTER JOIN classes c\nON s.class_id &#x3D; c.id;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201220124403.png\"></p>\n<p>执行上述RIGHT OUTER JOIN可以看到，和INNER JOIN相比，RIGHT OUTER JOIN多了一行，多出来的一行是“四班”，但是，学生相关的列如<code>name</code>、<code>gender</code>、<code>score</code>都为<code>NULL</code>。</p>\n<p>这也容易理解，因为根据<code>ON</code>条件<code>s.class_id = c.id</code>，<code>classes</code>表的id&#x3D;4的行正是“四班”，但是，<code>students</code>表中并不存在class_id&#x3D;4的行。</p>\n<p>有RIGHT OUTER JOIN，就有LEFT OUTER JOIN，以及FULL OUTER JOIN。它们的区别是：</p>\n<p>INNER JOIN只返回同时存在于两张表的行数据，由于<code>students</code>表的<code>class_fdid</code>包含1，2，3，<code>classes</code>表的<code>id</code>包含1，2，3，4，所以，INNER JOIN根据条件<code>s.class_id = c.id</code>返回的结果集仅包含1，2，3。</p>\n<p>RIGHT OUTER JOIN返回右表都存在的行。如果某一行仅在右表存在，那么结果集就会以<code>NULL</code>填充剩下的字段。</p>\n<p>LEFT OUTER JOIN则返回左表都存在的行。如果我们给students表增加一行，并添加class_id&#x3D;5，由于classes表并不存在id&#x3D;5的行，所以，LEFT OUTER JOIN的结果会增加一行，对应的<code>class_name</code>是<code>NULL</code>：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score\nFROM students s\nLEFT OUTER JOIN classes c\nON s.class_id &#x3D; c.id;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>最后，我们使用FULL OUTER JOIN，它会把两张表的所有记录全部选择出来，并且，自动把对方不存在的列填充为NULL：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score\nFROM students s\nFULL OUTER JOIN classes c\nON s.class_id &#x3D; c.id;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对于这么多种JOIN查询，到底什么使用应该用哪种呢？其实我们用图来表示结果集就一目了然了。</p>\n<p>假设查询语句是：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT ... FROM tableA ??? JOIN tableB ON tableA.column1 &#x3D; tableB.column2;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>我们把tableA看作左表，把tableB看成右表，那么INNER JOIN是选出两张表都存在的记录：</p>\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201220122600.png\" alt=\"inner-join\"></p>\n<p>LEFT OUTER JOIN是选出左表存在的记录：</p>\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201220124649.png\" alt=\"left-outer-join\"></p>\n<p>RIGHT OUTER JOIN是选出右表存在的记录：</p>\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201220124707.png\" alt=\"right-outer-join\"></p>\n<p>FULL OUTER JOIN则是选出左右表都存在的记录：</p>\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201220124748.png\" alt=\"full-outer-join\"></p>\n<h3 id=\"小结-9\"><a href=\"#小结-9\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>JOIN查询需要先确定主表，然后把另一个表的数据“附加”到结果集上；</p>\n<p>INNER JOIN是最常用的一种JOIN查询，它的语法是<code>SELECT ... FROM &lt;表1&gt; INNER JOIN &lt;表2&gt; ON &lt;条件...&gt;</code>；</p>\n<p>JOIN查询仍然可以使用<code>WHERE</code>条件和<code>ORDER BY</code>排序。</p>\n<h2 id=\"INSERT\"><a href=\"#INSERT\" class=\"headerlink\" title=\"INSERT\"></a>INSERT</h2><hr>\n<p>当我们需要向数据库表中插入一条新记录时，就必须使用<code>INSERT</code>语句。</p>\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201220124841.jpeg\" alt=\"insert-brain\"></p>\n<p><code>INSERT</code>语句的基本语法是：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">INSERT INTO &lt;表名&gt; (字段1, 字段2, ...) VALUES (值1, 值2, ...);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>例如，我们向<code>students</code>表插入一条新记录，先列举出需要插入的字段名称，然后在<code>VALUES</code>子句中依次写出对应字段的值：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">INSERT INTO students (class_id, name, gender, score) VALUES (2, &#39;大牛&#39;, &#39;M&#39;, 80);\n-- 查询并观察结果:\nSELECT * FROM students;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>注意到我们并没有列出<code>id</code>字段，也没有列出<code>id</code>字段对应的值，这是因为<code>id</code>字段是一个自增主键，它的值可以由数据库自己推算出来。此外，如果一个字段有默认值，那么在<code>INSERT</code>语句中也可以不出现。</p>\n<p>要注意，字段顺序不必和数据库表的字段顺序一致，但值的顺序必须和字段顺序一致。也就是说，可以写<code>INSERT INTO students (score, gender, name, class_id) ...</code>，但是对应的<code>VALUES</code>就得变成<code>(80, &#39;M&#39;, &#39;大牛&#39;, 2)</code>。</p>\n<p>还可以一次性添加多条记录，只需要在<code>VALUES</code>子句中指定多个记录值，每个记录是由<code>(...)</code>包含的一组值：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">INSERT INTO students (class_id, name, gender, score) VALUES\n  (1, &#39;大宝&#39;, &#39;M&#39;, 87),\n  (2, &#39;二宝&#39;, &#39;M&#39;, 81);\n\nSELECT * FROM students;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"小结-10\"><a href=\"#小结-10\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>使用<code>INSERT</code>，我们就可以一次向一个表中插入一条或多条记录。</p>\n<h2 id=\"UPDATE\"><a href=\"#UPDATE\" class=\"headerlink\" title=\"UPDATE\"></a>UPDATE</h2><hr>\n<p>如果要更新数据库表中的记录，我们就必须使用<code>UPDATE</code>语句。</p>\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201220124952.png\" alt=\"update-sql\"></p>\n<p><code>UPDATE</code>语句的基本语法是：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">UPDATE &lt;表名&gt; SET 字段1&#x3D;值1, 字段2&#x3D;值2, ... WHERE ...;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>例如，我们想更新<code>students</code>表<code>id=1</code>的记录的<code>name</code>和<code>score</code>这两个字段，先写出<code>UPDATE students SET name=&#39;大牛&#39;, score=66</code>，然后在<code>WHERE</code>子句中写出需要更新的行的筛选条件<code>id=1</code>：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">update students set name&#x3D;&#39;大牛&#39; ,score&#x3D;66\nwhere id&#x3D;4;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p>注意到<code>UPDATE</code>语句的<code>WHERE</code>条件和<code>SELECT</code>语句的<code>WHERE</code>条件其实是一样的，因此完全可以一次更新多条记录：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">UPDATE students SET name&#x3D;&#39;小牛&#39;, score&#x3D;77 WHERE id&gt;&#x3D;5 AND id&lt;&#x3D;7;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在<code>UPDATE</code>语句中，更新字段时可以使用表达式。例如，把所有80分以下的同学的成绩加10分：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">update students set score:&#x3D;score+10 \nwhere score&lt;80<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>其中，<code>SET score=score+10</code>就是给当前行的<code>score</code>字段的值加上了10。</p>\n<p>如果<code>WHERE</code>条件没有匹配到任何记录，<code>UPDATE</code>语句不会报错，也不会有任何记录被更新。</p>\n<p>最后，要特别小心的是，<code>UPDATE</code>语句可以没有<code>WHERE</code>条件，例如：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">UPDATE students SET score&#x3D;60;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这时，整个表的所有记录都会被更新。所以，在执行<code>UPDATE</code>语句时要非常小心，最好先用<code>SELECT</code>语句来测试<code>WHERE</code>条件是否筛选出了期望的记录集，然后再用<code>UPDATE</code>更新。</p>\n<h3 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><p>在使用MySQL这类真正的关系数据库时，<code>UPDATE</code>语句会返回更新的行数以及<code>WHERE</code>条件匹配的行数。</p>\n<p>例如，更新<code>id=1</code>的记录时：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysql&gt; UPDATE students SET name&#x3D;&#39;大宝&#39; WHERE id&#x3D;1;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>MySQL会返回<code>1</code>，可以从打印的结果<code>Rows matched: 1 Changed: 1</code>看到。</p>\n<p>当更新<code>id=999</code>的记录时：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysql&gt; UPDATE students SET name&#x3D;&#39;大宝&#39; WHERE id&#x3D;999;\nQuery OK, 0 rows affected (0.00 sec)\nRows matched: 0  Changed: 0  Warnings: 0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>MySQL会返回<code>0</code>，可以从打印的结果<code>Rows matched: 0 Changed: 0</code>看到。</p>\n<h3 id=\"小结-11\"><a href=\"#小结-11\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>使用<code>UPDATE</code>，我们就可以一次更新表中的一条或多条记录。</p>\n<h2 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h2><hr>\n<p>如果要删除数据库表中的记录，我们可以使用<code>DELETE</code>语句。</p>\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201220125404.jpeg\" alt=\"sql-delete\"></p>\n<p><code>DELETE</code>语句的基本语法是：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">DELETE FROM &lt;表名&gt; WHERE ...;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>例如，我们想删除<code>students</code>表中<code>id=1</code>的记录，就需要这么写：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">delete from students \nwhere id&#x3D;1;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>注意到<code>DELETE</code>语句的<code>WHERE</code>条件也是用来筛选需要删除的行，因此和<code>UPDATE</code>类似，<code>DELETE</code>语句也可以一次删除多条记录：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">delete from studebts where id in(4,5,6)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果<code>WHERE</code>条件没有匹配到任何记录，<code>DELETE</code>语句不会报错，也不会有任何记录被删除。</p>\n<p>最后，要特别小心的是，和<code>UPDATE</code>类似，不带<code>WHERE</code>条件的<code>DELETE</code>语句会删除整个表的数据：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">DELETE FROM students;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这时，整个表的所有记录都会被删除。所以，在执行<code>DELETE</code>语句时也要非常小心，最好先用<code>SELECT</code>语句来测试<code>WHERE</code>条件是否筛选出了期望的记录集，然后再用<code>DELETE</code>删除。</p>\n<h3 id=\"MySQL-1\"><a href=\"#MySQL-1\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h3><p>在使用MySQL这类真正的关系数据库时，<code>DELETE</code>语句也会返回删除的行数以及<code>WHERE</code>条件匹配的行数。</p>\n<p>例如，分别执行删除<code>id=1</code>和<code>id=999</code>的记录：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysql&gt; DELETE FROM students WHERE id&#x3D;1;\nQuery OK, 1 row affected (0.01 sec)\n\nmysql&gt; DELETE FROM students WHERE id&#x3D;999;\nQuery OK, 0 rows affected (0.01 sec)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"小结-12\"><a href=\"#小结-12\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>使用<code>DELETE</code>，我们就可以一次删除表中的一条或多条记录。</p>\n<h1 id=\"PL-x2F-SQL程序设计\"><a href=\"#PL-x2F-SQL程序设计\" class=\"headerlink\" title=\"PL&#x2F;SQL程序设计\"></a>PL&#x2F;SQL程序设计</h1><p><strong>附：代码中使用的数据库在文章尾给出</strong></p>\n<h2 id=\"什么是PL-x2F-SQL\"><a href=\"#什么是PL-x2F-SQL\" class=\"headerlink\" title=\"什么是PL&#x2F;SQL?\"></a>什么是PL&#x2F;SQL?</h2><p>PL&#x2F;SQL是 Procedure Language &amp; Structured Query Language 的缩写。PL&#x2F;SQL是对SQL语言存储过程语言的扩展。</p>\n<p>指在SQL命令语言中增加了过程处理语句（如分支、循环等），使SQL语言具有过程处理能力。</p>\n<p>把SQL语言的数据操纵能力与过程语言的数据处理能力结合起来，使得PLSQL面向过程但比过程语言简单、高效、灵活和实用。</p>\n<h2 id=\"PL-x2F-SQL的优点或特征\"><a href=\"#PL-x2F-SQL的优点或特征\" class=\"headerlink\" title=\"PL&#x2F;SQL的优点或特征\"></a>PL&#x2F;SQL的优点或特征</h2><p><strong>1 有利于客户&#x2F;服务器环境应用的运行</strong></p>\n<p><strong>2 适合于客户环境</strong></p>\n<p><strong>3 过程化</strong></p>\n<p><strong>4 模块化</strong></p>\n<p><strong>5 运行错误的可处理性</strong></p>\n<p><strong>6 提供大量内置程序包</strong></p>\n<h2 id=\"PL-x2F-SQL-可用的SQL语句\"><a href=\"#PL-x2F-SQL-可用的SQL语句\" class=\"headerlink\" title=\"PL&#x2F;SQL 可用的SQL语句\"></a>PL&#x2F;SQL 可用的SQL语句</h2><p>PL&#x2F;SQL是ORACLE系统的核心语言，现在ORACLE的许多部件都是由PL&#x2F;SQL写成。在PL&#x2F;SQL中可以使用的SQL语句有：<br>INSERT，UPDATE，DELETE，SELECT INTO，COMMIT，ROLLBACK，SAVEPOINT。<br>提示：<strong>在 PL&#x2F;SQL中只能用 SQL语句中的 DML 部分，不能用 DDL 部分，如果要在PL&#x2F;SQL中使用DDL(如CREATE table 等)的话，只能以动态的方式来使用。</strong><br><strong>ORACLE 的 PL&#x2F;SQL 组件在对 PL&#x2F;SQL 程序进行解释时，同时对在其所使用的表名、列名及数据类型进行检查</strong>。<br>PL&#x2F;SQL 可以在SQL*PLUS 中使用。<br>PL&#x2F;SQL 可以在高级语言中使用。<br>PL&#x2F;SQL可以在ORACLE的开发工具中使用(如：SQL Developer或Procedure Builder等)。<br>其它开发工具也可以调用PL&#x2F;SQL编写的过程和函数，如Power Builder 等都可以调用服务器端的PL&#x2F;SQL过程。</p>\n<h2 id=\"PL-x2F-SQL程序结构及组成\"><a href=\"#PL-x2F-SQL程序结构及组成\" class=\"headerlink\" title=\"PL&#x2F;SQL程序结构及组成\"></a>PL&#x2F;SQL程序结构及组成</h2><p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201222211829.png\"></p>\n<h2 id=\"变量和常量说明\"><a href=\"#变量和常量说明\" class=\"headerlink\" title=\"变量和常量说明\"></a>变量和常量说明</h2><p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201222211902.png\"></p>\n<h3 id=\"第一个PL-x2F-SQL程序\"><a href=\"#第一个PL-x2F-SQL程序\" class=\"headerlink\" title=\"第一个PL&#x2F;SQL程序\"></a>第一个PL&#x2F;SQL程序</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">set serveroutput on;  &#x2F;&#x2F;打開輸出\n\ndeclare \nbegin\nDBMS_OUTPUT.PUT_LINE(&#39;我的第一個pl&#x2F;sql程序&#39;);\nend;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201222213457.png\"></p>\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201222213550.png\"></p>\n<h3 id=\"引用型变量\"><a href=\"#引用型变量\" class=\"headerlink\" title=\"引用型变量\"></a>引用型变量</h3><p>eg:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">--引用型变量: 查询并打印empno為7521的ename和job\ndeclare\n--定义变量保存ename和job\n pename emp.ename%type;\n pjob emp.job%type;\n begin\n --查询\n    select ename,job into pename,pjob from emp\n    where empno&#x3D;7521;\n    DBMS_OUTPUT.PUT_LINE(pename||&#39;的job是&#39;||pjob);\n \n end;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201222214907.png\"></p>\n<h3 id=\"记录型变量\"><a href=\"#记录型变量\" class=\"headerlink\" title=\"记录型变量\"></a>记录型变量</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">-- 记录型变量：查询并打印empno為7521的ename和job\ndeclare\n    emp_rec emp%rowtype;\nbegin\n    select * into emp_rec from emp\n    where empno&#x3D;7521;\n    DBMS_OUTPUT.PUT_LINE(emp_rec.ename||&#39;的job是&#39;||emp_rec.job);\n\nend;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201222215652.png\"></p>\n<h3 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a>if语句</h3><p>判断输入的是正数还是负数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">--接受键盘输入\n--变量num：是一个地址值，在该地址上保存了输入的值\naccept num PROMPT &#39;亲输入一个数字：&#39;;\ndeclare \n    pnumber number :&#x3D;&amp;num;\nbegin\n    if pnumber&#x3D;0 then\n        DBMS_OUTPUT.PUT_LINE(&#39;输入的是0&#39;);\n    ELSIF pnumber&gt;0 then\n        dbms_output.put_line(&#39;输入的是正数&#39;);\n    ELSE \n        dbms_output.put_line(&#39;输入的是负数&#39;);\n    end if;\nend;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201222222244.png\"></p>\n<h3 id=\"求两个数的和\"><a href=\"#求两个数的和\" class=\"headerlink\" title=\"求两个数的和\"></a>求两个数的和</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">----如果要在屏幕上输出信息，需要将serveroutput开关打开\nset serveroutput on\n\n-- 例6：求两个数得和\n-- 接收键盘输入\naccept num1 prompt &#39;请输入第一个数&#39;\naccept num2 prompt &#39;请输入第二个数&#39;\ndeclare\n  --定义变量保存输入得数字\n  pnum1 number :&#x3D;&amp;num1;\n  pnum2 number :&#x3D;&amp;num2;\n  psum number :&#x3D;0;\nbegin\n  psum :&#x3D;pnum1+pnum2;\n  DBMS_OUTPUT.PUT_LINE(pnum1||&#39;+&#39;||pnum2||&#39;&#x3D;&#39;||psum);\nend;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201222223546.png\"></p>\n<h3 id=\"求1加到n的和使用while\"><a href=\"#求1加到n的和使用while\" class=\"headerlink\" title=\"求1加到n的和使用while\"></a>求1加到n的和使用while</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">--求1加到n的和使用while\naccept n prompt&#39;请输入n&#39;;\ndeclare\n    n number :&#x3D;&amp;n;\n    i number :&#x3D;0;\n    ans number :&#x3D;0;\nbegin\n    while i&lt;n\n    loop\n    ans:&#x3D;ans+i;\n    i:&#x3D;i+1;\n    end loop;\n    dbms_output.put_line(ans);\nend;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201222223958.png\" alt=\"image-20201222223957842\"></p>\n<h3 id=\"求1加到n的和使用do-while\"><a href=\"#求1加到n的和使用do-while\" class=\"headerlink\" title=\"求1加到n的和使用do while\"></a>求1加到n的和使用do while</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">--如果要在屏幕上输出信息，需要将serveroutput开关打开\nset serveroutput on\n-- 使用do while:求 1 加到 n 的和(循环)\n-- 接收键盘输入\naccept num prompt &#39;请输入一个数&#39;\ndeclare\n  --定义变量保存输入 的数字\n  pnum number :&#x3D; &amp;num;\n  pn number :&#x3D;1;\n  psum number :&#x3D;0;\nbegin\n  loop\n    exit when pn&gt;pnum;\n    psum :&#x3D;psum+pn;\n    pn :&#x3D;pn+1;\n  end loop;\n  -- 循环结束打印\n  dbms_output.put_line(&#39;1加到&#39;||pnum||&#39;的和为&#39;||psum);\nend;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201222230032.png\"></p>\n<h3 id=\"求1加到n的和使用for\"><a href=\"#求1加到n的和使用for\" class=\"headerlink\" title=\"求1加到n的和使用for\"></a>求1加到n的和使用for</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">--如果要在屏幕上输出信息，需要将serveroutput开关打开\nset serveroutput on\n-- 使用for:求 1 加到 n 的和(循环)\n-- 接收键盘输入\naccept num prompt &#39;请输入一个数&#39;\ndeclare\n  --定义变量保存输入 的数字\n  pnum number :&#x3D; &amp;num;\n  psum number :&#x3D;0;\nbegin\n  for I in 1..pnum  --for循环的I直接使用，不用定义。1..100表示1到100的意思。不能有分号。\n  loop\n    psum :&#x3D;psum+I;\n  end loop;\n  -- 循环结束打印\n  dbms_output.put_line(&#39;1加到&#39;||pnum||&#39;的和为&#39;||psum);\nend;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201222231659.png\"></p>\n<h3 id=\"给SALESMAN涨10-的工资，给ANALYST涨5-的工资-游标\"><a href=\"#给SALESMAN涨10-的工资，给ANALYST涨5-的工资-游标\" class=\"headerlink\" title=\"给SALESMAN涨10%的工资，给ANALYST涨5%的工资(游标)\"></a>给SALESMAN涨10%的工资，给ANALYST涨5%的工资(游标)</h3><h4 id=\"1、显式游标处理需四个PL-x2F-SQL步骤：\"><a href=\"#1、显式游标处理需四个PL-x2F-SQL步骤：\" class=\"headerlink\" title=\"1、显式游标处理需四个PL&#x2F;SQL步骤：\"></a>1、显式游标处理需四个PL&#x2F;SQL步骤：</h4><p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201222231850.png\"></p>\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201222235216.png\"></p>\n<h4 id=\"2、显式游标属性\"><a href=\"#2、显式游标属性\" class=\"headerlink\" title=\"2、显式游标属性\"></a>2、显式游标属性</h4><p>%FOUND 布尔值属性，当最近一次读记录时成功返回，则返回TURE</p>\n<p>%NOTFOUND 布尔值属性，与%FOUND相反</p>\n<p>%ISOPEN 布尔值属性，当游标已打开时返回TURE</p>\n<p>%ROWCOUNT 数字型属性，返回已从游标中读取的记录数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">-- 给SALESMAN涨10%的工资，给ANALYST涨5%的工资\ndeclare\n    pjob emp.job %TYPE;\n    psal emp.sal %type;\n    --\ncursor c1 is select emp.job,emp.sal from emp; --定义游标\nbegin\n    open c1;  --打开游标\n    fetch c1 into pjob,psal;  --取一个\n    while c1 % found \n    loop\n      if pjob&#x3D;&#39;SALESMAN&#39; then\n            psal:&#x3D;psal+psal*0.1;\n            dbms_output.put_line(psal);\n      ELSIF pjob&#x3D;&#39;ANALYST&#39;  then\n             psal:&#x3D;psal+psal*0.05;\n             dbms_output.put_line(psal);\n        else dbms_output.put_line(&#39;不需要改&#39;);\n        end if;\n        fetch c1 into pjob,psal;\n    end loop;\n    close c1;  --关闭光标\nend;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201223000938.png\"></p>\n<h4 id=\"3、游标的for循环\"><a href=\"#3、游标的for循环\" class=\"headerlink\" title=\"3、游标的for循环\"></a>3、游标的for循环</h4><p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201223000908.png\"></p>\n<p> 打印出 所有的员工的工资:salary: xxx（使用for循环）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\ndeclare\n    psal emp.sal %TYPE;\n    cursor c1 is select emp.sal from emp;\nbegin\n    for i in c1 loop\n        dbms_output.put_line(i.sal);\n    end loop;\nend;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201223001333.png\" alt=\"image-20201223001333542\"></p>\n<h3 id=\"使用游标打印员工的姓名和薪水\"><a href=\"#使用游标打印员工的姓名和薪水\" class=\"headerlink\" title=\"使用游标打印员工的姓名和薪水\"></a>使用游标打印员工的姓名和薪水</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">--使用游标打印员工的姓名和薪水\ndeclare\n    psal emp.sal %TYPE;\n    pname emp.ename %type;\n    cursor c1 is select emp.ename,emp.sal from emp;\nbegin\n    open c1;\n    fetch c1 into pname, psal;\n    while c1 % found loop\n        dbms_output.put_line(pname||&#39;的工资是&#39;||psal);\n        fetch c1 into pname,psal;\n    end loop;\n     close c1;\nend;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201223001902.png\"></p>\n<h3 id=\"使用带参数的游标打印员工的姓名和薪水\"><a href=\"#使用带参数的游标打印员工的姓名和薪水\" class=\"headerlink\" title=\"使用带参数的游标打印员工的姓名和薪水\"></a>使用带参数的游标打印员工的姓名和薪水</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">--如果要在屏幕上输出信息，需要将serveroutput开关打开\nset serveroutput on\n-- 带参数的游标  打印指定部门的员工的姓名和薪水\ndeclare\n    cursor c1( pno number) is select emp.ename,emp.sal from emp where deptno &#x3D; pno;\n    pname emp.ename %type;\n    psal emp.sal %type;\nbegin\n    open c1(10);\n    loop\n        FETCH c1 into pname,psal;\n        exit when c1 %notfound;\n        dbms_output.put_line(pname||&#39;的工资是&#39;||to_char(psal,&#39;L9,999.99&#39;));\n    end loop;\n    close c1;\nend;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201223110700.png\"></p>\n<h3 id=\"打印指定部门的员工信息\"><a href=\"#打印指定部门的员工信息\" class=\"headerlink\" title=\"打印指定部门的员工信息\"></a>打印指定部门的员工信息</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">--打印指定部门的员工信息\nset serveroutput on;\naccept ptnonum prompt &#39;请输入要查询的部门号：&#39;;\ndeclare \n    tnonum emp.deptno %type :&#x3D;&amp;ptnonum;\n    cursor c1(dnomun number) is select ename,sal,job,empno from emp where deptno&#x3D;dnomun;\n    pname emp.ename %TYPE;\n    psal emp.sal %type;\n    pjob emp.job %type;\n    pempno emp.empno %type;\nbegin\n    open c1(tnonum);\n    loop\n        FETCH c1 into pname,psal,pjob,pempno;\n        exit when c1 %notfound;\n        dbms_output.put_line(&#39;职位为&#39;||pjob ||&#39;的&#39;||pempno||pname||&#39;的工资为&#39;||psal);\n    end loop;\n\nend;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201223111921.png\"></p>\n<h3 id=\"系统例外的使用\"><a href=\"#系统例外的使用\" class=\"headerlink\" title=\"系统例外的使用\"></a>系统例外的使用</h3><p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201223112739.png\"></p>\n<h4 id=\"系统列外-演示系统列为被0除\"><a href=\"#系统列外-演示系统列为被0除\" class=\"headerlink\" title=\"系统列外  演示系统列为被0除\"></a>系统列外  演示系统列为被0除</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">\n-- 系统列外  演示系统列为被0除\ndeclare\n    pnum number;\nbegin\n    pnum:&#x3D;2&#x2F;0;\n    EXCEPTION\n        when zero_divide then\n            dbms_output.put_line(&#39;0不能做分母&#39;);\n        when value_error then \n            dbms_output.put_line(&#39;算数或转换错误&#39;);\n        when others then\n            dbms_output.put_line(&#39;其他错误&#39;);\n\nend;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/wkkif/PicGoimg/raw/master/img/20201223113250.png\"></p>\n<h4 id=\"用户自定义例外\"><a href=\"#用户自定义例外\" class=\"headerlink\" title=\"用户自定义例外\"></a>用户自定义例外</h4><h1 id=\"第一章-绪论\"><a href=\"#第一章-绪论\" class=\"headerlink\" title=\"第一章 绪论\"></a>第一章 绪论</h1><p>考试范围：</p>\n<p>数据、数据库、数据库系统的定义与应用、数据库的体系结构、数据库用户与管理员、数据管理技术的发展</p>\n<p>基本要求：</p>\n<ol>\n<li><p>掌握数据、数据库、DBA、DBS等基本概念、数据库系统的体系结构。</p>\n</li>\n<li><p>了解数据管理管理技术的发展、应用领域和发展方向。</p>\n</li>\n</ol>\n<p>数据：是事物的符号表示，</p>\n<p>数据的含义是信息，数据是信息的载体，信息是数据的内涵。</p>\n<p>数据库：是长期存放在计算机内，有组织，可共享的数据集合。</p>\n<p>数据库管理系统（DBMS）：是数据库系统的核心组成部分，</p>\n<p>数据库系统（DBS）：是计算机系统中引入数据库后的系统组成，有数据库（DB），操作系统（OS），数据库管理系统（DBMS），应用开发工具，应用系统，用户，数据库管理员（DBA）。</p>\n<p>​                  </p>\n<p>数据管理管理技术的发展：人工管理阶段、文件系统阶段、数据库系统阶段</p>\n<p>数据库系统结构：外模式（用户级）、模式（概念级）、内模式（物理级）</p>\n<p>​        外模式：一个数据库可以有多个外模式，同一外模式可以为一个用户的多个应用系统所用，但一个应用系统只能有一个外模式，</p>\n<p>​        模式：一个数据库系统只能有一个模式</p>\n<p>二级映射：</p>\n<p>为了实现数据库三级层次的联系和转换，在三级模式之间提供了二级映射</p>\n<p>​        外模式&#x2F;模式映射</p>\n<p>​                模式描述的是数据的全局逻辑结构，外模式描述的是数据的局部逻辑结构，</p>\n<p>​        模式&#x2F;内模式映射</p>\n<hr>\n<h2 id=\"附：\"><a href=\"#附：\" class=\"headerlink\" title=\"附：\"></a>附：</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">--------------------------------------------------------\n--  File created -十二月-22-2020   \n--------------------------------------------------------\n--------------------------------------------------------\n--  DDL for Table BONUS\n--------------------------------------------------------\nCREATE TABLE &quot;BONUS&quot; (\n    &quot;ENAME&quot;   VARCHAR2(10),\n    &quot;JOB&quot;     VARCHAR2(9),\n    &quot;SAL&quot;     NUMBER,\n    &quot;COMM&quot;    NUMBER\n);\n--------------------------------------------------------\n--  DDL for Table DEPT\n--------------------------------------------------------\n\nCREATE TABLE &quot;DEPT&quot; (\n    &quot;DEPTNO&quot;   NUMBER(2, 0),\n    &quot;DNAME&quot;    VARCHAR2(14),\n    &quot;LOC&quot;      VARCHAR2(13)\n);\n--------------------------------------------------------\n--  DDL for Table EMP\n--------------------------------------------------------\n\nCREATE TABLE &quot;EMP&quot; (\n    &quot;EMPNO&quot;      NUMBER(4, 0),\n    &quot;ENAME&quot;      VARCHAR2(10),\n    &quot;JOB&quot;        VARCHAR2(9),\n    &quot;MGR&quot;        NUMBER(4, 0),\n    &quot;HIREDATE&quot;   DATE, \n\t&quot;SAL&quot;        NUMBER(7, 2),\n    &quot;COMM&quot;       NUMBER(7, 2),\n    &quot;DEPTNO&quot;     NUMBER(2, 0)\n);\n--------------------------------------------------------\n--  DDL for Table SALGRADE\n--------------------------------------------------------\n\nCREATE TABLE &quot;SALGRADE&quot; (\n    &quot;GRADE&quot;   NUMBER,\n    &quot;LOSAL&quot;   NUMBER,\n    &quot;HISAL&quot;   NUMBER\n);\n\n---------------------------------------------------\n--   DATA FOR TABLE BONUS\n--   FILTER &#x3D; none used\n---------------------------------------------------\nREM INSERTING into BONUS\n\n---------------------------------------------------\n--   END DATA FOR TABLE BONUS\n---------------------------------------------------\n\n---------------------------------------------------\n--   DATA FOR TABLE DEPT\n--   FILTER &#x3D; none used\n---------------------------------------------------\nREM INSERTING into DEPT\n\nINSERT INTO dept (\n    deptno,\n    dname,\n    loc\n) VALUES (\n    10,\n    &#39;ACCOUNTING&#39;,\n    &#39;NEW YORK&#39;\n);\n\nINSERT INTO dept (\n    deptno,\n    dname,\n    loc\n) VALUES (20,\n    &#39;RESEARCH&#39;,\n    &#39;DALLAS&#39;\n);\n\nINSERT INTO dept (\n    deptno,\n    dname,\n    loc\n) VALUES (\n    30,\n    &#39;SALES&#39;,\n    &#39;CHICAGO&#39;\n);\n\nINSERT INTO dept (\n    deptno,\n    dname,\n    loc\n) VALUES (\n    40,\n    &#39;OPERATIONS&#39;,\n    &#39;BOSTON&#39;\n);\n\n---------------------------------------------------\n--   END DATA FOR TABLE DEPT\n---------------------------------------------------\n\n---------------------------------------------------\n--   DATA FOR TABLE EMP\n--   FILTER &#x3D; none used\n---------------------------------------------------\nREM INSERTING into EMP\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (7369,\n    &#39;SMITH&#39;,\n    &#39;CLERK&#39;,\n    7902,\n    to_timestamp(&#39;17-12月-80 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    800,\n    NULL,\n    20\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7499,\n    &#39;ALLEN&#39;,\n    &#39;SALESMAN&#39;,\n    7698,\n    to_timestamp(&#39;20-2月 -81 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    1600,\n    300,\n    30\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7521,\n    &#39;WARD&#39;,\n    &#39;SALESMAN&#39;,\n    7698,\n    to_timestamp(&#39;22-2月 -81 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    1250,\n    500,\n    30\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7566,\n    &#39;JONES&#39;,\n    &#39;MANAGER&#39;,\n    7839,\n    to_timestamp(&#39;02-4月 -81 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    2975,\n    NULL,\n    20\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7654,\n    &#39;MARTIN&#39;,\n    &#39;SALESMAN&#39;,\n    7698,\n    to_timestamp(&#39;28-9月 -81 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    1250,\n    1400,\n    30\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7698,\n    &#39;BLAKE&#39;,\n    &#39;MANAGER&#39;,\n    7839,\n    to_timestamp(&#39;01-5月 -81 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    2850,\n    NULL,\n    30\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7782,\n    &#39;CLARK&#39;,\n    &#39;MANAGER&#39;,\n    7839,\n    to_timestamp(&#39;09-6月 -81 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    2450,\n    NULL,\n    10\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7788,\n    &#39;SCOTT&#39;,\n    &#39;ANALYST&#39;,\n    7566,\n    to_timestamp(&#39;19-4月 -87 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    3000,\n    NULL,\n    20\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7839,\n    &#39;KING&#39;,\n    &#39;PRESIDENT&#39;,\n    NULL,\n    to_timestamp(&#39;17-11月-81 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    5000,\n    NULL,\n    10\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7844,\n    &#39;TURNER&#39;,\n    &#39;SALESMAN&#39;,\n    7698,\n    to_timestamp(&#39;08-9月 -81 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    1500,\n    0,\n    30\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7876,\n    &#39;ADAMS&#39;,\n    &#39;CLERK&#39;,\n    7788,\n    to_timestamp(&#39;23-5月 -87 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    1100,\n    NULL,\n    20\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7900,\n    &#39;JAMES&#39;,\n    &#39;CLERK&#39;,\n    7698,\n    to_timestamp(&#39;03-12月-81 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    950,\n    NULL,\n    30\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7902,\n    &#39;FORD&#39;,\n    &#39;ANALYST&#39;,\n    7566,\n    to_timestamp(&#39;03-12月-81 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    3000,\n    NULL,\n    20\n);\n\nINSERT INTO emp (\n    empno,\n    ename,\n    job,\n    mgr,\n    hiredate,\n    sal,\n    comm,\n    deptno\n) VALUES (\n    7934,\n    &#39;MILLER&#39;,\n    &#39;CLERK&#39;,\n    7782,\n    to_timestamp(&#39;23-1月 -82 12.00.00.000000000 上午&#39;, &#39;DD-MON-RR HH.MI.SS.FF AM&#39;),\n    1300,\n    NULL,\n    10\n);\n\n---------------------------------------------------\n--   END DATA FOR TABLE EMP\n---------------------------------------------------\n\n---------------------------------------------------\n--   DATA FOR TABLE SALGRADE\n--   FILTER &#x3D; none used\n---------------------------------------------------\nREM INSERTING into SALGRADE\n\nINSERT INTO salgrade (\n    grade,\n    losal,\n    hisal\n) VALUES (\n    1,\n    700,\n    1200\n);\n\nINSERT INTO salgrade (\n    grade,\n    losal,\n    hisal\n) VALUES (\n    2,\n    1201,\n    1400\n);\n\nINSERT INTO salgrade (\n    grade,\n    losal,\n    hisal\n) VALUES (\n    3,\n    1401,\n    2000\n);\n\nINSERT INTO salgrade (\n    grade,\n    losal,\n    hisal\n) VALUES (\n    4,\n    2001,\n    3000\n);\n\nINSERT INTO salgrade (\n    grade,\n    losal,\n    hisal\n) VALUES (\n    5,\n    3001,\n    9999\n);\n\n---------------------------------------------------\n--   END DATA FOR TABLE SALGRADE\n---------------------------------------------------\n\n--------------------------------------------------------\n--  Constraints for Table EMP\n--------------------------------------------------------\n\nALTER TABLE &quot;EMP&quot; ADD CONSTRAINT &quot;PK_EMP&quot; PRIMARY KEY ( &quot;EMPNO&quot; ) ENABLE;\n\n--------------------------------------------------------\n--  Constraints for Table DEPT\n--------------------------------------------------------\n\nALTER TABLE &quot;DEPT&quot; ADD CONSTRAINT &quot;PK_DEPT&quot; PRIMARY KEY ( &quot;DEPTNO&quot; ) ENABLE;\n--------------------------------------------------------\n\n--------------------------------------------------------\n--  Ref Constraints for Table EMP\n--------------------------------------------------------\n\nALTER TABLE &quot;EMP&quot;\n    ADD CONSTRAINT &quot;FK_DEPTNO&quot; FOREIGN KEY ( &quot;DEPTNO&quot; )\n        REFERENCES &quot;DEPT&quot; ( &quot;DEPTNO&quot; )\n    ENABLE;\n\n\n-----------------------\n\nSELECT\n    ename\nFROM\n    emp;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><p><a href=\"https://www.liaoxuefeng.com/wiki/1177760294764384\">廖雪峰的官方网站</a></p>\n<p><a href=\"https://www.cnblogs.com/jepson6669/p/9429167.html#\">Jepson6669</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_30539625/article/details/95276307\">PL&#x2F;SQL程序设计（四）—— 游标</a></p>\n","text":"SQL基础主键 在关系数据库中，一张表中的每一行数据被称为一条记录。一条记录就是由多个字段组成的。例如，students表的两行记录： id class_id name gender score 1 1 小明 M 90 2 1 小红 F 95 每一条记录都包含若干定义好的字段。同...","link":"","photos":[],"count_time":{"symbolsCount":"35k","symbolsTime":"32 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":22,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"SQL","slug":"SQL","count":1,"path":"api/tags/SQL.json"},{"name":"Oracle","slug":"Oracle","count":1,"path":"api/tags/Oracle.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SQL%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">SQL基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E9%94%AE\"><span class=\"toc-text\">主键</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%81%94%E5%90%88%E4%B8%BB%E9%94%AE\"><span class=\"toc-text\">联合主键</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%96%E9%94%AE\"><span class=\"toc-text\">外键</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E5%AF%B9%E5%A4%9A\"><span class=\"toc-text\">多对多</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E5%AF%B9%E4%B8%80\"><span class=\"toc-text\">一对一</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-1\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">索引</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">唯一索引</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-2\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">基本查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-3\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">条件查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E7%9A%84%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">常用的条件表达式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-4\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%95%E5%BD%B1%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">投影查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-5\"><span class=\"toc-text\">小结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">排序</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F-1\"><span class=\"toc-text\">排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-6\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E9%A1%B5\"><span class=\"toc-text\">分页</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F\"><span class=\"toc-text\">注意</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-7\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">聚合查询</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E7%BB%84\"><span class=\"toc-text\">分组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">练习</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">多表查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-8\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">连接查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-9\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#INSERT\"><span class=\"toc-text\">INSERT</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-10\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#UPDATE\"><span class=\"toc-text\">UPDATE</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MySQL\"><span class=\"toc-text\">MySQL</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-11\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DELETE\"><span class=\"toc-text\">DELETE</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MySQL-1\"><span class=\"toc-text\">MySQL</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93-12\"><span class=\"toc-text\">小结</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#PL-x2F-SQL%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">PL&#x2F;SQL程序设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFPL-x2F-SQL\"><span class=\"toc-text\">什么是PL&#x2F;SQL?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PL-x2F-SQL%E7%9A%84%E4%BC%98%E7%82%B9%E6%88%96%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">PL&#x2F;SQL的优点或特征</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PL-x2F-SQL-%E5%8F%AF%E7%94%A8%E7%9A%84SQL%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">PL&#x2F;SQL 可用的SQL语句</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PL-x2F-SQL%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E5%8F%8A%E7%BB%84%E6%88%90\"><span class=\"toc-text\">PL&#x2F;SQL程序结构及组成</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">变量和常量说明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E4%B8%AAPL-x2F-SQL%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">第一个PL&#x2F;SQL程序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%95%E7%94%A8%E5%9E%8B%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">引用型变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%B0%E5%BD%95%E5%9E%8B%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">记录型变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#if%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">if语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B1%82%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%9A%84%E5%92%8C\"><span class=\"toc-text\">求两个数的和</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B1%821%E5%8A%A0%E5%88%B0n%E7%9A%84%E5%92%8C%E4%BD%BF%E7%94%A8while\"><span class=\"toc-text\">求1加到n的和使用while</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B1%821%E5%8A%A0%E5%88%B0n%E7%9A%84%E5%92%8C%E4%BD%BF%E7%94%A8do-while\"><span class=\"toc-text\">求1加到n的和使用do while</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B1%821%E5%8A%A0%E5%88%B0n%E7%9A%84%E5%92%8C%E4%BD%BF%E7%94%A8for\"><span class=\"toc-text\">求1加到n的和使用for</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%99SALESMAN%E6%B6%A810-%E7%9A%84%E5%B7%A5%E8%B5%84%EF%BC%8C%E7%BB%99ANALYST%E6%B6%A85-%E7%9A%84%E5%B7%A5%E8%B5%84-%E6%B8%B8%E6%A0%87\"><span class=\"toc-text\">给SALESMAN涨10%的工资，给ANALYST涨5%的工资(游标)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%98%BE%E5%BC%8F%E6%B8%B8%E6%A0%87%E5%A4%84%E7%90%86%E9%9C%80%E5%9B%9B%E4%B8%AAPL-x2F-SQL%E6%AD%A5%E9%AA%A4%EF%BC%9A\"><span class=\"toc-text\">1、显式游标处理需四个PL&#x2F;SQL步骤：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%98%BE%E5%BC%8F%E6%B8%B8%E6%A0%87%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">2、显式游标属性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E6%B8%B8%E6%A0%87%E7%9A%84for%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">3、游标的for循环</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%B8%B8%E6%A0%87%E6%89%93%E5%8D%B0%E5%91%98%E5%B7%A5%E7%9A%84%E5%A7%93%E5%90%8D%E5%92%8C%E8%96%AA%E6%B0%B4\"><span class=\"toc-text\">使用游标打印员工的姓名和薪水</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E6%B8%B8%E6%A0%87%E6%89%93%E5%8D%B0%E5%91%98%E5%B7%A5%E7%9A%84%E5%A7%93%E5%90%8D%E5%92%8C%E8%96%AA%E6%B0%B4\"><span class=\"toc-text\">使用带参数的游标打印员工的姓名和薪水</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%8D%B0%E6%8C%87%E5%AE%9A%E9%83%A8%E9%97%A8%E7%9A%84%E5%91%98%E5%B7%A5%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">打印指定部门的员工信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B3%BB%E7%BB%9F%E4%BE%8B%E5%A4%96%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">系统例外的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B3%BB%E7%BB%9F%E5%88%97%E5%A4%96-%E6%BC%94%E7%A4%BA%E7%B3%BB%E7%BB%9F%E5%88%97%E4%B8%BA%E8%A2%AB0%E9%99%A4\"><span class=\"toc-text\">系统列外  演示系统列为被0除</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%88%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BE%8B%E5%A4%96\"><span class=\"toc-text\">用户自定义例外</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%BB%AA%E8%AE%BA\"><span class=\"toc-text\">第一章 绪论</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%99%84%EF%BC%9A\"><span class=\"toc-text\">附：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%EF%BC%9A\"><span class=\"toc-text\">参考：</span></a></li></ol></li></ol>","author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"GUID生成算法","uid":"a39c7435e01b208d6a8bdb3f64120a16","slug":"GUID生成算法","date":"2020-11-27T01:20:00.000Z","updated":"2022-03-30T16:10:47.363Z","comments":true,"path":"api/articles/GUID生成算法.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforhexo/20201202142640.jpg","text":"随机数不管是前端还是后端都会用到的一个地方，不管是从验证码还是各种生成的状态码，基本都是随机生成的，还有就是一些抽奖的算法，也是用随机数来处理的，生成随机数的方法目前是很多的，但是其实很多是重复性很大的，今天简单的讲一下怎么生成随机数重复性很低的一种办法GUID（Globally...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":22,"path":"api/categories/学习笔记.json"}],"tags":[],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}},"next_post":{"title":"Excel数据整理与分析","uid":"8faec51e1f6b3c25bf08065c25431af4","slug":"Excel数据整理与分析","date":"2020-11-10T12:52:48.000Z","updated":"2022-03-30T16:17:59.976Z","comments":true,"path":"api/articles/Excel数据整理与分析.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforhexo/20201202142708.jpg","text":"Excel数据整理与分析 应用层工作流程知识点部分需要掌握以下基本知识点:Excel的基本工作流程及工作簿、工作表、行与列、鼠标状态、单元格的相关参数。为后面章节打牢基础! 基本工作流程数据的存储—-》 数据的处理———》数据的分析———》数据的呈现 名词解析 enter ima...","link":"","photos":[],"count_time":{"symbolsCount":844,"symbolsTime":"1 mins."},"categories":[{"name":"课题","slug":"课题","count":2,"path":"api/categories/课题.json"},{"name":"学习","slug":"课题/学习","count":2,"path":"api/categories/课题/学习.json"}],"tags":[{"name":"Excel","slug":"Excel","count":1,"path":"api/tags/Excel.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}}}