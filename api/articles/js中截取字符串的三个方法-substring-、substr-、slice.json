{"title":"js中截取字符串的三个方法 substring()、substr()、slice()","uid":"9f68a6880fde2cbe3e25007b72736a9d","slug":"js中截取字符串的三个方法-substring-、substr-、slice","date":"2022-07-28T15:10:00.000Z","updated":"2022-07-28T15:16:31.718Z","comments":true,"path":"api/articles/js中截取字符串的三个方法-substring-、substr-、slice.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/project/202207282315497.jpg","content":"<p><code>js</code>中有三个截取字符的方法，分别是<code>substring()</code>、<code>substr()</code>、<code>slice()</code>，平时我们可能都用到过，但总是会对这些方法有点混淆，特别是<code>substring()</code>和<code>substr()</code>，连方法名都差不多，下面就具体来看一下区别。</p>\n<h2 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h2><p>这三个方法都可以对字符串进行截取，并且返回一个新的字符串，也就是不会对原字符串进行修改</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//chrome控制台</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'0123456789'</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token string\">\"12345\"</span>\n<span class=\"token operator\">></span> a\n<span class=\"token operator\">&lt;</span> <span class=\"token string\">\"0123456789\"</span>  <span class=\"token comment\">//没有发生改变</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h2><p>这三个方法的不同之处在于参数不同。</p>\n<h3 id=\"substring\"><a href=\"#substring\" class=\"headerlink\" title=\"substring\"></a>substring</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>substring() 方法用于提取字符串中介于两个指定下标之间的字符。</p></blockquote>\n<p><strong>语法</strong></p>\n<pre class=\"line-numbers language-crmsh\" data-language=\"crmsh\"><code class=\"language-crmsh\">string.substring(start,stop)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>参数</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>start</code></td>\n<td><strong>必需</strong>。一个<em>非负的整数</em>，规定要提取的子串的第一个字符在 <code>string</code> 中的位置。</td>\n</tr>\n<tr>\n<td><code>stop</code></td>\n<td><strong>可选</strong>。一个<em>非负的整数</em>，比要提取的子串的最后一个字符在 <code>string</code> 中的位置多 1。<strong>如果省略该参数，那么返回的子串会一直到字符串的结尾。</strong></td>\n</tr>\n</tbody></table>\n<p><strong>说明</strong></p>\n<p>1.<code>substring()</code> 方法返回的子串包括 <code>start</code> 处的字符，但不包括 <code>stop</code> 处的字符。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//chrome控制台</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'0123456789'</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token string\">\"1234\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2.如果参数 <code>start</code> 与 <code>stop</code> 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//chrome控制台</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'0123456789'</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token string\">\"\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>3.如果 <code>start</code> 比 <code>stop</code> 大，那么该方法在提取子串之前会先交换这两个参数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//chrome控制台</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'0123456789'</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//=>a.substring(1,5)</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token string\">\"1234\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>4.如果 <code>start</code> 和 <code>stop</code> 有负数，那么会把该参数自动转为<code>0</code>，然后继续上述规则。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//chrome控制台</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'0123456789'</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//=>a.substring(5,0) => a.substring(0,5)</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token string\">\"1234\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>5.如果 <code>start</code> 和 <code>stop</code> 有<strong>正</strong>小数（负数直接进行第4条），那么会把该参数向下取整，然后继续上述规则。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//chrome控制台</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'0123456789'</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2.5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//=>a.substring(5,2) => a.substring(2,5)</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token string\">\"234\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>6.如果 <code>start</code> 和 <code>stop</code> 有字符串，那么会先进行<code>parseInt()</code>，如果转换结果为<code>NaN</code>，那么就转换为<code>0</code>，其余情况继续上述规则。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//chrome控制台</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'0123456789'</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2.5'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// =>a.substring(5,2) => a.substring(2,5)</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token string\">\"234\"</span>\n<span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ss'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// =>a.substring(5,2) =>a.substring(5,0) => a.substring(2,5)</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token string\">\"234\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其他情况就没有一一测试了，当然正常情况下尽量不要这么干，毕竟语法上已经规定了是整数。</p>\n<h3 id=\"substr\"><a href=\"#substr\" class=\"headerlink\" title=\"substr\"></a>substr</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>substr() 方法可在字符串中抽取从 start 下标开始的指定数目的字符。</p></blockquote>\n<p><strong>语法</strong></p>\n<pre class=\"line-numbers language-livecodeserver\" data-language=\"livecodeserver\"><code class=\"language-livecodeserver\">string.substr(start,length)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>重要事项：ECMAscript 没有对该方法进行标准化，因此反对使用它。</p></blockquote>\n<p><strong>参数</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>start</code></td>\n<td><strong>必需</strong>。要抽取的子串的起始下标。必须是数值。如果是负数，那么该参数声明从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。</td>\n</tr>\n<tr>\n<td><code>length</code></td>\n<td><strong>可选</strong>。子串中的字符数。必须是数值。<strong>如果省略了该参数，那么返回从 <code>string</code> 的开始位置到结尾的字串。</strong></td>\n</tr>\n</tbody></table>\n<p><strong>说明</strong></p>\n<p>该方法与<code>substring()</code>最大的区别在于第二个参数是你需要截取字符串的长度，而不是位置。</p>\n<p>1.<code>substr()</code> 方法返回的子串从 <code>start</code> 处的字符开始（包括）往后截取<code>length</code>长度，如果超过最末端就到最末端结束。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//chrome控制台</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'0123456789'</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token string\">\"12345\"</span>\n<span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//只会到最末端，多了没用</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token string\">\"123456789\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2.<code>start</code>可以取<strong>负值</strong>，表示从字符串尾部往头部开始数（从右到左，注意是从<code>1</code>开始，比如<code>-1</code> 指字符串中最后一个字符），但是截取长度还是从左到右，如果超过最末端就到最末端结束。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//chrome控制台</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'0123456789'</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//-4表示从右开始数第4个，就是'6'，然后取2个长度的字符串，就是'67'</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token string\">\"67\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>3.如果<code>length</code>为<em>负值</em>，那么会直接当成<code>0</code>处理，最终返回<code>&quot;&quot;</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//chrome控制台</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'0123456789'</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// => a.substr(4,0)</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token string\">\"\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>4.如果<code>start</code>或者<code>length</code>为小数，那么会截取小数部分。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//chrome控制台</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'0123456789'</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5.2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// => a.substr(1,5)</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token string\">\"12345\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>5.如果 <code>start</code> 和 <code>length</code> 有字符串，那么会先进行<code>parseInt()</code>，如果转换结果为<code>NaN</code>，那么就转换为<code>0</code>，其余情况继续上述规则。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//chrome控制台</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'0123456789'</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aa'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// => a.substr(0,5)</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token string\">\"01234\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice\"></a>slice</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>slice() 方法可提取字符串的某个部分，并以新的字符串返回被提取的部分。</p></blockquote>\n<p><strong>语法</strong></p>\n<pre class=\"line-numbers language-livecodeserver\" data-language=\"livecodeserver\"><code class=\"language-livecodeserver\">string.slice(start,end)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>参数</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>start</code></td>\n<td><strong>必须</strong>。要抽取的片断的起始下标。如果是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符，-2 指倒数第二个字符，以此类推。</td>\n</tr>\n<tr>\n<td><code>end</code></td>\n<td><strong>可选</strong>。紧接着要抽取的片段的结尾的下标。若未指定此参数，则要提取的子串包括 <code>start</code> 到原字符串结尾的字符串。如果该参数是负数，那么它规定的是从字符串的尾部开始算起的位置。</td>\n</tr>\n</tbody></table>\n<p>该方法的两个参数均为位置坐标，和<code>subtring</code>比较像，区别就是该方法支持<strong>负数</strong>，并且不会交换位置，始终是从<code>start</code>到<code>end</code>，如果该区间不存在，那么返回<code>&#39;&#39;</code>。</p>\n<p>1.<code>slice()</code> 方法返回的子串包括 <code>start</code> 处的字符，但不包括 <code>end</code> 处的字符。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//chrome控制台</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'0123456789'</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token string\">\"1234\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2.当<code>start</code>或者<code>end</code>为<strong>负值</strong>时，定位方式和<code>substr</code>一直，从右往左数，从1开始。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//chrome控制台</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'0123456789'</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//起始点从第1（包括）开始，结束点为从右往左数第1个（不包括）</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token string\">\"12345678\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>2.<code>start</code>到<code>end</code>的顺序始终是<strong>从左到右</strong>，如果最终<code>start</code>的位置在<code>end</code>的右边，那么返回<code>&#39;&#39;</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//chrome控制台</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'0123456789'</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//2所在的位置是'2'，1所在的位置是'1'，从2=>1，方向相反，返回为空</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token string\">\"\"</span>\n<span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//-2所在的位置是'8'，1所在的位置是'1'，从8=>1，方向相反，返回为空</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token string\">\"\"</span>\n<span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//-2所在的位置是'8'，-1所在的位置是'9'，从8=>9，方向正常，返回为'8'</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token string\">\"8\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>3.其他情况和<code>substring</code>处理方式一致</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//chrome控制台</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'0123456789'</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xx'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'5.5'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// => a.slice(0,5)</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token string\">\"01234\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"小节\"><a href=\"#小节\" class=\"headerlink\" title=\"小节\"></a>小节</h2><p>从上面测试得出结论，<code>substring</code>不支持<strong>负值</strong>，其他两种方式均支持负数表示，并且是从右边第一位开始计数。<br><code>substr</code>的第二个参数是长度，这是和其他两种方式最大的不同之处，<code>slice</code>的方向性比较强，永远是从<code>start=&gt;end</code>对应<code>左=&gt;右</code>。</p>\n","text":"js中有三个截取字符的方法，分别是substring()、substr()、slice()，平时我们可能都用到过，但总是会对这些方法有点混淆，特别是substring()和substr()，连方法名都差不多，下面就具体来看一下区别。 相同点这三个方法都可以对字符串进行截取，并且返...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":27,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"javascript","slug":"javascript","count":7,"path":"api/tags/javascript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E5%90%8C%E7%82%B9\"><span class=\"toc-text\">相同点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%90%8C%E7%82%B9\"><span class=\"toc-text\">不同点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#substring\"><span class=\"toc-text\">substring</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#substr\"><span class=\"toc-text\">substr</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#slice\"><span class=\"toc-text\">slice</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E8%8A%82\"><span class=\"toc-text\">小节</span></a></li></ol>","author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"奇奇怪怪网站记录","uid":"b44a5126d842808257a1e9856603738b","slug":"奇奇怪怪网站记录","date":"2022-09-09T06:08:00.000Z","updated":"2022-09-09T06:34:52.534Z","comments":true,"path":"api/articles/奇奇怪怪网站记录.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/project/202209091434812.jpg","text":"开发工具： 前端开发：smooth shadow url:https://shadows.brumm.af/ GrabientCSS 在线渐变色搭配网址，你可以更改自己喜欢的渐变色或者使用提供的渐变色案例，只需单击【COPY CSS】复制 CSS 渐变色代码，马上用到你的网站设计...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"网站便签","slug":"网站便签","count":1,"path":"api/tags/网站便签.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}},"next_post":{"title":"pinia","uid":"2a60f77314330572f365b0f5b003c4b8","slug":"pinia","date":"2022-06-26T03:09:00.000Z","updated":"2022-06-26T03:19:15.946Z","comments":true,"path":"api/articles/pinia.json","keywords":null,"cover":"https://kifimg.oss-cn-beijing.aliyuncs.com/project/202206261119013.png","text":"Pinia介绍：状态管理工具，代替Vuex 安装：npm install pinia 配置：main.ts： import &#123;createPinia&#125; from 'pinia'//导入 const state = createPinia()// app.use...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":27,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"pinia","slug":"pinia","count":1,"path":"api/tags/pinia.json"}],"author":{"name":"kif","slug":"blog-author","avatar":"https://kifimg.oss-cn-beijing.aliyuncs.com/imgforteachingdemo/20201127203438.png","link":"/","description":"时间再拉长一点，让我有时间收拾一下心情","socials":{"github":"https://github.com/wkif","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/qq_54739682?type=blog","juejin":"","customs":{}}}}}